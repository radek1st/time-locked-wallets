(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    'use strict';
    
    var compileSchema = require('./compile')
      , resolve = require('./compile/resolve')
      , Cache = require('./cache')
      , SchemaObject = require('./compile/schema_obj')
      , stableStringify = require('fast-json-stable-stringify')
      , formats = require('./compile/formats')
      , rules = require('./compile/rules')
      , $dataMetaSchema = require('./data')
      , util = require('./compile/util');
    
    module.exports = Ajv;
    
    Ajv.prototype.validate = validate;
    Ajv.prototype.compile = compile;
    Ajv.prototype.addSchema = addSchema;
    Ajv.prototype.addMetaSchema = addMetaSchema;
    Ajv.prototype.validateSchema = validateSchema;
    Ajv.prototype.getSchema = getSchema;
    Ajv.prototype.removeSchema = removeSchema;
    Ajv.prototype.addFormat = addFormat;
    Ajv.prototype.errorsText = errorsText;
    
    Ajv.prototype._addSchema = _addSchema;
    Ajv.prototype._compile = _compile;
    
    Ajv.prototype.compileAsync = require('./compile/async');
    var customKeyword = require('./keyword');
    Ajv.prototype.addKeyword = customKeyword.add;
    Ajv.prototype.getKeyword = customKeyword.get;
    Ajv.prototype.removeKeyword = customKeyword.remove;
    Ajv.prototype.validateKeyword = customKeyword.validate;
    
    var errorClasses = require('./compile/error_classes');
    Ajv.ValidationError = errorClasses.Validation;
    Ajv.MissingRefError = errorClasses.MissingRef;
    Ajv.$dataMetaSchema = $dataMetaSchema;
    
    var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';
    
    var META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];
    var META_SUPPORT_DATA = ['/properties'];
    
    /**
     * Creates validator instance.
     * Usage: `Ajv(opts)`
     * @param {Object} opts optional options
     * @return {Object} ajv instance
     */
    function Ajv(opts) {
      if (!(this instanceof Ajv)) return new Ajv(opts);
      opts = this._opts = util.copy(opts) || {};
      setLogger(this);
      this._schemas = {};
      this._refs = {};
      this._fragments = {};
      this._formats = formats(opts.format);
    
      this._cache = opts.cache || new Cache;
      this._loadingSchemas = {};
      this._compilations = [];
      this.RULES = rules();
      this._getId = chooseGetId(opts);
    
      opts.loopRequired = opts.loopRequired || Infinity;
      if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
      if (opts.serialize === undefined) opts.serialize = stableStringify;
      this._metaOpts = getMetaSchemaOptions(this);
    
      if (opts.formats) addInitialFormats(this);
      addDefaultMetaSchema(this);
      if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
      if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});
      addInitialSchemas(this);
    }
    
    
    
    /**
     * Validate data using schema
     * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
     * @this   Ajv
     * @param  {String|Object} schemaKeyRef key, ref or schema object
     * @param  {Any} data to be validated
     * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
     */
    function validate(schemaKeyRef, data) {
      var v;
      if (typeof schemaKeyRef == 'string') {
        v = this.getSchema(schemaKeyRef);
        if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
      } else {
        var schemaObj = this._addSchema(schemaKeyRef);
        v = schemaObj.validate || this._compile(schemaObj);
      }
    
      var valid = v(data);
      if (v.$async !== true) this.errors = v.errors;
      return valid;
    }
    
    
    /**
     * Create validating function for passed schema.
     * @this   Ajv
     * @param  {Object} schema schema object
     * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
     * @return {Function} validating function
     */
    function compile(schema, _meta) {
      var schemaObj = this._addSchema(schema, undefined, _meta);
      return schemaObj.validate || this._compile(schemaObj);
    }
    
    
    /**
     * Adds schema to the instance.
     * @this   Ajv
     * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
     * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
     * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
     * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
     * @return {Ajv} this for method chaining
     */
    function addSchema(schema, key, _skipValidation, _meta) {
      if (Array.isArray(schema)){
        for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
        return this;
      }
      var id = this._getId(schema);
      if (id !== undefined && typeof id != 'string')
        throw new Error('schema id must be string');
      key = resolve.normalizeId(key || id);
      checkUnique(this, key);
      this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
      return this;
    }
    
    
    /**
     * Add schema that will be used to validate other schemas
     * options in META_IGNORE_OPTIONS are alway set to false
     * @this   Ajv
     * @param {Object} schema schema object
     * @param {String} key optional schema key
     * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
     * @return {Ajv} this for method chaining
     */
    function addMetaSchema(schema, key, skipValidation) {
      this.addSchema(schema, key, skipValidation, true);
      return this;
    }
    
    
    /**
     * Validate schema
     * @this   Ajv
     * @param {Object} schema schema to validate
     * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
     * @return {Boolean} true if schema is valid
     */
    function validateSchema(schema, throwOrLogError) {
      var $schema = schema.$schema;
      if ($schema !== undefined && typeof $schema != 'string')
        throw new Error('$schema must be a string');
      $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
      if (!$schema) {
        this.logger.warn('meta-schema not available');
        this.errors = null;
        return true;
      }
      var valid = this.validate($schema, schema);
      if (!valid && throwOrLogError) {
        var message = 'schema is invalid: ' + this.errorsText();
        if (this._opts.validateSchema == 'log') this.logger.error(message);
        else throw new Error(message);
      }
      return valid;
    }
    
    
    function defaultMeta(self) {
      var meta = self._opts.meta;
      self._opts.defaultMeta = typeof meta == 'object'
                                ? self._getId(meta) || meta
                                : self.getSchema(META_SCHEMA_ID)
                                  ? META_SCHEMA_ID
                                  : undefined;
      return self._opts.defaultMeta;
    }
    
    
    /**
     * Get compiled schema from the instance by `key` or `ref`.
     * @this   Ajv
     * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
     * @return {Function} schema validating function (with property `schema`).
     */
    function getSchema(keyRef) {
      var schemaObj = _getSchemaObj(this, keyRef);
      switch (typeof schemaObj) {
        case 'object': return schemaObj.validate || this._compile(schemaObj);
        case 'string': return this.getSchema(schemaObj);
        case 'undefined': return _getSchemaFragment(this, keyRef);
      }
    }
    
    
    function _getSchemaFragment(self, ref) {
      var res = resolve.schema.call(self, { schema: {} }, ref);
      if (res) {
        var schema = res.schema
          , root = res.root
          , baseId = res.baseId;
        var v = compileSchema.call(self, schema, root, undefined, baseId);
        self._fragments[ref] = new SchemaObject({
          ref: ref,
          fragment: true,
          schema: schema,
          root: root,
          baseId: baseId,
          validate: v
        });
        return v;
      }
    }
    
    
    function _getSchemaObj(self, keyRef) {
      keyRef = resolve.normalizeId(keyRef);
      return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
    }
    
    
    /**
     * Remove cached schema(s).
     * If no parameter is passed all schemas but meta-schemas are removed.
     * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
     * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
     * @this   Ajv
     * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
     * @return {Ajv} this for method chaining
     */
    function removeSchema(schemaKeyRef) {
      if (schemaKeyRef instanceof RegExp) {
        _removeAllSchemas(this, this._schemas, schemaKeyRef);
        _removeAllSchemas(this, this._refs, schemaKeyRef);
        return this;
      }
      switch (typeof schemaKeyRef) {
        case 'undefined':
          _removeAllSchemas(this, this._schemas);
          _removeAllSchemas(this, this._refs);
          this._cache.clear();
          return this;
        case 'string':
          var schemaObj = _getSchemaObj(this, schemaKeyRef);
          if (schemaObj) this._cache.del(schemaObj.cacheKey);
          delete this._schemas[schemaKeyRef];
          delete this._refs[schemaKeyRef];
          return this;
        case 'object':
          var serialize = this._opts.serialize;
          var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
          this._cache.del(cacheKey);
          var id = this._getId(schemaKeyRef);
          if (id) {
            id = resolve.normalizeId(id);
            delete this._schemas[id];
            delete this._refs[id];
          }
      }
      return this;
    }
    
    
    function _removeAllSchemas(self, schemas, regex) {
      for (var keyRef in schemas) {
        var schemaObj = schemas[keyRef];
        if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
          self._cache.del(schemaObj.cacheKey);
          delete schemas[keyRef];
        }
      }
    }
    
    
    /* @this   Ajv */
    function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
      if (typeof schema != 'object' && typeof schema != 'boolean')
        throw new Error('schema should be object or boolean');
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schema) : schema;
      var cached = this._cache.get(cacheKey);
      if (cached) return cached;
    
      shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
    
      var id = resolve.normalizeId(this._getId(schema));
      if (id && shouldAddSchema) checkUnique(this, id);
    
      var willValidate = this._opts.validateSchema !== false && !skipValidation;
      var recursiveMeta;
      if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
        this.validateSchema(schema, true);
    
      var localRefs = resolve.ids.call(this, schema);
    
      var schemaObj = new SchemaObject({
        id: id,
        schema: schema,
        localRefs: localRefs,
        cacheKey: cacheKey,
        meta: meta
      });
    
      if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
      this._cache.put(cacheKey, schemaObj);
    
      if (willValidate && recursiveMeta) this.validateSchema(schema, true);
    
      return schemaObj;
    }
    
    
    /* @this   Ajv */
    function _compile(schemaObj, root) {
      if (schemaObj.compiling) {
        schemaObj.validate = callValidate;
        callValidate.schema = schemaObj.schema;
        callValidate.errors = null;
        callValidate.root = root ? root : callValidate;
        if (schemaObj.schema.$async === true)
          callValidate.$async = true;
        return callValidate;
      }
      schemaObj.compiling = true;
    
      var currentOpts;
      if (schemaObj.meta) {
        currentOpts = this._opts;
        this._opts = this._metaOpts;
      }
    
      var v;
      try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }
      catch(e) {
        delete schemaObj.validate;
        throw e;
      }
      finally {
        schemaObj.compiling = false;
        if (schemaObj.meta) this._opts = currentOpts;
      }
    
      schemaObj.validate = v;
      schemaObj.refs = v.refs;
      schemaObj.refVal = v.refVal;
      schemaObj.root = v.root;
      return v;
    
    
      /* @this   {*} - custom context, see passContext option */
      function callValidate() {
        /* jshint validthis: true */
        var _validate = schemaObj.validate;
        var result = _validate.apply(this, arguments);
        callValidate.errors = _validate.errors;
        return result;
      }
    }
    
    
    function chooseGetId(opts) {
      switch (opts.schemaId) {
        case 'auto': return _get$IdOrId;
        case 'id': return _getId;
        default: return _get$Id;
      }
    }
    
    /* @this   Ajv */
    function _getId(schema) {
      if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
      return schema.id;
    }
    
    /* @this   Ajv */
    function _get$Id(schema) {
      if (schema.id) this.logger.warn('schema id ignored', schema.id);
      return schema.$id;
    }
    
    
    function _get$IdOrId(schema) {
      if (schema.$id && schema.id && schema.$id != schema.id)
        throw new Error('schema $id is different from id');
      return schema.$id || schema.id;
    }
    
    
    /**
     * Convert array of error message objects to string
     * @this   Ajv
     * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
     * @param  {Object} options optional options with properties `separator` and `dataVar`.
     * @return {String} human readable string with all errors descriptions
     */
    function errorsText(errors, options) {
      errors = errors || this.errors;
      if (!errors) return 'No errors';
      options = options || {};
      var separator = options.separator === undefined ? ', ' : options.separator;
      var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;
    
      var text = '';
      for (var i=0; i<errors.length; i++) {
        var e = errors[i];
        if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
      }
      return text.slice(0, -separator.length);
    }
    
    
    /**
     * Add custom format
     * @this   Ajv
     * @param {String} name format name
     * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
     * @return {Ajv} this for method chaining
     */
    function addFormat(name, format) {
      if (typeof format == 'string') format = new RegExp(format);
      this._formats[name] = format;
      return this;
    }
    
    
    function addDefaultMetaSchema(self) {
      var $dataSchema;
      if (self._opts.$data) {
        $dataSchema = require('./refs/data.json');
        self.addMetaSchema($dataSchema, $dataSchema.$id, true);
      }
      if (self._opts.meta === false) return;
      var metaSchema = require('./refs/json-schema-draft-07.json');
      if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
      self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
      self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
    }
    
    
    function addInitialSchemas(self) {
      var optsSchemas = self._opts.schemas;
      if (!optsSchemas) return;
      if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
      else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
    }
    
    
    function addInitialFormats(self) {
      for (var name in self._opts.formats) {
        var format = self._opts.formats[name];
        self.addFormat(name, format);
      }
    }
    
    
    function checkUnique(self, id) {
      if (self._schemas[id] || self._refs[id])
        throw new Error('schema with key or id "' + id + '" already exists');
    }
    
    
    function getMetaSchemaOptions(self) {
      var metaOpts = util.copy(self._opts);
      for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
        delete metaOpts[META_IGNORE_OPTIONS[i]];
      return metaOpts;
    }
    
    
    function setLogger(self) {
      var logger = self._opts.logger;
      if (logger === false) {
        self.logger = {log: noop, warn: noop, error: noop};
      } else {
        if (logger === undefined) logger = console;
        if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))
          throw new Error('logger must implement log, warn and error methods');
        self.logger = logger;
      }
    }
    
    
    function noop() {}
    
    },{"./cache":2,"./compile":6,"./compile/async":3,"./compile/error_classes":4,"./compile/formats":5,"./compile/resolve":7,"./compile/rules":8,"./compile/schema_obj":9,"./compile/util":11,"./data":12,"./keyword":39,"./refs/data.json":40,"./refs/json-schema-draft-07.json":41,"fast-json-stable-stringify":174}],2:[function(require,module,exports){
    'use strict';
    
    
    var Cache = module.exports = function Cache() {
      this._cache = {};
    };
    
    
    Cache.prototype.put = function Cache_put(key, value) {
      this._cache[key] = value;
    };
    
    
    Cache.prototype.get = function Cache_get(key) {
      return this._cache[key];
    };
    
    
    Cache.prototype.del = function Cache_del(key) {
      delete this._cache[key];
    };
    
    
    Cache.prototype.clear = function Cache_clear() {
      this._cache = {};
    };
    
    },{}],3:[function(require,module,exports){
    'use strict';
    
    var MissingRefError = require('./error_classes').MissingRef;
    
    module.exports = compileAsync;
    
    
    /**
     * Creates validating function for passed schema with asynchronous loading of missing schemas.
     * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
     * @this  Ajv
     * @param {Object}   schema schema object
     * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
     * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
     * @return {Promise} promise that resolves with a validating function.
     */
    function compileAsync(schema, meta, callback) {
      /* eslint no-shadow: 0 */
      /* global Promise */
      /* jshint validthis: true */
      var self = this;
      if (typeof this._opts.loadSchema != 'function')
        throw new Error('options.loadSchema should be a function');
    
      if (typeof meta == 'function') {
        callback = meta;
        meta = undefined;
      }
    
      var p = loadMetaSchemaOf(schema).then(function () {
        var schemaObj = self._addSchema(schema, undefined, meta);
        return schemaObj.validate || _compileAsync(schemaObj);
      });
    
      if (callback) {
        p.then(
          function(v) { callback(null, v); },
          callback
        );
      }
    
      return p;
    
    
      function loadMetaSchemaOf(sch) {
        var $schema = sch.$schema;
        return $schema && !self.getSchema($schema)
                ? compileAsync.call(self, { $ref: $schema }, true)
                : Promise.resolve();
      }
    
    
      function _compileAsync(schemaObj) {
        try { return self._compile(schemaObj); }
        catch(e) {
          if (e instanceof MissingRefError) return loadMissingSchema(e);
          throw e;
        }
    
    
        function loadMissingSchema(e) {
          var ref = e.missingSchema;
          if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');
    
          var schemaPromise = self._loadingSchemas[ref];
          if (!schemaPromise) {
            schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
            schemaPromise.then(removePromise, removePromise);
          }
    
          return schemaPromise.then(function (sch) {
            if (!added(ref)) {
              return loadMetaSchemaOf(sch).then(function () {
                if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
              });
            }
          }).then(function() {
            return _compileAsync(schemaObj);
          });
    
          function removePromise() {
            delete self._loadingSchemas[ref];
          }
    
          function added(ref) {
            return self._refs[ref] || self._schemas[ref];
          }
        }
      }
    }
    
    },{"./error_classes":4}],4:[function(require,module,exports){
    'use strict';
    
    var resolve = require('./resolve');
    
    module.exports = {
      Validation: errorSubclass(ValidationError),
      MissingRef: errorSubclass(MissingRefError)
    };
    
    
    function ValidationError(errors) {
      this.message = 'validation failed';
      this.errors = errors;
      this.ajv = this.validation = true;
    }
    
    
    MissingRefError.message = function (baseId, ref) {
      return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
    };
    
    
    function MissingRefError(baseId, ref, message) {
      this.message = message || MissingRefError.message(baseId, ref);
      this.missingRef = resolve.url(baseId, ref);
      this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
    }
    
    
    function errorSubclass(Subclass) {
      Subclass.prototype = Object.create(Error.prototype);
      Subclass.prototype.constructor = Subclass;
      return Subclass;
    }
    
    },{"./resolve":7}],5:[function(require,module,exports){
    'use strict';
    
    var util = require('./util');
    
    var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    var DAYS = [0,31,28,31,30,31,30,31,31,30,31,30,31];
    var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
    var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
    var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
    var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
    // uri-template: https://tools.ietf.org/html/rfc6570
    var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
    // For the source: https://gist.github.com/dperini/729294
    // For test cases: https://mathiasbynens.be/demo/url-regex
    // @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
    // var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
    var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
    var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
    var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
    var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
    var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
    
    
    module.exports = formats;
    
    function formats(mode) {
      mode = mode == 'full' ? 'full' : 'fast';
      return util.copy(formats[mode]);
    }
    
    
    formats.fast = {
      // date: http://tools.ietf.org/html/rfc3339#section-5.6
      date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
      // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
      time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
      'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
      // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
      uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,
      'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
      'uri-template': URITEMPLATE,
      url: URL,
      // email (sources from jsen validator):
      // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
      // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
      email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
      hostname: HOSTNAME,
      // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
      ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
      // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
      ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
      regex: regex,
      // uuid: http://tools.ietf.org/html/rfc4122
      uuid: UUID,
      // JSON-pointer: https://tools.ietf.org/html/rfc6901
      // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
      'json-pointer': JSON_POINTER,
      'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
      // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
      'relative-json-pointer': RELATIVE_JSON_POINTER
    };
    
    
    formats.full = {
      date: date,
      time: time,
      'date-time': date_time,
      uri: uri,
      'uri-reference': URIREF,
      'uri-template': URITEMPLATE,
      url: URL,
      email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
      hostname: hostname,
      ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
      ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
      regex: regex,
      uuid: UUID,
      'json-pointer': JSON_POINTER,
      'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
      'relative-json-pointer': RELATIVE_JSON_POINTER
    };
    
    
    function isLeapYear(year) {
      // https://tools.ietf.org/html/rfc3339#appendix-C
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }
    
    
    function date(str) {
      // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
      var matches = str.match(DATE);
      if (!matches) return false;
    
      var year = +matches[1];
      var month = +matches[2];
      var day = +matches[3];
    
      return month >= 1 && month <= 12 && day >= 1 &&
              day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
    }
    
    
    function time(str, full) {
      var matches = str.match(TIME);
      if (!matches) return false;
    
      var hour = matches[1];
      var minute = matches[2];
      var second = matches[3];
      var timeZone = matches[5];
      return ((hour <= 23 && minute <= 59 && second <= 59) ||
              (hour == 23 && minute == 59 && second == 60)) &&
             (!full || timeZone);
    }
    
    
    var DATE_TIME_SEPARATOR = /t|\s/i;
    function date_time(str) {
      // http://tools.ietf.org/html/rfc3339#section-5.6
      var dateTime = str.split(DATE_TIME_SEPARATOR);
      return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
    }
    
    
    function hostname(str) {
      // https://tools.ietf.org/html/rfc1034#section-3.5
      // https://tools.ietf.org/html/rfc1123#section-2
      return str.length <= 255 && HOSTNAME.test(str);
    }
    
    
    var NOT_URI_FRAGMENT = /\/|:/;
    function uri(str) {
      // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
      return NOT_URI_FRAGMENT.test(str) && URI.test(str);
    }
    
    
    var Z_ANCHOR = /[^\\]\\Z/;
    function regex(str) {
      if (Z_ANCHOR.test(str)) return false;
      try {
        new RegExp(str);
        return true;
      } catch(e) {
        return false;
      }
    }
    
    },{"./util":11}],6:[function(require,module,exports){
    'use strict';
    
    var resolve = require('./resolve')
      , util = require('./util')
      , errorClasses = require('./error_classes')
      , stableStringify = require('fast-json-stable-stringify');
    
    var validateGenerator = require('../dotjs/validate');
    
    /**
     * Functions below are used inside compiled validations function
     */
    
    var ucs2length = util.ucs2length;
    var equal = require('fast-deep-equal');
    
    // this error is thrown by async schemas to return validation errors via exception
    var ValidationError = errorClasses.Validation;
    
    module.exports = compile;
    
    
    /**
     * Compiles schema to validation function
     * @this   Ajv
     * @param  {Object} schema schema object
     * @param  {Object} root object with information about the root schema for this schema
     * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
     * @param  {String} baseId base ID for IDs in the schema
     * @return {Function} validation function
     */
    function compile(schema, root, localRefs, baseId) {
      /* jshint validthis: true, evil: true */
      /* eslint no-shadow: 0 */
      var self = this
        , opts = this._opts
        , refVal = [ undefined ]
        , refs = {}
        , patterns = []
        , patternsHash = {}
        , defaults = []
        , defaultsHash = {}
        , customRules = [];
    
      root = root || { schema: schema, refVal: refVal, refs: refs };
    
      var c = checkCompiling.call(this, schema, root, baseId);
      var compilation = this._compilations[c.index];
      if (c.compiling) return (compilation.callValidate = callValidate);
    
      var formats = this._formats;
      var RULES = this.RULES;
    
      try {
        var v = localCompile(schema, root, localRefs, baseId);
        compilation.validate = v;
        var cv = compilation.callValidate;
        if (cv) {
          cv.schema = v.schema;
          cv.errors = null;
          cv.refs = v.refs;
          cv.refVal = v.refVal;
          cv.root = v.root;
          cv.$async = v.$async;
          if (opts.sourceCode) cv.source = v.source;
        }
        return v;
      } finally {
        endCompiling.call(this, schema, root, baseId);
      }
    
      /* @this   {*} - custom context, see passContext option */
      function callValidate() {
        /* jshint validthis: true */
        var validate = compilation.validate;
        var result = validate.apply(this, arguments);
        callValidate.errors = validate.errors;
        return result;
      }
    
      function localCompile(_schema, _root, localRefs, baseId) {
        var isRoot = !_root || (_root && _root.schema == _schema);
        if (_root.schema != root.schema)
          return compile.call(self, _schema, _root, localRefs, baseId);
    
        var $async = _schema.$async === true;
    
        var sourceCode = validateGenerator({
          isTop: true,
          schema: _schema,
          isRoot: isRoot,
          baseId: baseId,
          root: _root,
          schemaPath: '',
          errSchemaPath: '#',
          errorPath: '""',
          MissingRefError: errorClasses.MissingRef,
          RULES: RULES,
          validate: validateGenerator,
          util: util,
          resolve: resolve,
          resolveRef: resolveRef,
          usePattern: usePattern,
          useDefault: useDefault,
          useCustomRule: useCustomRule,
          opts: opts,
          formats: formats,
          logger: self.logger,
          self: self
        });
    
        sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
                       + vars(defaults, defaultCode) + vars(customRules, customRuleCode)
                       + sourceCode;
    
        if (opts.processCode) sourceCode = opts.processCode(sourceCode);
        // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
        var validate;
        try {
          var makeValidate = new Function(
            'self',
            'RULES',
            'formats',
            'root',
            'refVal',
            'defaults',
            'customRules',
            'equal',
            'ucs2length',
            'ValidationError',
            sourceCode
          );
    
          validate = makeValidate(
            self,
            RULES,
            formats,
            root,
            refVal,
            defaults,
            customRules,
            equal,
            ucs2length,
            ValidationError
          );
    
          refVal[0] = validate;
        } catch(e) {
          self.logger.error('Error compiling schema, function code:', sourceCode);
          throw e;
        }
    
        validate.schema = _schema;
        validate.errors = null;
        validate.refs = refs;
        validate.refVal = refVal;
        validate.root = isRoot ? validate : _root;
        if ($async) validate.$async = true;
        if (opts.sourceCode === true) {
          validate.source = {
            code: sourceCode,
            patterns: patterns,
            defaults: defaults
          };
        }
    
        return validate;
      }
    
      function resolveRef(baseId, ref, isRoot) {
        ref = resolve.url(baseId, ref);
        var refIndex = refs[ref];
        var _refVal, refCode;
        if (refIndex !== undefined) {
          _refVal = refVal[refIndex];
          refCode = 'refVal[' + refIndex + ']';
          return resolvedRef(_refVal, refCode);
        }
        if (!isRoot && root.refs) {
          var rootRefId = root.refs[ref];
          if (rootRefId !== undefined) {
            _refVal = root.refVal[rootRefId];
            refCode = addLocalRef(ref, _refVal);
            return resolvedRef(_refVal, refCode);
          }
        }
    
        refCode = addLocalRef(ref);
        var v = resolve.call(self, localCompile, root, ref);
        if (v === undefined) {
          var localSchema = localRefs && localRefs[ref];
          if (localSchema) {
            v = resolve.inlineRef(localSchema, opts.inlineRefs)
                ? localSchema
                : compile.call(self, localSchema, root, localRefs, baseId);
          }
        }
    
        if (v === undefined) {
          removeLocalRef(ref);
        } else {
          replaceLocalRef(ref, v);
          return resolvedRef(v, refCode);
        }
      }
    
      function addLocalRef(ref, v) {
        var refId = refVal.length;
        refVal[refId] = v;
        refs[ref] = refId;
        return 'refVal' + refId;
      }
    
      function removeLocalRef(ref) {
        delete refs[ref];
      }
    
      function replaceLocalRef(ref, v) {
        var refId = refs[ref];
        refVal[refId] = v;
      }
    
      function resolvedRef(refVal, code) {
        return typeof refVal == 'object' || typeof refVal == 'boolean'
                ? { code: code, schema: refVal, inline: true }
                : { code: code, $async: refVal && !!refVal.$async };
      }
    
      function usePattern(regexStr) {
        var index = patternsHash[regexStr];
        if (index === undefined) {
          index = patternsHash[regexStr] = patterns.length;
          patterns[index] = regexStr;
        }
        return 'pattern' + index;
      }
    
      function useDefault(value) {
        switch (typeof value) {
          case 'boolean':
          case 'number':
            return '' + value;
          case 'string':
            return util.toQuotedString(value);
          case 'object':
            if (value === null) return 'null';
            var valueStr = stableStringify(value);
            var index = defaultsHash[valueStr];
            if (index === undefined) {
              index = defaultsHash[valueStr] = defaults.length;
              defaults[index] = value;
            }
            return 'default' + index;
        }
      }
    
      function useCustomRule(rule, schema, parentSchema, it) {
        if (self._opts.validateSchema !== false) {
          var deps = rule.definition.dependencies;
          if (deps && !deps.every(function(keyword) {
            return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
          }))
            throw new Error('parent schema must have all required keywords: ' + deps.join(','));
    
          var validateSchema = rule.definition.validateSchema;
          if (validateSchema) {
            var valid = validateSchema(schema);
            if (!valid) {
              var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
              if (self._opts.validateSchema == 'log') self.logger.error(message);
              else throw new Error(message);
            }
          }
        }
    
        var compile = rule.definition.compile
          , inline = rule.definition.inline
          , macro = rule.definition.macro;
    
        var validate;
        if (compile) {
          validate = compile.call(self, schema, parentSchema, it);
        } else if (macro) {
          validate = macro.call(self, schema, parentSchema, it);
          if (opts.validateSchema !== false) self.validateSchema(validate, true);
        } else if (inline) {
          validate = inline.call(self, it, rule.keyword, schema, parentSchema);
        } else {
          validate = rule.definition.validate;
          if (!validate) return;
        }
    
        if (validate === undefined)
          throw new Error('custom keyword "' + rule.keyword + '"failed to compile');
    
        var index = customRules.length;
        customRules[index] = validate;
    
        return {
          code: 'customRule' + index,
          validate: validate
        };
      }
    }
    
    
    /**
     * Checks if the schema is currently compiled
     * @this   Ajv
     * @param  {Object} schema schema to compile
     * @param  {Object} root root object
     * @param  {String} baseId base schema ID
     * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
     */
    function checkCompiling(schema, root, baseId) {
      /* jshint validthis: true */
      var index = compIndex.call(this, schema, root, baseId);
      if (index >= 0) return { index: index, compiling: true };
      index = this._compilations.length;
      this._compilations[index] = {
        schema: schema,
        root: root,
        baseId: baseId
      };
      return { index: index, compiling: false };
    }
    
    
    /**
     * Removes the schema from the currently compiled list
     * @this   Ajv
     * @param  {Object} schema schema to compile
     * @param  {Object} root root object
     * @param  {String} baseId base schema ID
     */
    function endCompiling(schema, root, baseId) {
      /* jshint validthis: true */
      var i = compIndex.call(this, schema, root, baseId);
      if (i >= 0) this._compilations.splice(i, 1);
    }
    
    
    /**
     * Index of schema compilation in the currently compiled list
     * @this   Ajv
     * @param  {Object} schema schema to compile
     * @param  {Object} root root object
     * @param  {String} baseId base schema ID
     * @return {Integer} compilation index
     */
    function compIndex(schema, root, baseId) {
      /* jshint validthis: true */
      for (var i=0; i<this._compilations.length; i++) {
        var c = this._compilations[i];
        if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
      }
      return -1;
    }
    
    
    function patternCode(i, patterns) {
      return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
    }
    
    
    function defaultCode(i) {
      return 'var default' + i + ' = defaults[' + i + '];';
    }
    
    
    function refValCode(i, refVal) {
      return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
    }
    
    
    function customRuleCode(i) {
      return 'var customRule' + i + ' = customRules[' + i + '];';
    }
    
    
    function vars(arr, statement) {
      if (!arr.length) return '';
      var code = '';
      for (var i=0; i<arr.length; i++)
        code += statement(i, arr);
      return code;
    }
    
    },{"../dotjs/validate":38,"./error_classes":4,"./resolve":7,"./util":11,"fast-deep-equal":173,"fast-json-stable-stringify":174}],7:[function(require,module,exports){
    'use strict';
    
    var URI = require('uri-js')
      , equal = require('fast-deep-equal')
      , util = require('./util')
      , SchemaObject = require('./schema_obj')
      , traverse = require('json-schema-traverse');
    
    module.exports = resolve;
    
    resolve.normalizeId = normalizeId;
    resolve.fullPath = getFullPath;
    resolve.url = resolveUrl;
    resolve.ids = resolveIds;
    resolve.inlineRef = inlineRef;
    resolve.schema = resolveSchema;
    
    /**
     * [resolve and compile the references ($ref)]
     * @this   Ajv
     * @param  {Function} compile reference to schema compilation funciton (localCompile)
     * @param  {Object} root object with information about the root schema for the current schema
     * @param  {String} ref reference to resolve
     * @return {Object|Function} schema object (if the schema can be inlined) or validation function
     */
    function resolve(compile, root, ref) {
      /* jshint validthis: true */
      var refVal = this._refs[ref];
      if (typeof refVal == 'string') {
        if (this._refs[refVal]) refVal = this._refs[refVal];
        else return resolve.call(this, compile, root, refVal);
      }
    
      refVal = refVal || this._schemas[ref];
      if (refVal instanceof SchemaObject) {
        return inlineRef(refVal.schema, this._opts.inlineRefs)
                ? refVal.schema
                : refVal.validate || this._compile(refVal);
      }
    
      var res = resolveSchema.call(this, root, ref);
      var schema, v, baseId;
      if (res) {
        schema = res.schema;
        root = res.root;
        baseId = res.baseId;
      }
    
      if (schema instanceof SchemaObject) {
        v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
      } else if (schema !== undefined) {
        v = inlineRef(schema, this._opts.inlineRefs)
            ? schema
            : compile.call(this, schema, root, undefined, baseId);
      }
    
      return v;
    }
    
    
    /**
     * Resolve schema, its root and baseId
     * @this Ajv
     * @param  {Object} root root object with properties schema, refVal, refs
     * @param  {String} ref  reference to resolve
     * @return {Object} object with properties schema, root, baseId
     */
    function resolveSchema(root, ref) {
      /* jshint validthis: true */
      var p = URI.parse(ref)
        , refPath = _getFullPath(p)
        , baseId = getFullPath(this._getId(root.schema));
      if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
        var id = normalizeId(refPath);
        var refVal = this._refs[id];
        if (typeof refVal == 'string') {
          return resolveRecursive.call(this, root, refVal, p);
        } else if (refVal instanceof SchemaObject) {
          if (!refVal.validate) this._compile(refVal);
          root = refVal;
        } else {
          refVal = this._schemas[id];
          if (refVal instanceof SchemaObject) {
            if (!refVal.validate) this._compile(refVal);
            if (id == normalizeId(ref))
              return { schema: refVal, root: root, baseId: baseId };
            root = refVal;
          } else {
            return;
          }
        }
        if (!root.schema) return;
        baseId = getFullPath(this._getId(root.schema));
      }
      return getJsonPointer.call(this, p, baseId, root.schema, root);
    }
    
    
    /* @this Ajv */
    function resolveRecursive(root, ref, parsedRef) {
      /* jshint validthis: true */
      var res = resolveSchema.call(this, root, ref);
      if (res) {
        var schema = res.schema;
        var baseId = res.baseId;
        root = res.root;
        var id = this._getId(schema);
        if (id) baseId = resolveUrl(baseId, id);
        return getJsonPointer.call(this, parsedRef, baseId, schema, root);
      }
    }
    
    
    var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
    /* @this Ajv */
    function getJsonPointer(parsedRef, baseId, schema, root) {
      /* jshint validthis: true */
      parsedRef.fragment = parsedRef.fragment || '';
      if (parsedRef.fragment.slice(0,1) != '/') return;
      var parts = parsedRef.fragment.split('/');
    
      for (var i = 1; i < parts.length; i++) {
        var part = parts[i];
        if (part) {
          part = util.unescapeFragment(part);
          schema = schema[part];
          if (schema === undefined) break;
          var id;
          if (!PREVENT_SCOPE_CHANGE[part]) {
            id = this._getId(schema);
            if (id) baseId = resolveUrl(baseId, id);
            if (schema.$ref) {
              var $ref = resolveUrl(baseId, schema.$ref);
              var res = resolveSchema.call(this, root, $ref);
              if (res) {
                schema = res.schema;
                root = res.root;
                baseId = res.baseId;
              }
            }
          }
        }
      }
      if (schema !== undefined && schema !== root.schema)
        return { schema: schema, root: root, baseId: baseId };
    }
    
    
    var SIMPLE_INLINED = util.toHash([
      'type', 'format', 'pattern',
      'maxLength', 'minLength',
      'maxProperties', 'minProperties',
      'maxItems', 'minItems',
      'maximum', 'minimum',
      'uniqueItems', 'multipleOf',
      'required', 'enum'
    ]);
    function inlineRef(schema, limit) {
      if (limit === false) return false;
      if (limit === undefined || limit === true) return checkNoRef(schema);
      else if (limit) return countKeys(schema) <= limit;
    }
    
    
    function checkNoRef(schema) {
      var item;
      if (Array.isArray(schema)) {
        for (var i=0; i<schema.length; i++) {
          item = schema[i];
          if (typeof item == 'object' && !checkNoRef(item)) return false;
        }
      } else {
        for (var key in schema) {
          if (key == '$ref') return false;
          item = schema[key];
          if (typeof item == 'object' && !checkNoRef(item)) return false;
        }
      }
      return true;
    }
    
    
    function countKeys(schema) {
      var count = 0, item;
      if (Array.isArray(schema)) {
        for (var i=0; i<schema.length; i++) {
          item = schema[i];
          if (typeof item == 'object') count += countKeys(item);
          if (count == Infinity) return Infinity;
        }
      } else {
        for (var key in schema) {
          if (key == '$ref') return Infinity;
          if (SIMPLE_INLINED[key]) {
            count++;
          } else {
            item = schema[key];
            if (typeof item == 'object') count += countKeys(item) + 1;
            if (count == Infinity) return Infinity;
          }
        }
      }
      return count;
    }
    
    
    function getFullPath(id, normalize) {
      if (normalize !== false) id = normalizeId(id);
      var p = URI.parse(id);
      return _getFullPath(p);
    }
    
    
    function _getFullPath(p) {
      return URI.serialize(p).split('#')[0] + '#';
    }
    
    
    var TRAILING_SLASH_HASH = /#\/?$/;
    function normalizeId(id) {
      return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
    }
    
    
    function resolveUrl(baseId, id) {
      id = normalizeId(id);
      return URI.resolve(baseId, id);
    }
    
    
    /* @this Ajv */
    function resolveIds(schema) {
      var schemaId = normalizeId(this._getId(schema));
      var baseIds = {'': schemaId};
      var fullPaths = {'': getFullPath(schemaId, false)};
      var localRefs = {};
      var self = this;
    
      traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
        if (jsonPtr === '') return;
        var id = self._getId(sch);
        var baseId = baseIds[parentJsonPtr];
        var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
        if (keyIndex !== undefined)
          fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));
    
        if (typeof id == 'string') {
          id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);
    
          var refVal = self._refs[id];
          if (typeof refVal == 'string') refVal = self._refs[refVal];
          if (refVal && refVal.schema) {
            if (!equal(sch, refVal.schema))
              throw new Error('id "' + id + '" resolves to more than one schema');
          } else if (id != normalizeId(fullPath)) {
            if (id[0] == '#') {
              if (localRefs[id] && !equal(sch, localRefs[id]))
                throw new Error('id "' + id + '" resolves to more than one schema');
              localRefs[id] = sch;
            } else {
              self._refs[id] = fullPath;
            }
          }
        }
        baseIds[jsonPtr] = baseId;
        fullPaths[jsonPtr] = fullPath;
      });
    
      return localRefs;
    }
    
    },{"./schema_obj":9,"./util":11,"fast-deep-equal":173,"json-schema-traverse":206,"uri-js":298}],8:[function(require,module,exports){
    'use strict';
    
    var ruleModules = require('../dotjs')
      , toHash = require('./util').toHash;
    
    module.exports = function rules() {
      var RULES = [
        { type: 'number',
          rules: [ { 'maximum': ['exclusiveMaximum'] },
                   { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },
        { type: 'string',
          rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
        { type: 'array',
          rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },
        { type: 'object',
          rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',
                   { 'properties': ['additionalProperties', 'patternProperties'] } ] },
        { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }
      ];
    
      var ALL = [ 'type', '$comment' ];
      var KEYWORDS = [
        '$schema', '$id', 'id', '$data', '$async', 'title',
        'description', 'default', 'definitions',
        'examples', 'readOnly', 'writeOnly',
        'contentMediaType', 'contentEncoding',
        'additionalItems', 'then', 'else'
      ];
      var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];
      RULES.all = toHash(ALL);
      RULES.types = toHash(TYPES);
    
      RULES.forEach(function (group) {
        group.rules = group.rules.map(function (keyword) {
          var implKeywords;
          if (typeof keyword == 'object') {
            var key = Object.keys(keyword)[0];
            implKeywords = keyword[key];
            keyword = key;
            implKeywords.forEach(function (k) {
              ALL.push(k);
              RULES.all[k] = true;
            });
          }
          ALL.push(keyword);
          var rule = RULES.all[keyword] = {
            keyword: keyword,
            code: ruleModules[keyword],
            implements: implKeywords
          };
          return rule;
        });
    
        RULES.all.$comment = {
          keyword: '$comment',
          code: ruleModules.$comment
        };
    
        if (group.type) RULES.types[group.type] = group;
      });
    
      RULES.keywords = toHash(ALL.concat(KEYWORDS));
      RULES.custom = {};
    
      return RULES;
    };
    
    },{"../dotjs":27,"./util":11}],9:[function(require,module,exports){
    'use strict';
    
    var util = require('./util');
    
    module.exports = SchemaObject;
    
    function SchemaObject(obj) {
      util.copy(obj, this);
    }
    
    },{"./util":11}],10:[function(require,module,exports){
    'use strict';
    
    // https://mathiasbynens.be/notes/javascript-encoding
    // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
    module.exports = function ucs2length(str) {
      var length = 0
        , len = str.length
        , pos = 0
        , value;
      while (pos < len) {
        length++;
        value = str.charCodeAt(pos++);
        if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
          // high surrogate, and there is a next character
          value = str.charCodeAt(pos);
          if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
        }
      }
      return length;
    };
    
    },{}],11:[function(require,module,exports){
    'use strict';
    
    
    module.exports = {
      copy: copy,
      checkDataType: checkDataType,
      checkDataTypes: checkDataTypes,
      coerceToTypes: coerceToTypes,
      toHash: toHash,
      getProperty: getProperty,
      escapeQuotes: escapeQuotes,
      equal: require('fast-deep-equal'),
      ucs2length: require('./ucs2length'),
      varOccurences: varOccurences,
      varReplace: varReplace,
      cleanUpCode: cleanUpCode,
      finalCleanUpCode: finalCleanUpCode,
      schemaHasRules: schemaHasRules,
      schemaHasRulesExcept: schemaHasRulesExcept,
      schemaUnknownRules: schemaUnknownRules,
      toQuotedString: toQuotedString,
      getPathExpr: getPathExpr,
      getPath: getPath,
      getData: getData,
      unescapeFragment: unescapeFragment,
      unescapeJsonPointer: unescapeJsonPointer,
      escapeFragment: escapeFragment,
      escapeJsonPointer: escapeJsonPointer
    };
    
    
    function copy(o, to) {
      to = to || {};
      for (var key in o) to[key] = o[key];
      return to;
    }
    
    
    function checkDataType(dataType, data, negate) {
      var EQUAL = negate ? ' !== ' : ' === '
        , AND = negate ? ' || ' : ' && '
        , OK = negate ? '!' : ''
        , NOT = negate ? '' : '!';
      switch (dataType) {
        case 'null': return data + EQUAL + 'null';
        case 'array': return OK + 'Array.isArray(' + data + ')';
        case 'object': return '(' + OK + data + AND +
                              'typeof ' + data + EQUAL + '"object"' + AND +
                              NOT + 'Array.isArray(' + data + '))';
        case 'integer': return '(typeof ' + data + EQUAL + '"number"' + AND +
                               NOT + '(' + data + ' % 1)' +
                               AND + data + EQUAL + data + ')';
        default: return 'typeof ' + data + EQUAL + '"' + dataType + '"';
      }
    }
    
    
    function checkDataTypes(dataTypes, data) {
      switch (dataTypes.length) {
        case 1: return checkDataType(dataTypes[0], data, true);
        default:
          var code = '';
          var types = toHash(dataTypes);
          if (types.array && types.object) {
            code = types.null ? '(': '(!' + data + ' || ';
            code += 'typeof ' + data + ' !== "object")';
            delete types.null;
            delete types.array;
            delete types.object;
          }
          if (types.number) delete types.integer;
          for (var t in types)
            code += (code ? ' && ' : '' ) + checkDataType(t, data, true);
    
          return code;
      }
    }
    
    
    var COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);
    function coerceToTypes(optionCoerceTypes, dataTypes) {
      if (Array.isArray(dataTypes)) {
        var types = [];
        for (var i=0; i<dataTypes.length; i++) {
          var t = dataTypes[i];
          if (COERCE_TO_TYPES[t]) types[types.length] = t;
          else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
        }
        if (types.length) return types;
      } else if (COERCE_TO_TYPES[dataTypes]) {
        return [dataTypes];
      } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
        return ['array'];
      }
    }
    
    
    function toHash(arr) {
      var hash = {};
      for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
      return hash;
    }
    
    
    var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    var SINGLE_QUOTE = /'|\\/g;
    function getProperty(key) {
      return typeof key == 'number'
              ? '[' + key + ']'
              : IDENTIFIER.test(key)
                ? '.' + key
                : "['" + escapeQuotes(key) + "']";
    }
    
    
    function escapeQuotes(str) {
      return str.replace(SINGLE_QUOTE, '\\$&')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/\f/g, '\\f')
                .replace(/\t/g, '\\t');
    }
    
    
    function varOccurences(str, dataVar) {
      dataVar += '[^0-9]';
      var matches = str.match(new RegExp(dataVar, 'g'));
      return matches ? matches.length : 0;
    }
    
    
    function varReplace(str, dataVar, expr) {
      dataVar += '([^0-9])';
      expr = expr.replace(/\$/g, '$$$$');
      return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
    }
    
    
    var EMPTY_ELSE = /else\s*{\s*}/g
      , EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g
      , EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
    function cleanUpCode(out) {
      return out.replace(EMPTY_ELSE, '')
                .replace(EMPTY_IF_NO_ELSE, '')
                .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
    }
    
    
    var ERRORS_REGEXP = /[^v.]errors/g
      , REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g
      , REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g
      , RETURN_VALID = 'return errors === 0;'
      , RETURN_TRUE = 'validate.errors = null; return true;'
      , RETURN_ASYNC = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/
      , RETURN_DATA_ASYNC = 'return data;'
      , ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g
      , REMOVE_ROOTDATA = /if \(rootData === undefined\) rootData = data;/;
    
    function finalCleanUpCode(out, async) {
      var matches = out.match(ERRORS_REGEXP);
      if (matches && matches.length == 2) {
        out = async
              ? out.replace(REMOVE_ERRORS_ASYNC, '')
                   .replace(RETURN_ASYNC, RETURN_DATA_ASYNC)
              : out.replace(REMOVE_ERRORS, '')
                   .replace(RETURN_VALID, RETURN_TRUE);
      }
    
      matches = out.match(ROOTDATA_REGEXP);
      if (!matches || matches.length !== 3) return out;
      return out.replace(REMOVE_ROOTDATA, '');
    }
    
    
    function schemaHasRules(schema, rules) {
      if (typeof schema == 'boolean') return !schema;
      for (var key in schema) if (rules[key]) return true;
    }
    
    
    function schemaHasRulesExcept(schema, rules, exceptKeyword) {
      if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
      for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
    }
    
    
    function schemaUnknownRules(schema, rules) {
      if (typeof schema == 'boolean') return;
      for (var key in schema) if (!rules[key]) return key;
    }
    
    
    function toQuotedString(str) {
      return '\'' + escapeQuotes(str) + '\'';
    }
    
    
    function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
      var path = jsonPointers // false by default
                  ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')')
                  : (isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'');
      return joinPaths(currentPath, path);
    }
    
    
    function getPath(currentPath, prop, jsonPointers) {
      var path = jsonPointers // false by default
                  ? toQuotedString('/' + escapeJsonPointer(prop))
                  : toQuotedString(getProperty(prop));
      return joinPaths(currentPath, path);
    }
    
    
    var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    function getData($data, lvl, paths) {
      var up, jsonPointer, data, matches;
      if ($data === '') return 'rootData';
      if ($data[0] == '/') {
        if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
        jsonPointer = $data;
        data = 'rootData';
      } else {
        matches = $data.match(RELATIVE_JSON_POINTER);
        if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
        up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer == '#') {
          if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
          return paths[lvl - up];
        }
    
        if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
        data = 'data' + ((lvl - up) || '');
        if (!jsonPointer) return data;
      }
    
      var expr = data;
      var segments = jsonPointer.split('/');
      for (var i=0; i<segments.length; i++) {
        var segment = segments[i];
        if (segment) {
          data += getProperty(unescapeJsonPointer(segment));
          expr += ' && ' + data;
        }
      }
      return expr;
    }
    
    
    function joinPaths (a, b) {
      if (a == '""') return b;
      return (a + ' + ' + b).replace(/' \+ '/g, '');
    }
    
    
    function unescapeFragment(str) {
      return unescapeJsonPointer(decodeURIComponent(str));
    }
    
    
    function escapeFragment(str) {
      return encodeURIComponent(escapeJsonPointer(str));
    }
    
    
    function escapeJsonPointer(str) {
      return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }
    
    
    function unescapeJsonPointer(str) {
      return str.replace(/~1/g, '/').replace(/~0/g, '~');
    }
    
    },{"./ucs2length":10,"fast-deep-equal":173}],12:[function(require,module,exports){
    'use strict';
    
    var KEYWORDS = [
      'multipleOf',
      'maximum',
      'exclusiveMaximum',
      'minimum',
      'exclusiveMinimum',
      'maxLength',
      'minLength',
      'pattern',
      'additionalItems',
      'maxItems',
      'minItems',
      'uniqueItems',
      'maxProperties',
      'minProperties',
      'required',
      'additionalProperties',
      'enum',
      'format',
      'const'
    ];
    
    module.exports = function (metaSchema, keywordsJsonPointers) {
      for (var i=0; i<keywordsJsonPointers.length; i++) {
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        var segments = keywordsJsonPointers[i].split('/');
        var keywords = metaSchema;
        var j;
        for (j=1; j<segments.length; j++)
          keywords = keywords[segments[j]];
    
        for (j=0; j<KEYWORDS.length; j++) {
          var key = KEYWORDS[j];
          var schema = keywords[key];
          if (schema) {
            keywords[key] = {
              anyOf: [
                schema,
                { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }
              ]
            };
          }
        }
      }
    
      return metaSchema;
    };
    
    },{}],13:[function(require,module,exports){
    'use strict';
    module.exports = function generate__limit(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = 'data' + ($dataLvl || '');
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $isMax = $keyword == 'maximum',
        $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
        $schemaExcl = it.schema[$exclusiveKeyword],
        $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
        $op = $isMax ? '<' : '>',
        $notOp = $isMax ? '>' : '<',
        $errorKeyword = undefined;
      if ($isDataExcl) {
        var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
          $exclusive = 'exclusive' + $lvl,
          $exclType = 'exclType' + $lvl,
          $exclIsNumber = 'exclIsNumber' + $lvl,
          $opExpr = 'op' + $lvl,
          $opStr = '\' + ' + $opExpr + ' + \'';
        out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
        $schemaValueExcl = 'schemaExcl' + $lvl;
        out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \'boolean\' && ' + ($exclType) + ' != \'undefined\' && ' + ($exclType) + ' != \'number\') { ';
        var $errorKeyword = $exclusiveKeyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
          if (it.opts.messages !== false) {
            out += ' , message: \'' + ($exclusiveKeyword) + ' should be boolean\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else if ( ';
        if ($isData) {
          out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
        }
        out += ' ' + ($exclType) + ' == \'number\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \'' + ($op) + '\' : \'' + ($op) + '=\'; ';
        if ($schema === undefined) {
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $schemaValue = $schemaValueExcl;
          $isData = $isDataExcl;
        }
      } else {
        var $exclIsNumber = typeof $schemaExcl == 'number',
          $opStr = $op;
        if ($exclIsNumber && $isData) {
          var $opExpr = '\'' + $opStr + '\'';
          out += ' if ( ';
          if ($isData) {
            out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
          }
          out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';
        } else {
          if ($exclIsNumber && $schema === undefined) {
            $exclusive = true;
            $errorKeyword = $exclusiveKeyword;
            $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
            $schemaValue = $schemaExcl;
            $notOp += '=';
          } else {
            if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
            if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
              $exclusive = true;
              $errorKeyword = $exclusiveKeyword;
              $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
              $notOp += '=';
            } else {
              $exclusive = false;
              $opStr += '=';
            }
          }
          var $opExpr = '\'' + $opStr + '\'';
          out += ' if ( ';
          if ($isData) {
            out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
          }
          out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';
        }
      }
      $errorKeyword = $errorKeyword || $keyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should be ' + ($opStr) + ' ';
          if ($isData) {
            out += '\' + ' + ($schemaValue);
          } else {
            out += '' + ($schemaValue) + '\'';
          }
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + ($schema);
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],14:[function(require,module,exports){
    'use strict';
    module.exports = function generate__limitItems(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = 'data' + ($dataLvl || '');
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $op = $keyword == 'maxItems' ? '>' : '<';
      out += 'if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
      }
      out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';
      var $errorKeyword = $keyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have ';
          if ($keyword == 'maxItems') {
            out += 'more';
          } else {
            out += 'fewer';
          }
          out += ' than ';
          if ($isData) {
            out += '\' + ' + ($schemaValue) + ' + \'';
          } else {
            out += '' + ($schema);
          }
          out += ' items\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + ($schema);
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += '} ';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],15:[function(require,module,exports){
    'use strict';
    module.exports = function generate__limitLength(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = 'data' + ($dataLvl || '');
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $op = $keyword == 'maxLength' ? '>' : '<';
      out += 'if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
      }
      if (it.opts.unicode === false) {
        out += ' ' + ($data) + '.length ';
      } else {
        out += ' ucs2length(' + ($data) + ') ';
      }
      out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';
      var $errorKeyword = $keyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT be ';
          if ($keyword == 'maxLength') {
            out += 'longer';
          } else {
            out += 'shorter';
          }
          out += ' than ';
          if ($isData) {
            out += '\' + ' + ($schemaValue) + ' + \'';
          } else {
            out += '' + ($schema);
          }
          out += ' characters\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + ($schema);
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += '} ';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],16:[function(require,module,exports){
    'use strict';
    module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = 'data' + ($dataLvl || '');
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $op = $keyword == 'maxProperties' ? '>' : '<';
      out += 'if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
      }
      out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';
      var $errorKeyword = $keyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have ';
          if ($keyword == 'maxProperties') {
            out += 'more';
          } else {
            out += 'fewer';
          }
          out += ' than ';
          if ($isData) {
            out += '\' + ' + ($schemaValue) + ' + \'';
          } else {
            out += '' + ($schema);
          }
          out += ' properties\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + ($schema);
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += '} ';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],17:[function(require,module,exports){
    'use strict';
    module.exports = function generate_allOf(it, $keyword, $ruleType) {
      var out = ' ';
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      var $currentBaseId = $it.baseId,
        $allSchemasEmpty = true;
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          if (it.util.schemaHasRules($sch, it.RULES.all)) {
            $allSchemasEmpty = false;
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + '[' + $i + ']';
            $it.errSchemaPath = $errSchemaPath + '/' + $i;
            out += '  ' + (it.validate($it)) + ' ';
            $it.baseId = $currentBaseId;
            if ($breakOnError) {
              out += ' if (' + ($nextValid) + ') { ';
              $closingBraces += '}';
            }
          }
        }
      }
      if ($breakOnError) {
        if ($allSchemasEmpty) {
          out += ' if (true) { ';
        } else {
          out += ' ' + ($closingBraces.slice(0, -1)) + ' ';
        }
      }
      out = it.util.cleanUpCode(out);
      return out;
    }
    
    },{}],18:[function(require,module,exports){
    'use strict';
    module.exports = function generate_anyOf(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      var $noEmptySchema = $schema.every(function($sch) {
        return it.util.schemaHasRules($sch, it.RULES.all);
      });
      if ($noEmptySchema) {
        var $currentBaseId = $it.baseId;
        out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        var arr1 = $schema;
        if (arr1) {
          var $sch, $i = -1,
            l1 = arr1.length - 1;
          while ($i < l1) {
            $sch = arr1[$i += 1];
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + '[' + $i + ']';
            $it.errSchemaPath = $errSchemaPath + '/' + $i;
            out += '  ' + (it.validate($it)) + ' ';
            $it.baseId = $currentBaseId;
            out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';
            $closingBraces += '}';
          }
        }
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('anyOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should match some schema in anyOf\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError(vErrors); ';
          } else {
            out += ' validate.errors = vErrors; return false; ';
          }
        }
        out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
        if (it.opts.allErrors) {
          out += ' } ';
        }
        out = it.util.cleanUpCode(out);
      } else {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
      }
      return out;
    }
    
    },{}],19:[function(require,module,exports){
    'use strict';
    module.exports = function generate_comment(it, $keyword, $ruleType) {
      var out = ' ';
      var $schema = it.schema[$keyword];
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $comment = it.util.toQuotedString($schema);
      if (it.opts.$comment === true) {
        out += ' console.log(' + ($comment) + ');';
      } else if (typeof it.opts.$comment == 'function') {
        out += ' self._opts.$comment(' + ($comment) + ', ' + (it.util.toQuotedString($errSchemaPath)) + ', validate.root.schema);';
      }
      return out;
    }
    
    },{}],20:[function(require,module,exports){
    'use strict';
    module.exports = function generate_const(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      if (!$isData) {
        out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';
      }
      out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('const') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValue: schema' + ($lvl) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should be equal to constant\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' }';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],21:[function(require,module,exports){
    'use strict';
    module.exports = function generate_contains(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      var $idx = 'i' + $lvl,
        $dataNxt = $it.dataLevel = it.dataLevel + 1,
        $nextData = 'data' + $dataNxt,
        $currentBaseId = it.baseId,
        $nonEmptySchema = it.util.schemaHasRules($schema, it.RULES.all);
      out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
      if ($nonEmptySchema) {
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        $it.schema = $schema;
        $it.schemaPath = $schemaPath;
        $it.errSchemaPath = $errSchemaPath;
        out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
        $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
        var $passData = $data + '[' + $idx + ']';
        $it.dataPathArr[$dataNxt] = $idx;
        var $code = it.validate($it);
        $it.baseId = $currentBaseId;
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
        } else {
          out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
        }
        out += ' if (' + ($nextValid) + ') break; }  ';
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';
      } else {
        out += ' if (' + ($data) + '.length == 0) {';
      }
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('contains') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should contain a valid item\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } else { ';
      if ($nonEmptySchema) {
        out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
      }
      if (it.opts.allErrors) {
        out += ' } ';
      }
      out = it.util.cleanUpCode(out);
      return out;
    }
    
    },{}],22:[function(require,module,exports){
    'use strict';
    module.exports = function generate_custom(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $errs = 'errs__' + $lvl;
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $rule = this,
        $definition = 'definition' + $lvl,
        $rDef = $rule.definition,
        $closingBraces = '';
      var $compile, $inline, $macro, $ruleValidate, $validateCode;
      if ($isData && $rDef.$data) {
        $validateCode = 'keywordValidate' + $lvl;
        var $validateSchema = $rDef.validateSchema;
        out += ' var ' + ($definition) + ' = RULES.custom[\'' + ($keyword) + '\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';
      } else {
        $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
        if (!$ruleValidate) return;
        $schemaValue = 'validate.schema' + $schemaPath;
        $validateCode = $ruleValidate.code;
        $compile = $rDef.compile;
        $inline = $rDef.inline;
        $macro = $rDef.macro;
      }
      var $ruleErrs = $validateCode + '.errors',
        $i = 'i' + $lvl,
        $ruleErr = 'ruleErr' + $lvl,
        $asyncKeyword = $rDef.async;
      if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
      if (!($inline || $macro)) {
        out += '' + ($ruleErrs) + ' = null;';
      }
      out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
      if ($isData && $rDef.$data) {
        $closingBraces += '}';
        out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';
        if ($validateSchema) {
          $closingBraces += '}';
          out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';
        }
      }
      if ($inline) {
        if ($rDef.statements) {
          out += ' ' + ($ruleValidate.validate) + ' ';
        } else {
          out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';
        }
      } else if ($macro) {
        var $it = it.util.copy(it);
        var $closingBraces = '';
        $it.level++;
        var $nextValid = 'valid' + $it.level;
        $it.schema = $ruleValidate.validate;
        $it.schemaPath = '';
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += ' ' + ($code);
      } else {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        out += '  ' + ($validateCode) + '.call( ';
        if (it.opts.passContext) {
          out += 'this';
        } else {
          out += 'self';
        }
        if ($compile || $rDef.schema === false) {
          out += ' , ' + ($data) + ' ';
        } else {
          out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';
        }
        out += ' , (dataPath || \'\')';
        if (it.errorPath != '""') {
          out += ' + ' + (it.errorPath);
        }
        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
        out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';
        var def_callRuleValidate = out;
        out = $$outStack.pop();
        if ($rDef.errors === false) {
          out += ' ' + ($valid) + ' = ';
          if ($asyncKeyword) {
            out += 'await ';
          }
          out += '' + (def_callRuleValidate) + '; ';
        } else {
          if ($asyncKeyword) {
            $ruleErrs = 'customErrors' + $lvl;
            out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = await ' + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';
          } else {
            out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';
          }
        }
      }
      if ($rDef.modifying) {
        out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';
      }
      out += '' + ($closingBraces);
      if ($rDef.valid) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
      } else {
        out += ' if ( ';
        if ($rDef.valid === undefined) {
          out += ' !';
          if ($macro) {
            out += '' + ($nextValid);
          } else {
            out += '' + ($valid);
          }
        } else {
          out += ' ' + (!$rDef.valid) + ' ';
        }
        out += ') { ';
        $errorKeyword = $rule.keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        var def_customError = out;
        out = $$outStack.pop();
        if ($inline) {
          if ($rDef.errors) {
            if ($rDef.errors != 'full') {
              out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
              if (it.opts.verbose) {
                out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
              }
              out += ' } ';
            }
          } else {
            if ($rDef.errors === false) {
              out += ' ' + (def_customError) + ' ';
            } else {
              out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
              if (it.opts.verbose) {
                out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
              }
              out += ' } } ';
            }
          }
        } else if ($macro) {
          out += '   var err =   '; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError(vErrors); ';
            } else {
              out += ' validate.errors = vErrors; return false; ';
            }
          }
        } else {
          if ($rDef.errors === false) {
            out += ' ' + (def_customError) + ' ';
          } else {
            out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '";  ';
            if (it.opts.verbose) {
              out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
            }
            out += ' } } else { ' + (def_customError) + ' } ';
          }
        }
        out += ' } ';
        if ($breakOnError) {
          out += ' else { ';
        }
      }
      return out;
    }
    
    },{}],23:[function(require,module,exports){
    'use strict';
    module.exports = function generate_dependencies(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      var $schemaDeps = {},
        $propertyDeps = {},
        $ownProperties = it.opts.ownProperties;
      for ($property in $schema) {
        var $sch = $schema[$property];
        var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
        $deps[$property] = $sch;
      }
      out += 'var ' + ($errs) + ' = errors;';
      var $currentErrorPath = it.errorPath;
      out += 'var missing' + ($lvl) + ';';
      for (var $property in $propertyDeps) {
        $deps = $propertyDeps[$property];
        if ($deps.length) {
          out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
          if ($ownProperties) {
            out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
          }
          if ($breakOnError) {
            out += ' && ( ';
            var arr1 = $deps;
            if (arr1) {
              var $propertyKey, $i = -1,
                l1 = arr1.length - 1;
              while ($i < l1) {
                $propertyKey = arr1[$i += 1];
                if ($i) {
                  out += ' || ';
                }
                var $prop = it.util.getProperty($propertyKey),
                  $useData = $data + $prop;
                out += ' ( ( ' + ($useData) + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                }
                out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
              }
            }
            out += ')) {  ';
            var $propertyPath = 'missing' + $lvl,
              $missingProperty = '\' + ' + $propertyPath + ' + \'';
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
            }
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should have ';
                if ($deps.length == 1) {
                  out += 'property ' + (it.util.escapeQuotes($deps[0]));
                } else {
                  out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                }
                out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
          } else {
            out += ' ) { ';
            var arr2 = $deps;
            if (arr2) {
              var $propertyKey, i2 = -1,
                l2 = arr2.length - 1;
              while (i2 < l2) {
                $propertyKey = arr2[i2 += 1];
                var $prop = it.util.getProperty($propertyKey),
                  $missingProperty = it.util.escapeQuotes($propertyKey),
                  $useData = $data + $prop;
                if (it.opts._errorDataPathProperty) {
                  it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                }
                out += ' if ( ' + ($useData) + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                }
                out += ') {  var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should have ';
                    if ($deps.length == 1) {
                      out += 'property ' + (it.util.escapeQuotes($deps[0]));
                    } else {
                      out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                    }
                    out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
              }
            }
          }
          out += ' }   ';
          if ($breakOnError) {
            $closingBraces += '}';
            out += ' else { ';
          }
        }
      }
      it.errorPath = $currentErrorPath;
      var $currentBaseId = $it.baseId;
      for (var $property in $schemaDeps) {
        var $sch = $schemaDeps[$property];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
          if ($ownProperties) {
            out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
          }
          out += ') { ';
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + it.util.getProperty($property);
          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
      if ($breakOnError) {
        out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
      }
      out = it.util.cleanUpCode(out);
      return out;
    }
    
    },{}],24:[function(require,module,exports){
    'use strict';
    module.exports = function generate_enum(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $i = 'i' + $lvl,
        $vSchema = 'schema' + $lvl;
      if (!$isData) {
        out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';
      }
      out += 'var ' + ($valid) + ';';
      if ($isData) {
        out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
      }
      out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';
      if ($isData) {
        out += '  }  ';
      }
      out += ' if (!' + ($valid) + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('enum') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should be equal to one of the allowed values\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' }';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],25:[function(require,module,exports){
    'use strict';
    module.exports = function generate_format(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      if (it.opts.format === false) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      }
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $unknownFormats = it.opts.unknownFormats,
        $allowUnknown = Array.isArray($unknownFormats);
      if ($isData) {
        var $format = 'format' + $lvl,
          $isObject = 'isObject' + $lvl,
          $formatType = 'formatType' + $lvl;
        out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \'object\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \'string\'; if (' + ($isObject) + ') { ';
        if (it.async) {
          out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';
        }
        out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';
        if ($isData) {
          out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
        }
        out += ' (';
        if ($unknownFormats != 'ignore') {
          out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';
          if ($allowUnknown) {
            out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';
          }
          out += ') || ';
        }
        out += ' (' + ($format) + ' && ' + ($formatType) + ' == \'' + ($ruleType) + '\' && !(typeof ' + ($format) + ' == \'function\' ? ';
        if (it.async) {
          out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';
        } else {
          out += ' ' + ($format) + '(' + ($data) + ') ';
        }
        out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';
      } else {
        var $format = it.formats[$schema];
        if (!$format) {
          if ($unknownFormats == 'ignore') {
            it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
            if ($breakOnError) {
              out += ' if (true) { ';
            }
            return out;
          } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
            if ($breakOnError) {
              out += ' if (true) { ';
            }
            return out;
          } else {
            throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
          }
        }
        var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
        var $formatType = $isObject && $format.type || 'string';
        if ($isObject) {
          var $async = $format.async === true;
          $format = $format.validate;
        }
        if ($formatType != $ruleType) {
          if ($breakOnError) {
            out += ' if (true) { ';
          }
          return out;
        }
        if ($async) {
          if (!it.async) throw new Error('async format in sync schema');
          var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
          out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';
        } else {
          out += ' if (! ';
          var $formatRef = 'formats' + it.util.getProperty($schema);
          if ($isObject) $formatRef += '.validate';
          if (typeof $format == 'function') {
            out += ' ' + ($formatRef) + '(' + ($data) + ') ';
          } else {
            out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';
          }
          out += ') { ';
        }
      }
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('format') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';
        if ($isData) {
          out += '' + ($schemaValue);
        } else {
          out += '' + (it.util.toQuotedString($schema));
        }
        out += '  } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should match format "';
          if ($isData) {
            out += '\' + ' + ($schemaValue) + ' + \'';
          } else {
            out += '' + (it.util.escapeQuotes($schema));
          }
          out += '"\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + (it.util.toQuotedString($schema));
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],26:[function(require,module,exports){
    'use strict';
    module.exports = function generate_if(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      var $thenSch = it.schema['then'],
        $elseSch = it.schema['else'],
        $thenPresent = $thenSch !== undefined && it.util.schemaHasRules($thenSch, it.RULES.all),
        $elsePresent = $elseSch !== undefined && it.util.schemaHasRules($elseSch, it.RULES.all),
        $currentBaseId = $it.baseId;
      if ($thenPresent || $elsePresent) {
        var $ifClause;
        $it.createErrors = false;
        $it.schema = $schema;
        $it.schemaPath = $schemaPath;
        $it.errSchemaPath = $errSchemaPath;
        out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = true;  ';
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        $it.createErrors = true;
        out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }  ';
        it.compositeRule = $it.compositeRule = $wasComposite;
        if ($thenPresent) {
          out += ' if (' + ($nextValid) + ') {  ';
          $it.schema = it.schema['then'];
          $it.schemaPath = it.schemaPath + '.then';
          $it.errSchemaPath = it.errSchemaPath + '/then';
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
          out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
          if ($thenPresent && $elsePresent) {
            $ifClause = 'ifClause' + $lvl;
            out += ' var ' + ($ifClause) + ' = \'then\'; ';
          } else {
            $ifClause = '\'then\'';
          }
          out += ' } ';
          if ($elsePresent) {
            out += ' else { ';
          }
        } else {
          out += ' if (!' + ($nextValid) + ') { ';
        }
        if ($elsePresent) {
          $it.schema = it.schema['else'];
          $it.schemaPath = it.schemaPath + '.else';
          $it.errSchemaPath = it.errSchemaPath + '/else';
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
          out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
          if ($thenPresent && $elsePresent) {
            $ifClause = 'ifClause' + $lvl;
            out += ' var ' + ($ifClause) + ' = \'else\'; ';
          } else {
            $ifClause = '\'else\'';
          }
          out += ' } ';
        }
        out += ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('if') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { failingKeyword: ' + ($ifClause) + ' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should match "\' + ' + ($ifClause) + ' + \'" schema\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError(vErrors); ';
          } else {
            out += ' validate.errors = vErrors; return false; ';
          }
        }
        out += ' }   ';
        if ($breakOnError) {
          out += ' else { ';
        }
        out = it.util.cleanUpCode(out);
      } else {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
      }
      return out;
    }
    
    },{}],27:[function(require,module,exports){
    'use strict';
    
    //all requires must be explicit because browserify won't work with dynamic requires
    module.exports = {
      '$ref': require('./ref'),
      allOf: require('./allOf'),
      anyOf: require('./anyOf'),
      '$comment': require('./comment'),
      const: require('./const'),
      contains: require('./contains'),
      dependencies: require('./dependencies'),
      'enum': require('./enum'),
      format: require('./format'),
      'if': require('./if'),
      items: require('./items'),
      maximum: require('./_limit'),
      minimum: require('./_limit'),
      maxItems: require('./_limitItems'),
      minItems: require('./_limitItems'),
      maxLength: require('./_limitLength'),
      minLength: require('./_limitLength'),
      maxProperties: require('./_limitProperties'),
      minProperties: require('./_limitProperties'),
      multipleOf: require('./multipleOf'),
      not: require('./not'),
      oneOf: require('./oneOf'),
      pattern: require('./pattern'),
      properties: require('./properties'),
      propertyNames: require('./propertyNames'),
      required: require('./required'),
      uniqueItems: require('./uniqueItems'),
      validate: require('./validate')
    };
    
    },{"./_limit":13,"./_limitItems":14,"./_limitLength":15,"./_limitProperties":16,"./allOf":17,"./anyOf":18,"./comment":19,"./const":20,"./contains":21,"./dependencies":23,"./enum":24,"./format":25,"./if":26,"./items":28,"./multipleOf":29,"./not":30,"./oneOf":31,"./pattern":32,"./properties":33,"./propertyNames":34,"./ref":35,"./required":36,"./uniqueItems":37,"./validate":38}],28:[function(require,module,exports){
    'use strict';
    module.exports = function generate_items(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      var $idx = 'i' + $lvl,
        $dataNxt = $it.dataLevel = it.dataLevel + 1,
        $nextData = 'data' + $dataNxt,
        $currentBaseId = it.baseId;
      out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
      if (Array.isArray($schema)) {
        var $additionalItems = it.schema.additionalItems;
        if ($additionalItems === false) {
          out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';
          var $currErrSchemaPath = $errSchemaPath;
          $errSchemaPath = it.errSchemaPath + '/additionalItems';
          out += '  if (!' + ($valid) + ') {   ';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('additionalItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } ';
          $errSchemaPath = $currErrSchemaPath;
          if ($breakOnError) {
            $closingBraces += '}';
            out += ' else { ';
          }
        }
        var arr1 = $schema;
        if (arr1) {
          var $sch, $i = -1,
            l1 = arr1.length - 1;
          while ($i < l1) {
            $sch = arr1[$i += 1];
            if (it.util.schemaHasRules($sch, it.RULES.all)) {
              out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
              var $passData = $data + '[' + $i + ']';
              $it.schema = $sch;
              $it.schemaPath = $schemaPath + '[' + $i + ']';
              $it.errSchemaPath = $errSchemaPath + '/' + $i;
              $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
              $it.dataPathArr[$dataNxt] = $i;
              var $code = it.validate($it);
              $it.baseId = $currentBaseId;
              if (it.util.varOccurences($code, $nextData) < 2) {
                out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
              } else {
                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
              }
              out += ' }  ';
              if ($breakOnError) {
                out += ' if (' + ($nextValid) + ') { ';
                $closingBraces += '}';
              }
            }
          }
        }
        if (typeof $additionalItems == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
          $it.schema = $additionalItems;
          $it.schemaPath = it.schemaPath + '.additionalItems';
          $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
          out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
          var $passData = $data + '[' + $idx + ']';
          $it.dataPathArr[$dataNxt] = $idx;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + ($nextValid) + ') break; ';
          }
          out += ' } }  ';
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      } else if (it.util.schemaHasRules($schema, it.RULES.all)) {
        $it.schema = $schema;
        $it.schemaPath = $schemaPath;
        $it.errSchemaPath = $errSchemaPath;
        out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
        $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
        var $passData = $data + '[' + $idx + ']';
        $it.dataPathArr[$dataNxt] = $idx;
        var $code = it.validate($it);
        $it.baseId = $currentBaseId;
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
        } else {
          out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
        }
        if ($breakOnError) {
          out += ' if (!' + ($nextValid) + ') break; ';
        }
        out += ' }';
      }
      if ($breakOnError) {
        out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
      }
      out = it.util.cleanUpCode(out);
      return out;
    }
    
    },{}],29:[function(require,module,exports){
    'use strict';
    module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      out += 'var division' + ($lvl) + ';if (';
      if ($isData) {
        out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \'number\' || ';
      }
      out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';
      if (it.opts.multipleOfPrecision) {
        out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';
      } else {
        out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';
      }
      out += ' ) ';
      if ($isData) {
        out += '  )  ';
      }
      out += ' ) {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('multipleOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should be multiple of ';
          if ($isData) {
            out += '\' + ' + ($schemaValue);
          } else {
            out += '' + ($schemaValue) + '\'';
          }
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + ($schema);
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += '} ';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],30:[function(require,module,exports){
    'use strict';
    module.exports = function generate_not(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      if (it.util.schemaHasRules($schema, it.RULES.all)) {
        $it.schema = $schema;
        $it.schemaPath = $schemaPath;
        $it.errSchemaPath = $errSchemaPath;
        out += ' var ' + ($errs) + ' = errors;  ';
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        $it.createErrors = false;
        var $allErrorsOption;
        if ($it.opts.allErrors) {
          $allErrorsOption = $it.opts.allErrors;
          $it.opts.allErrors = false;
        }
        out += ' ' + (it.validate($it)) + ' ';
        $it.createErrors = true;
        if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += ' if (' + ($nextValid) + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should NOT be valid\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
        if (it.opts.allErrors) {
          out += ' } ';
        }
      } else {
        out += '  var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should NOT be valid\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        if ($breakOnError) {
          out += ' if (false) { ';
        }
      }
      return out;
    }
    
    },{}],31:[function(require,module,exports){
    'use strict';
    module.exports = function generate_oneOf(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      var $currentBaseId = $it.baseId,
        $prevValid = 'prevValid' + $lvl,
        $passingSchemas = 'passingSchemas' + $lvl;
      out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          if (it.util.schemaHasRules($sch, it.RULES.all)) {
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + '[' + $i + ']';
            $it.errSchemaPath = $errSchemaPath + '/' + $i;
            out += '  ' + (it.validate($it)) + ' ';
            $it.baseId = $currentBaseId;
          } else {
            out += ' var ' + ($nextValid) + ' = true; ';
          }
          if ($i) {
            out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';
            $closingBraces += '}';
          }
          out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';
        }
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('oneOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should match exactly one schema in oneOf\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
      out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
      if (it.opts.allErrors) {
        out += ' } ';
      }
      return out;
    }
    
    },{}],32:[function(require,module,exports){
    'use strict';
    module.exports = function generate_pattern(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
      out += 'if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
      }
      out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('pattern') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';
        if ($isData) {
          out += '' + ($schemaValue);
        } else {
          out += '' + (it.util.toQuotedString($schema));
        }
        out += '  } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should match pattern "';
          if ($isData) {
            out += '\' + ' + ($schemaValue) + ' + \'';
          } else {
            out += '' + (it.util.escapeQuotes($schema));
          }
          out += '"\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + (it.util.toQuotedString($schema));
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += '} ';
      if ($breakOnError) {
        out += ' else { ';
      }
      return out;
    }
    
    },{}],33:[function(require,module,exports){
    'use strict';
    module.exports = function generate_properties(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      var $key = 'key' + $lvl,
        $idx = 'idx' + $lvl,
        $dataNxt = $it.dataLevel = it.dataLevel + 1,
        $nextData = 'data' + $dataNxt,
        $dataProperties = 'dataProperties' + $lvl;
      var $schemaKeys = Object.keys($schema || {}),
        $pProperties = it.schema.patternProperties || {},
        $pPropertyKeys = Object.keys($pProperties),
        $aProperties = it.schema.additionalProperties,
        $someProperties = $schemaKeys.length || $pPropertyKeys.length,
        $noAdditional = $aProperties === false,
        $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
        $removeAdditional = it.opts.removeAdditional,
        $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
        $ownProperties = it.opts.ownProperties,
        $currentBaseId = it.baseId;
      var $required = it.schema.required;
      if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
      out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';
      if ($ownProperties) {
        out += ' var ' + ($dataProperties) + ' = undefined;';
      }
      if ($checkAdditional) {
        if ($ownProperties) {
          out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
        } else {
          out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
        }
        if ($someProperties) {
          out += ' var isAdditional' + ($lvl) + ' = !(false ';
          if ($schemaKeys.length) {
            if ($schemaKeys.length > 8) {
              out += ' || validate.schema' + ($schemaPath) + '.hasOwnProperty(' + ($key) + ') ';
            } else {
              var arr1 = $schemaKeys;
              if (arr1) {
                var $propertyKey, i1 = -1,
                  l1 = arr1.length - 1;
                while (i1 < l1) {
                  $propertyKey = arr1[i1 += 1];
                  out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
                }
              }
            }
          }
          if ($pPropertyKeys.length) {
            var arr2 = $pPropertyKeys;
            if (arr2) {
              var $pProperty, $i = -1,
                l2 = arr2.length - 1;
              while ($i < l2) {
                $pProperty = arr2[$i += 1];
                out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';
              }
            }
          }
          out += ' ); if (isAdditional' + ($lvl) + ') { ';
        }
        if ($removeAdditional == 'all') {
          out += ' delete ' + ($data) + '[' + ($key) + ']; ';
        } else {
          var $currentErrorPath = it.errorPath;
          var $additionalProperty = '\' + ' + $key + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          }
          if ($noAdditional) {
            if ($removeAdditional) {
              out += ' delete ' + ($data) + '[' + ($key) + ']; ';
            } else {
              out += ' ' + ($nextValid) + ' = false; ';
              var $currErrSchemaPath = $errSchemaPath;
              $errSchemaPath = it.errSchemaPath + '/additionalProperties';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('additionalProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \'' + ($additionalProperty) + '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'';
                  if (it.opts._errorDataPathProperty) {
                    out += 'is an invalid additional property';
                  } else {
                    out += 'should NOT have additional properties';
                  }
                  out += '\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              $errSchemaPath = $currErrSchemaPath;
              if ($breakOnError) {
                out += ' break; ';
              }
            }
          } else if ($additionalIsSchema) {
            if ($removeAdditional == 'failing') {
              out += ' var ' + ($errs) + ' = errors;  ';
              var $wasComposite = it.compositeRule;
              it.compositeRule = $it.compositeRule = true;
              $it.schema = $aProperties;
              $it.schemaPath = it.schemaPath + '.additionalProperties';
              $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
              $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
              var $passData = $data + '[' + $key + ']';
              $it.dataPathArr[$dataNxt] = $key;
              var $code = it.validate($it);
              $it.baseId = $currentBaseId;
              if (it.util.varOccurences($code, $nextData) < 2) {
                out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
              } else {
                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
              }
              out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';
              it.compositeRule = $it.compositeRule = $wasComposite;
            } else {
              $it.schema = $aProperties;
              $it.schemaPath = it.schemaPath + '.additionalProperties';
              $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
              $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
              var $passData = $data + '[' + $key + ']';
              $it.dataPathArr[$dataNxt] = $key;
              var $code = it.validate($it);
              $it.baseId = $currentBaseId;
              if (it.util.varOccurences($code, $nextData) < 2) {
                out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
              } else {
                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
              }
              if ($breakOnError) {
                out += ' if (!' + ($nextValid) + ') break; ';
              }
            }
          }
          it.errorPath = $currentErrorPath;
        }
        if ($someProperties) {
          out += ' } ';
        }
        out += ' }  ';
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
      var $useDefaults = it.opts.useDefaults && !it.compositeRule;
      if ($schemaKeys.length) {
        var arr3 = $schemaKeys;
        if (arr3) {
          var $propertyKey, i3 = -1,
            l3 = arr3.length - 1;
          while (i3 < l3) {
            $propertyKey = arr3[i3 += 1];
            var $sch = $schema[$propertyKey];
            if (it.util.schemaHasRules($sch, it.RULES.all)) {
              var $prop = it.util.getProperty($propertyKey),
                $passData = $data + $prop,
                $hasDefault = $useDefaults && $sch.default !== undefined;
              $it.schema = $sch;
              $it.schemaPath = $schemaPath + $prop;
              $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
              $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
              $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
              var $code = it.validate($it);
              $it.baseId = $currentBaseId;
              if (it.util.varOccurences($code, $nextData) < 2) {
                $code = it.util.varReplace($code, $nextData, $passData);
                var $useData = $passData;
              } else {
                var $useData = $nextData;
                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
              }
              if ($hasDefault) {
                out += ' ' + ($code) + ' ';
              } else {
                if ($requiredHash && $requiredHash[$propertyKey]) {
                  out += ' if ( ' + ($useData) + ' === undefined ';
                  if ($ownProperties) {
                    out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                  }
                  out += ') { ' + ($nextValid) + ' = false; ';
                  var $currentErrorPath = it.errorPath,
                    $currErrSchemaPath = $errSchemaPath,
                    $missingProperty = it.util.escapeQuotes($propertyKey);
                  if (it.opts._errorDataPathProperty) {
                    it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                  }
                  $errSchemaPath = it.errSchemaPath + '/required';
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'';
                      if (it.opts._errorDataPathProperty) {
                        out += 'is a required property';
                      } else {
                        out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                      }
                      out += '\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + (__err) + ']); ';
                    } else {
                      out += ' validate.errors = [' + (__err) + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  $errSchemaPath = $currErrSchemaPath;
                  it.errorPath = $currentErrorPath;
                  out += ' } else { ';
                } else {
                  if ($breakOnError) {
                    out += ' if ( ' + ($useData) + ' === undefined ';
                    if ($ownProperties) {
                      out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                    }
                    out += ') { ' + ($nextValid) + ' = true; } else { ';
                  } else {
                    out += ' if (' + ($useData) + ' !== undefined ';
                    if ($ownProperties) {
                      out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                    }
                    out += ' ) { ';
                  }
                }
                out += ' ' + ($code) + ' } ';
              }
            }
            if ($breakOnError) {
              out += ' if (' + ($nextValid) + ') { ';
              $closingBraces += '}';
            }
          }
        }
      }
      if ($pPropertyKeys.length) {
        var arr4 = $pPropertyKeys;
        if (arr4) {
          var $pProperty, i4 = -1,
            l4 = arr4.length - 1;
          while (i4 < l4) {
            $pProperty = arr4[i4 += 1];
            var $sch = $pProperties[$pProperty];
            if (it.util.schemaHasRules($sch, it.RULES.all)) {
              $it.schema = $sch;
              $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
              $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
              if ($ownProperties) {
                out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
              } else {
                out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
              }
              out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';
              $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
              var $passData = $data + '[' + $key + ']';
              $it.dataPathArr[$dataNxt] = $key;
              var $code = it.validate($it);
              $it.baseId = $currentBaseId;
              if (it.util.varOccurences($code, $nextData) < 2) {
                out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
              } else {
                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
              }
              if ($breakOnError) {
                out += ' if (!' + ($nextValid) + ') break; ';
              }
              out += ' } ';
              if ($breakOnError) {
                out += ' else ' + ($nextValid) + ' = true; ';
              }
              out += ' }  ';
              if ($breakOnError) {
                out += ' if (' + ($nextValid) + ') { ';
                $closingBraces += '}';
              }
            }
          }
        }
      }
      if ($breakOnError) {
        out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
      }
      out = it.util.cleanUpCode(out);
      return out;
    }
    
    },{}],34:[function(require,module,exports){
    'use strict';
    module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $errs = 'errs__' + $lvl;
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      out += 'var ' + ($errs) + ' = errors;';
      if (it.util.schemaHasRules($schema, it.RULES.all)) {
        $it.schema = $schema;
        $it.schemaPath = $schemaPath;
        $it.errSchemaPath = $errSchemaPath;
        var $key = 'key' + $lvl,
          $idx = 'idx' + $lvl,
          $i = 'i' + $lvl,
          $invalidName = '\' + ' + $key + ' + \'',
          $dataNxt = $it.dataLevel = it.dataLevel + 1,
          $nextData = 'data' + $dataNxt,
          $dataProperties = 'dataProperties' + $lvl,
          $ownProperties = it.opts.ownProperties,
          $currentBaseId = it.baseId;
        if ($ownProperties) {
          out += ' var ' + ($dataProperties) + ' = undefined; ';
        }
        if ($ownProperties) {
          out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
        } else {
          out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
        }
        out += ' var startErrs' + ($lvl) + ' = errors; ';
        var $passData = $key;
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        var $code = it.validate($it);
        $it.baseId = $currentBaseId;
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
        } else {
          out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
        }
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('propertyNames') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \'' + ($invalidName) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'property name \\\'' + ($invalidName) + '\\\' is invalid\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError(vErrors); ';
          } else {
            out += ' validate.errors = vErrors; return false; ';
          }
        }
        if ($breakOnError) {
          out += ' break; ';
        }
        out += ' } }';
      }
      if ($breakOnError) {
        out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
      }
      out = it.util.cleanUpCode(out);
      return out;
    }
    
    },{}],35:[function(require,module,exports){
    'use strict';
    module.exports = function generate_ref(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $async, $refCode;
      if ($schema == '#' || $schema == '#/') {
        if (it.isRoot) {
          $async = it.async;
          $refCode = 'validate';
        } else {
          $async = it.root.schema.$async === true;
          $refCode = 'root.refVal[0]';
        }
      } else {
        var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
        if ($refVal === undefined) {
          var $message = it.MissingRefError.message(it.baseId, $schema);
          if (it.opts.missingRefs == 'fail') {
            it.logger.error($message);
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('$ref') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \'' + (it.util.escapeQuotes($schema)) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            if ($breakOnError) {
              out += ' if (false) { ';
            }
          } else if (it.opts.missingRefs == 'ignore') {
            it.logger.warn($message);
            if ($breakOnError) {
              out += ' if (true) { ';
            }
          } else {
            throw new it.MissingRefError(it.baseId, $schema, $message);
          }
        } else if ($refVal.inline) {
          var $it = it.util.copy(it);
          $it.level++;
          var $nextValid = 'valid' + $it.level;
          $it.schema = $refVal.schema;
          $it.schemaPath = '';
          $it.errSchemaPath = $schema;
          var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
          out += ' ' + ($code) + ' ';
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
          }
        } else {
          $async = $refVal.$async === true || (it.async && $refVal.$async !== false);
          $refCode = $refVal.code;
        }
      }
      if ($refCode) {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        if (it.opts.passContext) {
          out += ' ' + ($refCode) + '.call(this, ';
        } else {
          out += ' ' + ($refCode) + '( ';
        }
        out += ' ' + ($data) + ', (dataPath || \'\')';
        if (it.errorPath != '""') {
          out += ' + ' + (it.errorPath);
        }
        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
        out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';
        var __callValidate = out;
        out = $$outStack.pop();
        if ($async) {
          if (!it.async) throw new Error('async schema referenced by sync schema');
          if ($breakOnError) {
            out += ' var ' + ($valid) + '; ';
          }
          out += ' try { await ' + (__callValidate) + '; ';
          if ($breakOnError) {
            out += ' ' + ($valid) + ' = true; ';
          }
          out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
          if ($breakOnError) {
            out += ' ' + ($valid) + ' = false; ';
          }
          out += ' } ';
          if ($breakOnError) {
            out += ' if (' + ($valid) + ') { ';
          }
        } else {
          out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';
          if ($breakOnError) {
            out += ' else { ';
          }
        }
      }
      return out;
    }
    
    },{}],36:[function(require,module,exports){
    'use strict';
    module.exports = function generate_required(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      var $vSchema = 'schema' + $lvl;
      if (!$isData) {
        if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
          var $required = [];
          var arr1 = $schema;
          if (arr1) {
            var $property, i1 = -1,
              l1 = arr1.length - 1;
            while (i1 < l1) {
              $property = arr1[i1 += 1];
              var $propertySch = it.schema.properties[$property];
              if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
                $required[$required.length] = $property;
              }
            }
          }
        } else {
          var $required = $schema;
        }
      }
      if ($isData || $required.length) {
        var $currentErrorPath = it.errorPath,
          $loopRequired = $isData || $required.length >= it.opts.loopRequired,
          $ownProperties = it.opts.ownProperties;
        if ($breakOnError) {
          out += ' var missing' + ($lvl) + '; ';
          if ($loopRequired) {
            if (!$isData) {
              out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
            }
            var $i = 'i' + $lvl,
              $propertyPath = 'schema' + $lvl + '[' + $i + ']',
              $missingProperty = '\' + ' + $propertyPath + ' + \'';
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
            }
            out += ' var ' + ($valid) + ' = true; ';
            if ($isData) {
              out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
            }
            out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';
            if ($ownProperties) {
              out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
            }
            out += '; if (!' + ($valid) + ') break; } ';
            if ($isData) {
              out += '  }  ';
            }
            out += '  if (!' + ($valid) + ') {   ';
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += ' } else { ';
          } else {
            out += ' if ( ';
            var arr2 = $required;
            if (arr2) {
              var $propertyKey, $i = -1,
                l2 = arr2.length - 1;
              while ($i < l2) {
                $propertyKey = arr2[$i += 1];
                if ($i) {
                  out += ' || ';
                }
                var $prop = it.util.getProperty($propertyKey),
                  $useData = $data + $prop;
                out += ' ( ( ' + ($useData) + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                }
                out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
              }
            }
            out += ') {  ';
            var $propertyPath = 'missing' + $lvl,
              $missingProperty = '\' + ' + $propertyPath + ' + \'';
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
            }
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += ' } else { ';
          }
        } else {
          if ($loopRequired) {
            if (!$isData) {
              out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
            }
            var $i = 'i' + $lvl,
              $propertyPath = 'schema' + $lvl + '[' + $i + ']',
              $missingProperty = '\' + ' + $propertyPath + ' + \'';
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
            }
            if ($isData) {
              out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'';
                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                  }
                  out += '\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';
            }
            out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
            if ($isData) {
              out += '  }  ';
            }
          } else {
            var arr3 = $required;
            if (arr3) {
              var $propertyKey, i3 = -1,
                l3 = arr3.length - 1;
              while (i3 < l3) {
                $propertyKey = arr3[i3 += 1];
                var $prop = it.util.getProperty($propertyKey),
                  $missingProperty = it.util.escapeQuotes($propertyKey),
                  $useData = $data + $prop;
                if (it.opts._errorDataPathProperty) {
                  it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                }
                out += ' if ( ' + ($useData) + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                }
                out += ') {  var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'';
                    if (it.opts._errorDataPathProperty) {
                      out += 'is a required property';
                    } else {
                      out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                    }
                    out += '\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
              }
            }
          }
        }
        it.errorPath = $currentErrorPath;
      } else if ($breakOnError) {
        out += ' if (true) {';
      }
      return out;
    }
    
    },{}],37:[function(require,module,exports){
    'use strict';
    module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
      var out = ' ';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      var $isData = it.opts.$data && $schema && $schema.$data,
        $schemaValue;
      if ($isData) {
        out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
        $schemaValue = 'schema' + $lvl;
      } else {
        $schemaValue = $schema;
      }
      if (($schema || $isData) && it.opts.uniqueItems !== false) {
        if ($isData) {
          out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'boolean\') ' + ($valid) + ' = false; else { ';
        }
        out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) { ';
        var $itemType = it.schema.items && it.schema.items.type,
          $typeIsArray = Array.isArray($itemType);
        if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) {
          out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } ';
        } else {
          out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + ($data) + '[i]; ';
          var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
          out += ' if (' + (it.util[$method]($itemType, 'item', true)) + ') continue; ';
          if ($typeIsArray) {
            out += ' if (typeof item == \'string\') item = \'"\' + item; ';
          }
          out += ' if (typeof itemIndices[item] == \'number\') { ' + ($valid) + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
        }
        out += ' } ';
        if ($isData) {
          out += '  }  ';
        }
        out += ' if (!' + ($valid) + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema:  ';
            if ($isData) {
              out += 'validate.schema' + ($schemaPath);
            } else {
              out += '' + ($schema);
            }
            out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } ';
        if ($breakOnError) {
          out += ' else { ';
        }
      } else {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
      }
      return out;
    }
    
    },{}],38:[function(require,module,exports){
    'use strict';
    module.exports = function generate_validate(it, $keyword, $ruleType) {
      var out = '';
      var $async = it.schema.$async === true,
        $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
        $id = it.self._getId(it.schema);
      if (it.opts.strictKeywords) {
        var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
        if ($unknownKwd) {
          var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
          if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);
          else throw new Error($keywordsMsg);
        }
      }
      if (it.isTop) {
        out += ' var validate = ';
        if ($async) {
          it.async = true;
          out += 'async ';
        }
        out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';
        if ($id && (it.opts.sourceCode || it.opts.processCode)) {
          out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
        }
      }
      if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
        var $keyword = 'false schema';
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = 'data' + ($dataLvl || '');
        var $valid = 'valid' + $lvl;
        if (it.schema === false) {
          if (it.isTop) {
            $breakOnError = true;
          } else {
            out += ' var ' + ($valid) + ' = false; ';
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
            if (it.opts.messages !== false) {
              out += ' , message: \'boolean schema is false\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
        } else {
          if (it.isTop) {
            if ($async) {
              out += ' return data; ';
            } else {
              out += ' validate.errors = null; return true; ';
            }
          } else {
            out += ' var ' + ($valid) + ' = true; ';
          }
        }
        if (it.isTop) {
          out += ' }; return validate; ';
        }
        return out;
      }
      if (it.isTop) {
        var $top = it.isTop,
          $lvl = it.level = 0,
          $dataLvl = it.dataLevel = 0,
          $data = 'data';
        it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
        it.baseId = it.baseId || it.rootId;
        delete it.isTop;
        it.dataPathArr = [undefined];
        if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
          var $defaultMsg = 'default is ignored in the schema root';
          if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
          else throw new Error($defaultMsg);
        }
        out += ' var vErrors = null; ';
        out += ' var errors = 0;     ';
        out += ' if (rootData === undefined) rootData = data; ';
      } else {
        var $lvl = it.level,
          $dataLvl = it.dataLevel,
          $data = 'data' + ($dataLvl || '');
        if ($id) it.baseId = it.resolve.url(it.baseId, $id);
        if ($async && !it.async) throw new Error('async schema in sync schema');
        out += ' var errs_' + ($lvl) + ' = errors;';
      }
      var $valid = 'valid' + $lvl,
        $breakOnError = !it.opts.allErrors,
        $closingBraces1 = '',
        $closingBraces2 = '';
      var $errorKeyword;
      var $typeSchema = it.schema.type,
        $typeIsArray = Array.isArray($typeSchema);
      if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
        if ($typeIsArray) {
          if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
        } else if ($typeSchema != 'null') {
          $typeSchema = [$typeSchema, 'null'];
          $typeIsArray = true;
        }
      }
      if ($typeIsArray && $typeSchema.length == 1) {
        $typeSchema = $typeSchema[0];
        $typeIsArray = false;
      }
      if (it.schema.$ref && $refKeywords) {
        if (it.opts.extendRefs == 'fail') {
          throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
        } else if (it.opts.extendRefs !== true) {
          $refKeywords = false;
          it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
        }
      }
      if (it.schema.$comment && it.opts.$comment) {
        out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));
      }
      if ($typeSchema) {
        if (it.opts.coerceTypes) {
          var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
        }
        var $rulesGroup = it.RULES.types[$typeSchema];
        if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
          var $schemaPath = it.schemaPath + '.type',
            $errSchemaPath = it.errSchemaPath + '/type';
          var $schemaPath = it.schemaPath + '.type',
            $errSchemaPath = it.errSchemaPath + '/type',
            $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
          out += ' if (' + (it.util[$method]($typeSchema, $data, true)) + ') { ';
          if ($coerceToTypes) {
            var $dataType = 'dataType' + $lvl,
              $coerced = 'coerced' + $lvl;
            out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; ';
            if (it.opts.coerceTypes == 'array') {
              out += ' if (' + ($dataType) + ' == \'object\' && Array.isArray(' + ($data) + ')) ' + ($dataType) + ' = \'array\'; ';
            }
            out += ' var ' + ($coerced) + ' = undefined; ';
            var $bracesCoercion = '';
            var arr1 = $coerceToTypes;
            if (arr1) {
              var $type, $i = -1,
                l1 = arr1.length - 1;
              while ($i < l1) {
                $type = arr1[$i += 1];
                if ($i) {
                  out += ' if (' + ($coerced) + ' === undefined) { ';
                  $bracesCoercion += '}';
                }
                if (it.opts.coerceTypes == 'array' && $type != 'array') {
                  out += ' if (' + ($dataType) + ' == \'array\' && ' + ($data) + '.length == 1) { ' + ($coerced) + ' = ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + ';  } ';
                }
                if ($type == 'string') {
                  out += ' if (' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\') ' + ($coerced) + ' = \'\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \'\'; ';
                } else if ($type == 'number' || $type == 'integer') {
                  out += ' if (' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \'string\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';
                  if ($type == 'integer') {
                    out += ' && !(' + ($data) + ' % 1)';
                  }
                  out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';
                } else if ($type == 'boolean') {
                  out += ' if (' + ($data) + ' === \'false\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \'true\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';
                } else if ($type == 'null') {
                  out += ' if (' + ($data) + ' === \'\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';
                } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
                  out += ' if (' + ($dataType) + ' == \'string\' || ' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';
                }
              }
            }
            out += ' ' + ($bracesCoercion) + ' if (' + ($coerced) + ' === undefined) {   ';
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
              if ($typeIsArray) {
                out += '' + ($typeSchema.join(","));
              } else {
                out += '' + ($typeSchema);
              }
              out += '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should be ';
                if ($typeIsArray) {
                  out += '' + ($typeSchema.join(","));
                } else {
                  out += '' + ($typeSchema);
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += ' } else {  ';
            var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
              $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
            out += ' ' + ($data) + ' = ' + ($coerced) + '; ';
            if (!$dataLvl) {
              out += 'if (' + ($parentData) + ' !== undefined)';
            }
            out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';
          } else {
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
              if ($typeIsArray) {
                out += '' + ($typeSchema.join(","));
              } else {
                out += '' + ($typeSchema);
              }
              out += '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should be ';
                if ($typeIsArray) {
                  out += '' + ($typeSchema.join(","));
                } else {
                  out += '' + ($typeSchema);
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
          }
          out += ' } ';
        }
      }
      if (it.schema.$ref && !$refKeywords) {
        out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';
        if ($breakOnError) {
          out += ' } if (errors === ';
          if ($top) {
            out += '0';
          } else {
            out += 'errs_' + ($lvl);
          }
          out += ') { ';
          $closingBraces2 += '}';
        }
      } else {
        var arr2 = it.RULES;
        if (arr2) {
          var $rulesGroup, i2 = -1,
            l2 = arr2.length - 1;
          while (i2 < l2) {
            $rulesGroup = arr2[i2 += 1];
            if ($shouldUseGroup($rulesGroup)) {
              if ($rulesGroup.type) {
                out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data)) + ') { ';
              }
              if (it.opts.useDefaults) {
                if ($rulesGroup.type == 'object' && it.schema.properties) {
                  var $schema = it.schema.properties,
                    $schemaKeys = Object.keys($schema);
                  var arr3 = $schemaKeys;
                  if (arr3) {
                    var $propertyKey, i3 = -1,
                      l3 = arr3.length - 1;
                    while (i3 < l3) {
                      $propertyKey = arr3[i3 += 1];
                      var $sch = $schema[$propertyKey];
                      if ($sch.default !== undefined) {
                        var $passData = $data + it.util.getProperty($propertyKey);
                        if (it.compositeRule) {
                          if (it.opts.strictDefaults) {
                            var $defaultMsg = 'default is ignored for: ' + $passData;
                            if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                            else throw new Error($defaultMsg);
                          }
                        } else {
                          out += ' if (' + ($passData) + ' === undefined ';
                          if (it.opts.useDefaults == 'empty') {
                            out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                          }
                          out += ' ) ' + ($passData) + ' = ';
                          if (it.opts.useDefaults == 'shared') {
                            out += ' ' + (it.useDefault($sch.default)) + ' ';
                          } else {
                            out += ' ' + (JSON.stringify($sch.default)) + ' ';
                          }
                          out += '; ';
                        }
                      }
                    }
                  }
                } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
                  var arr4 = it.schema.items;
                  if (arr4) {
                    var $sch, $i = -1,
                      l4 = arr4.length - 1;
                    while ($i < l4) {
                      $sch = arr4[$i += 1];
                      if ($sch.default !== undefined) {
                        var $passData = $data + '[' + $i + ']';
                        if (it.compositeRule) {
                          if (it.opts.strictDefaults) {
                            var $defaultMsg = 'default is ignored for: ' + $passData;
                            if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                            else throw new Error($defaultMsg);
                          }
                        } else {
                          out += ' if (' + ($passData) + ' === undefined ';
                          if (it.opts.useDefaults == 'empty') {
                            out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                          }
                          out += ' ) ' + ($passData) + ' = ';
                          if (it.opts.useDefaults == 'shared') {
                            out += ' ' + (it.useDefault($sch.default)) + ' ';
                          } else {
                            out += ' ' + (JSON.stringify($sch.default)) + ' ';
                          }
                          out += '; ';
                        }
                      }
                    }
                  }
                }
              }
              var arr5 = $rulesGroup.rules;
              if (arr5) {
                var $rule, i5 = -1,
                  l5 = arr5.length - 1;
                while (i5 < l5) {
                  $rule = arr5[i5 += 1];
                  if ($shouldUseRule($rule)) {
                    var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                    if ($code) {
                      out += ' ' + ($code) + ' ';
                      if ($breakOnError) {
                        $closingBraces1 += '}';
                      }
                    }
                  }
                }
              }
              if ($breakOnError) {
                out += ' ' + ($closingBraces1) + ' ';
                $closingBraces1 = '';
              }
              if ($rulesGroup.type) {
                out += ' } ';
                if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                  out += ' else { ';
                  var $schemaPath = it.schemaPath + '.type',
                    $errSchemaPath = it.errSchemaPath + '/type';
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                    if ($typeIsArray) {
                      out += '' + ($typeSchema.join(","));
                    } else {
                      out += '' + ($typeSchema);
                    }
                    out += '\' } ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should be ';
                      if ($typeIsArray) {
                        out += '' + ($typeSchema.join(","));
                      } else {
                        out += '' + ($typeSchema);
                      }
                      out += '\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + (__err) + ']); ';
                    } else {
                      out += ' validate.errors = [' + (__err) + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  out += ' } ';
                }
              }
              if ($breakOnError) {
                out += ' if (errors === ';
                if ($top) {
                  out += '0';
                } else {
                  out += 'errs_' + ($lvl);
                }
                out += ') { ';
                $closingBraces2 += '}';
              }
            }
          }
        }
      }
      if ($breakOnError) {
        out += ' ' + ($closingBraces2) + ' ';
      }
      if ($top) {
        if ($async) {
          out += ' if (errors === 0) return data;           ';
          out += ' else throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; ';
          out += ' return errors === 0;       ';
        }
        out += ' }; return validate;';
      } else {
        out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
      }
      out = it.util.cleanUpCode(out);
      if ($top) {
        out = it.util.finalCleanUpCode(out, $async);
      }
    
      function $shouldUseGroup($rulesGroup) {
        var rules = $rulesGroup.rules;
        for (var i = 0; i < rules.length; i++)
          if ($shouldUseRule(rules[i])) return true;
      }
    
      function $shouldUseRule($rule) {
        return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));
      }
    
      function $ruleImplementsSomeKeyword($rule) {
        var impl = $rule.implements;
        for (var i = 0; i < impl.length; i++)
          if (it.schema[impl[i]] !== undefined) return true;
      }
      return out;
    }
    
    },{}],39:[function(require,module,exports){
    'use strict';
    
    var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
    var customRuleCode = require('./dotjs/custom');
    var metaSchema = require('./refs/json-schema-draft-07.json');
    
    module.exports = {
      add: addKeyword,
      get: getKeyword,
      remove: removeKeyword,
      validate: validateKeyword
    };
    
    var definitionSchema = {
      definitions: {
        simpleTypes: metaSchema.definitions.simpleTypes
      },
      type: 'object',
      dependencies: {
        schema: ['validate'],
        $data: ['validate'],
        statements: ['inline'],
        valid: {not: {required: ['macro']}}
      },
      properties: {
        type: metaSchema.properties.type,
        schema: {type: 'boolean'},
        statements: {type: 'boolean'},
        dependencies: {
          type: 'array',
          items: {type: 'string'}
        },
        metaSchema: {type: 'object'},
        modifying: {type: 'boolean'},
        valid: {type: 'boolean'},
        $data: {type: 'boolean'},
        async: {type: 'boolean'},
        errors: {
          anyOf: [
            {type: 'boolean'},
            {const: 'full'}
          ]
        }
      }
    };
    
    /**
     * Define custom keyword
     * @this  Ajv
     * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
     * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
     * @return {Ajv} this for method chaining
     */
    function addKeyword(keyword, definition) {
      /* jshint validthis: true */
      /* eslint no-shadow: 0 */
      var RULES = this.RULES;
      if (RULES.keywords[keyword])
        throw new Error('Keyword ' + keyword + ' is already defined');
    
      if (!IDENTIFIER.test(keyword))
        throw new Error('Keyword ' + keyword + ' is not a valid identifier');
    
      if (definition) {
        this.validateKeyword(definition, true);
    
        var dataType = definition.type;
        if (Array.isArray(dataType)) {
          for (var i=0; i<dataType.length; i++)
            _addRule(keyword, dataType[i], definition);
        } else {
          _addRule(keyword, dataType, definition);
        }
    
        var metaSchema = definition.metaSchema;
        if (metaSchema) {
          if (definition.$data && this._opts.$data) {
            metaSchema = {
              anyOf: [
                metaSchema,
                { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }
              ]
            };
          }
          definition.validateSchema = this.compile(metaSchema, true);
        }
      }
    
      RULES.keywords[keyword] = RULES.all[keyword] = true;
    
    
      function _addRule(keyword, dataType, definition) {
        var ruleGroup;
        for (var i=0; i<RULES.length; i++) {
          var rg = RULES[i];
          if (rg.type == dataType) {
            ruleGroup = rg;
            break;
          }
        }
    
        if (!ruleGroup) {
          ruleGroup = { type: dataType, rules: [] };
          RULES.push(ruleGroup);
        }
    
        var rule = {
          keyword: keyword,
          definition: definition,
          custom: true,
          code: customRuleCode,
          implements: definition.implements
        };
        ruleGroup.rules.push(rule);
        RULES.custom[keyword] = rule;
      }
    
      return this;
    }
    
    
    /**
     * Get keyword
     * @this  Ajv
     * @param {String} keyword pre-defined or custom keyword.
     * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
     */
    function getKeyword(keyword) {
      /* jshint validthis: true */
      var rule = this.RULES.custom[keyword];
      return rule ? rule.definition : this.RULES.keywords[keyword] || false;
    }
    
    
    /**
     * Remove keyword
     * @this  Ajv
     * @param {String} keyword pre-defined or custom keyword.
     * @return {Ajv} this for method chaining
     */
    function removeKeyword(keyword) {
      /* jshint validthis: true */
      var RULES = this.RULES;
      delete RULES.keywords[keyword];
      delete RULES.all[keyword];
      delete RULES.custom[keyword];
      for (var i=0; i<RULES.length; i++) {
        var rules = RULES[i].rules;
        for (var j=0; j<rules.length; j++) {
          if (rules[j].keyword == keyword) {
            rules.splice(j, 1);
            break;
          }
        }
      }
      return this;
    }
    
    
    /**
     * Validate keyword definition
     * @this  Ajv
     * @param {Object} definition keyword definition object.
     * @param {Boolean} throwError true to throw exception if definition is invalid
     * @return {boolean} validation result
     */
    function validateKeyword(definition, throwError) {
      validateKeyword.errors = null;
      var v = this._validateKeyword = this._validateKeyword
                                      || this.compile(definitionSchema, true);
    
      if (v(definition)) return true;
      validateKeyword.errors = v.errors;
      if (throwError)
        throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));
      else
        return false;
    }
    
    },{"./dotjs/custom":22,"./refs/json-schema-draft-07.json":41}],40:[function(require,module,exports){
    module.exports={
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$id": "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#",
        "description": "Meta-schema for $data reference (JSON Schema extension proposal)",
        "type": "object",
        "required": [ "$data" ],
        "properties": {
            "$data": {
                "type": "string",
                "anyOf": [
                    { "format": "relative-json-pointer" }, 
                    { "format": "json-pointer" }
                ]
            }
        },
        "additionalProperties": false
    }
    
    },{}],41:[function(require,module,exports){
    module.exports={
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$id": "http://json-schema.org/draft-07/schema#",
        "title": "Core schema meta-schema",
        "definitions": {
            "schemaArray": {
                "type": "array",
                "minItems": 1,
                "items": { "$ref": "#" }
            },
            "nonNegativeInteger": {
                "type": "integer",
                "minimum": 0
            },
            "nonNegativeIntegerDefault0": {
                "allOf": [
                    { "$ref": "#/definitions/nonNegativeInteger" },
                    { "default": 0 }
                ]
            },
            "simpleTypes": {
                "enum": [
                    "array",
                    "boolean",
                    "integer",
                    "null",
                    "number",
                    "object",
                    "string"
                ]
            },
            "stringArray": {
                "type": "array",
                "items": { "type": "string" },
                "uniqueItems": true,
                "default": []
            }
        },
        "type": ["object", "boolean"],
        "properties": {
            "$id": {
                "type": "string",
                "format": "uri-reference"
            },
            "$schema": {
                "type": "string",
                "format": "uri"
            },
            "$ref": {
                "type": "string",
                "format": "uri-reference"
            },
            "$comment": {
                "type": "string"
            },
            "title": {
                "type": "string"
            },
            "description": {
                "type": "string"
            },
            "default": true,
            "readOnly": {
                "type": "boolean",
                "default": false
            },
            "examples": {
                "type": "array",
                "items": true
            },
            "multipleOf": {
                "type": "number",
                "exclusiveMinimum": 0
            },
            "maximum": {
                "type": "number"
            },
            "exclusiveMaximum": {
                "type": "number"
            },
            "minimum": {
                "type": "number"
            },
            "exclusiveMinimum": {
                "type": "number"
            },
            "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },
            "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
            "pattern": {
                "type": "string",
                "format": "regex"
            },
            "additionalItems": { "$ref": "#" },
            "items": {
                "anyOf": [
                    { "$ref": "#" },
                    { "$ref": "#/definitions/schemaArray" }
                ],
                "default": true
            },
            "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },
            "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
            "uniqueItems": {
                "type": "boolean",
                "default": false
            },
            "contains": { "$ref": "#" },
            "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },
            "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
            "required": { "$ref": "#/definitions/stringArray" },
            "additionalProperties": { "$ref": "#" },
            "definitions": {
                "type": "object",
                "additionalProperties": { "$ref": "#" },
                "default": {}
            },
            "properties": {
                "type": "object",
                "additionalProperties": { "$ref": "#" },
                "default": {}
            },
            "patternProperties": {
                "type": "object",
                "additionalProperties": { "$ref": "#" },
                "propertyNames": { "format": "regex" },
                "default": {}
            },
            "dependencies": {
                "type": "object",
                "additionalProperties": {
                    "anyOf": [
                        { "$ref": "#" },
                        { "$ref": "#/definitions/stringArray" }
                    ]
                }
            },
            "propertyNames": { "$ref": "#" },
            "const": true,
            "enum": {
                "type": "array",
                "items": true,
                "minItems": 1,
                "uniqueItems": true
            },
            "type": {
                "anyOf": [
                    { "$ref": "#/definitions/simpleTypes" },
                    {
                        "type": "array",
                        "items": { "$ref": "#/definitions/simpleTypes" },
                        "minItems": 1,
                        "uniqueItems": true
                    }
                ]
            },
            "format": { "type": "string" },
            "contentMediaType": { "type": "string" },
            "contentEncoding": { "type": "string" },
            "if": {"$ref": "#"},
            "then": {"$ref": "#"},
            "else": {"$ref": "#"},
            "allOf": { "$ref": "#/definitions/schemaArray" },
            "anyOf": { "$ref": "#/definitions/schemaArray" },
            "oneOf": { "$ref": "#/definitions/schemaArray" },
            "not": { "$ref": "#" }
        },
        "default": true
    }
    
    },{}],42:[function(require,module,exports){
    module.exports = require('./register')().Promise
    
    },{"./register":44}],43:[function(require,module,exports){
    "use strict"
        // global key for user preferred registration
    var REGISTRATION_KEY = '@@any-promise/REGISTRATION',
        // Prior registration (preferred or detected)
        registered = null
    
    /**
     * Registers the given implementation.  An implementation must
     * be registered prior to any call to `require("any-promise")`,
     * typically on application load.
     *
     * If called with no arguments, will return registration in
     * following priority:
     *
     * For Node.js:
     *
     * 1. Previous registration
     * 2. global.Promise if node.js version >= 0.12
     * 3. Auto detected promise based on first sucessful require of
     *    known promise libraries. Note this is a last resort, as the
     *    loaded library is non-deterministic. node.js >= 0.12 will
     *    always use global.Promise over this priority list.
     * 4. Throws error.
     *
     * For Browser:
     *
     * 1. Previous registration
     * 2. window.Promise
     * 3. Throws error.
     *
     * Options:
     *
     * Promise: Desired Promise constructor
     * global: Boolean - Should the registration be cached in a global variable to
     * allow cross dependency/bundle registration?  (default true)
     */
    module.exports = function(root, loadImplementation){
      return function register(implementation, opts){
        implementation = implementation || null
        opts = opts || {}
        // global registration unless explicitly  {global: false} in options (default true)
        var registerGlobal = opts.global !== false;
    
        // load any previous global registration
        if(registered === null && registerGlobal){
          registered = root[REGISTRATION_KEY] || null
        }
    
        if(registered !== null
            && implementation !== null
            && registered.implementation !== implementation){
          // Throw error if attempting to redefine implementation
          throw new Error('any-promise already defined as "'+registered.implementation+
            '".  You can only register an implementation before the first '+
            ' call to require("any-promise") and an implementation cannot be changed')
        }
    
        if(registered === null){
          // use provided implementation
          if(implementation !== null && typeof opts.Promise !== 'undefined'){
            registered = {
              Promise: opts.Promise,
              implementation: implementation
            }
          } else {
            // require implementation if implementation is specified but not provided
            registered = loadImplementation(implementation)
          }
    
          if(registerGlobal){
            // register preference globally in case multiple installations
            root[REGISTRATION_KEY] = registered
          }
        }
    
        return registered
      }
    }
    
    },{}],44:[function(require,module,exports){
    "use strict";
    module.exports = require('./loader')(window, loadImplementation)
    
    /**
     * Browser specific loadImplementation.  Always uses `window.Promise`
     *
     * To register a custom implementation, must register with `Promise` option.
     */
    function loadImplementation(){
      if(typeof window.Promise === 'undefined'){
        throw new Error("any-promise browser requires a polyfill or explicit registration"+
          " e.g: require('any-promise/register/bluebird')")
      }
      return {
        Promise: window.Promise,
        implementation: 'window.Promise'
      }
    }
    
    },{"./loader":43}],45:[function(require,module,exports){
    var asn1 = exports;
    
    asn1.bignum = require('bn.js');
    
    asn1.define = require('./asn1/api').define;
    asn1.base = require('./asn1/base');
    asn1.constants = require('./asn1/constants');
    asn1.decoders = require('./asn1/decoders');
    asn1.encoders = require('./asn1/encoders');
    
    },{"./asn1/api":46,"./asn1/base":48,"./asn1/constants":52,"./asn1/decoders":54,"./asn1/encoders":57,"bn.js":61}],46:[function(require,module,exports){
    var asn1 = require('../asn1');
    var inherits = require('inherits');
    
    var api = exports;
    
    api.define = function define(name, body) {
      return new Entity(name, body);
    };
    
    function Entity(name, body) {
      this.name = name;
      this.body = body;
    
      this.decoders = {};
      this.encoders = {};
    };
    
    Entity.prototype._createNamed = function createNamed(base) {
      var named;
      try {
        named = require('vm').runInThisContext(
          '(function ' + this.name + '(entity) {\n' +
          '  this._initNamed(entity);\n' +
          '})'
        );
      } catch (e) {
        named = function (entity) {
          this._initNamed(entity);
        };
      }
      inherits(named, base);
      named.prototype._initNamed = function initnamed(entity) {
        base.call(this, entity);
      };
    
      return new named(this);
    };
    
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || 'der';
      // Lazily create decoder
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
      return this.decoders[enc];
    };
    
    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };
    
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || 'der';
      // Lazily create encoder
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
      return this.encoders[enc];
    };
    
    Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
    
    },{"../asn1":45,"inherits":199,"vm":309}],47:[function(require,module,exports){
    var inherits = require('inherits');
    var Reporter = require('../base').Reporter;
    var Buffer = require('buffer').Buffer;
    
    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
      }
    
      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;
    
    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
    };
    
    DecoderBuffer.prototype.restore = function restore(save) {
      // Return skipped data
      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
    
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
    
      return res;
    };
    
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || 'DecoderBuffer overrun');
    }
    
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || 'DecoderBuffer overrun');
    
      var res = new DecoderBuffer(this.base);
    
      // Share reporter state
      res._reporterState = this._reporterState;
    
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    }
    
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    }
    
    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!(item instanceof EncoderBuffer))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff))
          return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
      } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error('Unsupported type: ' + typeof value);
      }
    }
    exports.EncoderBuffer = EncoderBuffer;
    
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = new Buffer(this.length);
      if (!offset)
        offset = 0;
    
      if (this.length === 0)
        return out;
    
      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === 'number')
          out[offset] = this.value;
        else if (typeof this.value === 'string')
          out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }
    
      return out;
    };
    
    },{"../base":48,"buffer":96,"inherits":199}],48:[function(require,module,exports){
    var base = exports;
    
    base.Reporter = require('./reporter').Reporter;
    base.DecoderBuffer = require('./buffer').DecoderBuffer;
    base.EncoderBuffer = require('./buffer').EncoderBuffer;
    base.Node = require('./node');
    
    },{"./buffer":47,"./node":49,"./reporter":50}],49:[function(require,module,exports){
    var Reporter = require('../base').Reporter;
    var EncoderBuffer = require('../base').EncoderBuffer;
    var DecoderBuffer = require('../base').DecoderBuffer;
    var assert = require('minimalistic-assert');
    
    // Supported tags
    var tags = [
      'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
      'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
      'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
      'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
    ];
    
    // Public methods list
    var methods = [
      'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
      'any', 'contains'
    ].concat(tags);
    
    // Overrided methods list
    var overrided = [
      '_peekTag', '_decodeTag', '_use',
      '_decodeStr', '_decodeObjid', '_decodeTime',
      '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',
    
      '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
      '_encodeNull', '_encodeInt', '_encodeBool'
    ];
    
    function Node(enc, parent) {
      var state = {};
      this._baseState = state;
    
      state.enc = enc;
    
      state.parent = parent || null;
      state.children = null;
    
      // State
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state['default'] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
    
      // Should create new instance on each method
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module.exports = Node;
    
    var stateProps = [
      'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
      'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
      'implicit', 'contains'
    ];
    
    Node.prototype.clone = function clone() {
      var state = this._baseState;
      var cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
      });
      var res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    
    Node.prototype._wrap = function wrap() {
      var state = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          var clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };
    
    Node.prototype._init = function init(body) {
      var state = this._baseState;
    
      assert(state.parent === null);
      body.call(this);
    
      // Filter children
      state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, 'Root node can have only one child');
    };
    
    Node.prototype._useArgs = function useArgs(args) {
      var state = this._baseState;
    
      // Filter children and args
      var children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);
    
      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
    
        // Replace parent to maintain backward link
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
          if (typeof arg !== 'object' || arg.constructor !== Object)
            return arg;
    
          var res = {};
          Object.keys(arg).forEach(function(key) {
            if (key == (key | 0))
              key |= 0;
            var value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };
    
    //
    // Overrided methods
    //
    
    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        var state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
      };
    });
    
    //
    // Public methods
    //
    
    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);
    
        assert(state.tag === null);
        state.tag = tag;
    
        this._useArgs(args);
    
        return this;
      };
    });
    
    Node.prototype.use = function use(item) {
      assert(item);
      var state = this._baseState;
    
      assert(state.use === null);
      state.use = item;
    
      return this;
    };
    
    Node.prototype.optional = function optional() {
      var state = this._baseState;
    
      state.optional = true;
    
      return this;
    };
    
    Node.prototype.def = function def(val) {
      var state = this._baseState;
    
      assert(state['default'] === null);
      state['default'] = val;
      state.optional = true;
    
      return this;
    };
    
    Node.prototype.explicit = function explicit(num) {
      var state = this._baseState;
    
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
    
      return this;
    };
    
    Node.prototype.implicit = function implicit(num) {
      var state = this._baseState;
    
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
    
      return this;
    };
    
    Node.prototype.obj = function obj() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);
    
      state.obj = true;
    
      if (args.length !== 0)
        this._useArgs(args);
    
      return this;
    };
    
    Node.prototype.key = function key(newKey) {
      var state = this._baseState;
    
      assert(state.key === null);
      state.key = newKey;
    
      return this;
    };
    
    Node.prototype.any = function any() {
      var state = this._baseState;
    
      state.any = true;
    
      return this;
    };
    
    Node.prototype.choice = function choice(obj) {
      var state = this._baseState;
    
      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
      }));
    
      return this;
    };
    
    Node.prototype.contains = function contains(item) {
      var state = this._baseState;
    
      assert(state.use === null);
      state.contains = item;
    
      return this;
    };
    
    //
    // Decoding
    //
    
    Node.prototype._decode = function decode(input, options) {
      var state = this._baseState;
    
      // Decode root node
      if (state.parent === null)
        return input.wrapResult(state.children[0]._decode(input, options));
    
      var result = state['default'];
      var present = true;
    
      var prevKey = null;
      if (state.key !== null)
        prevKey = input.enterKey(state.key);
    
      // Check if tag is there
      if (state.optional) {
        var tag = null;
        if (state.explicit !== null)
          tag = state.explicit;
        else if (state.implicit !== null)
          tag = state.implicit;
        else if (state.tag !== null)
          tag = state.tag;
    
        if (tag === null && !state.any) {
          // Trial and Error
          var save = input.save();
          try {
            if (state.choice === null)
              this._decodeGeneric(state.tag, input, options);
            else
              this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
    
          if (input.isError(present))
            return present;
        }
      }
    
      // Push object on stack
      var prevObj;
      if (state.obj && present)
        prevObj = input.enterObject();
    
      if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
          var explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit))
            return explicit;
          input = explicit;
        }
    
        var start = input.offset;
    
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
          if (state.any)
            var save = input.save();
          var body = this._decodeTag(
            input,
            state.implicit !== null ? state.implicit : state.tag,
            state.any
          );
          if (input.isError(body))
            return body;
    
          if (state.any)
            result = input.raw(save);
          else
            input = body;
        }
    
        if (options && options.track && state.tag !== null)
          options.track(input.path(), start, input.length, 'tagged');
    
        if (options && options.track && state.tag !== null)
          options.track(input.path(), input.offset, input.length, 'content');
    
        // Select proper method for tag
        if (state.any)
          result = result;
        else if (state.choice === null)
          result = this._decodeGeneric(state.tag, input, options);
        else
          result = this._decodeChoice(input, options);
    
        if (input.isError(result))
          return result;
    
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
          });
        }
    
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
          var data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)
              ._decode(data, options);
        }
      }
    
      // Pop object
      if (state.obj && present)
        result = input.leaveObject(prevObj);
    
      // Set key
      if (state.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null)
        input.exitKey(prevKey);
    
      return result;
    };
    
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      var state = this._baseState;
    
      if (tag === 'seq' || tag === 'set')
        return null;
      if (tag === 'seqof' || tag === 'setof')
        return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag))
        return this._decodeStr(input, tag, options);
      else if (tag === 'objid' && state.args)
        return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === 'objid')
        return this._decodeObjid(input, null, null, options);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._decodeTime(input, tag, options);
      else if (tag === 'null_')
        return this._decodeNull(input, options);
      else if (tag === 'bool')
        return this._decodeBool(input, options);
      else if (tag === 'objDesc')
        return this._decodeStr(input, tag, options);
      else if (tag === 'int' || tag === 'enum')
        return this._decodeInt(input, state.args && state.args[0], options);
    
      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)
            ._decode(input, options);
      } else {
        return input.error('unknown tag: ' + tag);
      }
    };
    
    Node.prototype._getUse = function _getUse(entity, obj) {
    
      var state = this._baseState;
      // Create altered use decoder if implicit is set
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };
    
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      var state = this._baseState;
      var result = null;
      var match = false;
    
      Object.keys(state.choice).some(function(key) {
        var save = input.save();
        var node = state.choice[key];
        try {
          var value = node._decode(input, options);
          if (input.isError(value))
            return false;
    
          result = { type: key, value: value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
    
      if (!match)
        return input.error('Choice not matched');
    
      return result;
    };
    
    //
    // Encoding
    //
    
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    
    Node.prototype._encode = function encode(data, reporter, parent) {
      var state = this._baseState;
      if (state['default'] !== null && state['default'] === data)
        return;
    
      var result = this._encodeValue(data, reporter, parent);
      if (result === undefined)
        return;
    
      if (this._skipDefault(result, reporter, parent))
        return;
    
      return result;
    };
    
    Node.prototype._encodeValue = function encode(data, reporter, parent) {
      var state = this._baseState;
    
      // Decode root node
      if (state.parent === null)
        return state.children[0]._encode(data, reporter || new Reporter());
    
      var result = null;
    
      // Set reporter to share it with a child class
      this.reporter = reporter;
    
      // Check if data is there
      if (state.optional && data === undefined) {
        if (state['default'] !== null)
          data = state['default']
        else
          return;
      }
    
      // Encode children first
      var content = null;
      var primitive = false;
      if (state.any) {
        // Anything that was given is translated to buffer
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function(child) {
          if (child._baseState.tag === 'null_')
            return child._encode(null, reporter, data);
    
          if (child._baseState.key === null)
            return reporter.error('Child should have a key');
          var prevKey = reporter.enterKey(child._baseState.key);
    
          if (typeof data !== 'object')
            return reporter.error('Child expected, but input is not object');
    
          var res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);
    
          return res;
        }, this).filter(function(child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
          // TODO(indutny): this should be thrown on DSL level
          if (!(state.args && state.args.length === 1))
            return reporter.error('Too many args for : ' + state.tag);
    
          if (!Array.isArray(data))
            return reporter.error('seqof/setof, but data is not Array');
    
          var child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function(item) {
            var state = this._baseState;
    
            return this._getUse(state.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }
    
      // Encode data itself
      var result;
      if (!state.any && state.choice === null) {
        var tag = state.implicit !== null ? state.implicit : state.tag;
        var cls = state.implicit === null ? 'universal' : 'context';
    
        if (tag === null) {
          if (state.use === null)
            reporter.error('Tag could be omitted only for .use()');
        } else {
          if (state.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
    
      // Wrap in explicit
      if (state.explicit !== null)
        result = this._encodeComposite(state.explicit, false, 'context', result);
    
      return result;
    };
    
    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      var state = this._baseState;
    
      var node = state.choice[data.type];
      if (!node) {
        assert(
            false,
            data.type + ' not found in ' +
                JSON.stringify(Object.keys(state.choice)));
      }
      return node._encode(data.value, reporter);
    };
    
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      var state = this._baseState;
    
      if (/str$/.test(tag))
        return this._encodeStr(data, tag);
      else if (tag === 'objid' && state.args)
        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === 'objid')
        return this._encodeObjid(data, null, null);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._encodeTime(data, tag);
      else if (tag === 'null_')
        return this._encodeNull();
      else if (tag === 'int' || tag === 'enum')
        return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === 'bool')
        return this._encodeBool(data);
      else if (tag === 'objDesc')
        return this._encodeStr(data, tag);
      else
        throw new Error('Unsupported tag: ' + tag);
    };
    
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
    };
    
    },{"../base":48,"minimalistic-assert":209}],50:[function(require,module,exports){
    var inherits = require('inherits');
    
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    exports.Reporter = Reporter;
    
    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };
    
    Reporter.prototype.save = function save() {
      var state = this._reporterState;
    
      return { obj: state.obj, pathLen: state.path.length };
    };
    
    Reporter.prototype.restore = function restore(data) {
      var state = this._reporterState;
    
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };
    
    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };
    
    Reporter.prototype.exitKey = function exitKey(index) {
      var state = this._reporterState;
    
      state.path = state.path.slice(0, index - 1);
    };
    
    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      var state = this._reporterState;
    
      this.exitKey(index);
      if (state.obj !== null)
        state.obj[key] = value;
    };
    
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join('/');
    };
    
    Reporter.prototype.enterObject = function enterObject() {
      var state = this._reporterState;
    
      var prev = state.obj;
      state.obj = {};
      return prev;
    };
    
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      var state = this._reporterState;
    
      var now = state.obj;
      state.obj = prev;
      return now;
    };
    
    Reporter.prototype.error = function error(msg) {
      var err;
      var state = this._reporterState;
    
      var inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function(elem) {
          return '[' + JSON.stringify(elem) + ']';
        }).join(''), msg.message || msg, msg.stack);
      }
    
      if (!state.options.partial)
        throw err;
    
      if (!inherited)
        state.errors.push(err);
    
      return err;
    };
    
    Reporter.prototype.wrapResult = function wrapResult(result) {
      var state = this._reporterState;
      if (!state.options.partial)
        return result;
    
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };
    
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    };
    inherits(ReporterError, Error);
    
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + ' at: ' + (this.path || '(shallow)');
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ReporterError);
    
      if (!this.stack) {
        try {
          // IE only adds stack when thrown
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };
    
    },{"inherits":199}],51:[function(require,module,exports){
    var constants = require('../constants');
    
    exports.tagClass = {
      0: 'universal',
      1: 'application',
      2: 'context',
      3: 'private'
    };
    exports.tagClassByName = constants._reverse(exports.tagClass);
    
    exports.tag = {
      0x00: 'end',
      0x01: 'bool',
      0x02: 'int',
      0x03: 'bitstr',
      0x04: 'octstr',
      0x05: 'null_',
      0x06: 'objid',
      0x07: 'objDesc',
      0x08: 'external',
      0x09: 'real',
      0x0a: 'enum',
      0x0b: 'embed',
      0x0c: 'utf8str',
      0x0d: 'relativeOid',
      0x10: 'seq',
      0x11: 'set',
      0x12: 'numstr',
      0x13: 'printstr',
      0x14: 't61str',
      0x15: 'videostr',
      0x16: 'ia5str',
      0x17: 'utctime',
      0x18: 'gentime',
      0x19: 'graphstr',
      0x1a: 'iso646str',
      0x1b: 'genstr',
      0x1c: 'unistr',
      0x1d: 'charstr',
      0x1e: 'bmpstr'
    };
    exports.tagByName = constants._reverse(exports.tag);
    
    },{"../constants":52}],52:[function(require,module,exports){
    var constants = exports;
    
    // Helper
    constants._reverse = function reverse(map) {
      var res = {};
    
      Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key)
          key = key | 0;
    
        var value = map[key];
        res[value] = key;
      });
    
      return res;
    };
    
    constants.der = require('./der');
    
    },{"./der":51}],53:[function(require,module,exports){
    var inherits = require('inherits');
    
    var asn1 = require('../../asn1');
    var base = asn1.base;
    var bignum = asn1.bignum;
    
    // Import DER constants
    var der = asn1.constants.der;
    
    function DERDecoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
    
      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    };
    module.exports = DERDecoder;
    
    DERDecoder.prototype.decode = function decode(data, options) {
      if (!(data instanceof base.DecoderBuffer))
        data = new base.DecoderBuffer(data, options);
    
      return this.tree._decode(data, options);
    };
    
    // Tree methods
    
    function DERNode(parent) {
      base.Node.call(this, 'der', parent);
    }
    inherits(DERNode, base.Node);
    
    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty())
        return false;
    
      var state = buffer.save();
      var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;
    
      buffer.restore(state);
    
      return decodedTag.tag === tag || decodedTag.tagStr === tag ||
        (decodedTag.tagStr + 'of') === tag || any;
    };
    
    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      var decodedTag = derDecodeTag(buffer,
                                    'Failed to decode tag of "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;
    
      var len = derDecodeLen(buffer,
                             decodedTag.primitive,
                             'Failed to get length of "' + tag + '"');
    
      // Failure
      if (buffer.isError(len))
        return len;
    
      if (!any &&
          decodedTag.tag !== tag &&
          decodedTag.tagStr !== tag &&
          decodedTag.tagStr + 'of' !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }
    
      if (decodedTag.primitive || len !== null)
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    
      // Indefinite length... find END tag
      var state = buffer.save();
      var res = this._skipUntilEnd(
          buffer,
          'Failed to skip indefinite length body: "' + this.tag + '"');
      if (buffer.isError(res))
        return res;
    
      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };
    
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      while (true) {
        var tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag))
          return tag;
        var len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len))
          return len;
    
        var res;
        if (tag.primitive || len !== null)
          res = buffer.skip(len)
        else
          res = this._skipUntilEnd(buffer, fail);
    
        // Failure
        if (buffer.isError(res))
          return res;
    
        if (tag.tagStr === 'end')
          break;
      }
    };
    
    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                        options) {
      var result = [];
      while (!buffer.isEmpty()) {
        var possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd))
          return possibleEnd;
    
        var res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd)
          break;
        result.push(res);
      }
      return result;
    };
    
    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === 'bitstr') {
        var unused = buffer.readUInt8();
        if (buffer.isError(unused))
          return unused;
        return { unused: unused, data: buffer.raw() };
      } else if (tag === 'bmpstr') {
        var raw = buffer.raw();
        if (raw.length % 2 === 1)
          return buffer.error('Decoding of string type: bmpstr length mismatch');
    
        var str = '';
        for (var i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === 'numstr') {
        var numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) {
          return buffer.error('Decoding of string type: ' +
                              'numstr unsupported characters');
        }
        return numstr;
      } else if (tag === 'octstr') {
        return buffer.raw();
      } else if (tag === 'objDesc') {
        return buffer.raw();
      } else if (tag === 'printstr') {
        var printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) {
          return buffer.error('Decoding of string type: ' +
                              'printstr unsupported characters');
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error('Decoding of string type: ' + tag + ' unsupported');
      }
    };
    
    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      var result;
      var identifiers = [];
      var ident = 0;
      while (!buffer.isEmpty()) {
        var subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 0x80)
        identifiers.push(ident);
    
      var first = (identifiers[0] / 40) | 0;
      var second = identifiers[0] % 40;
    
      if (relative)
        result = identifiers;
      else
        result = [first, second].concat(identifiers.slice(1));
    
      if (values) {
        var tmp = values[result.join(' ')];
        if (tmp === undefined)
          tmp = values[result.join('.')];
        if (tmp !== undefined)
          result = tmp;
      }
    
      return result;
    };
    
    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      var str = buffer.raw().toString();
      if (tag === 'gentime') {
        var year = str.slice(0, 4) | 0;
        var mon = str.slice(4, 6) | 0;
        var day = str.slice(6, 8) | 0;
        var hour = str.slice(8, 10) | 0;
        var min = str.slice(10, 12) | 0;
        var sec = str.slice(12, 14) | 0;
      } else if (tag === 'utctime') {
        var year = str.slice(0, 2) | 0;
        var mon = str.slice(2, 4) | 0;
        var day = str.slice(4, 6) | 0;
        var hour = str.slice(6, 8) | 0;
        var min = str.slice(8, 10) | 0;
        var sec = str.slice(10, 12) | 0;
        if (year < 70)
          year = 2000 + year;
        else
          year = 1900 + year;
      } else {
        return buffer.error('Decoding ' + tag + ' time is not supported yet');
      }
    
      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };
    
    DERNode.prototype._decodeNull = function decodeNull(buffer) {
      return null;
    };
    
    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      var res = buffer.readUInt8();
      if (buffer.isError(res))
        return res;
      else
        return res !== 0;
    };
    
    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      // Bigint, return as it is (assume big endian)
      var raw = buffer.raw();
      var res = new bignum(raw);
    
      if (values)
        res = values[res.toString(10)] || res;
    
      return res;
    };
    
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getDecoder('der').tree;
    };
    
    // Utility methods
    
    function derDecodeTag(buf, fail) {
      var tag = buf.readUInt8(fail);
      if (buf.isError(tag))
        return tag;
    
      var cls = der.tagClass[tag >> 6];
      var primitive = (tag & 0x20) === 0;
    
      // Multi-octet tag - load
      if ((tag & 0x1f) === 0x1f) {
        var oct = tag;
        tag = 0;
        while ((oct & 0x80) === 0x80) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct))
            return oct;
    
          tag <<= 7;
          tag |= oct & 0x7f;
        }
      } else {
        tag &= 0x1f;
      }
      var tagStr = der.tag[tag];
    
      return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
      };
    }
    
    function derDecodeLen(buf, primitive, fail) {
      var len = buf.readUInt8(fail);
      if (buf.isError(len))
        return len;
    
      // Indefinite form
      if (!primitive && len === 0x80)
        return null;
    
      // Definite form
      if ((len & 0x80) === 0) {
        // Short form
        return len;
      }
    
      // Long form
      var num = len & 0x7f;
      if (num > 4)
        return buf.error('length octect is too long');
    
      len = 0;
      for (var i = 0; i < num; i++) {
        len <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j))
          return j;
        len |= j;
      }
    
      return len;
    }
    
    },{"../../asn1":45,"inherits":199}],54:[function(require,module,exports){
    var decoders = exports;
    
    decoders.der = require('./der');
    decoders.pem = require('./pem');
    
    },{"./der":53,"./pem":55}],55:[function(require,module,exports){
    var inherits = require('inherits');
    var Buffer = require('buffer').Buffer;
    
    var DERDecoder = require('./der');
    
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = 'pem';
    };
    inherits(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;
    
    PEMDecoder.prototype.decode = function decode(data, options) {
      var lines = data.toString().split(/[\r\n]+/g);
    
      var label = options.label.toUpperCase();
    
      var re = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;
      for (var i = 0; i < lines.length; i++) {
        var match = lines[i].match(re);
        if (match === null)
          continue;
    
        if (match[2] !== label)
          continue;
    
        if (start === -1) {
          if (match[1] !== 'BEGIN')
            break;
          start = i;
        } else {
          if (match[1] !== 'END')
            break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error('PEM section not found for: ' + label);
    
      var base64 = lines.slice(start + 1, end).join('');
      // Remove excessive symbols
      base64.replace(/[^a-z0-9\+\/=]+/gi, '');
    
      var input = new Buffer(base64, 'base64');
      return DERDecoder.prototype.decode.call(this, input, options);
    };
    
    },{"./der":53,"buffer":96,"inherits":199}],56:[function(require,module,exports){
    var inherits = require('inherits');
    var Buffer = require('buffer').Buffer;
    
    var asn1 = require('../../asn1');
    var base = asn1.base;
    
    // Import DER constants
    var der = asn1.constants.der;
    
    function DEREncoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
    
      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    };
    module.exports = DEREncoder;
    
    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };
    
    // Tree methods
    
    function DERNode(parent) {
      base.Node.call(this, 'der', parent);
    }
    inherits(DERNode, base.Node);
    
    DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                                  primitive,
                                                                  cls,
                                                                  content) {
      var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    
      // Short form
      if (content.length < 0x80) {
        var header = new Buffer(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([ header, content ]);
      }
    
      // Long form
      // Count octets required to store length
      var lenOctets = 1;
      for (var i = content.length; i >= 0x100; i >>= 8)
        lenOctets++;
    
      var header = new Buffer(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 0x80 | lenOctets;
    
      for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 0xff;
    
      return this._createEncoderBuffer([ header, content ]);
    };
    
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === 'bitstr') {
        return this._createEncoderBuffer([ str.unused | 0, str.data ]);
      } else if (tag === 'bmpstr') {
        var buf = new Buffer(str.length * 2);
        for (var i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) {
          return this.reporter.error('Encoding of string type: numstr supports ' +
                                     'only digits and space');
        }
        return this._createEncoderBuffer(str);
      } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) {
          return this.reporter.error('Encoding of string type: printstr supports ' +
                                     'only latin upper and lower case letters, ' +
                                     'digits, space, apostrophe, left and rigth ' +
                                     'parenthesis, plus sign, comma, hyphen, ' +
                                     'dot, slash, colon, equal sign, ' +
                                     'question mark');
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === 'objDesc') {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error('Encoding of string type: ' + tag +
                                   ' unsupported');
      }
    };
    
    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === 'string') {
        if (!values)
          return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id))
          return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s\.]+/g);
        for (var i = 0; i < id.length; i++)
          id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (var i = 0; i < id.length; i++)
          id[i] |= 0;
      }
    
      if (!Array.isArray(id)) {
        return this.reporter.error('objid() should be either array or string, ' +
                                   'got: ' + JSON.stringify(id));
      }
    
      if (!relative) {
        if (id[1] >= 40)
          return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
      }
    
      // Count number of octets
      var size = 0;
      for (var i = 0; i < id.length; i++) {
        var ident = id[i];
        for (size++; ident >= 0x80; ident >>= 7)
          size++;
      }
    
      var objid = new Buffer(size);
      var offset = objid.length - 1;
      for (var i = id.length - 1; i >= 0; i--) {
        var ident = id[i];
        objid[offset--] = ident & 0x7f;
        while ((ident >>= 7) > 0)
          objid[offset--] = 0x80 | (ident & 0x7f);
      }
    
      return this._createEncoderBuffer(objid);
    };
    
    function two(num) {
      if (num < 10)
        return '0' + num;
      else
        return num;
    }
    
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      var str;
      var date = new Date(time);
    
      if (tag === 'gentime') {
        str = [
          two(date.getFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z'
        ].join('');
      } else if (tag === 'utctime') {
        str = [
          two(date.getFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z'
        ].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }
    
      return this._encodeStr(str, 'octstr');
    };
    
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer('');
    };
    
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === 'string') {
        if (!values)
          return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error('Values map doesn\'t contain: ' +
                                     JSON.stringify(num));
        }
        num = values[num];
      }
    
      // Bignum, assume big endian
      if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        var numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) {
          numArray.unshift(0);
        }
        num = new Buffer(numArray);
      }
    
      if (Buffer.isBuffer(num)) {
        var size = num.length;
        if (num.length === 0)
          size++;
    
        var out = new Buffer(size);
        num.copy(out);
        if (num.length === 0)
          out[0] = 0
        return this._createEncoderBuffer(out);
      }
    
      if (num < 0x80)
        return this._createEncoderBuffer(num);
    
      if (num < 0x100)
        return this._createEncoderBuffer([0, num]);
    
      var size = 1;
      for (var i = num; i >= 0x100; i >>= 8)
        size++;
    
      var out = new Array(size);
      for (var i = out.length - 1; i >= 0; i--) {
        out[i] = num & 0xff;
        num >>= 8;
      }
      if(out[0] & 0x80) {
        out.unshift(0);
      }
    
      return this._createEncoderBuffer(new Buffer(out));
    };
    
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 0xff : 0);
    };
    
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getEncoder('der').tree;
    };
    
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      var state = this._baseState;
      var i;
      if (state['default'] === null)
        return false;
    
      var data = dataBuffer.join();
      if (state.defaultBuffer === undefined)
        state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    
      if (data.length !== state.defaultBuffer.length)
        return false;
    
      for (i=0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i])
          return false;
    
      return true;
    };
    
    // Utility methods
    
    function encodeTag(tag, primitive, cls, reporter) {
      var res;
    
      if (tag === 'seqof')
        tag = 'seq';
      else if (tag === 'setof')
        tag = 'set';
    
      if (der.tagByName.hasOwnProperty(tag))
        res = der.tagByName[tag];
      else if (typeof tag === 'number' && (tag | 0) === tag)
        res = tag;
      else
        return reporter.error('Unknown tag: ' + tag);
    
      if (res >= 0x1f)
        return reporter.error('Multi-octet tag encoding unsupported');
    
      if (!primitive)
        res |= 0x20;
    
      res |= (der.tagClassByName[cls || 'universal'] << 6);
    
      return res;
    }
    
    },{"../../asn1":45,"buffer":96,"inherits":199}],57:[function(require,module,exports){
    var encoders = exports;
    
    encoders.der = require('./der');
    encoders.pem = require('./pem');
    
    },{"./der":56,"./pem":58}],58:[function(require,module,exports){
    var inherits = require('inherits');
    
    var DEREncoder = require('./der');
    
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = 'pem';
    };
    inherits(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;
    
    PEMEncoder.prototype.encode = function encode(data, options) {
      var buf = DEREncoder.prototype.encode.call(this, data);
    
      var p = buf.toString('base64');
      var out = [ '-----BEGIN ' + options.label + '-----' ];
      for (var i = 0; i < p.length; i += 64)
        out.push(p.slice(i, i + 64));
      out.push('-----END ' + options.label + '-----');
      return out.join('\n');
    };
    
    },{"./der":56,"inherits":199}],59:[function(require,module,exports){
    'use strict'
    
    exports.byteLength = byteLength
    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray
    
    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
    
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i]
      revLookup[code.charCodeAt(i)] = i
    }
    
    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63
    
    function getLens (b64) {
      var len = b64.length
    
      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }
    
      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=')
      if (validLen === -1) validLen = len
    
      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4)
    
      return [validLen, placeHoldersLen]
    }
    
    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }
    
    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }
    
    function toByteArray (b64) {
      var tmp
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]
    
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
    
      var curByte = 0
    
      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen
    
      for (var i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)]
        arr[curByte++] = (tmp >> 16) & 0xFF
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }
    
      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4)
        arr[curByte++] = tmp & 0xFF
      }
    
      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2)
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }
    
      return arr
    }
    
    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }
    
    function encodeChunk (uint8, start, end) {
      var tmp
      var output = []
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF)
        output.push(tripletToBase64(tmp))
      }
      return output.join('')
    }
    
    function fromByteArray (uint8) {
      var tmp
      var len = uint8.length
      var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
      var parts = []
      var maxChunkLength = 16383 // must be multiple of 3
    
      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(
          uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
        ))
      }
    
      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1]
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        )
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1]
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        )
      }
    
      return parts.join('')
    }
    
    },{}],60:[function(require,module,exports){
    ;(function (globalObject) {
      'use strict';
    
    /*
     *      bignumber.js v7.2.1
     *      A JavaScript library for arbitrary-precision arithmetic.
     *      https://github.com/MikeMcl/bignumber.js
     *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
     *      MIT Licensed.
     *
     *      BigNumber.prototype methods     |  BigNumber methods
     *                                      |
     *      absoluteValue            abs    |  clone
     *      comparedTo                      |  config               set
     *      decimalPlaces            dp     |      DECIMAL_PLACES
     *      dividedBy                div    |      ROUNDING_MODE
     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
     *      exponentiatedBy          pow    |      RANGE
     *      integerValue                    |      CRYPTO
     *      isEqualTo                eq     |      MODULO_MODE
     *      isFinite                        |      POW_PRECISION
     *      isGreaterThan            gt     |      FORMAT
     *      isGreaterThanOrEqualTo   gte    |      ALPHABET
     *      isInteger                       |  isBigNumber
     *      isLessThan               lt     |  maximum              max
     *      isLessThanOrEqualTo      lte    |  minimum              min
     *      isNaN                           |  random
     *      isNegative                      |
     *      isPositive                      |
     *      isZero                          |
     *      minus                           |
     *      modulo                   mod    |
     *      multipliedBy             times  |
     *      negated                         |
     *      plus                            |
     *      precision                sd     |
     *      shiftedBy                       |
     *      squareRoot               sqrt   |
     *      toExponential                   |
     *      toFixed                         |
     *      toFormat                        |
     *      toFraction                      |
     *      toJSON                          |
     *      toNumber                        |
     *      toPrecision                     |
     *      toString                        |
     *      valueOf                         |
     *
     */
    
    
      var BigNumber,
        isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
    
        mathceil = Math.ceil,
        mathfloor = Math.floor,
    
        bignumberError = '[BigNumber Error] ',
        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',
    
        BASE = 1e14,
        LOG_BASE = 14,
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        SQRT_BASE = 1e7,
    
        // EDITABLE
        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
        // the arguments to toExponential, toFixed, toFormat, and toPrecision.
        MAX = 1E9;                                   // 0 to MAX_INT32
    
    
      /*
       * Create and return a BigNumber constructor.
       */
      function clone(configObject) {
        var div, convertBase, parseNumeric,
          P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
          ONE = new BigNumber(1),
    
    
          //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
    
    
          // The default values below must be integers within the inclusive ranges stated.
          // The values can also be changed at run-time using BigNumber.set.
    
          // The maximum number of decimal places for operations involving division.
          DECIMAL_PLACES = 20,                     // 0 to MAX
    
          // The rounding mode used when rounding to the above decimal places, and when using
          // toExponential, toFixed, toFormat and toPrecision, and round (default value).
          // UP         0 Away from zero.
          // DOWN       1 Towards zero.
          // CEIL       2 Towards +Infinity.
          // FLOOR      3 Towards -Infinity.
          // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
          // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
          // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
          // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
          // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
          ROUNDING_MODE = 4,                       // 0 to 8
    
          // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
    
          // The exponent value at and beneath which toString returns exponential notation.
          // Number type: -7
          TO_EXP_NEG = -7,                         // 0 to -MAX
    
          // The exponent value at and above which toString returns exponential notation.
          // Number type: 21
          TO_EXP_POS = 21,                         // 0 to MAX
    
          // RANGE : [MIN_EXP, MAX_EXP]
    
          // The minimum exponent value, beneath which underflow to zero occurs.
          // Number type: -324  (5e-324)
          MIN_EXP = -1e7,                          // -1 to -MAX
    
          // The maximum exponent value, above which overflow to Infinity occurs.
          // Number type:  308  (1.7976931348623157e+308)
          // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
          MAX_EXP = 1e7,                           // 1 to MAX
    
          // Whether to use cryptographically-secure random number generation, if available.
          CRYPTO = false,                          // true or false
    
          // The modulo mode used when calculating the modulus: a mod n.
          // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
          // The remainder (r) is calculated as: r = a - n * q.
          //
          // UP        0 The remainder is positive if the dividend is negative, else is negative.
          // DOWN      1 The remainder has the same sign as the dividend.
          //             This modulo mode is commonly known as 'truncated division' and is
          //             equivalent to (a % n) in JavaScript.
          // FLOOR     3 The remainder has the same sign as the divisor (Python %).
          // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
          // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
          //             The remainder is always positive.
          //
          // The truncated division, floored division, Euclidian division and IEEE 754 remainder
          // modes are commonly used for the modulus operation.
          // Although the other rounding modes can also be used, they may not give useful results.
          MODULO_MODE = 1,                         // 0 to 9
    
          // The maximum number of significant digits of the result of the exponentiatedBy operation.
          // If POW_PRECISION is 0, there will be unlimited significant digits.
          POW_PRECISION = 0,                    // 0 to MAX
    
          // The format specification used by the BigNumber.prototype.toFormat method.
          FORMAT = {
            decimalSeparator: '.',
            groupSeparator: ',',
            groupSize: 3,
            secondaryGroupSize: 0,
            fractionGroupSeparator: '\xA0',      // non-breaking space
            fractionGroupSize: 0
          },
    
          // The alphabet used for base conversion.
          // It must be at least 2 characters long, with no '.' or repeated character.
          // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
          ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';
    
    
        //------------------------------------------------------------------------------------------
    
    
        // CONSTRUCTOR
    
    
        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * n {number|string|BigNumber} A numeric value.
         * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
         */
        function BigNumber(n, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str,
            x = this;
    
          // Enable constructor usage without new.
          if (!(x instanceof BigNumber)) {
    
            // Don't throw on constructor call without new (#81).
            // '[BigNumber Error] Constructor call without new: {n}'
            //throw Error(bignumberError + ' Constructor call without new: ' + n);
            return new BigNumber(n, b);
          }
    
          if (b == null) {
    
            // Duplicate.
            if (n instanceof BigNumber) {
              x.s = n.s;
              x.e = n.e;
              x.c = (n = n.c) ? n.slice() : n;
              return;
            }
    
            isNum = typeof n == 'number';
    
            if (isNum && n * 0 == 0) {
    
              // Use `1 / n` to handle minus zero also.
              x.s = 1 / n < 0 ? (n = -n, -1) : 1;
    
              // Faster path for integers.
              if (n === ~~n) {
                for (e = 0, i = n; i >= 10; i /= 10, e++);
                x.e = e;
                x.c = [n];
                return;
              }
    
              str = n + '';
            } else {
              if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
    
            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
    
            // Exponential form?
            if ((i = str.search(/e/i)) > 0) {
    
              // Determine exponent.
              if (e < 0) e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
    
              // Integer.
              e = str.length;
            }
    
          } else {
    
            // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
            intCheck(b, 2, ALPHABET.length, 'Base');
            str = n + '';
    
            // Allow exponential notation to be used with base 10 argument, while
            // also rounding to DECIMAL_PLACES as with other bases.
            if (b == 10) {
              x = new BigNumber(n instanceof BigNumber ? n : str);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
    
            isNum = typeof n == 'number';
    
            if (isNum) {
    
              // Avoid potential interpretation of Infinity and NaN as base 44+ values.
              if (n * 0 != 0) return parseNumeric(x, str, isNum, b);
    
              x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;
    
              // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
              if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                throw Error
                 (tooManyDigits + n);
              }
    
              // Prevent later check for length on converted number.
              isNum = false;
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
    
            alphabet = ALPHABET.slice(0, b);
            e = i = 0;
    
            // Check that str is a valid base b number.
            // Don't use RegExp so alphabet can contain special characters.
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == '.') {
    
                  // If '.' is not the first character and it has not be found before.
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
    
                  // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                      str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
    
                return parseNumeric(x, n + '', isNum, b);
              }
            }
    
            str = convertBase(str, b, 10, x.s);
    
            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
            else e = str.length;
          }
    
          // Determine leading zeros.
          for (i = 0; str.charCodeAt(i) === 48; i++);
    
          // Determine trailing zeros.
          for (len = str.length; str.charCodeAt(--len) === 48;);
    
          str = str.slice(i, ++len);
    
          if (str) {
            len -= i;
    
            // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
            if (isNum && BigNumber.DEBUG &&
              len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
                throw Error
                 (tooManyDigits + (x.s * n));
            }
    
            e = e - i - 1;
    
             // Overflow?
            if (e > MAX_EXP) {
    
              // Infinity.
              x.c = x.e = null;
    
            // Underflow?
            } else if (e < MIN_EXP) {
    
              // Zero.
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
    
              // Transform base
    
              // e is the base 10 exponent.
              // i is where to slice str to get the first element of the coefficient array.
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;
    
              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));
    
                for (len -= LOG_BASE; i < len;) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
    
                str = str.slice(i);
                i = LOG_BASE - str.length;
              } else {
                i -= len;
              }
    
              for (; i--; str += '0');
              x.c.push(+str);
            }
          } else {
    
            // Zero.
            x.c = [x.e = 0];
          }
        }
    
    
        // CONSTRUCTOR PROPERTIES
    
    
        BigNumber.clone = clone;
    
        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;
    
    
        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object with the following optional properties (if the value of a property is
         * a number, it must be an integer within the inclusive range stated):
         *
         *   DECIMAL_PLACES   {number}           0 to MAX
         *   ROUNDING_MODE    {number}           0 to 8
         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
         *   CRYPTO           {boolean}          true or false
         *   MODULO_MODE      {number}           0 to 9
         *   POW_PRECISION       {number}           0 to MAX
         *   ALPHABET         {string}           A string of two or more unique characters which does
         *                                       not contain '.'.
         *   FORMAT           {object}           An object with some of the following properties:
         *      decimalSeparator       {string}
         *      groupSeparator         {string}
         *      groupSize              {number}
         *      secondaryGroupSize     {number}
         *      fractionGroupSeparator {string}
         *      fractionGroupSize      {number}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined, except for ALPHABET.
         *
         * Return an object with the properties current values.
         */
        BigNumber.config = BigNumber.set = function (obj) {
          var p, v;
    
          if (obj != null) {
    
            if (typeof obj == 'object') {
    
              // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
              // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
    
              // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
              // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
    
              // EXPONENTIAL_AT {number|number[]}
              // Integer, -MAX to MAX inclusive or
              // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
              // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                v = obj[p];
                if (isArray(v)) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
    
              // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
              // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
              // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
              if (obj.hasOwnProperty(p = 'RANGE')) {
                v = obj[p];
                if (isArray(v)) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error
                     (bignumberError + p + ' cannot be zero: ' + v);
                  }
                }
              }
    
              // CRYPTO {boolean} true or false.
              // '[BigNumber Error] CRYPTO not true or false: {v}'
              // '[BigNumber Error] crypto unavailable'
              if (obj.hasOwnProperty(p = 'CRYPTO')) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != 'undefined' && crypto &&
                     (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error
                       (bignumberError + 'crypto unavailable');
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error
                   (bignumberError + p + ' not true or false: ' + v);
                }
              }
    
              // MODULO_MODE {number} Integer, 0 to 9 inclusive.
              // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
    
              // POW_PRECISION {number} Integer, 0 to MAX inclusive.
              // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
    
              // FORMAT {object}
              // '[BigNumber Error] FORMAT not an object: {v}'
              if (obj.hasOwnProperty(p = 'FORMAT')) {
                v = obj[p];
                if (typeof v == 'object') FORMAT = v;
                else throw Error
                 (bignumberError + p + ' not an object: ' + v);
              }
    
              // ALPHABET {string}
              // '[BigNumber Error] ALPHABET invalid: {v}'
              if (obj.hasOwnProperty(p = 'ALPHABET')) {
                v = obj[p];
    
                // Disallow if only one character, or contains '.' or a repeated character.
                if (typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v)) {
                  ALPHABET = v;
                } else {
                  throw Error
                   (bignumberError + p + ' invalid: ' + v);
                }
              }
    
            } else {
    
              // '[BigNumber Error] Object expected: {v}'
              throw Error
               (bignumberError + 'Object expected: ' + obj);
            }
          }
    
          return {
            DECIMAL_PLACES: DECIMAL_PLACES,
            ROUNDING_MODE: ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO: CRYPTO,
            MODULO_MODE: MODULO_MODE,
            POW_PRECISION: POW_PRECISION,
            FORMAT: FORMAT,
            ALPHABET: ALPHABET
          };
        };
    
    
        /*
         * Return true if v is a BigNumber instance, otherwise return false.
         *
         * v {any}
         */
        BigNumber.isBigNumber = function (v) {
          return v instanceof BigNumber || v && v._isBigNumber === true || false;
        };
    
    
        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.maximum = BigNumber.max = function () {
          return maxOrMin(arguments, P.lt);
        };
    
    
        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.minimum = BigNumber.min = function () {
          return maxOrMin(arguments, P.gt);
        };
    
    
        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
         * '[BigNumber Error] crypto unavailable'
         */
        BigNumber.random = (function () {
          var pow2_53 = 0x20000000000000;
    
          // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
          // Check if Math.random() produces more than 32 bits of randomness.
          // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
          // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
          var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
           ? function () { return mathfloor(Math.random() * pow2_53); }
           : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
             (Math.random() * 0x800000 | 0); };
    
          return function (dp) {
            var a, b, e, k, v,
              i = 0,
              c = [],
              rand = new BigNumber(ONE);
    
            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);
    
            k = mathceil(dp / LOG_BASE);
    
            if (CRYPTO) {
    
              // Browsers supporting crypto.getRandomValues.
              if (crypto.getRandomValues) {
    
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
    
                for (; i < k;) {
    
                  // 53 bits:
                  // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                  // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                  // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                  //                                     11111 11111111 11111111
                  // 0x20000 is 2^21.
                  v = a[i] * 0x20000 + (a[i + 1] >>> 11);
    
                  // Rejection sampling:
                  // 0 <= v < 9007199254740992
                  // Probability that v >= 9e15, is
                  // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {
    
                    // 0 <= v <= 8999999999999999
                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;
    
              // Node.js supporting crypto.randomBytes.
              } else if (crypto.randomBytes) {
    
                // buffer
                a = crypto.randomBytes(k *= 7);
    
                for (; i < k;) {
    
                  // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                  // 0x100000000 is 2^32, 0x1000000 is 2^24
                  // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                  // 0 <= v < 9007199254740992
                  v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                     (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                     (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
    
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
    
                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error
                 (bignumberError + 'crypto unavailable');
              }
            }
    
            // Use Math.random.
            if (!CRYPTO) {
    
              for (; i < k;) {
                v = random53bitInt();
                if (v < 9e15) c[i++] = v % 1e14;
              }
            }
    
            k = c[--i];
            dp %= LOG_BASE;
    
            // Convert trailing digits to zeros according to dp.
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }
    
            // Remove trailing elements which are zero.
            for (; c[i] === 0; c.pop(), i--);
    
            // Zero?
            if (i < 0) {
              c = [e = 0];
            } else {
    
              // Remove leading elements which are zero and adjust exponent accordingly.
              for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);
    
              // Count the digits of the first element of c to determine leading zeros, and...
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++);
    
              // adjust the exponent accordingly.
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }
    
            rand.e = e;
            rand.c = c;
            return rand;
          };
        })();
    
    
        // PRIVATE FUNCTIONS
    
    
        // Called by BigNumber and BigNumber.prototype.toString.
        convertBase = (function () {
          var decimal = '0123456789';
    
          /*
           * Convert string of baseIn to an array of numbers of baseOut.
           * Eg. toBaseOut('255', 10, 16) returns [15, 15].
           * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
           */
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j,
              arr = [0],
              arrL,
              i = 0,
              len = str.length;
    
            for (; i < len;) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);
    
              arr[0] += alphabet.indexOf(str.charAt(i++));
    
              for (j = 0; j < arr.length; j++) {
    
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null) arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
    
            return arr.reverse();
          }
    
          // Convert a numeric string of baseIn to a numeric string of baseOut.
          // If the caller is toString, we are converting from base 10 to baseOut.
          // If the caller is BigNumber, we are converting from baseIn to base 10.
          return function (str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y,
              i = str.indexOf('.'),
              dp = DECIMAL_PLACES,
              rm = ROUNDING_MODE;
    
            // Non-integer.
            if (i >= 0) {
              k = POW_PRECISION;
    
              // Unlimited precision.
              POW_PRECISION = 0;
              str = str.replace('.', '');
              y = new BigNumber(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;
    
              // Convert str as if an integer, then restore the fraction part by dividing the
              // result by its base raised to a power.
    
              y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
               10, baseOut, decimal);
              y.e = y.c.length;
            }
    
            // Convert the number as integer.
    
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString
             ? (alphabet = ALPHABET, decimal)
             : (alphabet = decimal, ALPHABET));
    
            // xc now represents str as an integer and converted to baseOut. e is the exponent.
            e = k = xc.length;
    
            // Remove trailing zeros.
            for (; xc[--k] == 0; xc.pop());
    
            // Zero?
            if (!xc[0]) return alphabet.charAt(0);
    
            // Does str represent an integer? If so, no need for the division.
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
    
              // The sign is needed for correct rounding.
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }
    
            // xc now represents str converted to baseOut.
    
            // THe index of the rounding digit.
            d = e + dp + 1;
    
            // The rounding digit: the digit to the right of the digit that may be rounded up.
            i = xc[d];
    
            // Look at the rounding digits and mode to determine whether to round up.
    
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
    
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                  : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                   rm == (x.s < 0 ? 8 : 7));
    
            // If the index of the rounding digit is not greater than zero, or xc represents
            // zero, then the result of the base conversion is zero or, if rounding up, a value
            // such as 0.00001.
            if (d < 1 || !xc[0]) {
    
              // 1^-dp or 0
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))
                  : alphabet.charAt(0);
            } else {
    
              // Truncate xc to the required number of decimal places.
              xc.length = d;
    
              // Round up?
              if (r) {
    
                // Rounding up may mean the previous digit has to be rounded up and so on.
                for (--baseOut; ++xc[--d] > baseOut;) {
                  xc[d] = 0;
    
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
    
              // Determine trailing zeros.
              for (k = xc.length; !xc[--k];);
    
              // E.g. [4, 11, 15] becomes 4bf.
              for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));
    
              // Add leading zeros, decimal point and trailing zeros as required.
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
    
            // The caller will add the sign.
            return str;
          };
        })();
    
    
        // Perform division in the specified base. Called by div and convertBase.
        div = (function () {
    
          // Assume non-zero x and k.
          function multiply(x, k, base) {
            var m, temp, xlo, xhi,
              carry = 0,
              i = x.length,
              klo = k % SQRT_BASE,
              khi = k / SQRT_BASE | 0;
    
            for (x = x.slice(); i--;) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }
    
            if (carry) x = [carry].concat(x);
    
            return x;
          }
    
          function compare(a, b, aL, bL) {
            var i, cmp;
    
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
    
              for (i = cmp = 0; i < aL; i++) {
    
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
    
            return cmp;
          }
    
          function subtract(a, b, aL, base) {
            var i = 0;
    
            // Subtract b from a.
            for (; aL--;) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }
    
            // Remove leading zeros.
            for (; !a[0] && a.length > 1; a.splice(0, 1));
          }
    
          // x: dividend, y: divisor.
          return function (x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
              yL, yz,
              s = x.s == y.s ? 1 : -1,
              xc = x.c,
              yc = y.c;
    
            // Either NaN, Infinity or 0?
            if (!xc || !xc[0] || !yc || !yc[0]) {
    
              return new BigNumber(
    
               // Return NaN if either NaN, or both Infinity or 0.
               !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :
    
                // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0
             );
            }
    
            q = new BigNumber(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
    
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
    
            // Result exponent may be one less then the current value of e.
            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
            for (i = 0; yc[i] == (xc[i] || 0); i++);
    
            if (yc[i] > (xc[i] || 0)) e--;
    
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
    
              // Normalise xc and yc so highest order digit of yc is >= base / 2.
    
              n = mathfloor(base / (yc[0] + 1));
    
              // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
              // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
    
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
    
              // Add zeros to make remainder as long as divisor.
              for (; remL < yL; rem[remL++] = 0);
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              // Not necessary, but to prevent trial digit n > base, when using base 3.
              // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;
    
              do {
                n = 0;
    
                // Compare divisor and remainder.
                cmp = compare(yc, rem, yL, remL);
    
                // If divisor < remainder.
                if (cmp < 0) {
    
                  // Calculate trial digit, n.
    
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
    
                  // n is how many times the divisor goes into the current remainder.
                  n = mathfloor(rem0 / yc0);
    
                  //  Algorithm:
                  //  product = divisor multiplied by trial digit (n).
                  //  Compare product and remainder.
                  //  If product is greater than remainder:
                  //    Subtract divisor from product, decrement trial digit.
                  //  Subtract product from remainder.
                  //  If product was less than remainder at the last compare:
                  //    Compare new remainder and divisor.
                  //    If remainder is greater than divisor:
                  //      Subtract divisor from remainder, increment trial digit.
    
                  if (n > 1) {
    
                    // n may be > base only when base is 3.
                    if (n >= base) n = base - 1;
    
                    // product = divisor * trial digit.
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
    
                    // Compare product and remainder.
                    // If product > remainder then trial digit n too high.
                    // n is 1 too high about 5% of the time, and is not known to have
                    // ever been more than 1 too high.
                    while (compare(prod, rem, prodL, remL) == 1) {
                      n--;
    
                      // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
    
                    // n is 0 or 1, cmp is -1.
                    // If n is 0, there is no need to compare yc and rem again below,
                    // so change cmp to 1 to avoid it.
                    // If n is 1, leave cmp as -1, so yc and rem are compared again.
                    if (n == 0) {
    
                      // divisor < remainder, so n must be at least 1.
                      cmp = n = 1;
                    }
    
                    // product = divisor
                    prod = yc.slice();
                    prodL = prod.length;
                  }
    
                  if (prodL < remL) prod = [0].concat(prod);
    
                  // Subtract product from remainder.
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
    
                   // If product was < remainder.
                  if (cmp == -1) {
    
                    // Compare divisor and new remainder.
                    // If divisor < new remainder, subtract divisor from remainder.
                    // Trial digit n too low.
                    // n is 1 too low about 5% of the time, and very rarely 2 too low.
                    while (compare(yc, rem, yL, remL) < 1) {
                      n++;
    
                      // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                } // else cmp === 1 and n will be 0
    
                // Add the next digit, n, to the result array.
                qc[i++] = n;
    
                // Update the remainder.
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
    
              more = rem[0] != null;
    
              // Leading zero?
              if (!qc[0]) qc.splice(0, 1);
            }
    
            if (base == BASE) {
    
              // To calculate q.e, first get the number of digits of qc[0].
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);
    
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
    
            // Caller is convertBase.
            } else {
              q.e = e;
              q.r = +more;
            }
    
            return q;
          };
        })();
    
    
        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n: a BigNumber.
         * i: the index of the last digit required (i.e. the digit that may be rounded up).
         * rm: the rounding mode.
         * id: 1 (toExponential) or 2 (toPrecision).
         */
        function format(n, i, rm, id) {
          var c0, e, ne, len, str;
    
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
    
          if (!n.c) return n.toString();
    
          c0 = n.c[0];
          ne = n.e;
    
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && ne <= TO_EXP_NEG
             ? toExponential(str, ne)
             : toFixedPoint(str, ne, '0');
          } else {
            n = round(new BigNumber(n), i, rm);
    
            // n.e may have changed if the value was rounded up.
            e = n.e;
    
            str = coeffToString(n.c);
            len = str.length;
    
            // toPrecision returns exponential notation if the number of significant digits
            // specified is less than the number of digits necessary to represent the integer
            // part of the value in fixed-point notation.
    
            // Exponential notation.
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
    
              // Append zeros?
              for (; len < i; str += '0', len++);
              str = toExponential(str, e);
    
            // Fixed-point notation.
            } else {
              i -= ne;
              str = toFixedPoint(str, e, '0');
    
              // Append zeros?
              if (e + 1 > len) {
                if (--i > 0) for (str += '.'; i--; str += '0');
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += '.';
                  for (; i--; str += '0');
                }
              }
            }
          }
    
          return n.s < 0 && c0 ? '-' + str : str;
        }
    
    
        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
          var m, n,
            i = 0;
    
          if (isArray(args[0])) args = args[0];
          m = new BigNumber(args[0]);
    
          for (; ++i < args.length;) {
            n = new BigNumber(args[i]);
    
            // If any number is NaN, return NaN.
            if (!n.s) {
              m = n;
              break;
            } else if (method.call(m, n)) {
              m = n;
            }
          }
    
          return m;
        }
    
    
        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */
        function normalise(n, c, e) {
          var i = 1,
            j = c.length;
    
           // Remove trailing zeros.
          for (; !c[--j]; c.pop());
    
          // Calculate the base 10 exponent. First get the number of digits of c[0].
          for (j = c[0]; j >= 10; j /= 10, i++);
    
          // Overflow?
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
    
            // Infinity.
            n.c = n.e = null;
    
          // Underflow?
          } else if (e < MIN_EXP) {
    
            // Zero.
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
    
          return n;
        }
    
    
        // Handle values that fail the validity test in BigNumber.
        parseNumeric = (function () {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
            dotAfter = /^([^.]+)\.$/,
            dotBefore = /^\.([^.]+)$/,
            isInfinityOrNaN = /^-?(Infinity|NaN)$/,
            whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
    
          return function (x, str, isNum, b) {
            var base,
              s = isNum ? str : str.replace(whitespaceOrPlus, '');
    
            // No exception on ±Infinity or NaN.
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
              x.c = x.e = null;
            } else {
              if (!isNum) {
    
                // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                s = s.replace(basePrefix, function (m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });
    
                if (b) {
                  base = b;
    
                  // E.g. '1.' to '1', '.1' to '0.1'
                  s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                }
    
                if (str != s) return new BigNumber(s, base);
              }
    
              // '[BigNumber Error] Not a number: {n}'
              // '[BigNumber Error] Not a base {b} number: {n}'
              if (BigNumber.DEBUG) {
                throw Error
                  (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
              }
    
              // NaN
              x.c = x.e = x.s = null;
            }
          }
        })();
    
    
        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd,
            xc = x.c,
            pows10 = POWS_TEN;
    
          // if x is not Infinity or NaN...
          if (xc) {
    
            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
            // n is a base 1e14 number, the value of the element of array x.c containing rd.
            // ni is the index of n within x.c.
            // d is the number of digits of n.
            // i is the index of rd within n including leading zeros.
            // j is the actual index of rd within n (if < 0, rd is a leading zero).
            out: {
    
              // Get the number of digits of the first element of xc.
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
              i = sd - d;
    
              // If the rounding digit is in the first element of xc...
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
    
                // Get the rounding digit at index j of n.
                rd = n / pows10[d - j - 1] % 10 | 0;
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
    
                if (ni >= xc.length) {
    
                  if (r) {
    
                    // Needed by sqrt.
                    for (; xc.length <= ni; xc.push(0));
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
    
                  // Get the number of digits of n.
                  for (d = 1; k >= 10; k /= 10, d++);
    
                  // Get the index of rd within n.
                  i %= LOG_BASE;
    
                  // Get the index of rd within n, adjusted for leading zeros.
                  // The number of leading zeros of n is given by LOG_BASE - d.
                  j = i - LOG_BASE + d;
    
                  // Get the rounding digit at index j of n.
                  rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                }
              }
    
              r = r || sd < 0 ||
    
              // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
               xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
    
              r = rm < 4
               ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
               : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&
    
                // Check whether the digit to the left of the rounding digit is odd.
                ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                 rm == (x.s < 0 ? 8 : 7));
    
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
    
                if (r) {
    
                  // Convert sd to decimal places.
                  sd -= x.e + 1;
    
                  // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
    
                  // Zero.
                  xc[0] = x.e = 0;
                }
    
                return x;
              }
    
              // Remove excess digits.
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];
    
                // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                // j > 0 means i > number of leading zeros of n.
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
    
              // Round up?
              if (r) {
    
                for (; ;) {
    
                  // If the digit to be rounded up is in the first element of xc...
                  if (ni == 0) {
    
                    // i will be the length of xc[0] before k is added.
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++);
    
                    // if i != k the length has increased.
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }
    
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
    
              // Remove trailing zeros.
              for (i = xc.length; xc[--i] === 0; xc.pop());
            }
    
            // Overflow? Infinity.
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
    
            // Underflow? Zero.
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
    
          return x;
        }
    
    
        // PROTOTYPE/INSTANCE METHODS
    
    
        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */
        P.absoluteValue = P.abs = function () {
          var x = new BigNumber(this);
          if (x.s < 0) x.s = 1;
          return x;
        };
    
    
        /*
         * Return
         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         *   0 if they have the same value,
         *   or null if the value of either is NaN.
         */
        P.comparedTo = function (y, b) {
          return compare(this, new BigNumber(y, b));
        };
    
    
        /*
         * If dp is undefined or null or true or false, return the number of decimal places of the
         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
         *
         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
         * ROUNDING_MODE if rm is omitted.
         *
         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.decimalPlaces = P.dp = function (dp, rm) {
          var c, n, v,
            x = this;
    
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
    
            return round(new BigNumber(x), dp + x.e + 1, rm);
          }
    
          if (!(c = x.c)) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
    
          // Subtract the number of trailing zeros of the last number.
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
          if (n < 0) n = 0;
    
          return n;
        };
    
    
        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.dividedBy = P.div = function (y, b) {
          return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
    
    
        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */
        P.dividedToIntegerBy = P.idiv = function (y, b) {
          return div(this, new BigNumber(y, b), 0, 1);
        };
    
    
        /*
         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
         *
         * If m is present, return the result modulo m.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
         *
         * The modular power operation works efficiently when x, n, and m are integers, otherwise it
         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
         *
         * n {number|string|BigNumber} The exponent. An integer.
         * [m] {number|string|BigNumber} The modulus.
         *
         * '[BigNumber Error] Exponent not an integer: {n}'
         */
        P.exponentiatedBy = P.pow = function (n, m) {
          var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,
            x = this;
    
          n = new BigNumber(n);
    
          // Allow NaN and ±Infinity, but not other non-integers.
          if (n.c && !n.isInteger()) {
            throw Error
              (bignumberError + 'Exponent not an integer: ' + n);
          }
    
          if (m != null) m = new BigNumber(m);
    
          // Exponent of MAX_SAFE_INTEGER is 15.
          nIsBig = n.e > 14;
    
          // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
    
            // The sign of the result of pow when x is negative depends on the evenness of n.
            // If +n overflows to ±Infinity, the evenness of n would be not be known.
            y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));
            return m ? y.mod(m) : y;
          }
    
          nIsNeg = n.s < 0;
    
          if (m) {
    
            // x % m returns NaN if abs(m) is zero, or m is NaN.
            if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
    
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
    
            if (isModExp) x = x.mod(m);
    
          // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
          // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
            // [1, 240000000]
            ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
            // [80000000000000]  [99999750000000]
            : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
    
            // If x is negative and n is odd, k = -0, else k = 0.
            k = x.s < 0 && isOdd(n) ? -0 : 0;
    
            // If x >= 1, k = ±Infinity.
            if (x.e > -1) k = 1 / k;
    
            // If n is negative return ±0, else return ±Infinity.
            return new BigNumber(nIsNeg ? 1 / k : k);
    
          } else if (POW_PRECISION) {
    
            // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
    
          if (nIsBig) {
            half = new BigNumber(0.5);
            nIsOdd = isOdd(n);
          } else {
            nIsOdd = n % 2;
          }
    
          if (nIsNeg) n.s = 1;
    
          y = new BigNumber(ONE);
    
          // Performs 54 loop iterations for n of 9007199254740991.
          for (; ;) {
    
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c) break;
    
              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
              }
            }
    
            if (nIsBig) {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (!n.c[0]) break;
              nIsBig = n.e > 14;
              nIsOdd = isOdd(n);
            } else {
              n = mathfloor(n / 2);
              if (!n) break;
              nIsOdd = n % 2;
            }
    
            x = x.times(x);
    
            if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
            }
          }
    
          if (isModExp) return y;
          if (nIsNeg) y = ONE.div(y);
    
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
    
    
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
         */
        P.integerValue = function (rm) {
          var n = new BigNumber(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
    
    
        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isEqualTo = P.eq = function (y, b) {
          return compare(this, new BigNumber(y, b)) === 0;
        };
    
    
        /*
         * Return true if the value of this BigNumber is a finite number, otherwise return false.
         */
        P.isFinite = function () {
          return !!this.c;
        };
    
    
        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isGreaterThan = P.gt = function (y, b) {
          return compare(this, new BigNumber(y, b)) > 0;
        };
    
    
        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise return false.
         */
        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
          return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
    
        };
    
    
        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */
        P.isInteger = function () {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
    
    
        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isLessThan = P.lt = function (y, b) {
          return compare(this, new BigNumber(y, b)) < 0;
        };
    
    
        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise return false.
         */
        P.isLessThanOrEqualTo = P.lte = function (y, b) {
          return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };
    
    
        /*
         * Return true if the value of this BigNumber is NaN, otherwise return false.
         */
        P.isNaN = function () {
          return !this.s;
        };
    
    
        /*
         * Return true if the value of this BigNumber is negative, otherwise return false.
         */
        P.isNegative = function () {
          return this.s < 0;
        };
    
    
        /*
         * Return true if the value of this BigNumber is positive, otherwise return false.
         */
        P.isPositive = function () {
          return this.s > 0;
        };
    
    
        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
         */
        P.isZero = function () {
          return !!this.c && this.c[0] == 0;
        };
    
    
        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */
        P.minus = function (y, b) {
          var i, j, t, xLTy,
            x = this,
            a = x.s;
    
          y = new BigNumber(y, b);
          b = y.s;
    
          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);
    
          // Signs differ?
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
    
          var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;
    
          if (!xe || !ye) {
    
            // Either Infinity?
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);
    
            // Either zero?
            if (!xc[0] || !yc[0]) {
    
              // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
              return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :
    
               // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
               ROUNDING_MODE == 3 ? -0 : 0);
            }
          }
    
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
    
          // Determine which is the bigger number.
          if (a = xe - ye) {
    
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
    
            t.reverse();
    
            // Prepend zeros to equalise exponents.
            for (b = a; b--; t.push(0));
            t.reverse();
          } else {
    
            // Exponents equal. Check digit by digit.
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
    
            for (a = b = 0; b < j; b++) {
    
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
    
          // x < y? Point xc to the array of the bigger number.
          if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
    
          b = (j = yc.length) - (i = xc.length);
    
          // Append zeros to xc if shorter.
          // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
          if (b > 0) for (; b--; xc[i++] = 0);
          b = BASE - 1;
    
          // Subtract yc from xc.
          for (; j > a;) {
    
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b);
              --xc[i];
              xc[j] += BASE;
            }
    
            xc[j] -= yc[j];
          }
    
          // Remove leading zeros and adjust exponent accordingly.
          for (; xc[0] == 0; xc.splice(0, 1), --ye);
    
          // Zero?
          if (!xc[0]) {
    
            // Following IEEE 754 (2008) 6.3,
            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
    
          // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
          // for finite x and y.
          return normalise(y, xc, ye);
        };
    
    
        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */
        P.modulo = P.mod = function (y, b) {
          var q, s,
            x = this;
    
          y = new BigNumber(y, b);
    
          // Return NaN if x is Infinity or NaN, or y is NaN or zero.
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber(NaN);
    
          // Return x if y is Infinity or x is zero.
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber(x);
          }
    
          if (MODULO_MODE == 9) {
    
            // Euclidian division: q = sign(y) * floor(x / abs(y))
            // r = x - qy    where  0 <= r < abs(y)
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
    
          y = x.minus(q.times(y));
    
          // To match JavaScript %, ensure sign of zero is sign of dividend.
          if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
    
          return y;
        };
    
    
        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
         * of BigNumber(y, b).
         */
        P.multipliedBy = P.times = function (y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
            base, sqrtBase,
            x = this,
            xc = x.c,
            yc = (y = new BigNumber(y, b)).c;
    
          // Either NaN, ±Infinity or ±0?
          if (!xc || !yc || !xc[0] || !yc[0]) {
    
            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
    
              // Return ±Infinity if either is ±Infinity.
              if (!xc || !yc) {
                y.c = y.e = null;
    
              // Return ±0 if either is ±0.
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
    
            return y;
          }
    
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
    
          // Ensure xc points to longer array and xcL to its length.
          if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;
    
          // Initialise the result array with zeros.
          for (i = xcL + ycL, zc = []; i--; zc.push(0));
    
          base = BASE;
          sqrtBase = SQRT_BASE;
    
          for (i = ycL; --i >= 0;) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
    
            for (k = xcL, j = i + k; j > i;) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
    
            zc[j] = c;
          }
    
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
    
          return normalise(y, zc, e);
        };
    
    
        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */
        P.negated = function () {
          var x = new BigNumber(this);
          x.s = -x.s || null;
          return x;
        };
    
    
        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */
        P.plus = function (y, b) {
          var t,
            x = this,
            a = x.s;
    
          y = new BigNumber(y, b);
          b = y.s;
    
          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);
    
          // Signs differ?
           if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
    
          var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;
    
          if (!xe || !ye) {
    
            // Return ±Infinity if either ±Infinity.
            if (!xc || !yc) return new BigNumber(a / 0);
    
            // Either zero?
            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
          }
    
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
    
          // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
    
            t.reverse();
            for (; a--; t.push(0));
            t.reverse();
          }
    
          a = xc.length;
          b = yc.length;
    
          // Point xc to the longer array, and b to the shorter length.
          if (a - b < 0) t = yc, yc = xc, xc = t, b = a;
    
          // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
          for (a = 0; b;) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
    
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
    
          // No need to check for zero, as +x + +y != 0 && -x + -y != 0
          // ye = MAX_EXP + 1 possible
          return normalise(y, xc, ye);
        };
    
    
        /*
         * If sd is undefined or null or true or false, return the number of significant digits of
         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
         * If sd is true include integer-part trailing zeros in the count.
         *
         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
         * ROUNDING_MODE if rm is omitted.
         *
         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
         *                     boolean: whether to count integer-part trailing zeros: true or false.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
         */
        P.precision = P.sd = function (sd, rm) {
          var c, n, v,
            x = this;
    
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
    
            return round(new BigNumber(x), sd, rm);
          }
    
          if (!(c = x.c)) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
    
          if (v = c[v]) {
    
            // Subtract the number of trailing zeros of the last element.
            for (; v % 10 == 0; v /= 10, n--);
    
            // Add the number of digits of the first element.
            for (v = c[0]; v >= 10; v /= 10, n++);
          }
    
          if (sd && x.e + 1 > n) n = x.e + 1;
    
          return n;
        };
    
    
        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
         */
        P.shiftedBy = function (k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times('1e' + k);
        };
    
    
        /*
         *  sqrt(-n) =  N
         *  sqrt(N) =  N
         *  sqrt(-I) =  N
         *  sqrt(I) =  I
         *  sqrt(0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.squareRoot = P.sqrt = function () {
          var m, n, r, rep, t,
            x = this,
            c = x.c,
            s = x.s,
            e = x.e,
            dp = DECIMAL_PLACES + 4,
            half = new BigNumber('0.5');
    
          // Negative/NaN/Infinity/zero?
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
    
          // Initial estimate.
          s = Math.sqrt(+x);
    
          // Math.sqrt underflow/overflow?
          // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += '0';
            s = Math.sqrt(n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
    
            if (s == 1 / 0) {
              n = '1e' + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf('e') + 1) + e;
            }
    
            r = new BigNumber(n);
          } else {
            r = new BigNumber(s + '');
          }
    
          // Check for zero.
          // r could be zero if MIN_EXP is changed after the this value was created.
          // This would cause a division by zero (x/t) and hence Infinity below, which would cause
          // coeffToString to throw.
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;
    
            // Newton-Raphson iteration.
            for (; ;) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
    
              if (coeffToString(t.c  ).slice(0, s) === (n =
                 coeffToString(r.c)).slice(0, s)) {
    
                // The exponent of r may here be one less than the final result exponent,
                // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                // are indexed correctly.
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);
    
                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                // iteration.
                if (n == '9999' || !rep && n == '4999') {
    
                  // On the first iteration only, check to see if rounding up gives the
                  // exact result as the nines may infinitely repeat.
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
    
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
    
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
    
                  // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                  // result. If not, then there are further digits and m will be truthy.
                  if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
    
                    // Truncate to the first rounding digit.
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
    
                  break;
                }
              }
            }
          }
    
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
    
    
        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.toExponential = function (dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
    
    
        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.toFixed = function (dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
    
    
        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the FORMAT object (see BigNumber.set).
         *
         * FORMAT = {
         *      decimalSeparator : '.',
         *      groupSeparator : ',',
         *      groupSize : 3,
         *      secondaryGroupSize : 0,
         *      fractionGroupSeparator : '\xA0',    // non-breaking space
         *      fractionGroupSize : 0
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.toFormat = function (dp, rm) {
          var str = this.toFixed(dp, rm);
    
          if (this.c) {
            var i,
              arr = str.split('.'),
              g1 = +FORMAT.groupSize,
              g2 = +FORMAT.secondaryGroupSize,
              groupSeparator = FORMAT.groupSeparator,
              intPart = arr[0],
              fractionPart = arr[1],
              isNeg = this.s < 0,
              intDigits = isNeg ? intPart.slice(1) : intPart,
              len = intDigits.length;
    
            if (g2) i = g1, g1 = g2, g2 = i, len -= i;
    
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
    
              for (; i < len; i += g1) {
                intPart += groupSeparator + intDigits.substr(i, g1);
              }
    
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = '-' + intPart;
            }
    
            str = fractionPart
             ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)
              ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
               '$&' + FORMAT.fractionGroupSeparator)
              : fractionPart)
             : intPart;
          }
    
          return str;
        };
    
    
        /*
         * Return a string array representing the value of this BigNumber as a simple fraction with
         * an integer numerator and an integer denominator. The denominator will be a positive
         * non-zero value less than or equal to the specified maximum denominator. If a maximum
         * denominator is not specified, the denominator will be the lowest value necessary to
         * represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
         *
         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
         */
        P.toFraction = function (md) {
          var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,
            x = this,
            xc = x.c;
    
          if (md != null) {
            n = new BigNumber(md);
    
            // Throw if md is less than one or is not an integer, unless it is Infinity.
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error
                (bignumberError + 'Argument ' +
                  (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);
            }
          }
    
          if (!xc) return x.toString();
    
          d = new BigNumber(ONE);
          n1 = d0 = new BigNumber(ONE);
          d1 = n0 = new BigNumber(ONE);
          s = coeffToString(xc);
    
          // Determine initial denominator.
          // d is a power of 10 and the minimum max denominator that specifies the value exactly.
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;
    
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber(s);
    
          // n0 = d1 = 0
          n0.c[0] = 0;
    
          for (; ;)  {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
    
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e *= 2;
    
          // Determine which fraction is closer to x, n0/d0 or n1/d1
          arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
             div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
              ? [n1.toString(), d1.toString()]
              : [n0.toString(), d0.toString()];
    
          MAX_EXP = exp;
          return arr;
        };
    
    
        /*
         * Return the value of this BigNumber converted to a number primitive.
         */
        P.toNumber = function () {
          return +this;
        };
    
    
        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
         */
        P.toPrecision = function (sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
    
    
        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to ALPHABET.length inclusive.
         *
         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
         */
        P.toString = function (b) {
          var str,
            n = this,
            s = n.s,
            e = n.e;
    
          // Infinity or NaN?
          if (e === null) {
    
            if (s) {
              str = 'Infinity';
              if (s < 0) str = '-' + str;
            } else {
              str = 'NaN';
            }
          } else {
            str = coeffToString(n.c);
    
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS
               ? toExponential(str, e)
               : toFixedPoint(str, e, '0');
            } else {
              intCheck(b, 2, ALPHABET.length, 'Base');
              str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);
            }
    
            if (s < 0 && n.c[0]) str = '-' + str;
          }
    
          return str;
        };
    
    
        /*
         * Return as toString, but do not accept a base argument, and include the minus sign for
         * negative zero.
         */
        P.valueOf = P.toJSON = function () {
          var str,
            n = this,
            e = n.e;
    
          if (e === null) return n.toString();
    
          str = coeffToString(n.c);
    
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
            ? toExponential(str, e)
            : toFixedPoint(str, e, '0');
    
          return n.s < 0 ? '-' + str : str;
        };
    
    
        P._isBigNumber = true;
    
        if (configObject != null) BigNumber.set(configObject);
    
        return BigNumber;
      }
    
    
      // PRIVATE HELPER FUNCTIONS
    
    
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
    
    
      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
        var s, z,
          i = 1,
          j = a.length,
          r = a[0] + '';
    
        for (; i < j;) {
          s = a[i++] + '';
          z = LOG_BASE - s.length;
          for (; z--; s = '0' + s);
          r += s;
        }
    
        // Determine trailing zeros.
        for (j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
      }
    
    
      // Compare the value of BigNumbers x and y.
      function compare(x, y) {
        var a, b,
          xc = x.c,
          yc = y.c,
          i = x.s,
          j = y.s,
          k = x.e,
          l = y.e;
    
        // Either NaN?
        if (!i || !j) return null;
    
        a = xc && !xc[0];
        b = yc && !yc[0];
    
        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;
    
        // Signs differ?
        if (i != j) return i;
    
        a = i < 0;
        b = k == l;
    
        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
    
        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;
    
        j = (k = xc.length) < (l = yc.length) ? k : l;
    
        // Compare digit by digit.
        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
    
        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
    
    
      /*
       * Check that n is a primitive number, an integer, and in range, otherwise throw.
       */
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {
          throw Error
           (bignumberError + (name || 'Argument') + (typeof n == 'number'
             ? n < min || n > max ? ' out of range: ' : ' not an integer: '
             : ' not a primitive number: ') + n);
        }
      }
    
    
      function isArray(obj) {
        return Object.prototype.toString.call(obj) == '[object Array]';
      }
    
    
      // Assumes finite n.
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
    
    
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
         (e < 0 ? 'e' : 'e+') + e;
      }
    
    
      function toFixedPoint(str, e, z) {
        var len, zs;
    
        // Negative exponent?
        if (e < 0) {
    
          // Prepend zeros.
          for (zs = z + '.'; ++e; zs += z);
          str = zs + str;
    
        // Positive exponent
        } else {
          len = str.length;
    
          // Append zeros.
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z);
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + '.' + str.slice(e);
          }
        }
    
        return str;
      }
    
    
      // EXPORT
    
    
      BigNumber = clone();
      BigNumber['default'] = BigNumber.BigNumber = BigNumber;
    
      // AMD.
      if (typeof define == 'function' && define.amd) {
        define(function () { return BigNumber; });
    
      // Node.js and other environments that support module.exports.
      } else if (typeof module != 'undefined' && module.exports) {
        module.exports = BigNumber;
    
      // Browser.
      } else {
        if (!globalObject) {
          globalObject = typeof self != 'undefined' && self ? self : window;
        }
    
        globalObject.BigNumber = BigNumber;
      }
    })(this);
    
    },{}],61:[function(require,module,exports){
    (function (module, exports) {
      'use strict';
    
      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }
    
      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    
      // BN
    
      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
    
        this.negative = 0;
        this.words = null;
        this.length = 0;
    
        // Reduction context
        this.red = null;
    
        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }
    
          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }
    
      BN.BN = BN;
      BN.wordSize = 26;
    
      var Buffer;
      try {
        Buffer = require('buffer').Buffer;
      } catch (e) {
      }
    
      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }
    
        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
    
      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
    
      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
    
      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }
    
        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }
    
        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
    
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
        }
    
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
    
        if (number[0] === '-') {
          this.negative = 1;
        }
    
        this.strip();
    
        if (endian !== 'le') return;
    
        this._initArray(this.toArray(), base, endian);
      };
    
      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [ number & 0x3ffffff ];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }
    
        if (endian !== 'le') return;
    
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };
    
      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }
    
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
    
      function parseHex (str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
    
          r <<= 4;
    
          // 'a' - 'f'
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 0xa;
    
          // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 0xa;
    
          // '0' - '9'
          } else {
            r |= c & 0xf;
          }
        }
        return r;
      }
    
      BN.prototype._parseHex = function _parseHex (number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        }
        this.strip();
      };
    
      function parseBase (str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
    
          r *= mul;
    
          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;
    
          // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;
    
          // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }
    
      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [ 0 ];
        this.length = 1;
    
        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;
    
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
    
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
    
          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
    
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
    
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
    
          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
    
      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
    
      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
    
      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
    
      // Remove leading `0` from `this`
      BN.prototype.strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
    
      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
    
      BN.prototype.inspect = function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
    
      /*
    
      var zeros = [];
      var groupSizes = [];
      var groupBases = [];
    
      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
    
      */
    
      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];
    
      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];
    
      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];
    
      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
    
        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
    
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        assert(false, 'Base should be between 2 and 36');
      };
    
      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };
    
      BN.prototype.toJSON = function toJSON () {
        return this.toString(16);
      };
    
      BN.prototype.toBuffer = function toBuffer (endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };
    
      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
    
      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
    
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
    
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
    
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
    
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
    
            res[i] = b;
          }
    
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
    
        return res;
      };
    
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
    
      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;
    
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };
    
      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
    
      function toBitArray (num) {
        var w = new Array(num.bitLength());
    
        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;
    
          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }
    
        return w;
      }
    
      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;
    
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
    
      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };
    
      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
    
      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
    
      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };
    
      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };
    
      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
    
        return this;
      };
    
      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
    
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
    
        return this.strip();
      };
    
      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
    
      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
    
      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
    
      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
    
        this.length = b.length;
    
        return this.strip();
      };
    
      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
    
      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
    
      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
    
      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
    
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = a.length;
    
        return this.strip();
      };
    
      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
    
      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
    
      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
    
      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);
    
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
    
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
    
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
    
        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }
    
        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }
    
        // And remove leading zeroes
        return this.strip();
      };
    
      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };
    
      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
    
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
    
        this._expand(off + 1);
    
        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
    
        return this.strip();
      };
    
      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;
    
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
    
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
    
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
    
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        return this;
      };
    
      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
    
        if (this.length > num.length) return this.clone().iadd(num);
    
        return num.clone().iadd(this);
      };
    
      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
    
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
    
        // At this point both numbers are positive
        var cmp = this.cmp(num);
    
        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
    
        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
    
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = Math.max(this.length, i);
    
        if (a !== this) {
          this.negative = 1;
        }
    
        return this.strip();
      };
    
      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };
    
      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;
    
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
    
        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;
    
        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
    
        return out.strip();
      }
    
      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
    
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
    
      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
    
      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
    
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
    
            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;
    
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
    
        return out.strip();
      }
    
      function jumboMulTo (self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }
    
      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
    
        return res;
      };
    
      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion
    
      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }
    
      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
    
        return t;
      };
    
      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;
    
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }
    
        return rb;
      };
    
      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
    
      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
    
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
    
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
    
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
    
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
    
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
    
              var rx = rtwdf_ * ro - itwdf_ * io;
    
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
    
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
    
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
    
              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
    
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
    
      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
    
        return 1 << i + 1 + odd;
      };
    
      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;
    
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
    
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
    
          t = iws[i];
    
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
    
      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;
    
          ws[i] = w & 0x3ffffff;
    
          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }
    
        return ws;
      };
    
      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
    
          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }
    
        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
    
        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };
    
      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
    
        return ph;
      };
    
      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
    
        var rbt = this.makeRBT(N);
    
        var _ = this.stub(N);
    
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
    
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
    
        var rmws = out.words;
        rmws.length = N;
    
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
    
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
    
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
    
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
    
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
    
      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
    
      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
    
      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };
    
      BN.prototype.imuln = function imuln (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
    
        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }
    
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
    
        return this;
      };
    
      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };
    
      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };
    
      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };
    
      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
    
        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
    
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
    
            res = res.mul(q);
          }
        }
    
        return res;
      };
    
      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;
    
        if (r !== 0) {
          var carry = 0;
    
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }
    
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
    
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
    
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
    
          this.length += s;
        }
    
        return this.strip();
      };
    
      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };
    
      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }
    
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;
    
        h -= s;
        h = Math.max(0, h);
    
        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
    
        if (s === 0) {
          // No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
    
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }
    
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
    
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
    
        return this.strip();
      };
    
      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
    
      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };
    
      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };
    
      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };
    
      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };
    
      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
    
        // Check bit and return
        var w = this.words[s];
    
        return !!(w & q);
      };
    
      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
    
        assert(this.negative === 0, 'imaskn works only with positive numbers');
    
        if (this.length <= s) {
          return this;
        }
    
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
    
        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }
    
        return this.strip();
      };
    
      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };
    
      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
    
        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
    
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
    
        // Add without checks
        return this._iaddn(num);
      };
    
      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;
    
        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
    
        return this;
      };
    
      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
    
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
    
        this.words[0] -= num;
    
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }
    
        return this.strip();
      };
    
      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };
    
      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };
    
      BN.prototype.iabs = function iabs () {
        this.negative = 0;
    
        return this;
      };
    
      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };
    
      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;
    
        this._expand(len);
    
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }
    
        if (carry === 0) return this.strip();
    
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
    
        return this.strip();
      };
    
      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;
    
        var a = this.clone();
        var b = num;
    
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
    
        // Initialize quotient
        var m = a.length - b.length;
        var q;
    
        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
    
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
    
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);
    
          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);
    
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
    
        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }
    
        return {
          div: q || null,
          mod: a
        };
      };
    
      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());
    
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
    
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
    
          return {
            div: div,
            mod: mod
          };
        }
    
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          return {
            div: div,
            mod: res.mod
          };
        }
    
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
    
          return {
            div: res.div,
            mod: mod
          };
        }
    
        // Both numbers are positive at this point
    
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
    
        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
    
          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
    
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
    
        return this._wordDiv(num, mode);
      };
    
      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };
    
      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };
    
      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };
    
      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);
    
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
    
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
    
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
    
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
    
      BN.prototype.modn = function modn (num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
    
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
    
        return acc;
      };
    
      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        assert(num <= 0x3ffffff);
    
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }
    
        return this.strip();
      };
    
      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };
    
      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var x = this;
        var y = p.clone();
    
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
    
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
    
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
    
        var g = 0;
    
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
    
        var yp = y.clone();
        var xp = x.clone();
    
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
    
              A.iushrn(1);
              B.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
    
              C.iushrn(1);
              D.iushrn(1);
            }
          }
    
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
    
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
    
      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var a = this;
        var b = p.clone();
    
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
    
        var x1 = new BN(1);
        var x2 = new BN(0);
    
        var delta = b.clone();
    
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
    
              x1.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
    
              x2.iushrn(1);
            }
          }
    
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
    
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
    
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
    
        return res;
      };
    
      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
    
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
    
        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
    
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
    
          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
    
          a.isub(b);
        } while (true);
    
        return b.iushln(shift);
      };
    
      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };
    
      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };
    
      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };
    
      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };
    
      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
    
        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
    
      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };
    
      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;
    
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
    
        this.strip();
    
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
    
          assert(num <= 0x3ffffff, 'Number is too big');
    
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
    
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
    
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
    
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
    
      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };
    
      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };
    
      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };
    
      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };
    
      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };
    
      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };
    
      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };
    
      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };
    
      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };
    
      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };
    
      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };
    
      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };
    
      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };
    
      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };
    
      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };
    
      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };
    
      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };
    
      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };
    
      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };
    
      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };
    
      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
    
      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
    
      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };
    
      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };
    
      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
    
      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };
    
      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };
    
      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
    
      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
    
      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
    
        this.tmp = this._tmp();
      }
    
      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
    
      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
    
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
    
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
    
        return r;
      };
    
      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };
    
      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };
    
      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);
    
      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
    
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
    
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
    
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
    
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
    
      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
    
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }
    
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
    
      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);
    
      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);
    
      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);
    
      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
    
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
    
      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
    
        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;
    
        return prime;
      };
    
      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }
    
      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };
    
      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };
    
      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
    
      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }
    
        return this.m.sub(a)._forceRed(this);
      };
    
      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);
    
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);
    
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
    
      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);
    
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);
    
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
    
      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
    
      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
    
      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
    
      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };
    
      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };
    
      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();
    
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
    
        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
    
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
    
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
    
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
    
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
    
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
    
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
    
        return r;
      };
    
      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
    
      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
    
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
    
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
    
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
    
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
    
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
    
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
    
        return res;
      };
    
      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);
    
        return r === num ? r.clone() : r;
      };
    
      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
    
      //
      // Montgomery method engine
      //
    
      BN.mont = function mont (num) {
        return new Mont(num);
      };
    
      function Mont (m) {
        Red.call(this, m);
    
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }
    
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
    
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
    
      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };
    
      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
    
      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
    
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
    
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);
    
    },{"buffer":63}],62:[function(require,module,exports){
    var r;
    
    module.exports = function rand(len) {
      if (!r)
        r = new Rand(null);
    
      return r.generate(len);
    };
    
    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;
    
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);
    
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
    
    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
    
      // Safari's WebWorkers do not have `crypto`
      } else if (typeof window === 'object') {
        // Old junk
        Rand.prototype._rand = function() {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto = require('crypto');
        if (typeof crypto.randomBytes !== 'function')
          throw new Error('Not supported');
    
        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {
      }
    }
    
    },{"crypto":63}],63:[function(require,module,exports){
    
    },{}],64:[function(require,module,exports){
    // based on the aes implimentation in triple sec
    // https://github.com/keybase/triplesec
    // which is in turn based on the one from crypto-js
    // https://code.google.com/p/crypto-js/
    
    var Buffer = require('safe-buffer').Buffer
    
    function asUInt32Array (buf) {
      if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
    
      var len = (buf.length / 4) | 0
      var out = new Array(len)
    
      for (var i = 0; i < len; i++) {
        out[i] = buf.readUInt32BE(i * 4)
      }
    
      return out
    }
    
    function scrubVec (v) {
      for (var i = 0; i < v.length; v++) {
        v[i] = 0
      }
    }
    
    function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0]
      var SUB_MIX1 = SUB_MIX[1]
      var SUB_MIX2 = SUB_MIX[2]
      var SUB_MIX3 = SUB_MIX[3]
    
      var s0 = M[0] ^ keySchedule[0]
      var s1 = M[1] ^ keySchedule[1]
      var s2 = M[2] ^ keySchedule[2]
      var s3 = M[3] ^ keySchedule[3]
      var t0, t1, t2, t3
      var ksRow = 4
    
      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
        s0 = t0
        s1 = t1
        s2 = t2
        s3 = t3
      }
    
      t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
      t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
      t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
      t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
      t0 = t0 >>> 0
      t1 = t1 >>> 0
      t2 = t2 >>> 0
      t3 = t3 >>> 0
    
      return [t0, t1, t2, t3]
    }
    
    // AES constants
    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
    var G = (function () {
      // Compute double table
      var d = new Array(256)
      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1
        } else {
          d[j] = (j << 1) ^ 0x11b
        }
      }
    
      var SBOX = []
      var INV_SBOX = []
      var SUB_MIX = [[], [], [], []]
      var INV_SUB_MIX = [[], [], [], []]
    
      // Walk GF(2^8)
      var x = 0
      var xi = 0
      for (var i = 0; i < 256; ++i) {
        // Compute sbox
        var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
        SBOX[x] = sx
        INV_SBOX[sx] = x
    
        // Compute multiplication
        var x2 = d[x]
        var x4 = d[x2]
        var x8 = d[x4]
    
        // Compute sub bytes, mix columns tables
        var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
        SUB_MIX[0][x] = (t << 24) | (t >>> 8)
        SUB_MIX[1][x] = (t << 16) | (t >>> 16)
        SUB_MIX[2][x] = (t << 8) | (t >>> 24)
        SUB_MIX[3][x] = t
    
        // Compute inv sub bytes, inv mix columns tables
        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
        INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
        INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
        INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
        INV_SUB_MIX[3][sx] = t
    
        if (x === 0) {
          x = xi = 1
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]]
          xi ^= d[d[xi]]
        }
      }
    
      return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
      }
    })()
    
    function AES (key) {
      this._key = asUInt32Array(key)
      this._reset()
    }
    
    AES.blockSize = 4 * 4
    AES.keySize = 256 / 8
    AES.prototype.blockSize = AES.blockSize
    AES.prototype.keySize = AES.keySize
    AES.prototype._reset = function () {
      var keyWords = this._key
      var keySize = keyWords.length
      var nRounds = keySize + 6
      var ksRows = (nRounds + 1) * 4
    
      var keySchedule = []
      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k]
      }
    
      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1]
    
        if (k % keySize === 0) {
          t = (t << 8) | (t >>> 24)
          t =
            (G.SBOX[t >>> 24] << 24) |
            (G.SBOX[(t >>> 16) & 0xff] << 16) |
            (G.SBOX[(t >>> 8) & 0xff] << 8) |
            (G.SBOX[t & 0xff])
    
          t ^= RCON[(k / keySize) | 0] << 24
        } else if (keySize > 6 && k % keySize === 4) {
          t =
            (G.SBOX[t >>> 24] << 24) |
            (G.SBOX[(t >>> 16) & 0xff] << 16) |
            (G.SBOX[(t >>> 8) & 0xff] << 8) |
            (G.SBOX[t & 0xff])
        }
    
        keySchedule[k] = keySchedule[k - keySize] ^ t
      }
    
      var invKeySchedule = []
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]
    
        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt
        } else {
          invKeySchedule[ik] =
            G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
            G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
            G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
            G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
        }
      }
    
      this._nRounds = nRounds
      this._keySchedule = keySchedule
      this._invKeySchedule = invKeySchedule
    }
    
    AES.prototype.encryptBlockRaw = function (M) {
      M = asUInt32Array(M)
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
    }
    
    AES.prototype.encryptBlock = function (M) {
      var out = this.encryptBlockRaw(M)
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0], 0)
      buf.writeUInt32BE(out[1], 4)
      buf.writeUInt32BE(out[2], 8)
      buf.writeUInt32BE(out[3], 12)
      return buf
    }
    
    AES.prototype.decryptBlock = function (M) {
      M = asUInt32Array(M)
    
      // swap
      var m1 = M[1]
      M[1] = M[3]
      M[3] = m1
    
      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0], 0)
      buf.writeUInt32BE(out[3], 4)
      buf.writeUInt32BE(out[2], 8)
      buf.writeUInt32BE(out[1], 12)
      return buf
    }
    
    AES.prototype.scrub = function () {
      scrubVec(this._keySchedule)
      scrubVec(this._invKeySchedule)
      scrubVec(this._key)
    }
    
    module.exports.AES = AES
    
    },{"safe-buffer":264}],65:[function(require,module,exports){
    var aes = require('./aes')
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('cipher-base')
    var inherits = require('inherits')
    var GHASH = require('./ghash')
    var xor = require('buffer-xor')
    var incr32 = require('./incr32')
    
    function xorTest (a, b) {
      var out = 0
      if (a.length !== b.length) out++
    
      var len = Math.min(a.length, b.length)
      for (var i = 0; i < len; ++i) {
        out += (a[i] ^ b[i])
      }
    
      return out
    }
    
    function calcIv (self, iv, ck) {
      if (iv.length === 12) {
        self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
        return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
      }
      var ghash = new GHASH(ck)
      var len = iv.length
      var toPad = len % 16
      ghash.update(iv)
      if (toPad) {
        toPad = 16 - toPad
        ghash.update(Buffer.alloc(toPad, 0))
      }
      ghash.update(Buffer.alloc(8, 0))
      var ivBits = len * 8
      var tail = Buffer.alloc(8)
      tail.writeUIntBE(ivBits, 0, 8)
      ghash.update(tail)
      self._finID = ghash.state
      var out = Buffer.from(self._finID)
      incr32(out)
      return out
    }
    function StreamCipher (mode, key, iv, decrypt) {
      Transform.call(this)
    
      var h = Buffer.alloc(4, 0)
    
      this._cipher = new aes.AES(key)
      var ck = this._cipher.encryptBlock(h)
      this._ghash = new GHASH(ck)
      iv = calcIv(this, iv, ck)
    
      this._prev = Buffer.from(iv)
      this._cache = Buffer.allocUnsafe(0)
      this._secCache = Buffer.allocUnsafe(0)
      this._decrypt = decrypt
      this._alen = 0
      this._len = 0
      this._mode = mode
    
      this._authTag = null
      this._called = false
    }
    
    inherits(StreamCipher, Transform)
    
    StreamCipher.prototype._update = function (chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - (this._alen % 16)
        if (rump < 16) {
          rump = Buffer.alloc(rump, 0)
          this._ghash.update(rump)
        }
      }
    
      this._called = true
      var out = this._mode.encrypt(this, chunk)
      if (this._decrypt) {
        this._ghash.update(chunk)
      } else {
        this._ghash.update(out)
      }
      this._len += chunk.length
      return out
    }
    
    StreamCipher.prototype._final = function () {
      if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')
    
      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')
    
      this._authTag = tag
      this._cipher.scrub()
    }
    
    StreamCipher.prototype.getAuthTag = function getAuthTag () {
      if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')
    
      return this._authTag
    }
    
    StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
      if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')
    
      this._authTag = tag
    }
    
    StreamCipher.prototype.setAAD = function setAAD (buf) {
      if (this._called) throw new Error('Attempting to set AAD in unsupported state')
    
      this._ghash.update(buf)
      this._alen += buf.length
    }
    
    module.exports = StreamCipher
    
    },{"./aes":64,"./ghash":69,"./incr32":70,"buffer-xor":95,"cipher-base":98,"inherits":199,"safe-buffer":264}],66:[function(require,module,exports){
    var ciphers = require('./encrypter')
    var deciphers = require('./decrypter')
    var modes = require('./modes/list.json')
    
    function getCiphers () {
      return Object.keys(modes)
    }
    
    exports.createCipher = exports.Cipher = ciphers.createCipher
    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
    exports.createDecipher = exports.Decipher = deciphers.createDecipher
    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
    exports.listCiphers = exports.getCiphers = getCiphers
    
    },{"./decrypter":67,"./encrypter":68,"./modes/list.json":78}],67:[function(require,module,exports){
    var AuthCipher = require('./authCipher')
    var Buffer = require('safe-buffer').Buffer
    var MODES = require('./modes')
    var StreamCipher = require('./streamCipher')
    var Transform = require('cipher-base')
    var aes = require('./aes')
    var ebtk = require('evp_bytestokey')
    var inherits = require('inherits')
    
    function Decipher (mode, key, iv) {
      Transform.call(this)
    
      this._cache = new Splitter()
      this._last = void 0
      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._mode = mode
      this._autopadding = true
    }
    
    inherits(Decipher, Transform)
    
    Decipher.prototype._update = function (data) {
      this._cache.add(data)
      var chunk
      var thing
      var out = []
      while ((chunk = this._cache.get(this._autopadding))) {
        thing = this._mode.decrypt(this, chunk)
        out.push(thing)
      }
      return Buffer.concat(out)
    }
    
    Decipher.prototype._final = function () {
      var chunk = this._cache.flush()
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk))
      } else if (chunk) {
        throw new Error('data not multiple of block length')
      }
    }
    
    Decipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo
      return this
    }
    
    function Splitter () {
      this.cache = Buffer.allocUnsafe(0)
    }
    
    Splitter.prototype.add = function (data) {
      this.cache = Buffer.concat([this.cache, data])
    }
    
    Splitter.prototype.get = function (autoPadding) {
      var out
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16)
          this.cache = this.cache.slice(16)
          return out
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16)
          this.cache = this.cache.slice(16)
          return out
        }
      }
    
      return null
    }
    
    Splitter.prototype.flush = function () {
      if (this.cache.length) return this.cache
    }
    
    function unpad (last) {
      var padded = last[15]
      if (padded < 1 || padded > 16) {
        throw new Error('unable to decrypt data')
      }
      var i = -1
      while (++i < padded) {
        if (last[(i + (16 - padded))] !== padded) {
          throw new Error('unable to decrypt data')
        }
      }
      if (padded === 16) return
    
      return last.slice(0, 16 - padded)
    }
    
    function createDecipheriv (suite, password, iv) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')
    
      if (typeof iv === 'string') iv = Buffer.from(iv)
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)
    
      if (typeof password === 'string') password = Buffer.from(password)
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)
    
      if (config.type === 'stream') {
        return new StreamCipher(config.module, password, iv, true)
      } else if (config.type === 'auth') {
        return new AuthCipher(config.module, password, iv, true)
      }
    
      return new Decipher(config.module, password, iv)
    }
    
    function createDecipher (suite, password) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')
    
      var keys = ebtk(password, false, config.key, config.iv)
      return createDecipheriv(suite, keys.key, keys.iv)
    }
    
    exports.createDecipher = createDecipher
    exports.createDecipheriv = createDecipheriv
    
    },{"./aes":64,"./authCipher":65,"./modes":77,"./streamCipher":80,"cipher-base":98,"evp_bytestokey":172,"inherits":199,"safe-buffer":264}],68:[function(require,module,exports){
    var MODES = require('./modes')
    var AuthCipher = require('./authCipher')
    var Buffer = require('safe-buffer').Buffer
    var StreamCipher = require('./streamCipher')
    var Transform = require('cipher-base')
    var aes = require('./aes')
    var ebtk = require('evp_bytestokey')
    var inherits = require('inherits')
    
    function Cipher (mode, key, iv) {
      Transform.call(this)
    
      this._cache = new Splitter()
      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._mode = mode
      this._autopadding = true
    }
    
    inherits(Cipher, Transform)
    
    Cipher.prototype._update = function (data) {
      this._cache.add(data)
      var chunk
      var thing
      var out = []
    
      while ((chunk = this._cache.get())) {
        thing = this._mode.encrypt(this, chunk)
        out.push(thing)
      }
    
      return Buffer.concat(out)
    }
    
    var PADDING = Buffer.alloc(16, 0x10)
    
    Cipher.prototype._final = function () {
      var chunk = this._cache.flush()
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk)
        this._cipher.scrub()
        return chunk
      }
    
      if (!chunk.equals(PADDING)) {
        this._cipher.scrub()
        throw new Error('data not multiple of block length')
      }
    }
    
    Cipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo
      return this
    }
    
    function Splitter () {
      this.cache = Buffer.allocUnsafe(0)
    }
    
    Splitter.prototype.add = function (data) {
      this.cache = Buffer.concat([this.cache, data])
    }
    
    Splitter.prototype.get = function () {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16)
        this.cache = this.cache.slice(16)
        return out
      }
      return null
    }
    
    Splitter.prototype.flush = function () {
      var len = 16 - this.cache.length
      var padBuff = Buffer.allocUnsafe(len)
    
      var i = -1
      while (++i < len) {
        padBuff.writeUInt8(len, i)
      }
    
      return Buffer.concat([this.cache, padBuff])
    }
    
    function createCipheriv (suite, password, iv) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')
    
      if (typeof password === 'string') password = Buffer.from(password)
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)
    
      if (typeof iv === 'string') iv = Buffer.from(iv)
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)
    
      if (config.type === 'stream') {
        return new StreamCipher(config.module, password, iv)
      } else if (config.type === 'auth') {
        return new AuthCipher(config.module, password, iv)
      }
    
      return new Cipher(config.module, password, iv)
    }
    
    function createCipher (suite, password) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')
    
      var keys = ebtk(password, false, config.key, config.iv)
      return createCipheriv(suite, keys.key, keys.iv)
    }
    
    exports.createCipheriv = createCipheriv
    exports.createCipher = createCipher
    
    },{"./aes":64,"./authCipher":65,"./modes":77,"./streamCipher":80,"cipher-base":98,"evp_bytestokey":172,"inherits":199,"safe-buffer":264}],69:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var ZEROES = Buffer.alloc(16, 0)
    
    function toArray (buf) {
      return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
      ]
    }
    
    function fromArray (out) {
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0] >>> 0, 0)
      buf.writeUInt32BE(out[1] >>> 0, 4)
      buf.writeUInt32BE(out[2] >>> 0, 8)
      buf.writeUInt32BE(out[3] >>> 0, 12)
      return buf
    }
    
    function GHASH (key) {
      this.h = key
      this.state = Buffer.alloc(16, 0)
      this.cache = Buffer.allocUnsafe(0)
    }
    
    // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
    // by Juho Vähä-Herttua
    GHASH.prototype.ghash = function (block) {
      var i = -1
      while (++i < block.length) {
        this.state[i] ^= block[i]
      }
      this._multiply()
    }
    
    GHASH.prototype._multiply = function () {
      var Vi = toArray(this.h)
      var Zi = [0, 0, 0, 0]
      var j, xi, lsbVi
      var i = -1
      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
        if (xi) {
          // Z_i+1 = Z_i ^ V_i
          Zi[0] ^= Vi[0]
          Zi[1] ^= Vi[1]
          Zi[2] ^= Vi[2]
          Zi[3] ^= Vi[3]
        }
    
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0
    
        // V_i+1 = V_i >> 1
        for (j = 3; j > 0; j--) {
          Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
        }
        Vi[0] = Vi[0] >>> 1
    
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) {
          Vi[0] = Vi[0] ^ (0xe1 << 24)
        }
      }
      this.state = fromArray(Zi)
    }
    
    GHASH.prototype.update = function (buf) {
      this.cache = Buffer.concat([this.cache, buf])
      var chunk
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16)
        this.cache = this.cache.slice(16)
        this.ghash(chunk)
      }
    }
    
    GHASH.prototype.final = function (abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer.concat([this.cache, ZEROES], 16))
      }
    
      this.ghash(fromArray([0, abl, 0, bl]))
      return this.state
    }
    
    module.exports = GHASH
    
    },{"safe-buffer":264}],70:[function(require,module,exports){
    function incr32 (iv) {
      var len = iv.length
      var item
      while (len--) {
        item = iv.readUInt8(len)
        if (item === 255) {
          iv.writeUInt8(0, len)
        } else {
          item++
          iv.writeUInt8(item, len)
          break
        }
      }
    }
    module.exports = incr32
    
    },{}],71:[function(require,module,exports){
    var xor = require('buffer-xor')
    
    exports.encrypt = function (self, block) {
      var data = xor(block, self._prev)
    
      self._prev = self._cipher.encryptBlock(data)
      return self._prev
    }
    
    exports.decrypt = function (self, block) {
      var pad = self._prev
    
      self._prev = block
      var out = self._cipher.decryptBlock(block)
    
      return xor(out, pad)
    }
    
    },{"buffer-xor":95}],72:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var xor = require('buffer-xor')
    
    function encryptStart (self, data, decrypt) {
      var len = data.length
      var out = xor(data, self._cache)
      self._cache = self._cache.slice(len)
      self._prev = Buffer.concat([self._prev, decrypt ? data : out])
      return out
    }
    
    exports.encrypt = function (self, data, decrypt) {
      var out = Buffer.allocUnsafe(0)
      var len
    
      while (data.length) {
        if (self._cache.length === 0) {
          self._cache = self._cipher.encryptBlock(self._prev)
          self._prev = Buffer.allocUnsafe(0)
        }
    
        if (self._cache.length <= data.length) {
          len = self._cache.length
          out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
          data = data.slice(len)
        } else {
          out = Buffer.concat([out, encryptStart(self, data, decrypt)])
          break
        }
      }
    
      return out
    }
    
    },{"buffer-xor":95,"safe-buffer":264}],73:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    
    function encryptByte (self, byteParam, decrypt) {
      var pad
      var i = -1
      var len = 8
      var out = 0
      var bit, value
      while (++i < len) {
        pad = self._cipher.encryptBlock(self._prev)
        bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
        value = pad[0] ^ bit
        out += ((value & 0x80) >> (i % 8))
        self._prev = shiftIn(self._prev, decrypt ? bit : value)
      }
      return out
    }
    
    function shiftIn (buffer, value) {
      var len = buffer.length
      var i = -1
      var out = Buffer.allocUnsafe(buffer.length)
      buffer = Buffer.concat([buffer, Buffer.from([value])])
    
      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
      }
    
      return out
    }
    
    exports.encrypt = function (self, chunk, decrypt) {
      var len = chunk.length
      var out = Buffer.allocUnsafe(len)
      var i = -1
    
      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt)
      }
    
      return out
    }
    
    },{"safe-buffer":264}],74:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    
    function encryptByte (self, byteParam, decrypt) {
      var pad = self._cipher.encryptBlock(self._prev)
      var out = pad[0] ^ byteParam
    
      self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([decrypt ? byteParam : out])
      ])
    
      return out
    }
    
    exports.encrypt = function (self, chunk, decrypt) {
      var len = chunk.length
      var out = Buffer.allocUnsafe(len)
      var i = -1
    
      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt)
      }
    
      return out
    }
    
    },{"safe-buffer":264}],75:[function(require,module,exports){
    var xor = require('buffer-xor')
    var Buffer = require('safe-buffer').Buffer
    var incr32 = require('../incr32')
    
    function getBlock (self) {
      var out = self._cipher.encryptBlockRaw(self._prev)
      incr32(self._prev)
      return out
    }
    
    var blockSize = 16
    exports.encrypt = function (self, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize)
      var start = self._cache.length
      self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
      ])
      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock(self)
        var offset = start + i * blockSize
        self._cache.writeUInt32BE(out[0], offset + 0)
        self._cache.writeUInt32BE(out[1], offset + 4)
        self._cache.writeUInt32BE(out[2], offset + 8)
        self._cache.writeUInt32BE(out[3], offset + 12)
      }
      var pad = self._cache.slice(0, chunk.length)
      self._cache = self._cache.slice(chunk.length)
      return xor(chunk, pad)
    }
    
    },{"../incr32":70,"buffer-xor":95,"safe-buffer":264}],76:[function(require,module,exports){
    exports.encrypt = function (self, block) {
      return self._cipher.encryptBlock(block)
    }
    
    exports.decrypt = function (self, block) {
      return self._cipher.decryptBlock(block)
    }
    
    },{}],77:[function(require,module,exports){
    var modeModules = {
      ECB: require('./ecb'),
      CBC: require('./cbc'),
      CFB: require('./cfb'),
      CFB8: require('./cfb8'),
      CFB1: require('./cfb1'),
      OFB: require('./ofb'),
      CTR: require('./ctr'),
      GCM: require('./ctr')
    }
    
    var modes = require('./list.json')
    
    for (var key in modes) {
      modes[key].module = modeModules[modes[key].mode]
    }
    
    module.exports = modes
    
    },{"./cbc":71,"./cfb":72,"./cfb1":73,"./cfb8":74,"./ctr":75,"./ecb":76,"./list.json":78,"./ofb":79}],78:[function(require,module,exports){
    module.exports={
      "aes-128-ecb": {
        "cipher": "AES",
        "key": 128,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-192-ecb": {
        "cipher": "AES",
        "key": 192,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-256-ecb": {
        "cipher": "AES",
        "key": 256,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-128-cbc": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-192-cbc": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-256-cbc": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes128": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes192": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes256": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-128-cfb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-192-cfb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-256-cfb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-128-cfb8": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-192-cfb8": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-256-cfb8": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-128-cfb1": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-192-cfb1": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-256-cfb1": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-128-ofb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-192-ofb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-256-ofb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-128-ctr": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-192-ctr": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-256-ctr": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-128-gcm": {
        "cipher": "AES",
        "key": 128,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-192-gcm": {
        "cipher": "AES",
        "key": 192,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-256-gcm": {
        "cipher": "AES",
        "key": 256,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      }
    }
    
    },{}],79:[function(require,module,exports){
    (function (Buffer){
    var xor = require('buffer-xor')
    
    function getBlock (self) {
      self._prev = self._cipher.encryptBlock(self._prev)
      return self._prev
    }
    
    exports.encrypt = function (self, chunk) {
      while (self._cache.length < chunk.length) {
        self._cache = Buffer.concat([self._cache, getBlock(self)])
      }
    
      var pad = self._cache.slice(0, chunk.length)
      self._cache = self._cache.slice(chunk.length)
      return xor(chunk, pad)
    }
    
    }).call(this,require("buffer").Buffer)
    },{"buffer":96,"buffer-xor":95}],80:[function(require,module,exports){
    var aes = require('./aes')
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('cipher-base')
    var inherits = require('inherits')
    
    function StreamCipher (mode, key, iv, decrypt) {
      Transform.call(this)
    
      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._cache = Buffer.allocUnsafe(0)
      this._secCache = Buffer.allocUnsafe(0)
      this._decrypt = decrypt
      this._mode = mode
    }
    
    inherits(StreamCipher, Transform)
    
    StreamCipher.prototype._update = function (chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt)
    }
    
    StreamCipher.prototype._final = function () {
      this._cipher.scrub()
    }
    
    module.exports = StreamCipher
    
    },{"./aes":64,"cipher-base":98,"inherits":199,"safe-buffer":264}],81:[function(require,module,exports){
    var DES = require('browserify-des')
    var aes = require('browserify-aes/browser')
    var aesModes = require('browserify-aes/modes')
    var desModes = require('browserify-des/modes')
    var ebtk = require('evp_bytestokey')
    
    function createCipher (suite, password) {
      suite = suite.toLowerCase()
    
      var keyLen, ivLen
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key
        ivLen = aesModes[suite].iv
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8
        ivLen = desModes[suite].iv
      } else {
        throw new TypeError('invalid suite type')
      }
    
      var keys = ebtk(password, false, keyLen, ivLen)
      return createCipheriv(suite, keys.key, keys.iv)
    }
    
    function createDecipher (suite, password) {
      suite = suite.toLowerCase()
    
      var keyLen, ivLen
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key
        ivLen = aesModes[suite].iv
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8
        ivLen = desModes[suite].iv
      } else {
        throw new TypeError('invalid suite type')
      }
    
      var keys = ebtk(password, false, keyLen, ivLen)
      return createDecipheriv(suite, keys.key, keys.iv)
    }
    
    function createCipheriv (suite, key, iv) {
      suite = suite.toLowerCase()
      if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
      if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })
    
      throw new TypeError('invalid suite type')
    }
    
    function createDecipheriv (suite, key, iv) {
      suite = suite.toLowerCase()
      if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
      if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })
    
      throw new TypeError('invalid suite type')
    }
    
    function getCiphers () {
      return Object.keys(desModes).concat(aes.getCiphers())
    }
    
    exports.createCipher = exports.Cipher = createCipher
    exports.createCipheriv = exports.Cipheriv = createCipheriv
    exports.createDecipher = exports.Decipher = createDecipher
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv
    exports.listCiphers = exports.getCiphers = getCiphers
    
    },{"browserify-aes/browser":66,"browserify-aes/modes":77,"browserify-des":82,"browserify-des/modes":83,"evp_bytestokey":172}],82:[function(require,module,exports){
    var CipherBase = require('cipher-base')
    var des = require('des.js')
    var inherits = require('inherits')
    var Buffer = require('safe-buffer').Buffer
    
    var modes = {
      'des-ede3-cbc': des.CBC.instantiate(des.EDE),
      'des-ede3': des.EDE,
      'des-ede-cbc': des.CBC.instantiate(des.EDE),
      'des-ede': des.EDE,
      'des-cbc': des.CBC.instantiate(des.DES),
      'des-ecb': des.DES
    }
    modes.des = modes['des-cbc']
    modes.des3 = modes['des-ede3-cbc']
    module.exports = DES
    inherits(DES, CipherBase)
    function DES (opts) {
      CipherBase.call(this)
      var modeName = opts.mode.toLowerCase()
      var mode = modes[modeName]
      var type
      if (opts.decrypt) {
        type = 'decrypt'
      } else {
        type = 'encrypt'
      }
      var key = opts.key
      if (!Buffer.isBuffer(key)) {
        key = Buffer.from(key)
      }
      if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
        key = Buffer.concat([key, key.slice(0, 8)])
      }
      var iv = opts.iv
      if (!Buffer.isBuffer(iv)) {
        iv = Buffer.from(iv)
      }
      this._des = mode.create({
        key: key,
        iv: iv,
        type: type
      })
    }
    DES.prototype._update = function (data) {
      return Buffer.from(this._des.update(data))
    }
    DES.prototype._final = function () {
      return Buffer.from(this._des.final())
    }
    
    },{"cipher-base":98,"des.js":109,"inherits":199,"safe-buffer":264}],83:[function(require,module,exports){
    exports['des-ecb'] = {
      key: 8,
      iv: 0
    }
    exports['des-cbc'] = exports.des = {
      key: 8,
      iv: 8
    }
    exports['des-ede3-cbc'] = exports.des3 = {
      key: 24,
      iv: 8
    }
    exports['des-ede3'] = {
      key: 24,
      iv: 0
    }
    exports['des-ede-cbc'] = {
      key: 16,
      iv: 8
    }
    exports['des-ede'] = {
      key: 16,
      iv: 0
    }
    
    },{}],84:[function(require,module,exports){
    (function (Buffer){
    var bn = require('bn.js');
    var randomBytes = require('randombytes');
    module.exports = crt;
    function blind(priv) {
      var r = getr(priv);
      var blinder = r.toRed(bn.mont(priv.modulus))
      .redPow(new bn(priv.publicExponent)).fromRed();
      return {
        blinder: blinder,
        unblinder:r.invm(priv.modulus)
      };
    }
    function crt(msg, priv) {
      var blinds = blind(priv);
      var len = priv.modulus.byteLength();
      var mod = bn.mont(priv.modulus);
      var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
      var c1 = blinded.toRed(bn.mont(priv.prime1));
      var c2 = blinded.toRed(bn.mont(priv.prime2));
      var qinv = priv.coefficient;
      var p = priv.prime1;
      var q = priv.prime2;
      var m1 = c1.redPow(priv.exponent1);
      var m2 = c2.redPow(priv.exponent2);
      m1 = m1.fromRed();
      m2 = m2.fromRed();
      var h = m1.isub(m2).imul(qinv).umod(p);
      h.imul(q);
      m2.iadd(h);
      return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
    }
    crt.getr = getr;
    function getr(priv) {
      var len = priv.modulus.byteLength();
      var r = new bn(randomBytes(len));
      while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
        r = new bn(randomBytes(len));
      }
      return r;
    }
    
    }).call(this,require("buffer").Buffer)
    },{"bn.js":61,"buffer":96,"randombytes":243}],85:[function(require,module,exports){
    module.exports = require('./browser/algorithms.json')
    
    },{"./browser/algorithms.json":86}],86:[function(require,module,exports){
    module.exports={
      "sha224WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        "sign": "ecdsa/rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "sha256WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        "sign": "ecdsa/rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "sha384WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        "sign": "ecdsa/rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "sha512WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        "sign": "ecdsa/rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        "sign": "rsa",
        "hash": "sha1",
        "id": "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        "sign": "ecdsa",
        "hash": "sha1",
        "id": ""
      },
      "sha256": {
        "sign": "ecdsa",
        "hash": "sha256",
        "id": ""
      },
      "sha224": {
        "sign": "ecdsa",
        "hash": "sha224",
        "id": ""
      },
      "sha384": {
        "sign": "ecdsa",
        "hash": "sha384",
        "id": ""
      },
      "sha512": {
        "sign": "ecdsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-SHA1": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-WITH-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-WITH-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-WITH-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-WITH-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-RIPEMD160": {
        "sign": "dsa",
        "hash": "rmd160",
        "id": ""
      },
      "ripemd160WithRSA": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "md5WithRSAEncryption": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      }
    }
    
    },{}],87:[function(require,module,exports){
    module.exports={
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    }
    
    },{}],88:[function(require,module,exports){
    (function (Buffer){
    var createHash = require('create-hash')
    var stream = require('stream')
    var inherits = require('inherits')
    var sign = require('./sign')
    var verify = require('./verify')
    
    var algorithms = require('./algorithms.json')
    Object.keys(algorithms).forEach(function (key) {
      algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
      algorithms[key.toLowerCase()] = algorithms[key]
    })
    
    function Sign (algorithm) {
      stream.Writable.call(this)
    
      var data = algorithms[algorithm]
      if (!data) throw new Error('Unknown message digest')
    
      this._hashType = data.hash
      this._hash = createHash(data.hash)
      this._tag = data.id
      this._signType = data.sign
    }
    inherits(Sign, stream.Writable)
    
    Sign.prototype._write = function _write (data, _, done) {
      this._hash.update(data)
      done()
    }
    
    Sign.prototype.update = function update (data, enc) {
      if (typeof data === 'string') data = new Buffer(data, enc)
    
      this._hash.update(data)
      return this
    }
    
    Sign.prototype.sign = function signMethod (key, enc) {
      this.end()
      var hash = this._hash.digest()
      var sig = sign(hash, key, this._hashType, this._signType, this._tag)
    
      return enc ? sig.toString(enc) : sig
    }
    
    function Verify (algorithm) {
      stream.Writable.call(this)
    
      var data = algorithms[algorithm]
      if (!data) throw new Error('Unknown message digest')
    
      this._hash = createHash(data.hash)
      this._tag = data.id
      this._signType = data.sign
    }
    inherits(Verify, stream.Writable)
    
    Verify.prototype._write = function _write (data, _, done) {
      this._hash.update(data)
      done()
    }
    
    Verify.prototype.update = function update (data, enc) {
      if (typeof data === 'string') data = new Buffer(data, enc)
    
      this._hash.update(data)
      return this
    }
    
    Verify.prototype.verify = function verifyMethod (key, sig, enc) {
      if (typeof sig === 'string') sig = new Buffer(sig, enc)
    
      this.end()
      var hash = this._hash.digest()
      return verify(sig, hash, key, this._signType, this._tag)
    }
    
    function createSign (algorithm) {
      return new Sign(algorithm)
    }
    
    function createVerify (algorithm) {
      return new Verify(algorithm)
    }
    
    module.exports = {
      Sign: createSign,
      Verify: createVerify,
      createSign: createSign,
      createVerify: createVerify
    }
    
    }).call(this,require("buffer").Buffer)
    },{"./algorithms.json":86,"./sign":89,"./verify":90,"buffer":96,"create-hash":102,"inherits":199,"stream":277}],89:[function(require,module,exports){
    (function (Buffer){
    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var createHmac = require('create-hmac')
    var crt = require('browserify-rsa')
    var EC = require('elliptic').ec
    var BN = require('bn.js')
    var parseKeys = require('parse-asn1')
    var curves = require('./curves.json')
    
    function sign (hash, key, hashType, signType, tag) {
      var priv = parseKeys(key)
      if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
        return ecSign(hash, priv)
      } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type')
        return dsaSign(hash, priv, hashType)
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
      }
      hash = Buffer.concat([tag, hash])
      var len = priv.modulus.byteLength()
      var pad = [ 0, 1 ]
      while (hash.length + pad.length + 1 < len) pad.push(0xff)
      pad.push(0x00)
      var i = -1
      while (++i < hash.length) pad.push(hash[i])
    
      var out = crt(pad, priv)
      return out
    }
    
    function ecSign (hash, priv) {
      var curveId = curves[priv.curve.join('.')]
      if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))
    
      var curve = new EC(curveId)
      var key = curve.keyFromPrivate(priv.privateKey)
      var out = key.sign(hash)
    
      return new Buffer(out.toDER())
    }
    
    function dsaSign (hash, priv, algo) {
      var x = priv.params.priv_key
      var p = priv.params.p
      var q = priv.params.q
      var g = priv.params.g
      var r = new BN(0)
      var k
      var H = bits2int(hash, q).mod(q)
      var s = false
      var kv = getKey(x, q, hash, algo)
      while (s === false) {
        k = makeKey(q, kv, algo)
        r = makeR(g, k, p, q)
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
        if (s.cmpn(0) === 0) {
          s = false
          r = new BN(0)
        }
      }
      return toDER(r, s)
    }
    
    function toDER (r, s) {
      r = r.toArray()
      s = s.toArray()
    
      // Pad values
      if (r[0] & 0x80) r = [ 0 ].concat(r)
      if (s[0] & 0x80) s = [ 0 ].concat(s)
    
      var total = r.length + s.length + 4
      var res = [ 0x30, total, 0x02, r.length ]
      res = res.concat(r, [ 0x02, s.length ], s)
      return new Buffer(res)
    }
    
    function getKey (x, q, hash, algo) {
      x = new Buffer(x.toArray())
      if (x.length < q.byteLength()) {
        var zeros = new Buffer(q.byteLength() - x.length)
        zeros.fill(0)
        x = Buffer.concat([ zeros, x ])
      }
      var hlen = hash.length
      var hbits = bits2octets(hash, q)
      var v = new Buffer(hlen)
      v.fill(1)
      var k = new Buffer(hlen)
      k.fill(0)
      k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
      v = createHmac(algo, k).update(v).digest()
      k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
      v = createHmac(algo, k).update(v).digest()
      return { k: k, v: v }
    }
    
    function bits2int (obits, q) {
      var bits = new BN(obits)
      var shift = (obits.length << 3) - q.bitLength()
      if (shift > 0) bits.ishrn(shift)
      return bits
    }
    
    function bits2octets (bits, q) {
      bits = bits2int(bits, q)
      bits = bits.mod(q)
      var out = new Buffer(bits.toArray())
      if (out.length < q.byteLength()) {
        var zeros = new Buffer(q.byteLength() - out.length)
        zeros.fill(0)
        out = Buffer.concat([ zeros, out ])
      }
      return out
    }
    
    function makeKey (q, kv, algo) {
      var t
      var k
    
      do {
        t = new Buffer(0)
    
        while (t.length * 8 < q.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest()
          t = Buffer.concat([ t, kv.v ])
        }
    
        k = bits2int(t, q)
        kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
        kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      } while (k.cmp(q) !== -1)
    
      return k
    }
    
    function makeR (g, k, p, q) {
      return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
    }
    
    module.exports = sign
    module.exports.getKey = getKey
    module.exports.makeKey = makeKey
    
    }).call(this,require("buffer").Buffer)
    },{"./curves.json":87,"bn.js":61,"browserify-rsa":84,"buffer":96,"create-hmac":104,"elliptic":119,"parse-asn1":224}],90:[function(require,module,exports){
    (function (Buffer){
    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var BN = require('bn.js')
    var EC = require('elliptic').ec
    var parseKeys = require('parse-asn1')
    var curves = require('./curves.json')
    
    function verify (sig, hash, key, signType, tag) {
      var pub = parseKeys(key)
      if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
        return ecVerify(sig, hash, pub)
      } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type')
        return dsaVerify(sig, hash, pub)
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
      }
      hash = Buffer.concat([tag, hash])
      var len = pub.modulus.byteLength()
      var pad = [ 1 ]
      var padNum = 0
      while (hash.length + pad.length + 2 < len) {
        pad.push(0xff)
        padNum++
      }
      pad.push(0x00)
      var i = -1
      while (++i < hash.length) {
        pad.push(hash[i])
      }
      pad = new Buffer(pad)
      var red = BN.mont(pub.modulus)
      sig = new BN(sig).toRed(red)
    
      sig = sig.redPow(new BN(pub.publicExponent))
      sig = new Buffer(sig.fromRed().toArray())
      var out = padNum < 8 ? 1 : 0
      len = Math.min(sig.length, pad.length)
      if (sig.length !== pad.length) out = 1
    
      i = -1
      while (++i < len) out |= sig[i] ^ pad[i]
      return out === 0
    }
    
    function ecVerify (sig, hash, pub) {
      var curveId = curves[pub.data.algorithm.curve.join('.')]
      if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))
    
      var curve = new EC(curveId)
      var pubkey = pub.data.subjectPrivateKey.data
    
      return curve.verify(hash, sig, pubkey)
    }
    
    function dsaVerify (sig, hash, pub) {
      var p = pub.data.p
      var q = pub.data.q
      var g = pub.data.g
      var y = pub.data.pub_key
      var unpacked = parseKeys.signature.decode(sig, 'der')
      var s = unpacked.s
      var r = unpacked.r
      checkValue(s, q)
      checkValue(r, q)
      var montp = BN.mont(p)
      var w = s.invm(q)
      var v = g.toRed(montp)
        .redPow(new BN(hash).mul(w).mod(q))
        .fromRed()
        .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
        .mod(p)
        .mod(q)
      return v.cmp(r) === 0
    }
    
    function checkValue (b, q) {
      if (b.cmpn(0) <= 0) throw new Error('invalid sig')
      if (b.cmp(q) >= q) throw new Error('invalid sig')
    }
    
    module.exports = verify
    
    }).call(this,require("buffer").Buffer)
    },{"./curves.json":87,"bn.js":61,"buffer":96,"elliptic":119,"parse-asn1":224}],91:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    function EventEmitter() {
      this._events = this._events || {};
      this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;
    
    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;
    
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;
    
    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;
    
    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function(n) {
      if (!isNumber(n) || n < 0 || isNaN(n))
        throw TypeError('n must be a positive number');
      this._maxListeners = n;
      return this;
    };
    
    EventEmitter.prototype.emit = function(type) {
      var er, handler, len, args, i, listeners;
    
      if (!this._events)
        this._events = {};
    
      // If there is no 'error' event listener then throw.
      if (type === 'error') {
        if (!this._events.error ||
            (isObject(this._events.error) && !this._events.error.length)) {
          er = arguments[1];
          if (er instanceof Error) {
            throw er; // Unhandled 'error' event
          } else {
            // At least give some kind of context to the user
            var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
            err.context = er;
            throw err;
          }
        }
      }
    
      handler = this._events[type];
    
      if (isUndefined(handler))
        return false;
    
      if (isFunction(handler)) {
        switch (arguments.length) {
          // fast cases
          case 1:
            handler.call(this);
            break;
          case 2:
            handler.call(this, arguments[1]);
            break;
          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          // slower
          default:
            args = Array.prototype.slice.call(arguments, 1);
            handler.apply(this, args);
        }
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1);
        listeners = handler.slice();
        len = listeners.length;
        for (i = 0; i < len; i++)
          listeners[i].apply(this, args);
      }
    
      return true;
    };
    
    EventEmitter.prototype.addListener = function(type, listener) {
      var m;
    
      if (!isFunction(listener))
        throw TypeError('listener must be a function');
    
      if (!this._events)
        this._events = {};
    
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (this._events.newListener)
        this.emit('newListener', type,
                  isFunction(listener.listener) ?
                  listener.listener : listener);
    
      if (!this._events[type])
        // Optimize the case of one listener. Don't need the extra array object.
        this._events[type] = listener;
      else if (isObject(this._events[type]))
        // If we've already got an array, just append.
        this._events[type].push(listener);
      else
        // Adding the second element, need to change to array.
        this._events[type] = [this._events[type], listener];
    
      // Check for listener leak
      if (isObject(this._events[type]) && !this._events[type].warned) {
        if (!isUndefined(this._maxListeners)) {
          m = this._maxListeners;
        } else {
          m = EventEmitter.defaultMaxListeners;
        }
    
        if (m && m > 0 && this._events[type].length > m) {
          this._events[type].warned = true;
          console.error('(node) warning: possible EventEmitter memory ' +
                        'leak detected. %d listeners added. ' +
                        'Use emitter.setMaxListeners() to increase limit.',
                        this._events[type].length);
          if (typeof console.trace === 'function') {
            // not supported in IE 10
            console.trace();
          }
        }
      }
    
      return this;
    };
    
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    
    EventEmitter.prototype.once = function(type, listener) {
      if (!isFunction(listener))
        throw TypeError('listener must be a function');
    
      var fired = false;
    
      function g() {
        this.removeListener(type, g);
    
        if (!fired) {
          fired = true;
          listener.apply(this, arguments);
        }
      }
    
      g.listener = listener;
      this.on(type, g);
    
      return this;
    };
    
    // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener = function(type, listener) {
      var list, position, length, i;
    
      if (!isFunction(listener))
        throw TypeError('listener must be a function');
    
      if (!this._events || !this._events[type])
        return this;
    
      list = this._events[type];
      length = list.length;
      position = -1;
    
      if (list === listener ||
          (isFunction(list.listener) && list.listener === listener)) {
        delete this._events[type];
        if (this._events.removeListener)
          this.emit('removeListener', type, listener);
    
      } else if (isObject(list)) {
        for (i = length; i-- > 0;) {
          if (list[i] === listener ||
              (list[i].listener && list[i].listener === listener)) {
            position = i;
            break;
          }
        }
    
        if (position < 0)
          return this;
    
        if (list.length === 1) {
          list.length = 0;
          delete this._events[type];
        } else {
          list.splice(position, 1);
        }
    
        if (this._events.removeListener)
          this.emit('removeListener', type, listener);
      }
    
      return this;
    };
    
    EventEmitter.prototype.removeAllListeners = function(type) {
      var key, listeners;
    
      if (!this._events)
        return this;
    
      // not listening for removeListener, no need to emit
      if (!this._events.removeListener) {
        if (arguments.length === 0)
          this._events = {};
        else if (this._events[type])
          delete this._events[type];
        return this;
      }
    
      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        for (key in this._events) {
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = {};
        return this;
      }
    
      listeners = this._events[type];
    
      if (isFunction(listeners)) {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        while (listeners.length)
          this.removeListener(type, listeners[listeners.length - 1]);
      }
      delete this._events[type];
    
      return this;
    };
    
    EventEmitter.prototype.listeners = function(type) {
      var ret;
      if (!this._events || !this._events[type])
        ret = [];
      else if (isFunction(this._events[type]))
        ret = [this._events[type]];
      else
        ret = this._events[type].slice();
      return ret;
    };
    
    EventEmitter.prototype.listenerCount = function(type) {
      if (this._events) {
        var evlistener = this._events[type];
    
        if (isFunction(evlistener))
          return 1;
        else if (evlistener)
          return evlistener.length;
      }
      return 0;
    };
    
    EventEmitter.listenerCount = function(emitter, type) {
      return emitter.listenerCount(type);
    };
    
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    
    function isUndefined(arg) {
      return arg === void 0;
    }
    
    },{}],92:[function(require,module,exports){
    'use strict';
    
    var Buffer = require('safe-buffer').Buffer;
    
    var isEncoding = Buffer.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };
    
    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    };
    
    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }
    
    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }
    
    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };
    
    StringDecoder.prototype.end = utf8End;
    
    // Returns only complete characters in a Buffer
    StringDecoder.prototype.text = utf8Text;
    
    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    
    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte.
    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return -1;
    }
    
    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    
    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd'.repeat(p);
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd'.repeat(p + 1);
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd'.repeat(p + 2);
          }
        }
      }
    }
    
    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    
    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }
    
    // For UTF-8, a replacement character for each buffered byte of a (partial)
    // character needs to be added to the output.
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
      return r;
    }
    
    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }
    
    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }
    
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }
    
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }
    
    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }
    },{"safe-buffer":264}],93:[function(require,module,exports){
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === 'object'
        && typeof arg.copy === 'function'
        && typeof arg.fill === 'function'
        && typeof arg.readUInt8 === 'function';
    }
    },{}],94:[function(require,module,exports){
    (function (process,global){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }
    
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    };
    
    
    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    exports.deprecate = function(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined(global.process)) {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
    
      if (process.noDeprecation === true) {
        return fn;
      }
    
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
    
      return deprecated;
    };
    
    
    var debugs = {};
    var debugEnviron;
    exports.debuglog = function(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = process.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    };
    
    
    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        exports._extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    
    
    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };
    
    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };
    
    
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
    
      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }
    
    
    function stylizeNoColor(str, styleType) {
      return str;
    }
    
    
    function arrayToHash(array) {
      var hash = {};
    
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
    
      return hash;
    }
    
    
    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
    
      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
    
      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
    
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
    
      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }
    
      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
    
      var base = '', array = false, braces = ['{', '}'];
    
      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }
    
      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }
    
      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }
    
      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }
    
      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }
    
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
    
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }
    
      ctx.seen.push(value);
    
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
    
      ctx.seen.pop();
    
      return reduceToSingleString(output, base, braces);
    }
    
    
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }
    
    
    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }
    
    
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }
    
    
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }
    
      return name + ': ' + str;
    }
    
    
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);
    
      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }
    
      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }
    
    
    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    
    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    exports.isBoolean = isBoolean;
    
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    exports.isNumber = isNumber;
    
    function isString(arg) {
      return typeof arg === 'string';
    }
    exports.isString = isString;
    
    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }
    exports.isSymbol = isSymbol;
    
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;
    
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    exports.isObject = isObject;
    
    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;
    
    function isError(e) {
      return isObject(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    exports.isError = isError;
    
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    exports.isFunction = isFunction;
    
    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }
    exports.isPrimitive = isPrimitive;
    
    exports.isBuffer = require('./support/isBuffer');
    
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    
    
    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }
    
    
    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];
    
    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }
    
    
    // log is just a thin wrapper to console.log that prepends a timestamp
    exports.log = function() {
      console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
    };
    
    
    /**
     * Inherit the prototype methods from one constructor into another.
     *
     * The Function.prototype.inherits from lang.js rewritten as a standalone
     * function (not on Function.prototype). NOTE: If this file is to be loaded
     * during bootstrapping this function needs to be rewritten using some native
     * functions as prototype setup using normal JavaScript does not work as
     * expected during bootstrapping (see mirror.js in r114903).
     *
     * @param {function} ctor Constructor function which needs to inherit the
     *     prototype.
     * @param {function} superCtor Constructor function to inherit prototype from.
     */
    exports.inherits = require('inherits');
    
    exports._extend = function(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject(add)) return origin;
    
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./support/isBuffer":93,"_process":231,"inherits":199}],95:[function(require,module,exports){
    (function (Buffer){
    module.exports = function xor (a, b) {
      var length = Math.min(a.length, b.length)
      var buffer = new Buffer(length)
    
      for (var i = 0; i < length; ++i) {
        buffer[i] = a[i] ^ b[i]
      }
    
      return buffer
    }
    
    }).call(this,require("buffer").Buffer)
    },{"buffer":96}],96:[function(require,module,exports){
    (function (Buffer){
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    /* eslint-disable no-proto */
    
    'use strict'
    
    var base64 = require('base64-js')
    var ieee754 = require('ieee754')
    
    exports.Buffer = Buffer
    exports.SlowBuffer = SlowBuffer
    exports.INSPECT_MAX_BYTES = 50
    
    var K_MAX_LENGTH = 0x7fffffff
    exports.kMaxLength = K_MAX_LENGTH
    
    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
    
    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      )
    }
    
    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        var arr = new Uint8Array(1)
        arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }
    
    Object.defineProperty(Buffer.prototype, 'parent', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.buffer
      }
    })
    
    Object.defineProperty(Buffer.prototype, 'offset', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.byteOffset
      }
    })
    
    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"')
      }
      // Return an augmented `Uint8Array` instance
      var buf = new Uint8Array(length)
      buf.__proto__ = Buffer.prototype
      return buf
    }
    
    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */
    
    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }
    
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    if (typeof Symbol !== 'undefined' && Symbol.species != null &&
        Buffer[Symbol.species] === Buffer) {
      Object.defineProperty(Buffer, Symbol.species, {
        value: null,
        configurable: true,
        enumerable: false,
        writable: false
      })
    }
    
    Buffer.poolSize = 8192 // not used by this implementation
    
    function from (value, encodingOrOffset, length) {
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }
    
      if (ArrayBuffer.isView(value)) {
        return fromArrayLike(value)
      }
    
      if (value == null) {
        throw TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
          'or Array-like Object. Received type ' + (typeof value)
        )
      }
    
      if (isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }
    
      if (typeof value === 'number') {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        )
      }
    
      var valueOf = value.valueOf && value.valueOf()
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length)
      }
    
      var b = fromObject(value)
      if (b) return b
    
      if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(
          value[Symbol.toPrimitive]('string'), encodingOrOffset, length
        )
      }
    
      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }
    
    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    }
    
    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
    
    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
    }
    
    function alloc (size, fill, encoding) {
      assertSize(size)
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }
    
    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    }
    
    function allocUnsafe (size) {
      assertSize(size)
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }
    
    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    }
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    }
    
    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8'
      }
    
      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    
      var length = byteLength(string, encoding) | 0
      var buf = createBuffer(length)
    
      var actual = buf.write(string, encoding)
    
      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual)
      }
    
      return buf
    }
    
    function fromArrayLike (array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0
      var buf = createBuffer(length)
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255
      }
      return buf
    }
    
    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }
    
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }
    
      var buf
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array)
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset)
      } else {
        buf = new Uint8Array(array, byteOffset, length)
      }
    
      // Return an augmented `Uint8Array` instance
      buf.__proto__ = Buffer.prototype
      return buf
    }
    
    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0
        var buf = createBuffer(len)
    
        if (buf.length === 0) {
          return buf
        }
    
        obj.copy(buf, 0, 0, len)
        return buf
      }
    
      if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }
    
      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }
    
    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }
    
    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0
      }
      return Buffer.alloc(+length)
    }
    
    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true &&
        b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    }
    
    Buffer.compare = function compare (a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        )
      }
    
      if (a === b) return 0
    
      var x = a.length
      var y = b.length
    
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i]
          y = b[i]
          break
        }
      }
    
      if (x < y) return -1
      if (y < x) return 1
      return 0
    }
    
    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    }
    
    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
    
      if (list.length === 0) {
        return Buffer.alloc(0)
      }
    
      var i
      if (length === undefined) {
        length = 0
        for (i = 0; i < list.length; ++i) {
          length += list[i].length
        }
      }
    
      var buffer = Buffer.allocUnsafe(length)
      var pos = 0
      for (i = 0; i < list.length; ++i) {
        var buf = list[i]
        if (isInstance(buf, Uint8Array)) {
          buf = Buffer.from(buf)
        }
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos)
        pos += buf.length
      }
      return buffer
    }
    
    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
          'Received type ' + typeof string
        )
      }
    
      var len = string.length
      var mustMatch = (arguments.length > 2 && arguments[2] === true)
      if (!mustMatch && len === 0) return 0
    
      // Use a for loop to avoid recursion
      var loweredCase = false
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            }
            encoding = ('' + encoding).toLowerCase()
            loweredCase = true
        }
      }
    }
    Buffer.byteLength = byteLength
    
    function slowToString (encoding, start, end) {
      var loweredCase = false
    
      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.
    
      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }
    
      if (end === undefined || end > this.length) {
        end = this.length
      }
    
      if (end <= 0) {
        return ''
      }
    
      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0
      start >>>= 0
    
      if (end <= start) {
        return ''
      }
    
      if (!encoding) encoding = 'utf8'
    
      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)
    
          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)
    
          case 'ascii':
            return asciiSlice(this, start, end)
    
          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)
    
          case 'base64':
            return base64Slice(this, start, end)
    
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)
    
          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase()
            loweredCase = true
        }
      }
    }
    
    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true
    
    function swap (b, n, m) {
      var i = b[n]
      b[n] = b[m]
      b[m] = i
    }
    
    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1)
      }
      return this
    }
    
    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3)
        swap(this, i + 1, i + 2)
      }
      return this
    }
    
    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7)
        swap(this, i + 1, i + 6)
        swap(this, i + 2, i + 5)
        swap(this, i + 3, i + 4)
      }
      return this
    }
    
    Buffer.prototype.toString = function toString () {
      var length = this.length
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    }
    
    Buffer.prototype.toLocaleString = Buffer.prototype.toString
    
    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    }
    
    Buffer.prototype.inspect = function inspect () {
      var str = ''
      var max = exports.INSPECT_MAX_BYTES
      str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
      if (this.length > max) str += ' ... '
      return '<Buffer ' + str + '>'
    }
    
    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength)
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. ' +
          'Received type ' + (typeof target)
        )
      }
    
      if (start === undefined) {
        start = 0
      }
      if (end === undefined) {
        end = target ? target.length : 0
      }
      if (thisStart === undefined) {
        thisStart = 0
      }
      if (thisEnd === undefined) {
        thisEnd = this.length
      }
    
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }
    
      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }
    
      start >>>= 0
      end >>>= 0
      thisStart >>>= 0
      thisEnd >>>= 0
    
      if (this === target) return 0
    
      var x = thisEnd - thisStart
      var y = end - start
      var len = Math.min(x, y)
    
      var thisCopy = this.slice(thisStart, thisEnd)
      var targetCopy = target.slice(start, end)
    
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i]
          y = targetCopy[i]
          break
        }
      }
    
      if (x < y) return -1
      if (y < x) return 1
      return 0
    }
    
    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1
    
      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset
        byteOffset = 0
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000
      }
      byteOffset = +byteOffset // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1)
      }
    
      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0
        else return -1
      }
    
      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding)
      }
    
      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }
    
      throw new TypeError('val must be string, number or Buffer')
    }
    
    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1
      var arrLength = arr.length
      var valLength = val.length
    
      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase()
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2
          arrLength /= 2
          valLength /= 2
          byteOffset /= 2
        }
      }
    
      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }
    
      var i
      if (dir) {
        var foundIndex = -1
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex
            foundIndex = -1
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
        for (i = byteOffset; i >= 0; i--) {
          var found = true
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false
              break
            }
          }
          if (found) return i
        }
      }
    
      return -1
    }
    
    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    }
    
    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    }
    
    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    }
    
    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0
      var remaining = buf.length - offset
      if (!length) {
        length = remaining
      } else {
        length = Number(length)
        if (length > remaining) {
          length = remaining
        }
      }
    
      var strLen = string.length
    
      if (length > strLen / 2) {
        length = strLen / 2
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16)
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed
      }
      return i
    }
    
    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }
    
    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }
    
    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }
    
    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }
    
    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }
    
    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8'
        length = this.length
        offset = 0
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset
        length = this.length
        offset = 0
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0
        if (isFinite(length)) {
          length = length >>> 0
          if (encoding === undefined) encoding = 'utf8'
        } else {
          encoding = length
          length = undefined
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }
    
      var remaining = this.length - offset
      if (length === undefined || length > remaining) length = remaining
    
      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }
    
      if (!encoding) encoding = 'utf8'
    
      var loweredCase = false
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)
    
          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)
    
          case 'ascii':
            return asciiWrite(this, string, offset, length)
    
          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)
    
          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)
    
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)
    
          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase()
            loweredCase = true
        }
      }
    }
    
    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    }
    
    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf)
      } else {
        return base64.fromByteArray(buf.slice(start, end))
      }
    }
    
    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end)
      var res = []
    
      var i = start
      while (i < end) {
        var firstByte = buf[i]
        var codePoint = null
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
            : (firstByte > 0xBF) ? 2
              : 1
    
        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint
    
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte
              }
              break
            case 2:
              secondByte = buf[i + 1]
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint
                }
              }
              break
            case 3:
              secondByte = buf[i + 1]
              thirdByte = buf[i + 2]
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint
                }
              }
              break
            case 4:
              secondByte = buf[i + 1]
              thirdByte = buf[i + 2]
              fourthByte = buf[i + 3]
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint
                }
              }
          }
        }
    
        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD
          bytesPerSequence = 1
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000
          res.push(codePoint >>> 10 & 0x3FF | 0xD800)
          codePoint = 0xDC00 | codePoint & 0x3FF
        }
    
        res.push(codePoint)
        i += bytesPerSequence
      }
    
      return decodeCodePointsArray(res)
    }
    
    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000
    
    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }
    
      // Decode in chunks to avoid "call stack size exceeded".
      var res = ''
      var i = 0
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        )
      }
      return res
    }
    
    function asciiSlice (buf, start, end) {
      var ret = ''
      end = Math.min(buf.length, end)
    
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F)
      }
      return ret
    }
    
    function latin1Slice (buf, start, end) {
      var ret = ''
      end = Math.min(buf.length, end)
    
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i])
      }
      return ret
    }
    
    function hexSlice (buf, start, end) {
      var len = buf.length
    
      if (!start || start < 0) start = 0
      if (!end || end < 0 || end > len) end = len
    
      var out = ''
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i])
      }
      return out
    }
    
    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end)
      var res = ''
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
      }
      return res
    }
    
    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length
      start = ~~start
      end = end === undefined ? len : ~~end
    
      if (start < 0) {
        start += len
        if (start < 0) start = 0
      } else if (start > len) {
        start = len
      }
    
      if (end < 0) {
        end += len
        if (end < 0) end = 0
      } else if (end > len) {
        end = len
      }
    
      if (end < start) end = start
    
      var newBuf = this.subarray(start, end)
      // Return an augmented `Uint8Array` instance
      newBuf.__proto__ = Buffer.prototype
      return newBuf
    }
    
    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }
    
    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var val = this[offset]
      var mul = 1
      var i = 0
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
      }
    
      return val
    }
    
    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length)
      }
    
      var val = this[offset + --byteLength]
      var mul = 1
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul
      }
    
      return val
    }
    
    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 1, this.length)
      return this[offset]
    }
    
    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      return this[offset] | (this[offset + 1] << 8)
    }
    
    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      return (this[offset] << 8) | this[offset + 1]
    }
    
    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    }
    
    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    }
    
    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var val = this[offset]
      var mul = 1
      var i = 0
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
      }
      mul *= 0x80
    
      if (val >= mul) val -= Math.pow(2, 8 * byteLength)
    
      return val
    }
    
    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var i = byteLength
      var mul = 1
      var val = this[offset + --i]
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul
      }
      mul *= 0x80
    
      if (val >= mul) val -= Math.pow(2, 8 * byteLength)
    
      return val
    }
    
    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 1, this.length)
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    }
    
    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      var val = this[offset] | (this[offset + 1] << 8)
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    }
    
    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      var val = this[offset + 1] | (this[offset] << 8)
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    }
    
    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    }
    
    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    }
    
    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
      return ieee754.read(this, offset, true, 23, 4)
    }
    
    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
      return ieee754.read(this, offset, false, 23, 4)
    }
    
    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 8, this.length)
      return ieee754.read(this, offset, true, 52, 8)
    }
    
    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 8, this.length)
      return ieee754.read(this, offset, false, 52, 8)
    }
    
    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }
    
    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
      }
    
      var mul = 1
      var i = 0
      this[offset] = value & 0xFF
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
      }
    
      var i = byteLength - 1
      var mul = 1
      this[offset + i] = value & 0xFF
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
      this[offset] = (value & 0xff)
      return offset + 1
    }
    
    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      return offset + 2
    }
    
    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
      return offset + 2
    }
    
    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
      this[offset + 3] = (value >>> 24)
      this[offset + 2] = (value >>> 16)
      this[offset + 1] = (value >>> 8)
      this[offset] = (value & 0xff)
      return offset + 4
    }
    
    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
      return offset + 4
    }
    
    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1)
    
        checkInt(this, value, offset, byteLength, limit - 1, -limit)
      }
    
      var i = 0
      var mul = 1
      var sub = 0
      this[offset] = value & 0xFF
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1)
    
        checkInt(this, value, offset, byteLength, limit - 1, -limit)
      }
    
      var i = byteLength - 1
      var mul = 1
      var sub = 0
      this[offset + i] = value & 0xFF
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
      if (value < 0) value = 0xff + value + 1
      this[offset] = (value & 0xff)
      return offset + 1
    }
    
    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      return offset + 2
    }
    
    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
      return offset + 2
    }
    
    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      this[offset + 2] = (value >>> 16)
      this[offset + 3] = (value >>> 24)
      return offset + 4
    }
    
    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
      if (value < 0) value = 0xffffffff + value + 1
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
      return offset + 4
    }
    
    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }
    
    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4)
      return offset + 4
    }
    
    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    }
    
    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    }
    
    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8)
      return offset + 8
    }
    
    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    }
    
    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    }
    
    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0
      if (!end && end !== 0) end = this.length
      if (targetStart >= target.length) targetStart = target.length
      if (!targetStart) targetStart = 0
      if (end > 0 && end < start) end = start
    
      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0
    
      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')
    
      // Are we oob?
      if (end > this.length) end = this.length
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start
      }
    
      var len = end - start
    
      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end)
      } else if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (var i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start]
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        )
      }
    
      return len
    }
    
    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start
          start = 0
          end = this.length
        } else if (typeof end === 'string') {
          encoding = end
          end = this.length
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0)
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255
      }
    
      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }
    
      if (end <= start) {
        return this
      }
    
      start = start >>> 0
      end = end === undefined ? this.length : end >>> 0
    
      if (!val) val = 0
    
      var i
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : Buffer.from(val, encoding)
        var len = bytes.length
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len]
        }
      }
    
      return this
    }
    
    // HELPER FUNCTIONS
    // ================
    
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
    
    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0]
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '')
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '='
      }
      return str
    }
    
    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }
    
    function utf8ToBytes (string, units) {
      units = units || Infinity
      var codePoint
      var length = string.length
      var leadSurrogate = null
      var bytes = []
    
      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i)
    
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              continue
            }
    
            // valid lead
            leadSurrogate = codePoint
    
            continue
          }
    
          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            leadSurrogate = codePoint
            continue
          }
    
          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        }
    
        leadSurrogate = null
    
        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint)
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          )
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          )
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          )
        } else {
          throw new Error('Invalid code point')
        }
      }
    
      return bytes
    }
    
    function asciiToBytes (str) {
      var byteArray = []
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF)
      }
      return byteArray
    }
    
    function utf16leToBytes (str, units) {
      var c, hi, lo
      var byteArray = []
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break
    
        c = str.charCodeAt(i)
        hi = c >> 8
        lo = c % 256
        byteArray.push(lo)
        byteArray.push(hi)
      }
    
      return byteArray
    }
    
    function base64ToBytes (str) {
      return base64.toByteArray(base64clean(str))
    }
    
    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i]
      }
      return i
    }
    
    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance (obj, type) {
      return obj instanceof type ||
        (obj != null && obj.constructor != null && obj.constructor.name != null &&
          obj.constructor.name === type.name)
    }
    function numberIsNaN (obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
    }
    
    }).call(this,require("buffer").Buffer)
    },{"base64-js":59,"buffer":96,"ieee754":197}],97:[function(require,module,exports){
    module.exports = {
      "100": "Continue",
      "101": "Switching Protocols",
      "102": "Processing",
      "200": "OK",
      "201": "Created",
      "202": "Accepted",
      "203": "Non-Authoritative Information",
      "204": "No Content",
      "205": "Reset Content",
      "206": "Partial Content",
      "207": "Multi-Status",
      "208": "Already Reported",
      "226": "IM Used",
      "300": "Multiple Choices",
      "301": "Moved Permanently",
      "302": "Found",
      "303": "See Other",
      "304": "Not Modified",
      "305": "Use Proxy",
      "307": "Temporary Redirect",
      "308": "Permanent Redirect",
      "400": "Bad Request",
      "401": "Unauthorized",
      "402": "Payment Required",
      "403": "Forbidden",
      "404": "Not Found",
      "405": "Method Not Allowed",
      "406": "Not Acceptable",
      "407": "Proxy Authentication Required",
      "408": "Request Timeout",
      "409": "Conflict",
      "410": "Gone",
      "411": "Length Required",
      "412": "Precondition Failed",
      "413": "Payload Too Large",
      "414": "URI Too Long",
      "415": "Unsupported Media Type",
      "416": "Range Not Satisfiable",
      "417": "Expectation Failed",
      "418": "I'm a teapot",
      "421": "Misdirected Request",
      "422": "Unprocessable Entity",
      "423": "Locked",
      "424": "Failed Dependency",
      "425": "Unordered Collection",
      "426": "Upgrade Required",
      "428": "Precondition Required",
      "429": "Too Many Requests",
      "431": "Request Header Fields Too Large",
      "451": "Unavailable For Legal Reasons",
      "500": "Internal Server Error",
      "501": "Not Implemented",
      "502": "Bad Gateway",
      "503": "Service Unavailable",
      "504": "Gateway Timeout",
      "505": "HTTP Version Not Supported",
      "506": "Variant Also Negotiates",
      "507": "Insufficient Storage",
      "508": "Loop Detected",
      "509": "Bandwidth Limit Exceeded",
      "510": "Not Extended",
      "511": "Network Authentication Required"
    }
    
    },{}],98:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('stream').Transform
    var StringDecoder = require('string_decoder').StringDecoder
    var inherits = require('inherits')
    
    function CipherBase (hashMode) {
      Transform.call(this)
      this.hashMode = typeof hashMode === 'string'
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest
      } else {
        this.final = this._finalOrDigest
      }
      if (this._final) {
        this.__final = this._final
        this._final = null
      }
      this._decoder = null
      this._encoding = null
    }
    inherits(CipherBase, Transform)
    
    CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
      if (typeof data === 'string') {
        data = Buffer.from(data, inputEnc)
      }
    
      var outData = this._update(data)
      if (this.hashMode) return this
    
      if (outputEnc) {
        outData = this._toString(outData, outputEnc)
      }
    
      return outData
    }
    
    CipherBase.prototype.setAutoPadding = function () {}
    CipherBase.prototype.getAuthTag = function () {
      throw new Error('trying to get auth tag in unsupported state')
    }
    
    CipherBase.prototype.setAuthTag = function () {
      throw new Error('trying to set auth tag in unsupported state')
    }
    
    CipherBase.prototype.setAAD = function () {
      throw new Error('trying to set aad in unsupported state')
    }
    
    CipherBase.prototype._transform = function (data, _, next) {
      var err
      try {
        if (this.hashMode) {
          this._update(data)
        } else {
          this.push(this._update(data))
        }
      } catch (e) {
        err = e
      } finally {
        next(err)
      }
    }
    CipherBase.prototype._flush = function (done) {
      var err
      try {
        this.push(this.__final())
      } catch (e) {
        err = e
      }
    
      done(err)
    }
    CipherBase.prototype._finalOrDigest = function (outputEnc) {
      var outData = this.__final() || Buffer.alloc(0)
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true)
      }
      return outData
    }
    
    CipherBase.prototype._toString = function (value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc)
        this._encoding = enc
      }
    
      if (this._encoding !== enc) throw new Error('can\'t switch encodings')
    
      var out = this._decoder.write(value)
      if (fin) {
        out += this._decoder.end()
      }
    
      return out
    }
    
    module.exports = CipherBase
    
    },{"inherits":199,"safe-buffer":264,"stream":277,"string_decoder":92}],99:[function(require,module,exports){
    /* jshint node: true */
    (function () {
        "use strict";
    
        function CookieAccessInfo(domain, path, secure, script) {
            if (this instanceof CookieAccessInfo) {
                this.domain = domain || undefined;
                this.path = path || "/";
                this.secure = !!secure;
                this.script = !!script;
                return this;
            }
            return new CookieAccessInfo(domain, path, secure, script);
        }
        CookieAccessInfo.All = Object.freeze(Object.create(null));
        exports.CookieAccessInfo = CookieAccessInfo;
    
        function Cookie(cookiestr, request_domain, request_path) {
            if (cookiestr instanceof Cookie) {
                return cookiestr;
            }
            if (this instanceof Cookie) {
                this.name = null;
                this.value = null;
                this.expiration_date = Infinity;
                this.path = String(request_path || "/");
                this.explicit_path = false;
                this.domain = request_domain || null;
                this.explicit_domain = false;
                this.secure = false; //how to define default?
                this.noscript = false; //httponly
                if (cookiestr) {
                    this.parse(cookiestr, request_domain, request_path);
                }
                return this;
            }
            return new Cookie(cookiestr, request_domain, request_path);
        }
        exports.Cookie = Cookie;
    
        Cookie.prototype.toString = function toString() {
            var str = [this.name + "=" + this.value];
            if (this.expiration_date !== Infinity) {
                str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
            }
            if (this.domain) {
                str.push("domain=" + this.domain);
            }
            if (this.path) {
                str.push("path=" + this.path);
            }
            if (this.secure) {
                str.push("secure");
            }
            if (this.noscript) {
                str.push("httponly");
            }
            return str.join("; ");
        };
    
        Cookie.prototype.toValueString = function toValueString() {
            return this.name + "=" + this.value;
        };
    
        var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
        Cookie.prototype.parse = function parse(str, request_domain, request_path) {
            if (this instanceof Cookie) {
                var parts = str.split(";").filter(function (value) {
                        return !!value;
                    });
                var i;
    
                var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
                if (!pair) {
                    console.warn("Invalid cookie header encountered. Header: '"+str+"'");
                    return;
                }
    
                var key = pair[1];
                var value = pair[2];
                if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {
                    console.warn("Unable to extract values from cookie header. Cookie: '"+str+"'");
                    return;
                }
    
                this.name = key;
                this.value = value;
    
                for (i = 1; i < parts.length; i += 1) {
                    pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
                    key = pair[1].trim().toLowerCase();
                    value = pair[2];
                    switch (key) {
                    case "httponly":
                        this.noscript = true;
                        break;
                    case "expires":
                        this.expiration_date = value ?
                                Number(Date.parse(value)) :
                                Infinity;
                        break;
                    case "path":
                        this.path = value ?
                                value.trim() :
                                "";
                        this.explicit_path = true;
                        break;
                    case "domain":
                        this.domain = value ?
                                value.trim() :
                                "";
                        this.explicit_domain = !!this.domain;
                        break;
                    case "secure":
                        this.secure = true;
                        break;
                    }
                }
    
                if (!this.explicit_path) {
                   this.path = request_path || "/";
                }
                if (!this.explicit_domain) {
                   this.domain = request_domain;
                }
    
                return this;
            }
            return new Cookie().parse(str, request_domain, request_path);
        };
    
        Cookie.prototype.matches = function matches(access_info) {
            if (access_info === CookieAccessInfo.All) {
              return true;
            }
            if (this.noscript && access_info.script ||
                    this.secure && !access_info.secure ||
                    !this.collidesWith(access_info)) {
                return false;
            }
            return true;
        };
    
        Cookie.prototype.collidesWith = function collidesWith(access_info) {
            if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
                return false;
            }
            if (this.path && access_info.path.indexOf(this.path) !== 0) {
                return false;
            }
            if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
               return false;
            }
            var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
            var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
            if (cookie_domain === access_domain) {
                return true;
            }
            if (cookie_domain) {
                if (!this.explicit_domain) {
                    return false; // we already checked if the domains were exactly the same
                }
                var wildcard = access_domain.indexOf(cookie_domain);
                if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
                    return false;
                }
                return true;
            }
            return true;
        };
    
        function CookieJar() {
            var cookies, cookies_list, collidable_cookie;
            if (this instanceof CookieJar) {
                cookies = Object.create(null); //name: [Cookie]
    
                this.setCookie = function setCookie(cookie, request_domain, request_path) {
                    var remove, i;
                    cookie = new Cookie(cookie, request_domain, request_path);
                    //Delete the cookie if the set is past the current time
                    remove = cookie.expiration_date <= Date.now();
                    if (cookies[cookie.name] !== undefined) {
                        cookies_list = cookies[cookie.name];
                        for (i = 0; i < cookies_list.length; i += 1) {
                            collidable_cookie = cookies_list[i];
                            if (collidable_cookie.collidesWith(cookie)) {
                                if (remove) {
                                    cookies_list.splice(i, 1);
                                    if (cookies_list.length === 0) {
                                        delete cookies[cookie.name];
                                    }
                                    return false;
                                }
                                cookies_list[i] = cookie;
                                return cookie;
                            }
                        }
                        if (remove) {
                            return false;
                        }
                        cookies_list.push(cookie);
                        return cookie;
                    }
                    if (remove) {
                        return false;
                    }
                    cookies[cookie.name] = [cookie];
                    return cookies[cookie.name];
                };
                //returns a cookie
                this.getCookie = function getCookie(cookie_name, access_info) {
                    var cookie, i;
                    cookies_list = cookies[cookie_name];
                    if (!cookies_list) {
                        return;
                    }
                    for (i = 0; i < cookies_list.length; i += 1) {
                        cookie = cookies_list[i];
                        if (cookie.expiration_date <= Date.now()) {
                            if (cookies_list.length === 0) {
                                delete cookies[cookie.name];
                            }
                            continue;
                        }
    
                        if (cookie.matches(access_info)) {
                            return cookie;
                        }
                    }
                };
                //returns a list of cookies
                this.getCookies = function getCookies(access_info) {
                    var matches = [], cookie_name, cookie;
                    for (cookie_name in cookies) {
                        cookie = this.getCookie(cookie_name, access_info);
                        if (cookie) {
                            matches.push(cookie);
                        }
                    }
                    matches.toString = function toString() {
                        return matches.join(":");
                    };
                    matches.toValueString = function toValueString() {
                        return matches.map(function (c) {
                            return c.toValueString();
                        }).join(';');
                    };
                    return matches;
                };
    
                return this;
            }
            return new CookieJar();
        }
        exports.CookieJar = CookieJar;
    
        //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
        CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
            cookies = Array.isArray(cookies) ?
                    cookies :
                    cookies.split(cookie_str_splitter);
            var successful = [],
                i,
                cookie;
            cookies = cookies.map(function(item){
                return new Cookie(item, request_domain, request_path);
            });
            for (i = 0; i < cookies.length; i += 1) {
                cookie = cookies[i];
                if (this.setCookie(cookie, request_domain, request_path)) {
                    successful.push(cookie);
                }
            }
            return successful;
        };
    }());
    
    },{}],100:[function(require,module,exports){
    (function (Buffer){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    
    function isArray(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }
      return objectToString(arg) === '[object Array]';
    }
    exports.isArray = isArray;
    
    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    exports.isBoolean = isBoolean;
    
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    exports.isNumber = isNumber;
    
    function isString(arg) {
      return typeof arg === 'string';
    }
    exports.isString = isString;
    
    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }
    exports.isSymbol = isSymbol;
    
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    
    function isRegExp(re) {
      return objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;
    
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    exports.isObject = isObject;
    
    function isDate(d) {
      return objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;
    
    function isError(e) {
      return (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    exports.isError = isError;
    
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    exports.isFunction = isFunction;
    
    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }
    exports.isPrimitive = isPrimitive;
    
    exports.isBuffer = Buffer.isBuffer;
    
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    
    }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
    },{"../../is-buffer/index.js":200}],101:[function(require,module,exports){
    (function (Buffer){
    var elliptic = require('elliptic')
    var BN = require('bn.js')
    
    module.exports = function createECDH (curve) {
      return new ECDH(curve)
    }
    
    var aliases = {
      secp256k1: {
        name: 'secp256k1',
        byteLength: 32
      },
      secp224r1: {
        name: 'p224',
        byteLength: 28
      },
      prime256v1: {
        name: 'p256',
        byteLength: 32
      },
      prime192v1: {
        name: 'p192',
        byteLength: 24
      },
      ed25519: {
        name: 'ed25519',
        byteLength: 32
      },
      secp384r1: {
        name: 'p384',
        byteLength: 48
      },
      secp521r1: {
        name: 'p521',
        byteLength: 66
      }
    }
    
    aliases.p224 = aliases.secp224r1
    aliases.p256 = aliases.secp256r1 = aliases.prime256v1
    aliases.p192 = aliases.secp192r1 = aliases.prime192v1
    aliases.p384 = aliases.secp384r1
    aliases.p521 = aliases.secp521r1
    
    function ECDH (curve) {
      this.curveType = aliases[curve]
      if (!this.curveType) {
        this.curveType = {
          name: curve
        }
      }
      this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
      this.keys = void 0
    }
    
    ECDH.prototype.generateKeys = function (enc, format) {
      this.keys = this.curve.genKeyPair()
      return this.getPublicKey(enc, format)
    }
    
    ECDH.prototype.computeSecret = function (other, inenc, enc) {
      inenc = inenc || 'utf8'
      if (!Buffer.isBuffer(other)) {
        other = new Buffer(other, inenc)
      }
      var otherPub = this.curve.keyFromPublic(other).getPublic()
      var out = otherPub.mul(this.keys.getPrivate()).getX()
      return formatReturnValue(out, enc, this.curveType.byteLength)
    }
    
    ECDH.prototype.getPublicKey = function (enc, format) {
      var key = this.keys.getPublic(format === 'compressed', true)
      if (format === 'hybrid') {
        if (key[key.length - 1] % 2) {
          key[0] = 7
        } else {
          key[0] = 6
        }
      }
      return formatReturnValue(key, enc)
    }
    
    ECDH.prototype.getPrivateKey = function (enc) {
      return formatReturnValue(this.keys.getPrivate(), enc)
    }
    
    ECDH.prototype.setPublicKey = function (pub, enc) {
      enc = enc || 'utf8'
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc)
      }
      this.keys._importPublic(pub)
      return this
    }
    
    ECDH.prototype.setPrivateKey = function (priv, enc) {
      enc = enc || 'utf8'
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc)
      }
    
      var _priv = new BN(priv)
      _priv = _priv.toString(16)
      this.keys = this.curve.genKeyPair()
      this.keys._importPrivate(_priv)
      return this
    }
    
    function formatReturnValue (bn, enc, len) {
      if (!Array.isArray(bn)) {
        bn = bn.toArray()
      }
      var buf = new Buffer(bn)
      if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length)
        zeros.fill(0)
        buf = Buffer.concat([zeros, buf])
      }
      if (!enc) {
        return buf
      } else {
        return buf.toString(enc)
      }
    }
    
    }).call(this,require("buffer").Buffer)
    },{"bn.js":61,"buffer":96,"elliptic":119}],102:[function(require,module,exports){
    'use strict'
    var inherits = require('inherits')
    var MD5 = require('md5.js')
    var RIPEMD160 = require('ripemd160')
    var sha = require('sha.js')
    var Base = require('cipher-base')
    
    function Hash (hash) {
      Base.call(this, 'digest')
    
      this._hash = hash
    }
    
    inherits(Hash, Base)
    
    Hash.prototype._update = function (data) {
      this._hash.update(data)
    }
    
    Hash.prototype._final = function () {
      return this._hash.digest()
    }
    
    module.exports = function createHash (alg) {
      alg = alg.toLowerCase()
      if (alg === 'md5') return new MD5()
      if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()
    
      return new Hash(sha(alg))
    }
    
    },{"cipher-base":98,"inherits":199,"md5.js":207,"ripemd160":263,"sha.js":270}],103:[function(require,module,exports){
    var MD5 = require('md5.js')
    
    module.exports = function (buffer) {
      return new MD5().update(buffer).digest()
    }
    
    },{"md5.js":207}],104:[function(require,module,exports){
    'use strict'
    var inherits = require('inherits')
    var Legacy = require('./legacy')
    var Base = require('cipher-base')
    var Buffer = require('safe-buffer').Buffer
    var md5 = require('create-hash/md5')
    var RIPEMD160 = require('ripemd160')
    
    var sha = require('sha.js')
    
    var ZEROS = Buffer.alloc(128)
    
    function Hmac (alg, key) {
      Base.call(this, 'digest')
      if (typeof key === 'string') {
        key = Buffer.from(key)
      }
    
      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64
    
      this._alg = alg
      this._key = key
      if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
        key = hash.update(key).digest()
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }
    
      var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
      var opad = this._opad = Buffer.allocUnsafe(blocksize)
    
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }
      this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
      this._hash.update(ipad)
    }
    
    inherits(Hmac, Base)
    
    Hmac.prototype._update = function (data) {
      this._hash.update(data)
    }
    
    Hmac.prototype._final = function () {
      var h = this._hash.digest()
      var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
      return hash.update(this._opad).update(h).digest()
    }
    
    module.exports = function createHmac (alg, key) {
      alg = alg.toLowerCase()
      if (alg === 'rmd160' || alg === 'ripemd160') {
        return new Hmac('rmd160', key)
      }
      if (alg === 'md5') {
        return new Legacy(md5, key)
      }
      return new Hmac(alg, key)
    }
    
    },{"./legacy":105,"cipher-base":98,"create-hash/md5":103,"inherits":199,"ripemd160":263,"safe-buffer":264,"sha.js":270}],105:[function(require,module,exports){
    'use strict'
    var inherits = require('inherits')
    var Buffer = require('safe-buffer').Buffer
    
    var Base = require('cipher-base')
    
    var ZEROS = Buffer.alloc(128)
    var blocksize = 64
    
    function Hmac (alg, key) {
      Base.call(this, 'digest')
      if (typeof key === 'string') {
        key = Buffer.from(key)
      }
    
      this._alg = alg
      this._key = key
    
      if (key.length > blocksize) {
        key = alg(key)
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }
    
      var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
      var opad = this._opad = Buffer.allocUnsafe(blocksize)
    
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }
    
      this._hash = [ipad]
    }
    
    inherits(Hmac, Base)
    
    Hmac.prototype._update = function (data) {
      this._hash.push(data)
    }
    
    Hmac.prototype._final = function () {
      var h = this._alg(Buffer.concat(this._hash))
      return this._alg(Buffer.concat([this._opad, h]))
    }
    module.exports = Hmac
    
    },{"cipher-base":98,"inherits":199,"safe-buffer":264}],106:[function(require,module,exports){
    'use strict'
    
    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
    exports.createHash = exports.Hash = require('create-hash')
    exports.createHmac = exports.Hmac = require('create-hmac')
    
    var algos = require('browserify-sign/algos')
    var algoKeys = Object.keys(algos)
    var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
    exports.getHashes = function () {
      return hashes
    }
    
    var p = require('pbkdf2')
    exports.pbkdf2 = p.pbkdf2
    exports.pbkdf2Sync = p.pbkdf2Sync
    
    var aes = require('browserify-cipher')
    
    exports.Cipher = aes.Cipher
    exports.createCipher = aes.createCipher
    exports.Cipheriv = aes.Cipheriv
    exports.createCipheriv = aes.createCipheriv
    exports.Decipher = aes.Decipher
    exports.createDecipher = aes.createDecipher
    exports.Decipheriv = aes.Decipheriv
    exports.createDecipheriv = aes.createDecipheriv
    exports.getCiphers = aes.getCiphers
    exports.listCiphers = aes.listCiphers
    
    var dh = require('diffie-hellman')
    
    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
    exports.getDiffieHellman = dh.getDiffieHellman
    exports.createDiffieHellman = dh.createDiffieHellman
    exports.DiffieHellman = dh.DiffieHellman
    
    var sign = require('browserify-sign')
    
    exports.createSign = sign.createSign
    exports.Sign = sign.Sign
    exports.createVerify = sign.createVerify
    exports.Verify = sign.Verify
    
    exports.createECDH = require('create-ecdh')
    
    var publicEncrypt = require('public-encrypt')
    
    exports.publicEncrypt = publicEncrypt.publicEncrypt
    exports.privateEncrypt = publicEncrypt.privateEncrypt
    exports.publicDecrypt = publicEncrypt.publicDecrypt
    exports.privateDecrypt = publicEncrypt.privateDecrypt
    
    // the least I can do is make error messages for the rest of the node.js/crypto api.
    // ;[
    //   'createCredentials'
    // ].forEach(function (name) {
    //   exports[name] = function () {
    //     throw new Error([
    //       'sorry, ' + name + ' is not implemented yet',
    //       'we accept pull requests',
    //       'https://github.com/crypto-browserify/crypto-browserify'
    //     ].join('\n'))
    //   }
    // })
    
    var rf = require('randomfill')
    
    exports.randomFill = rf.randomFill
    exports.randomFillSync = rf.randomFillSync
    
    exports.createCredentials = function () {
      throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
      ].join('\n'))
    }
    
    exports.constants = {
      'DH_CHECK_P_NOT_SAFE_PRIME': 2,
      'DH_CHECK_P_NOT_PRIME': 1,
      'DH_UNABLE_TO_CHECK_GENERATOR': 4,
      'DH_NOT_SUITABLE_GENERATOR': 8,
      'NPN_ENABLED': 1,
      'ALPN_ENABLED': 1,
      'RSA_PKCS1_PADDING': 1,
      'RSA_SSLV23_PADDING': 2,
      'RSA_NO_PADDING': 3,
      'RSA_PKCS1_OAEP_PADDING': 4,
      'RSA_X931_PADDING': 5,
      'RSA_PKCS1_PSS_PADDING': 6,
      'POINT_CONVERSION_COMPRESSED': 2,
      'POINT_CONVERSION_UNCOMPRESSED': 4,
      'POINT_CONVERSION_HYBRID': 6
    }
    
    },{"browserify-cipher":81,"browserify-sign":88,"browserify-sign/algos":85,"create-ecdh":101,"create-hash":102,"create-hmac":104,"diffie-hellman":115,"pbkdf2":226,"public-encrypt":232,"randombytes":243,"randomfill":244}],107:[function(require,module,exports){
    'use strict';
    var token = '%[a-f0-9]{2}';
    var singleMatcher = new RegExp(token, 'gi');
    var multiMatcher = new RegExp('(' + token + ')+', 'gi');
    
    function decodeComponents(components, split) {
        try {
            // Try to decode the entire string first
            return decodeURIComponent(components.join(''));
        } catch (err) {
            // Do nothing
        }
    
        if (components.length === 1) {
            return components;
        }
    
        split = split || 1;
    
        // Split the array in 2 parts
        var left = components.slice(0, split);
        var right = components.slice(split);
    
        return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }
    
    function decode(input) {
        try {
            return decodeURIComponent(input);
        } catch (err) {
            var tokens = input.match(singleMatcher);
    
            for (var i = 1; i < tokens.length; i++) {
                input = decodeComponents(tokens, i).join('');
    
                tokens = input.match(singleMatcher);
            }
    
            return input;
        }
    }
    
    function customDecodeURIComponent(input) {
        // Keep track of all the replacements and prefill the map with the `BOM`
        var replaceMap = {
            '%FE%FF': '\uFFFD\uFFFD',
            '%FF%FE': '\uFFFD\uFFFD'
        };
    
        var match = multiMatcher.exec(input);
        while (match) {
            try {
                // Decode as big chunks as possible
                replaceMap[match[0]] = decodeURIComponent(match[0]);
            } catch (err) {
                var result = decode(match[0]);
    
                if (result !== match[0]) {
                    replaceMap[match[0]] = result;
                }
            }
    
            match = multiMatcher.exec(input);
        }
    
        // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
        replaceMap['%C2'] = '\uFFFD';
    
        var entries = Object.keys(replaceMap);
    
        for (var i = 0; i < entries.length; i++) {
            // Replace all decoded components
            var key = entries[i];
            input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
        }
    
        return input;
    }
    
    module.exports = function (encodedURI) {
        if (typeof encodedURI !== 'string') {
            throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
        }
    
        try {
            encodedURI = encodedURI.replace(/\+/g, ' ');
    
            // Try the built in decoder first
            return decodeURIComponent(encodedURI);
        } catch (err) {
            // Fallback to a more advanced decoder
            return customDecodeURIComponent(encodedURI);
        }
    };
    
    },{}],108:[function(require,module,exports){
    'use strict';
    
    var keys = require('object-keys');
    var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
    
    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;
    
    var isFunction = function (fn) {
        return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
    };
    
    var arePropertyDescriptorsSupported = function () {
        var obj = {};
        try {
            origDefineProperty(obj, 'x', { enumerable: false, value: obj });
            // eslint-disable-next-line no-unused-vars, no-restricted-syntax
            for (var _ in obj) { // jscs:ignore disallowUnusedVariables
                return false;
            }
            return obj.x === obj;
        } catch (e) { /* this is IE 8. */
            return false;
        }
    };
    var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();
    
    var defineProperty = function (object, name, value, predicate) {
        if (name in object && (!isFunction(predicate) || !predicate())) {
            return;
        }
        if (supportsDescriptors) {
            origDefineProperty(object, name, {
                configurable: true,
                enumerable: false,
                value: value,
                writable: true
            });
        } else {
            object[name] = value;
        }
    };
    
    var defineProperties = function (object, map) {
        var predicates = arguments.length > 2 ? arguments[2] : {};
        var props = keys(map);
        if (hasSymbols) {
            props = concat.call(props, Object.getOwnPropertySymbols(map));
        }
        for (var i = 0; i < props.length; i += 1) {
            defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
        }
    };
    
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    
    module.exports = defineProperties;
    
    },{"object-keys":216}],109:[function(require,module,exports){
    'use strict';
    
    exports.utils = require('./des/utils');
    exports.Cipher = require('./des/cipher');
    exports.DES = require('./des/des');
    exports.CBC = require('./des/cbc');
    exports.EDE = require('./des/ede');
    
    },{"./des/cbc":110,"./des/cipher":111,"./des/des":112,"./des/ede":113,"./des/utils":114}],110:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    
    var proto = {};
    
    function CBCState(iv) {
      assert.equal(iv.length, 8, 'Invalid IV length');
    
      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++)
        this.iv[i] = iv[i];
    }
    
    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits(CBC, Base);
    
      var keys = Object.keys(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }
    
      CBC.create = function create(options) {
        return new CBC(options);
      };
    
      return CBC;
    }
    
    exports.instantiate = instantiate;
    
    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };
    
    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;
    
      var iv = state.iv;
      if (this.type === 'encrypt') {
        for (var i = 0; i < this.blockSize; i++)
          iv[i] ^= inp[inOff + i];
    
        superProto._update.call(this, iv, 0, out, outOff);
    
        for (var i = 0; i < this.blockSize; i++)
          iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);
    
        for (var i = 0; i < this.blockSize; i++)
          out[outOff + i] ^= iv[i];
    
        for (var i = 0; i < this.blockSize; i++)
          iv[i] = inp[inOff + i];
      }
    };
    
    },{"inherits":199,"minimalistic-assert":209}],111:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    
    function Cipher(options) {
      this.options = options;
    
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
    
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }
    module.exports = Cipher;
    
    Cipher.prototype._init = function _init() {
      // Might be overrided
    };
    
    Cipher.prototype.update = function update(data) {
      if (data.length === 0)
        return [];
    
      if (this.type === 'decrypt')
        return this._updateDecrypt(data);
      else
        return this._updateEncrypt(data);
    };
    
    Cipher.prototype._buffer = function _buffer(data, off) {
      // Append data to buffer
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++)
        this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;
    
      // Shift next
      return min;
    };
    
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };
    
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
    
      var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
      var out = new Array(count * this.blockSize);
    
      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
    
        if (this.bufferOff === this.buffer.length)
          outputOff += this._flushBuffer(out, outputOff);
      }
    
      // Write blocks
      var max = data.length - ((data.length - inputOff) % this.blockSize);
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
    
      // Queue rest
      for (; inputOff < data.length; inputOff++, this.bufferOff++)
        this.buffer[this.bufferOff] = data[inputOff];
    
      return out;
    };
    
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
    
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
    
      // TODO(indutny): optimize it, this is far from optimal
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
    
      // Buffer rest of the input
      inputOff += this._buffer(data, inputOff);
    
      return out;
    };
    
    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer)
        first = this.update(buffer);
    
      var last;
      if (this.type === 'encrypt')
        last = this._finalEncrypt();
      else
        last = this._finalDecrypt();
    
      if (first)
        return first.concat(last);
      else
        return last;
    };
    
    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0)
        return false;
    
      while (off < buffer.length)
        buffer[off++] = 0;
    
      return true;
    };
    
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
    
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };
    
    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };
    
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
    
      return this._unpad(out);
    };
    
    },{"minimalistic-assert":209}],112:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    
    var des = require('../des');
    var utils = des.utils;
    var Cipher = des.Cipher;
    
    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }
    
    function DES(options) {
      Cipher.call(this, options);
    
      var state = new DESState();
      this._desState = state;
    
      this.deriveKeys(state, options.key);
    }
    inherits(DES, Cipher);
    module.exports = DES;
    
    DES.create = function create(options) {
      return new DES(options);
    };
    
    var shiftTable = [
      1, 1, 2, 2, 2, 2, 2, 2,
      1, 2, 2, 2, 2, 2, 2, 1
    ];
    
    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(16 * 2);
    
      assert.equal(key.length, this.blockSize, 'Invalid key length');
    
      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);
    
      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
    };
    
    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;
    
      var l = utils.readUInt32BE(inp, inOff);
      var r = utils.readUInt32BE(inp, inOff + 4);
    
      // Initial Permutation
      utils.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
    
      if (this.type === 'encrypt')
        this._encrypt(state, l, r, state.tmp, 0);
      else
        this._decrypt(state, l, r, state.tmp, 0);
    
      l = state.tmp[0];
      r = state.tmp[1];
    
      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r, outOff + 4);
    };
    
    DES.prototype._pad = function _pad(buffer, off) {
      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++)
        buffer[i] = value;
    
      return true;
    };
    
    DES.prototype._unpad = function _unpad(buffer) {
      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++)
        assert.equal(buffer[i], pad);
    
      return buffer.slice(0, buffer.length - pad);
    };
    
    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r = rStart;
    
      // Apply f() x16 times
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
    
        // f(r, k)
        utils.expand(r, state.tmp, 0);
    
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
    
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
      }
    
      // Reverse Initial Permutation
      utils.rip(r, l, out, off);
    };
    
    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r = lStart;
    
      // Apply f() x16 times
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
    
        // f(r, k)
        utils.expand(l, state.tmp, 0);
    
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
    
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
      }
    
      // Reverse Initial Permutation
      utils.rip(l, r, out, off);
    };
    
    },{"../des":109,"inherits":199,"minimalistic-assert":209}],113:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    
    var des = require('../des');
    var Cipher = des.Cipher;
    var DES = des.DES;
    
    function EDEState(type, key) {
      assert.equal(key.length, 24, 'Invalid key length');
    
      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);
    
      if (type === 'encrypt') {
        this.ciphers = [
          DES.create({ type: 'encrypt', key: k1 }),
          DES.create({ type: 'decrypt', key: k2 }),
          DES.create({ type: 'encrypt', key: k3 })
        ];
      } else {
        this.ciphers = [
          DES.create({ type: 'decrypt', key: k3 }),
          DES.create({ type: 'encrypt', key: k2 }),
          DES.create({ type: 'decrypt', key: k1 })
        ];
      }
    }
    
    function EDE(options) {
      Cipher.call(this, options);
    
      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits(EDE, Cipher);
    
    module.exports = EDE;
    
    EDE.create = function create(options) {
      return new EDE(options);
    };
    
    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;
    
      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };
    
    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
    
    },{"../des":109,"inherits":199,"minimalistic-assert":209}],114:[function(require,module,exports){
    'use strict';
    
    exports.readUInt32BE = function readUInt32BE(bytes, off) {
      var res =  (bytes[0 + off] << 24) |
                 (bytes[1 + off] << 16) |
                 (bytes[2 + off] << 8) |
                 bytes[3 + off];
      return res >>> 0;
    };
    
    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = (value >>> 16) & 0xff;
      bytes[2 + off] = (value >>> 8) & 0xff;
      bytes[3 + off] = value & 0xff;
    };
    
    exports.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
    
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >>> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inL >>> (j + i)) & 1;
        }
      }
    
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= (inR >>> (j + i)) & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= (inL >>> (j + i)) & 1;
        }
      }
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    exports.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
    
      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= (inR >>> (j + i)) & 1;
          outL <<= 1;
          outL |= (inL >>> (j + i)) & 1;
        }
      }
      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= (inR >>> (j + i)) & 1;
          outR <<= 1;
          outR |= (inL >>> (j + i)) & 1;
        }
      }
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    exports.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
    
      // 7, 15, 23, 31, 39, 47, 55, 63
      // 6, 14, 22, 30, 39, 47, 55, 63
      // 5, 13, 21, 29, 39, 47, 55, 63
      // 4, 12, 20, 28
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inL >> (j + i)) & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >> (j + i)) & 1;
      }
    
      // 1, 9, 17, 25, 33, 41, 49, 57
      // 2, 10, 18, 26, 34, 42, 50, 58
      // 3, 11, 19, 27, 35, 43, 51, 59
      // 36, 44, 52, 60
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inR >> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inL >> (j + i)) & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inL >> (j + i)) & 1;
      }
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    exports.r28shl = function r28shl(num, shift) {
      return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
    };
    
    var pc2table = [
      // inL => outL
      14, 11, 17, 4, 27, 23, 25, 0,
      13, 22, 7, 18, 5, 9, 16, 24,
      2, 20, 12, 21, 1, 8, 15, 26,
    
      // inR => outR
      15, 4, 25, 19, 9, 1, 26, 16,
      5, 11, 23, 8, 12, 7, 17, 0,
      22, 3, 10, 14, 6, 20, 27, 24
    ];
    
    exports.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
    
      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= (inL >>> pc2table[i]) & 0x1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= (inR >>> pc2table[i]) & 0x1;
      }
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    exports.expand = function expand(r, out, off) {
      var outL = 0;
      var outR = 0;
    
      outL = ((r & 1) << 5) | (r >>> 27);
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= (r >>> i) & 0x3f;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= (r >>> i) & 0x3f;
        outR <<= 6;
      }
      outR |= ((r & 0x1f) << 1) | (r >>> 31);
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    var sTable = [
      14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
      3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
      4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
      15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,
    
      15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
      9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
      0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
      5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,
    
      10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
      1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
      13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
      11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,
    
      7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
      1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
      10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
      15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,
    
      2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
      8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
      4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
      15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,
    
      12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
      0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
      9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
      7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,
    
      4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
      3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
      1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
      10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,
    
      13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
      10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
      7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
      0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
    ];
    
    exports.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = (inL >>> (18 - i * 6)) & 0x3f;
        var sb = sTable[i * 0x40 + b];
    
        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = (inR >>> (18 - i * 6)) & 0x3f;
        var sb = sTable[4 * 0x40 + i * 0x40 + b];
    
        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };
    
    var permuteTable = [
      16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
      30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
    ];
    
    exports.permute = function permute(num) {
      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= (num >>> permuteTable[i]) & 0x1;
      }
      return out >>> 0;
    };
    
    exports.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size)
        str = '0' + str;
    
      var out = [];
      for (var i = 0; i < size; i += group)
        out.push(str.slice(i, i + group));
      return out.join(' ');
    };
    
    },{}],115:[function(require,module,exports){
    (function (Buffer){
    var generatePrime = require('./lib/generatePrime')
    var primes = require('./lib/primes.json')
    
    var DH = require('./lib/dh')
    
    function getDiffieHellman (mod) {
      var prime = new Buffer(primes[mod].prime, 'hex')
      var gen = new Buffer(primes[mod].gen, 'hex')
    
      return new DH(prime, gen)
    }
    
    var ENCODINGS = {
      'binary': true, 'hex': true, 'base64': true
    }
    
    function createDiffieHellman (prime, enc, generator, genc) {
      if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
        return createDiffieHellman(prime, 'binary', enc, generator)
      }
    
      enc = enc || 'binary'
      genc = genc || 'binary'
      generator = generator || new Buffer([2])
    
      if (!Buffer.isBuffer(generator)) {
        generator = new Buffer(generator, genc)
      }
    
      if (typeof prime === 'number') {
        return new DH(generatePrime(prime, generator), generator, true)
      }
    
      if (!Buffer.isBuffer(prime)) {
        prime = new Buffer(prime, enc)
      }
    
      return new DH(prime, generator, true)
    }
    
    exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
    exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman
    
    }).call(this,require("buffer").Buffer)
    },{"./lib/dh":116,"./lib/generatePrime":117,"./lib/primes.json":118,"buffer":96}],116:[function(require,module,exports){
    (function (Buffer){
    var BN = require('bn.js');
    var MillerRabin = require('miller-rabin');
    var millerRabin = new MillerRabin();
    var TWENTYFOUR = new BN(24);
    var ELEVEN = new BN(11);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var primes = require('./generatePrime');
    var randomBytes = require('randombytes');
    module.exports = DH;
    
    function setPublicKey(pub, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this._pub = new BN(pub);
      return this;
    }
    
    function setPrivateKey(priv, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      this._priv = new BN(priv);
      return this;
    }
    
    var primeCache = {};
    function checkPrime(prime, generator) {
      var gen = generator.toString('hex');
      var hex = [gen, prime.toString(16)].join('_');
      if (hex in primeCache) {
        return primeCache[hex];
      }
      var error = 0;
    
      if (prime.isEven() ||
        !primes.simpleSieve ||
        !primes.fermatTest(prime) ||
        !millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
    
        if (gen === '02' || gen === '05') {
          // we'd be able to check the generator
          // it would fail so +8
          error += 8;
        } else {
          //we wouldn't be able to test the generator
          // so +4
          error += 4;
        }
        primeCache[hex] = error;
        return error;
      }
      if (!millerRabin.test(prime.shrn(1))) {
        //not a safe prime
        error += 2;
      }
      var rem;
      switch (gen) {
        case '02':
          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
            // unsuidable generator
            error += 8;
          }
          break;
        case '05':
          rem = prime.mod(TEN);
          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
            // prime mod 10 needs to equal 3 or 7
            error += 8;
          }
          break;
        default:
          error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    
    function DH(prime, generator, malleable) {
      this.setGenerator(generator);
      this.__prime = new BN(prime);
      this._prime = BN.mont(this.__prime);
      this._primeLen = prime.length;
      this._pub = undefined;
      this._priv = undefined;
      this._primeCode = undefined;
      if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
      } else {
        this._primeCode = 8;
      }
    }
    Object.defineProperty(DH.prototype, 'verifyError', {
      enumerable: true,
      get: function () {
        if (typeof this._primeCode !== 'number') {
          this._primeCode = checkPrime(this.__prime, this.__gen);
        }
        return this._primeCode;
      }
    });
    DH.prototype.generateKeys = function () {
      if (!this._priv) {
        this._priv = new BN(randomBytes(this._primeLen));
      }
      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
      return this.getPublicKey();
    };
    
    DH.prototype.computeSecret = function (other) {
      other = new BN(other);
      other = other.toRed(this._prime);
      var secret = other.redPow(this._priv).fromRed();
      var out = new Buffer(secret.toArray());
      var prime = this.getPrime();
      if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([front, out]);
      }
      return out;
    };
    
    DH.prototype.getPublicKey = function getPublicKey(enc) {
      return formatReturnValue(this._pub, enc);
    };
    
    DH.prototype.getPrivateKey = function getPrivateKey(enc) {
      return formatReturnValue(this._priv, enc);
    };
    
    DH.prototype.getPrime = function (enc) {
      return formatReturnValue(this.__prime, enc);
    };
    
    DH.prototype.getGenerator = function (enc) {
      return formatReturnValue(this._gen, enc);
    };
    
    DH.prototype.setGenerator = function (gen, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(gen)) {
        gen = new Buffer(gen, enc);
      }
      this.__gen = gen;
      this._gen = new BN(gen);
      return this;
    };
    
    function formatReturnValue(bn, enc) {
      var buf = new Buffer(bn.toArray());
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
    
    }).call(this,require("buffer").Buffer)
    },{"./generatePrime":117,"bn.js":61,"buffer":96,"miller-rabin":208,"randombytes":243}],117:[function(require,module,exports){
    var randomBytes = require('randombytes');
    module.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN = require('bn.js');
    var TWENTYFOUR = new BN(24);
    var MillerRabin = require('miller-rabin');
    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    var SIXTEEN = new BN(16);
    var EIGHT = new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    var TWELVE = new BN(12);
    var primes = null;
    
    function _getPrimes() {
      if (primes !== null)
        return primes;
    
      var limit = 0x100000;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++)
          if (k % res[j] === 0)
            break;
    
        if (i !== j && res[j] <= sqrt)
          continue;
    
        res[i++] = k;
      }
      primes = res;
      return res;
    }
    
    function simpleSieve(p) {
      var primes = _getPrimes();
    
      for (var i = 0; i < primes.length; i++)
        if (p.modn(primes[i]) === 0) {
          if (p.cmpn(primes[i]) === 0) {
            return true;
          } else {
            return false;
          }
        }
    
      return true;
    }
    
    function fermatTest(p) {
      var red = BN.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }
    
    function findPrime(bits, gen) {
      if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) {
          return new BN([0x8c, 0x7b]);
        } else {
          return new BN([0x8c, 0x27]);
        }
      }
      gen = new BN(gen);
    
      var num, n2;
    
      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) &&
          fermatTest(n2) && fermatTest(num) &&
          millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }
    
    }
    
    },{"bn.js":61,"miller-rabin":208,"randombytes":243}],118:[function(require,module,exports){
    module.exports={
        "modp1": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
        },
        "modp2": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
        },
        "modp5": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
        },
        "modp14": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
        },
        "modp15": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
        },
        "modp16": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
        },
        "modp17": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
        },
        "modp18": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
        }
    }
    },{}],119:[function(require,module,exports){
    'use strict';
    
    var elliptic = exports;
    
    elliptic.version = require('../package.json').version;
    elliptic.utils = require('./elliptic/utils');
    elliptic.rand = require('brorand');
    elliptic.curve = require('./elliptic/curve');
    elliptic.curves = require('./elliptic/curves');
    
    // Protocols
    elliptic.ec = require('./elliptic/ec');
    elliptic.eddsa = require('./elliptic/eddsa');
    
    },{"../package.json":146,"./elliptic/curve":122,"./elliptic/curves":125,"./elliptic/ec":126,"./elliptic/eddsa":129,"./elliptic/utils":133,"brorand":62}],120:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
    
      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    
      // Useful for many curves
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
    
      // Curve configuration, optional
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    
      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
    
      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;
    
    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };
    
    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };
    
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();
    
      var naf = getNAF(k, 1);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
    
      // Translate into more windowed form
      var repr = [];
      for (var j = 0; j < naf.length; j += doubles.step) {
        var nafW = 0;
        for (var k = j + doubles.step - 1; k >= j; k--)
          nafW = (nafW << 1) + naf[k];
        repr.push(nafW);
      }
    
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (var j = 0; j < repr.length; j++) {
          var nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
    
      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
    
      // Get NAF form
      var naf = getNAF(k, w);
    
      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var k = 0; i >= 0 && naf[i] === 0; i--)
          k++;
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
    
        if (i < 0)
          break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };
    
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                           points,
                                                           coeffs,
                                                           len,
                                                           jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
    
      // Fill all arrays
      var max = 0;
      for (var i = 0; i < len; i++) {
        var p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
    
      // Comb small window NAFs
      for (var i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a]);
          naf[b] = getNAF(coeffs[b], wndWidth[b]);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
    
        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b] /* 7 */
        ];
    
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
    
        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3  /* 1 1 */
        ];
    
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (var j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
    
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
    
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (var i = max; i >= 0; i--) {
        var k = 0;
    
        while (i >= 0) {
          var zero = true;
          for (var j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
    
        for (var j = 0; j < len; j++) {
          var z = tmp[j];
          var p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();
    
          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (var i = 0; i < len; i++)
        wnd[i] = null;
    
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    
    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };
    
    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };
    
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
    
      var len = this.p.byteLength();
    
      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert(bytes[bytes.length - 1] % 2 === 1);
    
        var res =  this.point(bytes.slice(1, 1 + len),
                              bytes.slice(1 + len, 1 + 2 * len));
    
        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };
    
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);
    
      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);
    
      return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
    };
    
    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
    
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
    
      return this;
    };
    
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
    
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
    
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
    
      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles
      };
    };
    
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
    
      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res
      };
    };
    
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };
    
    },{"../../elliptic":119,"bn.js":61}],121:[function(require,module,exports){
    'use strict';
    
    var curve = require('../curve');
    var elliptic = require('../../elliptic');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = curve.base;
    
    var assert = elliptic.utils.assert;
    
    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
    
      Base.call(this, 'edwards', conf);
    
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
    
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    
    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
    
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
    
      return this.point(x, y);
    };
    
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
    
      // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
    
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error('invalid point');
        else
          return this.point(this.zero, y);
      }
    
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
    
      return this.point(x, y);
    };
    
    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;
    
      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();
    
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    
      return lhs.cmp(rhs) === 0;
    };
    
    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
    
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);
    
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };
    
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };
    
    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
        (this.zOne && this.y.cmp(this.curve.c) === 0));
    };
    
    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S
    
      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    
    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S
    
      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();
    
      var nx;
      var ny;
      var nz;
      if (this.curve.twisted) {
        // E = a * C
        var e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          var h = this.z.redSqr();
          // J = F - 2 * H
          var j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        var e = c.redAdd(d);
        // H = (c * Z1)^2
        var h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        var j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
    
      // Double in extended coordinates
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    
    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M
    
      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    
    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S
    
      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    
    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
    
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    
    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
    };
    
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
    };
    
    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
    
      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    
    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(),
                              this.y,
                              this.z,
                              this.t && this.t.redNeg());
    };
    
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    
    Point.prototype.eq = function eq(other) {
      return this === other ||
             this.getX().cmp(other.getX()) === 0 &&
             this.getY().cmp(other.getY()) === 0;
    };
    
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
    
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
    
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    
    // Compatibility with BaseCurve
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
    
    },{"../../elliptic":119,"../curve":122,"bn.js":61,"inherits":199}],122:[function(require,module,exports){
    'use strict';
    
    var curve = exports;
    
    curve.base = require('./base');
    curve.short = require('./short');
    curve.mont = require('./mont');
    curve.edwards = require('./edwards');
    
    },{"./base":120,"./edwards":121,"./mont":123,"./short":124}],123:[function(require,module,exports){
    'use strict';
    
    var curve = require('../curve');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = curve.base;
    
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    
    function MontCurve(conf) {
      Base.call(this, 'mont', conf);
    
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    
    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
    
      return y.redSqr().cmp(rhs) === 0;
    };
    
    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);
    
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    
    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };
    
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    
    Point.prototype.precompute = function precompute() {
      // No-op
    };
    
    Point.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };
    
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };
    
    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };
    
    Point.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A
    
      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    
    Point.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };
    
    Point.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A
    
      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    
    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q
    
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
    
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };
    
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };
    
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };
    
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    
    Point.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();
    
      return this.x.fromRed();
    };
    
    },{"../../elliptic":119,"../curve":122,"bn.js":61,"inherits":199}],124:[function(require,module,exports){
    'use strict';
    
    var curve = require('../curve');
    var elliptic = require('../../elliptic');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = curve.base;
    
    var assert = elliptic.utils.assert;
    
    function ShortCurve(conf) {
      Base.call(this, 'short', conf);
    
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
    
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    
      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;
    
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
    
      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
    
      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
    
      return {
        beta: beta,
        lambda: lambda,
        basis: basis
      };
    };
    
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
    
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };
    
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    
      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
    
      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;
    
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
    
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
    
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
    
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
    
      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
    
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
    
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
    
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
    
      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };
    
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
    
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    
      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
    
      return this.point(x, y);
    };
    
    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;
    
      var x = point.x;
      var y = point.y;
    
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    
    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
    
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
    
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    
      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    
    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    
    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
    
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
    
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];
    
      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      } ];
    };
    
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
    
      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }
    
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };
    
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    
    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;
    
      // P + O = P
      if (p.inf)
        return this;
    
      // P + P = 2P
      if (this.eq(p))
        return this.dbl();
    
      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);
    
      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
    
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
    
      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
    
      var a = this.curve.a;
    
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    
    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
    
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };
    
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    
    Point.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
    
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
    
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    
    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
    
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
    
      return this.curve.point(ax, ay);
    };
    
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    
    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;
    
      // P + O = P
      if (p.isInfinity())
        return this;
    
      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
    
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
    
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
    
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();
    
      // P + O = P
      if (p.isInfinity())
        return this;
    
      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
    
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
    
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
    
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
    
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (var i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }
    
      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;
    
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
    
      // Reuse results
      var jyd = jy.redAdd(jy);
      for (var i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
    
        jx = nx;
        jz = nz;
        jyd = dny;
      }
    
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
    
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
    
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
    
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
    
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
    
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
    
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
    
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
    
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
    
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
    
      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
    
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
    
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
    
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
    
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...
    
      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
    
      return this.curve._wnafMul(this, k);
    };
    
    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());
    
      if (this === p)
        return true;
    
      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
    
      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
    
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
    
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };
    
    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };
    
    },{"../../elliptic":119,"../curve":122,"bn.js":61,"inherits":199}],125:[function(require,module,exports){
    'use strict';
    
    var curves = exports;
    
    var hash = require('hash.js');
    var elliptic = require('../elliptic');
    
    var assert = elliptic.utils.assert;
    
    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new elliptic.curve.short(options);
      else if (options.type === 'edwards')
        this.curve = new elliptic.curve.edwards(options);
      else
        this.curve = new elliptic.curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
    
      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;
    
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve
          });
          return curve;
        }
      });
    }
    
    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
      ]
    });
    
    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
      ]
    });
    
    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
      ]
    });
    
    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
      ]
    });
    
    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650'
      ]
    });
    
    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: [
        '9'
      ]
    });
    
    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
    
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658'
      ]
    });
    
    var pre;
    try {
      pre = require('./precomputed/secp256k1');
    } catch (e) {
      pre = undefined;
    }
    
    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash.sha256,
    
      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15'
        }
      ],
    
      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre
      ]
    });
    
    },{"../elliptic":119,"./precomputed/secp256k1":132,"hash.js":134}],126:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var HmacDRBG = require('hmac-drbg');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    
    var KeyPair = require('./key');
    var Signature = require('./signature');
    
    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);
    
      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);
    
        options = elliptic.curves[options];
      }
    
      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof elliptic.curves.PresetCurve)
        options = { curve: options };
    
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
    
      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
    
      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;
    
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
    
      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
      });
    
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      do {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
    
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      } while (true);
    };
    
    EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
    
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
    
      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);
    
      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);
    
      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
      });
    
      // Number of bytes to generate
      var ns1 = this.n.sub(new BN(1));
    
      for (var iter = 0; true; iter++) {
        var k = options.k ?
            options.k(iter) :
            new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
    
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
    
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;
    
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
    
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);
    
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
    
        return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };
    
    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, 'hex');
    
      // Perform primitive values validation
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
    
      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
    
      if (!this.curve._maxwellTrick) {
        var p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;
    
        return p.getX().umod(this.n).cmp(r) === 0;
      }
    
      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K
    
      var p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;
    
      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };
    
    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature(signature, enc);
    
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;
    
      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');
    
      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);
    
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
    
      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };
    
    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;
    
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }
    
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };
    
    },{"../../elliptic":119,"./key":127,"./signature":128,"bn.js":61,"hmac-drbg":181}],127:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    
    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
    
      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;
    
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
    
      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
      });
    };
    
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
    
      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
      });
    };
    
    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
    
      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };
    
      return { result: true, reason: null };
    };
    
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }
    
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
    
      if (!enc)
        return this.pub;
    
      return this.pub.encode(enc, compact);
    };
    
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
    
      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    
    // ECDH
    KeyPair.prototype.derive = function derive(pub) {
      return pub.mul(this.priv).getX();
    };
    
    // ECDSA
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    
    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };
    
    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };
    
    },{"../../elliptic":119,"bn.js":61}],128:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    
    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;
    
      if (this._importDER(options, enc))
        return;
    
      assert(options.r && options.s, 'Signature without r or s');
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;
    
    function Position() {
      this.place = 0;
    }
    
    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
      }
      p.place = off;
      return val;
    }
    
    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0 && (r[1] & 0x80)) {
        r = r.slice(1);
      }
      if (s[0] === 0 && (s[1] & 0x80)) {
        s = s.slice(1);
      }
    
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
    
      return true;
    };
    
    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }
    
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
    
      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);
    
      r = rmPadding(r);
      s = rmPadding(s);
    
      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
    
    },{"../../elliptic":119,"bn.js":61}],129:[function(require,module,exports){
    'use strict';
    
    var hash = require('hash.js');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require('./key');
    var Signature = require('./signature');
    
    function EDDSA(curve) {
      assert(curve === 'ed25519', 'only tested with ed25519 so far');
    
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
    
      var curve = elliptic.curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
    
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }
    
    module.exports = EDDSA;
    
    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                   .mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };
    
    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };
    
    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash.update(arguments[i]);
      return utils.intFromLE(hash.digest()).umod(this.curve.n);
    };
    
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };
    
    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };
    
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
    
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };
    
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
    
    },{"../../elliptic":119,"./key":130,"./signature":131,"hash.js":134}],130:[function(require,module,exports){
    'use strict';
    
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    
    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub: pub });
    };
    
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret: secret });
    };
    
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    
    cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    
    cachedProperty(KeyPair, 'pub', function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    
    cachedProperty(KeyPair, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
    
      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
    
      return a;
    });
    
    cachedProperty(KeyPair, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    
    cachedProperty(KeyPair, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    
    cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };
    
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, 'KeyPair is public only');
      return utils.encode(this.secret(), enc);
    };
    
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    
    module.exports = KeyPair;
    
    },{"../../elliptic":119}],131:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    
    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
    
      if (typeof sig !== 'object')
        sig = parseBytes(sig);
    
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
    
      assert(sig.R && sig.S, 'Signature without R or S');
    
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;
    
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    
    cachedProperty(Signature, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    
    cachedProperty(Signature, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    
    cachedProperty(Signature, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    
    cachedProperty(Signature, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    
    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), 'hex').toUpperCase();
    };
    
    module.exports = Signature;
    
    },{"../../elliptic":119,"bn.js":61}],132:[function(require,module,exports){
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
          ]
        ]
      }
    };
    
    },{}],133:[function(require,module,exports){
    'use strict';
    
    var utils = exports;
    var BN = require('bn.js');
    var minAssert = require('minimalistic-assert');
    var minUtils = require('minimalistic-crypto-utils');
    
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    
    // Represent num in a w-NAF form
    function getNAF(num, w) {
      var naf = [];
      var ws = 1 << (w + 1);
      var k = num.clone();
      while (k.cmpn(1) >= 0) {
        var z;
        if (k.isOdd()) {
          var mod = k.andln(ws - 1);
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf.push(z);
    
        // Optimization, shift by word if possible
        var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
        for (var i = 1; i < shift; i++)
          naf.push(0);
        k.iushrn(shift);
      }
    
      return naf;
    }
    utils.getNAF = getNAF;
    
    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
    
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          var m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
    
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          var m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
    
        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
    
      return jsf;
    }
    utils.getJSF = getJSF;
    
    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
               this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    
    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                         bytes;
    }
    utils.parseBytes = parseBytes;
    
    function intFromLE(bytes) {
      return new BN(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    
    
    },{"bn.js":61,"minimalistic-assert":209,"minimalistic-crypto-utils":210}],134:[function(require,module,exports){
    var hash = exports;
    
    hash.utils = require('./hash/utils');
    hash.common = require('./hash/common');
    hash.sha = require('./hash/sha');
    hash.ripemd = require('./hash/ripemd');
    hash.hmac = require('./hash/hmac');
    
    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    
    },{"./hash/common":135,"./hash/hmac":136,"./hash/ripemd":137,"./hash/sha":138,"./hash/utils":145}],135:[function(require,module,exports){
    'use strict';
    
    var utils = require('./utils');
    var assert = require('minimalistic-assert');
    
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';
    
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    
    BlockHash.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
    
      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
    
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
    
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
    
      return this;
    };
    
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
    
      return this._digest(enc);
    };
    
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;
    
      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;
    
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
    
        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }
    
      return res;
    };
    
    },{"./utils":145,"minimalistic-assert":209}],136:[function(require,module,exports){
    'use strict';
    
    var utils = require('./utils');
    var assert = require('minimalistic-assert');
    
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
    
      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;
    
    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
    
      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);
    
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);
    
      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };
    
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
    
    },{"./utils":145,"minimalistic-assert":209}],137:[function(require,module,exports){
    'use strict';
    
    var utils = require('./utils');
    var common = require('./common');
    
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
    
      BlockHash.call(this);
    
      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'little');
      else
        return utils.split32(this.h, 'little');
    };
    
    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }
    
    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }
    
    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }
    
    var r = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];
    
    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];
    
    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];
    
    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];
    
    },{"./common":135,"./utils":145}],138:[function(require,module,exports){
    'use strict';
    
    exports.sha1 = require('./sha/1');
    exports.sha224 = require('./sha/224');
    exports.sha256 = require('./sha/256');
    exports.sha384 = require('./sha/384');
    exports.sha512 = require('./sha/512');
    
    },{"./sha/1":139,"./sha/224":140,"./sha/256":141,"./sha/384":142,"./sha/512":143}],139:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var common = require('../common');
    var shaCommon = require('./common');
    
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    
    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];
    
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
    
      BlockHash.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }
    
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
    
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
    
      for(; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
    
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
    
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    
    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };
    
    },{"../common":135,"../utils":145,"./common":144}],140:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var SHA256 = require('./256');
    
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
    
      SHA256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    
    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils.split32(this.h.slice(0, 7), 'big');
    };
    
    
    },{"../utils":145,"./256":141}],141:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var common = require('../common');
    var shaCommon = require('./common');
    var assert = require('minimalistic-assert');
    
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    
    var BlockHash = common.BlockHash;
    
    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];
    
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
    
      BlockHash.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
    
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
    
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
    
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    
    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };
    
    },{"../common":135,"../utils":145,"./common":144,"minimalistic-assert":209}],142:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    
    var SHA512 = require('./512');
    
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
    
      SHA512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    
    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils.split32(this.h.slice(0, 12), 'big');
    };
    
    },{"../utils":145,"./512":143}],143:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var common = require('../common');
    var assert = require('minimalistic-assert');
    
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    
    var BlockHash = common.BlockHash;
    
    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];
    
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
    
      BlockHash.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
    
      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];
    
        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };
    
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
    
      var W = this.W;
    
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
    
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
    
        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
    
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
    
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
    
        hh = gh;
        hl = gl;
    
        gh = fh;
        gl = fl;
    
        fh = eh;
        fl = el;
    
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
    
        dh = ch;
        dl = cl;
    
        ch = bh;
        cl = bl;
    
        bh = ah;
        bl = al;
    
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
    
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    
    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };
    
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39
    
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39
    
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41
    
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41
    
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
    
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
    
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);
    
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);
    
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    },{"../common":135,"../utils":145,"minimalistic-assert":209}],144:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var rotr32 = utils.rotr32;
    
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    
    function ch32(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    exports.ch32 = ch32;
    
    function maj32(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    exports.maj32 = maj32;
    
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    exports.g0_256 = g0_256;
    
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    exports.g1_256 = g1_256;
    
    },{"../utils":145}],145:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    
    exports.inherits = inherits;
    
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }
    
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray;
    
    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;
    
    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    exports.htonl = htonl;
    
    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    
    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    
    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    exports.split32 = split32;
    
    function rotr32(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    exports.rotr32 = rotr32;
    
    function rotl32(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    exports.rotl32 = rotl32;
    
    function sum32(a, b) {
      return (a + b) >>> 0;
    }
    exports.sum32 = sum32;
    
    function sum32_3(a, b, c) {
      return (a + b + c) >>> 0;
    }
    exports.sum32_3 = sum32_3;
    
    function sum32_4(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    exports.sum32_4 = sum32_4;
    
    function sum32_5(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    exports.sum32_5 = sum32_5;
    
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
    
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    
    function sum64_hi(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
    
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;
    
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
    
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    
    function rotr64_hi(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    
    function rotr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    
    function shr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
    
    },{"inherits":199,"minimalistic-assert":209}],146:[function(require,module,exports){
    module.exports={
      "name": "elliptic",
      "version": "6.4.1",
      "description": "EC cryptography",
      "main": "lib/elliptic.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        "lint": "npm run jscs && npm run jshint",
        "unit": "istanbul test _mocha --reporter=spec test/index.js",
        "test": "npm run lint && npm run unit",
        "version": "grunt dist && git add dist/"
      },
      "repository": {
        "type": "git",
        "url": "git@github.com:indutny/elliptic"
      },
      "keywords": [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      "author": "Fedor Indutny <fedor@indutny.com>",
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/indutny/elliptic/issues"
      },
      "homepage": "https://github.com/indutny/elliptic",
      "devDependencies": {
        "brfs": "^1.4.3",
        "coveralls": "^2.11.3",
        "grunt": "^0.4.5",
        "grunt-browserify": "^5.0.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-connect": "^1.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^1.0.1",
        "grunt-mocha-istanbul": "^3.0.1",
        "grunt-saucelabs": "^8.6.2",
        "istanbul": "^0.4.2",
        "jscs": "^2.9.0",
        "jshint": "^2.6.0",
        "mocha": "^2.1.0"
      },
      "dependencies": {
        "bn.js": "^4.4.0",
        "brorand": "^1.0.1",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.0",
        "inherits": "^2.0.1",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.0"
      }
    }
    
    },{}],147:[function(require,module,exports){
    'use strict';
    
    /* globals
        Set,
        Map,
        WeakSet,
        WeakMap,
    
        Promise,
    
        Symbol,
        Proxy,
    
        Atomics,
        SharedArrayBuffer,
    
        ArrayBuffer,
        DataView,
        Uint8Array,
        Float32Array,
        Float64Array,
        Int8Array,
        Int16Array,
        Int32Array,
        Uint8ClampedArray,
        Uint16Array,
        Uint32Array,
    */
    
    var undefined; // eslint-disable-line no-shadow-restricted-names
    
    var ThrowTypeError = Object.getOwnPropertyDescriptor
        ? (function () { return Object.getOwnPropertyDescriptor(arguments, 'callee').get; }())
        : function () { throw new TypeError(); };
    
    var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';
    
    var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto
    
    var generator; // = function * () {};
    var generatorFunction = generator ? getProto(generator) : undefined;
    var asyncFn; // async function() {};
    var asyncFunction = asyncFn ? asyncFn.constructor : undefined;
    var asyncGen; // async function * () {};
    var asyncGenFunction = asyncGen ? getProto(asyncGen) : undefined;
    var asyncGenIterator = asyncGen ? asyncGen() : undefined;
    
    var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
    
    var INTRINSICS = {
        '$ %Array%': Array,
        '$ %ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
        '$ %ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer.prototype,
        '$ %ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
        '$ %ArrayPrototype%': Array.prototype,
        '$ %ArrayProto_entries%': Array.prototype.entries,
        '$ %ArrayProto_forEach%': Array.prototype.forEach,
        '$ %ArrayProto_keys%': Array.prototype.keys,
        '$ %ArrayProto_values%': Array.prototype.values,
        '$ %AsyncFromSyncIteratorPrototype%': undefined,
        '$ %AsyncFunction%': asyncFunction,
        '$ %AsyncFunctionPrototype%': asyncFunction ? asyncFunction.prototype : undefined,
        '$ %AsyncGenerator%': asyncGen ? getProto(asyncGenIterator) : undefined,
        '$ %AsyncGeneratorFunction%': asyncGenFunction,
        '$ %AsyncGeneratorPrototype%': asyncGenFunction ? asyncGenFunction.prototype : undefined,
        '$ %AsyncIteratorPrototype%': asyncGenIterator && hasSymbols && Symbol.asyncIterator ? asyncGenIterator[Symbol.asyncIterator]() : undefined,
        '$ %Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
        '$ %Boolean%': Boolean,
        '$ %BooleanPrototype%': Boolean.prototype,
        '$ %DataView%': typeof DataView === 'undefined' ? undefined : DataView,
        '$ %DataViewPrototype%': typeof DataView === 'undefined' ? undefined : DataView.prototype,
        '$ %Date%': Date,
        '$ %DatePrototype%': Date.prototype,
        '$ %decodeURI%': decodeURI,
        '$ %decodeURIComponent%': decodeURIComponent,
        '$ %encodeURI%': encodeURI,
        '$ %encodeURIComponent%': encodeURIComponent,
        '$ %Error%': Error,
        '$ %ErrorPrototype%': Error.prototype,
        '$ %eval%': eval, // eslint-disable-line no-eval
        '$ %EvalError%': EvalError,
        '$ %EvalErrorPrototype%': EvalError.prototype,
        '$ %Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
        '$ %Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined : Float32Array.prototype,
        '$ %Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
        '$ %Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined : Float64Array.prototype,
        '$ %Function%': Function,
        '$ %FunctionPrototype%': Function.prototype,
        '$ %Generator%': generator ? getProto(generator()) : undefined,
        '$ %GeneratorFunction%': generatorFunction,
        '$ %GeneratorPrototype%': generatorFunction ? generatorFunction.prototype : undefined,
        '$ %Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
        '$ %Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined : Int8Array.prototype,
        '$ %Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
        '$ %Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined : Int8Array.prototype,
        '$ %Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
        '$ %Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined : Int32Array.prototype,
        '$ %isFinite%': isFinite,
        '$ %isNaN%': isNaN,
        '$ %IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
        '$ %JSON%': JSON,
        '$ %JSONParse%': JSON.parse,
        '$ %Map%': typeof Map === 'undefined' ? undefined : Map,
        '$ %MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
        '$ %MapPrototype%': typeof Map === 'undefined' ? undefined : Map.prototype,
        '$ %Math%': Math,
        '$ %Number%': Number,
        '$ %NumberPrototype%': Number.prototype,
        '$ %Object%': Object,
        '$ %ObjectPrototype%': Object.prototype,
        '$ %ObjProto_toString%': Object.prototype.toString,
        '$ %ObjProto_valueOf%': Object.prototype.valueOf,
        '$ %parseFloat%': parseFloat,
        '$ %parseInt%': parseInt,
        '$ %Promise%': typeof Promise === 'undefined' ? undefined : Promise,
        '$ %PromisePrototype%': typeof Promise === 'undefined' ? undefined : Promise.prototype,
        '$ %PromiseProto_then%': typeof Promise === 'undefined' ? undefined : Promise.prototype.then,
        '$ %Promise_all%': typeof Promise === 'undefined' ? undefined : Promise.all,
        '$ %Promise_reject%': typeof Promise === 'undefined' ? undefined : Promise.reject,
        '$ %Promise_resolve%': typeof Promise === 'undefined' ? undefined : Promise.resolve,
        '$ %Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
        '$ %RangeError%': RangeError,
        '$ %RangeErrorPrototype%': RangeError.prototype,
        '$ %ReferenceError%': ReferenceError,
        '$ %ReferenceErrorPrototype%': ReferenceError.prototype,
        '$ %Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
        '$ %RegExp%': RegExp,
        '$ %RegExpPrototype%': RegExp.prototype,
        '$ %Set%': typeof Set === 'undefined' ? undefined : Set,
        '$ %SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
        '$ %SetPrototype%': typeof Set === 'undefined' ? undefined : Set.prototype,
        '$ %SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
        '$ %SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer.prototype,
        '$ %String%': String,
        '$ %StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
        '$ %StringPrototype%': String.prototype,
        '$ %Symbol%': hasSymbols ? Symbol : undefined,
        '$ %SymbolPrototype%': hasSymbols ? Symbol.prototype : undefined,
        '$ %SyntaxError%': SyntaxError,
        '$ %SyntaxErrorPrototype%': SyntaxError.prototype,
        '$ %ThrowTypeError%': ThrowTypeError,
        '$ %TypedArray%': TypedArray,
        '$ %TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined,
        '$ %TypeError%': TypeError,
        '$ %TypeErrorPrototype%': TypeError.prototype,
        '$ %Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
        '$ %Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array.prototype,
        '$ %Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
        '$ %Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray.prototype,
        '$ %Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
        '$ %Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array.prototype,
        '$ %Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
        '$ %Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array.prototype,
        '$ %URIError%': URIError,
        '$ %URIErrorPrototype%': URIError.prototype,
        '$ %WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
        '$ %WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined : WeakMap.prototype,
        '$ %WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,
        '$ %WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined : WeakSet.prototype
    };
    
    module.exports = function GetIntrinsic(name, allowMissing) {
        if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
            throw new TypeError('"allowMissing" argument must be a boolean');
        }
    
        var key = '$ ' + name;
        if (!(key in INTRINSICS)) {
            throw new SyntaxError('intrinsic ' + name + ' does not exist!');
        }
    
        // istanbul ignore if // hopefully this is impossible to test :-)
        if (typeof INTRINSICS[key] === 'undefined' && !allowMissing) {
            throw new TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        }
        return INTRINSICS[key];
    };
    
    },{}],148:[function(require,module,exports){
    'use strict';
    
    var GetIntrinsic = require('./GetIntrinsic');
    
    var $Object = GetIntrinsic('%Object%');
    var $TypeError = GetIntrinsic('%TypeError%');
    var $String = GetIntrinsic('%String%');
    
    var assertRecord = require('./helpers/assertRecord');
    var $isNaN = require('./helpers/isNaN');
    var $isFinite = require('./helpers/isFinite');
    
    var sign = require('./helpers/sign');
    var mod = require('./helpers/mod');
    
    var IsCallable = require('is-callable');
    var toPrimitive = require('es-to-primitive/es5');
    
    var has = require('has');
    
    // https://es5.github.io/#x9
    var ES5 = {
        ToPrimitive: toPrimitive,
    
        ToBoolean: function ToBoolean(value) {
            return !!value;
        },
        ToNumber: function ToNumber(value) {
            return +value; // eslint-disable-line no-implicit-coercion
        },
        ToInteger: function ToInteger(value) {
            var number = this.ToNumber(value);
            if ($isNaN(number)) { return 0; }
            if (number === 0 || !$isFinite(number)) { return number; }
            return sign(number) * Math.floor(Math.abs(number));
        },
        ToInt32: function ToInt32(x) {
            return this.ToNumber(x) >> 0;
        },
        ToUint32: function ToUint32(x) {
            return this.ToNumber(x) >>> 0;
        },
        ToUint16: function ToUint16(value) {
            var number = this.ToNumber(value);
            if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
            var posInt = sign(number) * Math.floor(Math.abs(number));
            return mod(posInt, 0x10000);
        },
        ToString: function ToString(value) {
            return $String(value);
        },
        ToObject: function ToObject(value) {
            this.CheckObjectCoercible(value);
            return $Object(value);
        },
        CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
            /* jshint eqnull:true */
            if (value == null) {
                throw new $TypeError(optMessage || 'Cannot call method on ' + value);
            }
            return value;
        },
        IsCallable: IsCallable,
        SameValue: function SameValue(x, y) {
            if (x === y) { // 0 === -0, but they are not identical.
                if (x === 0) { return 1 / x === 1 / y; }
                return true;
            }
            return $isNaN(x) && $isNaN(y);
        },
    
        // https://www.ecma-international.org/ecma-262/5.1/#sec-8
        Type: function Type(x) {
            if (x === null) {
                return 'Null';
            }
            if (typeof x === 'undefined') {
                return 'Undefined';
            }
            if (typeof x === 'function' || typeof x === 'object') {
                return 'Object';
            }
            if (typeof x === 'number') {
                return 'Number';
            }
            if (typeof x === 'boolean') {
                return 'Boolean';
            }
            if (typeof x === 'string') {
                return 'String';
            }
        },
    
        // https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
        IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
            if (this.Type(Desc) !== 'Object') {
                return false;
            }
            var allowed = {
                '[[Configurable]]': true,
                '[[Enumerable]]': true,
                '[[Get]]': true,
                '[[Set]]': true,
                '[[Value]]': true,
                '[[Writable]]': true
            };
    
            for (var key in Desc) { // eslint-disable-line
                if (has(Desc, key) && !allowed[key]) {
                    return false;
                }
            }
    
            var isData = has(Desc, '[[Value]]');
            var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
            if (isData && IsAccessor) {
                throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
            }
            return true;
        },
    
        // https://ecma-international.org/ecma-262/5.1/#sec-8.10.1
        IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
            if (typeof Desc === 'undefined') {
                return false;
            }
    
            assertRecord(this, 'Property Descriptor', 'Desc', Desc);
    
            if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
                return false;
            }
    
            return true;
        },
    
        // https://ecma-international.org/ecma-262/5.1/#sec-8.10.2
        IsDataDescriptor: function IsDataDescriptor(Desc) {
            if (typeof Desc === 'undefined') {
                return false;
            }
    
            assertRecord(this, 'Property Descriptor', 'Desc', Desc);
    
            if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
                return false;
            }
    
            return true;
        },
    
        // https://ecma-international.org/ecma-262/5.1/#sec-8.10.3
        IsGenericDescriptor: function IsGenericDescriptor(Desc) {
            if (typeof Desc === 'undefined') {
                return false;
            }
    
            assertRecord(this, 'Property Descriptor', 'Desc', Desc);
    
            if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
                return true;
            }
    
            return false;
        },
    
        // https://ecma-international.org/ecma-262/5.1/#sec-8.10.4
        FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
            if (typeof Desc === 'undefined') {
                return Desc;
            }
    
            assertRecord(this, 'Property Descriptor', 'Desc', Desc);
    
            if (this.IsDataDescriptor(Desc)) {
                return {
                    value: Desc['[[Value]]'],
                    writable: !!Desc['[[Writable]]'],
                    enumerable: !!Desc['[[Enumerable]]'],
                    configurable: !!Desc['[[Configurable]]']
                };
            } else if (this.IsAccessorDescriptor(Desc)) {
                return {
                    get: Desc['[[Get]]'],
                    set: Desc['[[Set]]'],
                    enumerable: !!Desc['[[Enumerable]]'],
                    configurable: !!Desc['[[Configurable]]']
                };
            } else {
                throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
            }
        },
    
        // https://ecma-international.org/ecma-262/5.1/#sec-8.10.5
        ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
            if (this.Type(Obj) !== 'Object') {
                throw new $TypeError('ToPropertyDescriptor requires an object');
            }
    
            var desc = {};
            if (has(Obj, 'enumerable')) {
                desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
            }
            if (has(Obj, 'configurable')) {
                desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
            }
            if (has(Obj, 'value')) {
                desc['[[Value]]'] = Obj.value;
            }
            if (has(Obj, 'writable')) {
                desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
            }
            if (has(Obj, 'get')) {
                var getter = Obj.get;
                if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
                    throw new TypeError('getter must be a function');
                }
                desc['[[Get]]'] = getter;
            }
            if (has(Obj, 'set')) {
                var setter = Obj.set;
                if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
                    throw new $TypeError('setter must be a function');
                }
                desc['[[Set]]'] = setter;
            }
    
            if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
                throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
            }
            return desc;
        }
    };
    
    module.exports = ES5;
    
    },{"./GetIntrinsic":147,"./helpers/assertRecord":149,"./helpers/isFinite":150,"./helpers/isNaN":151,"./helpers/mod":152,"./helpers/sign":153,"es-to-primitive/es5":154,"has":179,"is-callable":201}],149:[function(require,module,exports){
    'use strict';
    
    var GetIntrinsic = require('../GetIntrinsic');
    
    var $TypeError = GetIntrinsic('%TypeError%');
    var $SyntaxError = GetIntrinsic('%SyntaxError%');
    
    var has = require('has');
    
    var predicates = {
      // https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
      'Property Descriptor': function isPropertyDescriptor(ES, Desc) {
        if (ES.Type(Desc) !== 'Object') {
          return false;
        }
        var allowed = {
          '[[Configurable]]': true,
          '[[Enumerable]]': true,
          '[[Get]]': true,
          '[[Set]]': true,
          '[[Value]]': true,
          '[[Writable]]': true
        };
    
        for (var key in Desc) { // eslint-disable-line
          if (has(Desc, key) && !allowed[key]) {
            return false;
          }
        }
    
        var isData = has(Desc, '[[Value]]');
        var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
        if (isData && IsAccessor) {
          throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
        }
        return true;
      }
    };
    
    module.exports = function assertRecord(ES, recordType, argumentName, value) {
      var predicate = predicates[recordType];
      if (typeof predicate !== 'function') {
        throw new $SyntaxError('unknown record type: ' + recordType);
      }
      if (!predicate(ES, value)) {
        throw new $TypeError(argumentName + ' must be a ' + recordType);
      }
      console.log(predicate(ES, value), value);
    };
    
    },{"../GetIntrinsic":147,"has":179}],150:[function(require,module,exports){
    var $isNaN = Number.isNaN || function (a) { return a !== a; };
    
    module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };
    
    },{}],151:[function(require,module,exports){
    module.exports = Number.isNaN || function isNaN(a) {
        return a !== a;
    };
    
    },{}],152:[function(require,module,exports){
    module.exports = function mod(number, modulo) {
        var remain = number % modulo;
        return Math.floor(remain >= 0 ? remain : remain + modulo);
    };
    
    },{}],153:[function(require,module,exports){
    module.exports = function sign(number) {
        return number >= 0 ? 1 : -1;
    };
    
    },{}],154:[function(require,module,exports){
    'use strict';
    
    var toStr = Object.prototype.toString;
    
    var isPrimitive = require('./helpers/isPrimitive');
    
    var isCallable = require('is-callable');
    
    // http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
    var ES5internalSlots = {
        '[[DefaultValue]]': function (O) {
            var actualHint;
            if (arguments.length > 1) {
                actualHint = arguments[1];
            } else {
                actualHint = toStr.call(O) === '[object Date]' ? String : Number;
            }
    
            if (actualHint === String || actualHint === Number) {
                var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
                var value, i;
                for (i = 0; i < methods.length; ++i) {
                    if (isCallable(O[methods[i]])) {
                        value = O[methods[i]]();
                        if (isPrimitive(value)) {
                            return value;
                        }
                    }
                }
                throw new TypeError('No default value');
            }
            throw new TypeError('invalid [[DefaultValue]] hint supplied');
        }
    };
    
    // http://ecma-international.org/ecma-262/5.1/#sec-9.1
    module.exports = function ToPrimitive(input) {
        if (isPrimitive(input)) {
            return input;
        }
        if (arguments.length > 1) {
            return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
        }
        return ES5internalSlots['[[DefaultValue]]'](input);
    };
    
    },{"./helpers/isPrimitive":155,"is-callable":201}],155:[function(require,module,exports){
    module.exports = function isPrimitive(value) {
        return value === null || (typeof value !== 'function' && typeof value !== 'object');
    };
    
    },{}],156:[function(require,module,exports){
    module.exports = (function () {
        if (this) return this;
    
        // Unexpected strict mode (may happen if e.g. bundled into ESM module) be nice
    
        // Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
        // In all ES5 engines global object inherits from Object.prototype
        // (if you approached one that doesn't please report)
        Object.defineProperty(Object.prototype, "__global__", {
            get: function () { return this; },
            configurable: true
        });
        try { return __global__; }
        finally { delete Object.prototype.__global__; }
    })();
    
    },{}],157:[function(require,module,exports){
    (function (Buffer){
    var sha3 = require('js-sha3').keccak_256
    var uts46 = require('idna-uts46-hx')
    
    function namehash (inputName) {
      // Reject empty names:
      var node = ''
      for (var i = 0; i < 32; i++) {
        node += '00'
      }
    
      name = normalize(inputName)
    
      if (name) {
        var labels = name.split('.')
    
        for(var i = labels.length - 1; i >= 0; i--) {
          var labelSha = sha3(labels[i])
          node = sha3(new Buffer(node + labelSha, 'hex'))
        }
      }
    
      return '0x' + node
    }
    
    function normalize(name) {
      return name ? uts46.toUnicode(name, {useStd3ASCII: true, transitional: false}) : name
    }
    
    exports.hash = namehash
    exports.normalize = normalize
    
    }).call(this,require("buffer").Buffer)
    },{"buffer":96,"idna-uts46-hx":196,"js-sha3":205}],158:[function(require,module,exports){
    (function (Buffer){
    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
    
    var Bytes = require("./bytes");
    var Nat = require("./nat");
    var elliptic = require("elliptic");
    var rlp = require("./rlp");
    var secp256k1 = new elliptic.ec("secp256k1"); // eslint-disable-line
    
    var _require = require("./hash"),
        keccak256 = _require.keccak256,
        keccak256s = _require.keccak256s;
    
    var create = function create(entropy) {
      var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));
      var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));
      var outerHex = keccak256(middleHex);
      return fromPrivate(outerHex);
    };
    
    var toChecksum = function toChecksum(address) {
      var addressHash = keccak256s(address.slice(2));
      var checksumAddress = "0x";
      for (var i = 0; i < 40; i++) {
        checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];
      }return checksumAddress;
    };
    
    var fromPrivate = function fromPrivate(privateKey) {
      var buffer = new Buffer(privateKey.slice(2), "hex");
      var ecKey = secp256k1.keyFromPrivate(buffer);
      var publicKey = "0x" + ecKey.getPublic(false, 'hex').slice(2);
      var publicHash = keccak256(publicKey);
      var address = toChecksum("0x" + publicHash.slice(-40));
      return {
        address: address,
        privateKey: privateKey
      };
    };
    
    var encodeSignature = function encodeSignature(_ref) {
      var _ref2 = _slicedToArray(_ref, 3),
          v = _ref2[0],
          r = Bytes.pad(32, _ref2[1]),
          s = Bytes.pad(32, _ref2[2]);
    
      return Bytes.flatten([r, s, v]);
    };
    
    var decodeSignature = function decodeSignature(hex) {
      return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];
    };
    
    var makeSigner = function makeSigner(addToV) {
      return function (hash, privateKey) {
        var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), "hex")).sign(new Buffer(hash.slice(2), "hex"), { canonical: true });
        return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat("0x" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat("0x" + signature.s.toString(16)))]);
      };
    };
    
    var sign = makeSigner(27); // v=27|28 instead of 0|1...
    
    var recover = function recover(hash, signature) {
      var vals = decodeSignature(signature);
      var vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };
      var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), "hex"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that
      var publicKey = "0x" + ecPublicKey.encode("hex", false).slice(2);
      var publicHash = keccak256(publicKey);
      var address = toChecksum("0x" + publicHash.slice(-40));
      return address;
    };
    
    module.exports = {
      create: create,
      toChecksum: toChecksum,
      fromPrivate: fromPrivate,
      sign: sign,
      makeSigner: makeSigner,
      recover: recover,
      encodeSignature: encodeSignature,
      decodeSignature: decodeSignature
    };
    }).call(this,require("buffer").Buffer)
    },{"./bytes":160,"./hash":161,"./nat":162,"./rlp":163,"buffer":96,"elliptic":119}],159:[function(require,module,exports){
    var generate = function generate(num, fn) {
      var a = [];
      for (var i = 0; i < num; ++i) {
        a.push(fn(i));
      }return a;
    };
    
    var replicate = function replicate(num, val) {
      return generate(num, function () {
        return val;
      });
    };
    
    var concat = function concat(a, b) {
      return a.concat(b);
    };
    
    var flatten = function flatten(a) {
      var r = [];
      for (var j = 0, J = a.length; j < J; ++j) {
        for (var i = 0, I = a[j].length; i < I; ++i) {
          r.push(a[j][i]);
        }
      }return r;
    };
    
    var chunksOf = function chunksOf(n, a) {
      var b = [];
      for (var i = 0, l = a.length; i < l; i += n) {
        b.push(a.slice(i, i + n));
      }return b;
    };
    
    module.exports = {
      generate: generate,
      replicate: replicate,
      concat: concat,
      flatten: flatten,
      chunksOf: chunksOf
    };
    },{}],160:[function(require,module,exports){
    var A = require("./array.js");
    
    var at = function at(bytes, index) {
      return parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);
    };
    
    var random = function random(bytes) {
      var rnd = void 0;
      if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof require !== "undefined") rnd = require("c" + "rypto").randomBytes(bytes);else throw "Safe random numbers not available.";
      var hex = "0x";
      for (var i = 0; i < bytes; ++i) {
        hex += ("00" + rnd[i].toString(16)).slice(-2);
      }return hex;
    };
    
    var length = function length(a) {
      return (a.length - 2) / 2;
    };
    
    var flatten = function flatten(a) {
      return "0x" + a.reduce(function (r, s) {
        return r + s.slice(2);
      }, "");
    };
    
    var slice = function slice(i, j, bs) {
      return "0x" + bs.slice(i * 2 + 2, j * 2 + 2);
    };
    
    var reverse = function reverse(hex) {
      var rev = "0x";
      for (var i = 0, l = length(hex); i < l; ++i) {
        rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
      }
      return rev;
    };
    
    var pad = function pad(l, hex) {
      return hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));
    };
    
    var padRight = function padRight(l, hex) {
      return hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");
    };
    
    var toArray = function toArray(hex) {
      var arr = [];
      for (var i = 2, l = hex.length; i < l; i += 2) {
        arr.push(parseInt(hex.slice(i, i + 2), 16));
      }return arr;
    };
    
    var fromArray = function fromArray(arr) {
      var hex = "0x";
      for (var i = 0, l = arr.length; i < l; ++i) {
        var b = arr[i];
        hex += (b < 16 ? "0" : "") + b.toString(16);
      }
      return hex;
    };
    
    var toUint8Array = function toUint8Array(hex) {
      return new Uint8Array(toArray(hex));
    };
    
    var fromUint8Array = function fromUint8Array(arr) {
      return fromArray([].slice.call(arr, 0));
    };
    
    var fromNumber = function fromNumber(num) {
      var hex = num.toString(16);
      return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
    };
    
    var toNumber = function toNumber(hex) {
      return parseInt(hex.slice(2), 16);
    };
    
    var concat = function concat(a, b) {
      return a.concat(b.slice(2));
    };
    
    var fromNat = function fromNat(bn) {
      return bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);
    };
    
    var toNat = function toNat(bn) {
      return bn[2] === "0" ? "0x" + bn.slice(3) : bn;
    };
    
    var fromAscii = function fromAscii(ascii) {
      var hex = "0x";
      for (var i = 0; i < ascii.length; ++i) {
        hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
      }return hex;
    };
    
    var toAscii = function toAscii(hex) {
      var ascii = "";
      for (var i = 2; i < hex.length; i += 2) {
        ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
      }return ascii;
    };
    
    // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
    var fromString = function fromString(s) {
      var makeByte = function makeByte(uint8) {
        var b = uint8.toString(16);
        return b.length < 2 ? "0" + b : b;
      };
      var bytes = "0x";
      for (var ci = 0; ci != s.length; ci++) {
        var c = s.charCodeAt(ci);
        if (c < 128) {
          bytes += makeByte(c);
          continue;
        }
        if (c < 2048) {
          bytes += makeByte(c >> 6 | 192);
        } else {
          if (c > 0xd7ff && c < 0xdc00) {
            if (++ci == s.length) return null;
            var c2 = s.charCodeAt(ci);
            if (c2 < 0xdc00 || c2 > 0xdfff) return null;
            c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
            bytes += makeByte(c >> 18 | 240);
            bytes += makeByte(c >> 12 & 63 | 128);
          } else {
            // c <= 0xffff
            bytes += makeByte(c >> 12 | 224);
          }
          bytes += makeByte(c >> 6 & 63 | 128);
        }
        bytes += makeByte(c & 63 | 128);
      }
      return bytes;
    };
    
    var toString = function toString(bytes) {
      var s = '';
      var i = 0;
      var l = length(bytes);
      while (i < l) {
        var c = at(bytes, i++);
        if (c > 127) {
          if (c > 191 && c < 224) {
            if (i >= l) return null;
            c = (c & 31) << 6 | at(bytes, i) & 63;
          } else if (c > 223 && c < 240) {
            if (i + 1 >= l) return null;
            c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;
          } else if (c > 239 && c < 248) {
            if (i + 2 >= l) return null;
            c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;
          } else return null;
          ++i;
        }
        if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {
          c -= 0x10000;
          s += String.fromCharCode(c >> 10 | 0xd800);
          s += String.fromCharCode(c & 0x3FF | 0xdc00);
        } else return null;
      }
      return s;
    };
    
    module.exports = {
      random: random,
      length: length,
      concat: concat,
      flatten: flatten,
      slice: slice,
      reverse: reverse,
      pad: pad,
      padRight: padRight,
      fromAscii: fromAscii,
      toAscii: toAscii,
      fromString: fromString,
      toString: toString,
      fromNumber: fromNumber,
      toNumber: toNumber,
      fromNat: fromNat,
      toNat: toNat,
      fromArray: fromArray,
      toArray: toArray,
      fromUint8Array: fromUint8Array,
      toUint8Array: toUint8Array
    };
    },{"./array.js":159}],161:[function(require,module,exports){
    // This was ported from https://github.com/emn178/js-sha3, with some minor
    // modifications and pruning. It is licensed under MIT:
    //
    // Copyright 2015-2016 Chen, Yi-Cyuan
    //  
    // Permission is hereby granted, free of charge, to any person obtaining
    // a copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to
    // permit persons to whom the Software is furnished to do so, subject to
    // the following conditions:
    // 
    // The above copyright notice and this permission notice shall be
    // included in all copies or substantial portions of the Software.
    // 
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    var HEX_CHARS = '0123456789abcdef'.split('');
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    
    var Keccak = function Keccak(bits) {
      return {
        blocks: [],
        reset: true,
        block: 0,
        start: 0,
        blockCount: 1600 - (bits << 1) >> 5,
        outputBlocks: bits >> 5,
        s: function (s) {
          return [].concat(s, s, s, s, s);
        }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
      };
    };
    
    var update = function update(state, message) {
      var length = message.length,
          blocks = state.blocks,
          byteCount = state.blockCount << 2,
          blockCount = state.blockCount,
          outputBlocks = state.outputBlocks,
          s = state.s,
          index = 0,
          i,
          code;
    
      // update
      while (index < length) {
        if (state.reset) {
          state.reset = false;
          blocks[0] = state.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (typeof message !== "string") {
          for (i = state.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = state.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
              blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            }
          }
        }
        state.lastByteIndex = i;
        if (i >= byteCount) {
          state.start = i - byteCount;
          state.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
          state.reset = true;
        } else {
          state.start = i;
        }
      }
    
      // finalize
      i = state.lastByteIndex;
      blocks[i >> 2] |= KECCAK_PADDING[i & 3];
      if (state.lastByteIndex === byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);
    
      // toString
      var hex = '',
          i = 0,
          j = 0,
          block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
        }
        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }
      return "0x" + hex;
    };
    
    var f = function f(s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    
      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
    
        h = c8 ^ (c2 << 1 | c3 >>> 31);
        l = c9 ^ (c3 << 1 | c2 >>> 31);
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ (c4 << 1 | c5 >>> 31);
        l = c1 ^ (c5 << 1 | c4 >>> 31);
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ (c6 << 1 | c7 >>> 31);
        l = c3 ^ (c7 << 1 | c6 >>> 31);
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ (c8 << 1 | c9 >>> 31);
        l = c5 ^ (c9 << 1 | c8 >>> 31);
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ (c0 << 1 | c1 >>> 31);
        l = c7 ^ (c1 << 1 | c0 >>> 31);
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;
    
        b0 = s[0];
        b1 = s[1];
        b32 = s[11] << 4 | s[10] >>> 28;
        b33 = s[10] << 4 | s[11] >>> 28;
        b14 = s[20] << 3 | s[21] >>> 29;
        b15 = s[21] << 3 | s[20] >>> 29;
        b46 = s[31] << 9 | s[30] >>> 23;
        b47 = s[30] << 9 | s[31] >>> 23;
        b28 = s[40] << 18 | s[41] >>> 14;
        b29 = s[41] << 18 | s[40] >>> 14;
        b20 = s[2] << 1 | s[3] >>> 31;
        b21 = s[3] << 1 | s[2] >>> 31;
        b2 = s[13] << 12 | s[12] >>> 20;
        b3 = s[12] << 12 | s[13] >>> 20;
        b34 = s[22] << 10 | s[23] >>> 22;
        b35 = s[23] << 10 | s[22] >>> 22;
        b16 = s[33] << 13 | s[32] >>> 19;
        b17 = s[32] << 13 | s[33] >>> 19;
        b48 = s[42] << 2 | s[43] >>> 30;
        b49 = s[43] << 2 | s[42] >>> 30;
        b40 = s[5] << 30 | s[4] >>> 2;
        b41 = s[4] << 30 | s[5] >>> 2;
        b22 = s[14] << 6 | s[15] >>> 26;
        b23 = s[15] << 6 | s[14] >>> 26;
        b4 = s[25] << 11 | s[24] >>> 21;
        b5 = s[24] << 11 | s[25] >>> 21;
        b36 = s[34] << 15 | s[35] >>> 17;
        b37 = s[35] << 15 | s[34] >>> 17;
        b18 = s[45] << 29 | s[44] >>> 3;
        b19 = s[44] << 29 | s[45] >>> 3;
        b10 = s[6] << 28 | s[7] >>> 4;
        b11 = s[7] << 28 | s[6] >>> 4;
        b42 = s[17] << 23 | s[16] >>> 9;
        b43 = s[16] << 23 | s[17] >>> 9;
        b24 = s[26] << 25 | s[27] >>> 7;
        b25 = s[27] << 25 | s[26] >>> 7;
        b6 = s[36] << 21 | s[37] >>> 11;
        b7 = s[37] << 21 | s[36] >>> 11;
        b38 = s[47] << 24 | s[46] >>> 8;
        b39 = s[46] << 24 | s[47] >>> 8;
        b30 = s[8] << 27 | s[9] >>> 5;
        b31 = s[9] << 27 | s[8] >>> 5;
        b12 = s[18] << 20 | s[19] >>> 12;
        b13 = s[19] << 20 | s[18] >>> 12;
        b44 = s[29] << 7 | s[28] >>> 25;
        b45 = s[28] << 7 | s[29] >>> 25;
        b26 = s[38] << 8 | s[39] >>> 24;
        b27 = s[39] << 8 | s[38] >>> 24;
        b8 = s[48] << 14 | s[49] >>> 18;
        b9 = s[49] << 14 | s[48] >>> 18;
    
        s[0] = b0 ^ ~b2 & b4;
        s[1] = b1 ^ ~b3 & b5;
        s[10] = b10 ^ ~b12 & b14;
        s[11] = b11 ^ ~b13 & b15;
        s[20] = b20 ^ ~b22 & b24;
        s[21] = b21 ^ ~b23 & b25;
        s[30] = b30 ^ ~b32 & b34;
        s[31] = b31 ^ ~b33 & b35;
        s[40] = b40 ^ ~b42 & b44;
        s[41] = b41 ^ ~b43 & b45;
        s[2] = b2 ^ ~b4 & b6;
        s[3] = b3 ^ ~b5 & b7;
        s[12] = b12 ^ ~b14 & b16;
        s[13] = b13 ^ ~b15 & b17;
        s[22] = b22 ^ ~b24 & b26;
        s[23] = b23 ^ ~b25 & b27;
        s[32] = b32 ^ ~b34 & b36;
        s[33] = b33 ^ ~b35 & b37;
        s[42] = b42 ^ ~b44 & b46;
        s[43] = b43 ^ ~b45 & b47;
        s[4] = b4 ^ ~b6 & b8;
        s[5] = b5 ^ ~b7 & b9;
        s[14] = b14 ^ ~b16 & b18;
        s[15] = b15 ^ ~b17 & b19;
        s[24] = b24 ^ ~b26 & b28;
        s[25] = b25 ^ ~b27 & b29;
        s[34] = b34 ^ ~b36 & b38;
        s[35] = b35 ^ ~b37 & b39;
        s[44] = b44 ^ ~b46 & b48;
        s[45] = b45 ^ ~b47 & b49;
        s[6] = b6 ^ ~b8 & b0;
        s[7] = b7 ^ ~b9 & b1;
        s[16] = b16 ^ ~b18 & b10;
        s[17] = b17 ^ ~b19 & b11;
        s[26] = b26 ^ ~b28 & b20;
        s[27] = b27 ^ ~b29 & b21;
        s[36] = b36 ^ ~b38 & b30;
        s[37] = b37 ^ ~b39 & b31;
        s[46] = b46 ^ ~b48 & b40;
        s[47] = b47 ^ ~b49 & b41;
        s[8] = b8 ^ ~b0 & b2;
        s[9] = b9 ^ ~b1 & b3;
        s[18] = b18 ^ ~b10 & b12;
        s[19] = b19 ^ ~b11 & b13;
        s[28] = b28 ^ ~b20 & b22;
        s[29] = b29 ^ ~b21 & b23;
        s[38] = b38 ^ ~b30 & b32;
        s[39] = b39 ^ ~b31 & b33;
        s[48] = b48 ^ ~b40 & b42;
        s[49] = b49 ^ ~b41 & b43;
    
        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };
    
    var keccak = function keccak(bits) {
      return function (str) {
        var msg;
        if (str.slice(0, 2) === "0x") {
          msg = [];
          for (var i = 2, l = str.length; i < l; i += 2) {
            msg.push(parseInt(str.slice(i, i + 2), 16));
          }
        } else {
          msg = str;
        }
        return update(Keccak(bits, bits), msg);
      };
    };
    
    module.exports = {
      keccak256: keccak(256),
      keccak512: keccak(512),
      keccak256s: keccak(256),
      keccak512s: keccak(512)
    };
    },{}],162:[function(require,module,exports){
    var BN = require("bn.js");
    var Bytes = require("./bytes");
    
    var fromBN = function fromBN(bn) {
      return "0x" + bn.toString("hex");
    };
    
    var toBN = function toBN(str) {
      return new BN(str.slice(2), 16);
    };
    
    var fromString = function fromString(str) {
      var bn = "0x" + (str.slice(0, 2) === "0x" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString("hex");
      return bn === "0x0" ? "0x" : bn;
    };
    
    var toEther = function toEther(wei) {
      return toNumber(div(wei, fromString("10000000000"))) / 100000000;
    };
    
    var fromEther = function fromEther(eth) {
      return mul(fromNumber(Math.floor(eth * 100000000)), fromString("10000000000"));
    };
    
    var toString = function toString(a) {
      return toBN(a).toString(10);
    };
    
    var fromNumber = function fromNumber(a) {
      return typeof a === "string" ? /^0x/.test(a) ? a : "0x" + a : "0x" + new BN(a).toString("hex");
    };
    
    var toNumber = function toNumber(a) {
      return toBN(a).toNumber();
    };
    
    var toUint256 = function toUint256(a) {
      return Bytes.pad(32, a);
    };
    
    var bin = function bin(method) {
      return function (a, b) {
        return fromBN(toBN(a)[method](toBN(b)));
      };
    };
    
    var add = bin("add");
    var mul = bin("mul");
    var div = bin("div");
    var sub = bin("sub");
    
    module.exports = {
      toString: toString,
      fromString: fromString,
      toNumber: toNumber,
      fromNumber: fromNumber,
      toEther: toEther,
      fromEther: fromEther,
      toUint256: toUint256,
      add: add,
      mul: mul,
      div: div,
      sub: sub
    };
    },{"./bytes":160,"bn.js":61}],163:[function(require,module,exports){
    // The RLP format
    // Serialization and deserialization for the BytesTree type, under the following grammar:
    // | First byte | Meaning                                                                    |
    // | ---------- | -------------------------------------------------------------------------- |
    // | 0   to 127 | HEX(leaf)                                                                  |
    // | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
    // | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
    // | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
    // | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |
    
    var encode = function encode(tree) {
      var padEven = function padEven(str) {
        return str.length % 2 === 0 ? str : "0" + str;
      };
    
      var uint = function uint(num) {
        return padEven(num.toString(16));
      };
    
      var length = function length(len, add) {
        return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);
      };
    
      var dataTree = function dataTree(tree) {
        if (typeof tree === "string") {
          var hex = tree.slice(2);
          var pre = hex.length != 2 || hex >= "80" ? length(hex.length / 2, 128) : "";
          return pre + hex;
        } else {
          var _hex = tree.map(dataTree).join("");
          var _pre = length(_hex.length / 2, 192);
          return _pre + _hex;
        }
      };
    
      return "0x" + dataTree(tree);
    };
    
    var decode = function decode(hex) {
      var i = 2;
    
      var parseTree = function parseTree() {
        if (i >= hex.length) throw "";
        var head = hex.slice(i, i + 2);
        return head < "80" ? (i += 2, "0x" + head) : head < "c0" ? parseHex() : parseList();
      };
    
      var parseLength = function parseLength() {
        var len = parseInt(hex.slice(i, i += 2), 16) % 64;
        return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);
      };
    
      var parseHex = function parseHex() {
        var len = parseLength();
        return "0x" + hex.slice(i, i += len * 2);
      };
    
      var parseList = function parseList() {
        var lim = parseLength() * 2 + i;
        var list = [];
        while (i < lim) {
          list.push(parseTree());
        }return list;
      };
    
      try {
        return parseTree();
      } catch (e) {
        return [];
      }
    };
    
    module.exports = { encode: encode, decode: decode };
    },{}],164:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = "4.0.28";
    
    },{}],165:[function(require,module,exports){
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    var _version_1 = require("./_version");
    // Unknown Error
    exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';
    // Not implemented
    exports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
    // Missing new operator to an object
    //  - name: The name of the class
    exports.MISSING_NEW = 'MISSING_NEW';
    // Call exception
    //  - transaction: the transaction
    //  - address?: the contract address
    //  - args?: The arguments passed into the function
    //  - method?: The Solidity method signature
    //  - errorSignature?: The EIP848 error signature
    //  - errorArgs?: The EIP848 error parameters
    //  - reason: The reason (only for EIP848 "Error(string)")
    exports.CALL_EXCEPTION = 'CALL_EXCEPTION';
    // Invalid argument (e.g. value is incompatible with type) to a function:
    //   - argument: The argument name that was invalid
    //   - value: The value of the argument
    exports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';
    // Missing argument to a function:
    //   - count: The number of arguments received
    //   - expectedCount: The number of arguments expected
    exports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';
    // Too many arguments
    //   - count: The number of arguments received
    //   - expectedCount: The number of arguments expected
    exports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';
    // Numeric Fault
    //   - operation: the operation being executed
    //   - fault: the reason this faulted
    exports.NUMERIC_FAULT = 'NUMERIC_FAULT';
    // Insufficien funds (< value + gasLimit * gasPrice)
    //   - transaction: the transaction attempted
    exports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';
    // Nonce has already been used
    //   - transaction: the transaction attempted
    exports.NONCE_EXPIRED = 'NONCE_EXPIRED';
    // The replacement fee for the transaction is too low
    //   - transaction: the transaction attempted
    exports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';
    // Unsupported operation
    //   - operation
    exports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';
    var _permanentCensorErrors = false;
    var _censorErrors = false;
    // @TODO: Enum
    function throwError(message, code, params) {
        if (_censorErrors) {
            throw new Error('unknown error');
        }
        if (!code) {
            code = exports.UNKNOWN_ERROR;
        }
        if (!params) {
            params = {};
        }
        var messageDetails = [];
        Object.keys(params).forEach(function (key) {
            try {
                messageDetails.push(key + '=' + JSON.stringify(params[key]));
            }
            catch (error) {
                messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));
            }
        });
        messageDetails.push("version=" + _version_1.version);
        var reason = message;
        if (messageDetails.length) {
            message += ' (' + messageDetails.join(', ') + ')';
        }
        // @TODO: Any??
        var error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function (key) {
            error[key] = params[key];
        });
        throw error;
    }
    exports.throwError = throwError;
    function checkNew(self, kind) {
        if (!(self instanceof kind)) {
            throwError('missing new', exports.MISSING_NEW, { name: kind.name });
        }
    }
    exports.checkNew = checkNew;
    function checkArgumentCount(count, expectedCount, suffix) {
        if (!suffix) {
            suffix = '';
        }
        if (count < expectedCount) {
            throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });
        }
        if (count > expectedCount) {
            throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });
        }
    }
    exports.checkArgumentCount = checkArgumentCount;
    function setCensorship(censorship, permanent) {
        if (_permanentCensorErrors) {
            throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCensorship' });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
    }
    exports.setCensorship = setCensorship;
    function checkNormalize() {
        try {
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
                try {
                    "test".normalize(form);
                }
                catch (error) {
                    throw new Error('missing ' + form);
                }
            });
            if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error('broken implementation');
            }
        }
        catch (error) {
            throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, { operation: 'String.prototype.normalize', form: error.message });
        }
    }
    exports.checkNormalize = checkNormalize;
    var LogLevels = { debug: 1, "default": 2, info: 2, warn: 3, error: 4, off: 5 };
    var LogLevel = LogLevels["default"];
    function setLogLevel(logLevel) {
        var level = LogLevels[logLevel];
        if (level == null) {
            warn("invliad log level - " + logLevel);
            return;
        }
        LogLevel = level;
    }
    exports.setLogLevel = setLogLevel;
    function log(logLevel, args) {
        if (LogLevel > LogLevels[logLevel]) {
            return;
        }
        console.log.apply(console, args);
    }
    function warn() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        log("warn", args);
    }
    exports.warn = warn;
    function info() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        log("info", args);
    }
    exports.info = info;
    
    },{"./_version":164}],166:[function(require,module,exports){
    'use strict';
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     *  BigNumber
     *
     *  A wrapper around the BN.js object. We use the BN.js library
     *  because it is used by elliptic, so it is required regardles.
     *
     */
    var bn_js_1 = __importDefault(require("bn.js"));
    var bytes_1 = require("./bytes");
    var properties_1 = require("./properties");
    var errors = __importStar(require("../errors"));
    var BN_1 = new bn_js_1.default.BN(-1);
    function toHex(bn) {
        var value = bn.toString(16);
        if (value[0] === '-') {
            if ((value.length % 2) === 0) {
                return '-0x0' + value.substring(1);
            }
            return "-0x" + value.substring(1);
        }
        if ((value.length % 2) === 1) {
            return '0x0' + value;
        }
        return '0x' + value;
    }
    function toBN(value) {
        return _bnify(bigNumberify(value));
    }
    function toBigNumber(bn) {
        return new BigNumber(toHex(bn));
    }
    function _bnify(value) {
        var hex = value._hex;
        if (hex[0] === '-') {
            return (new bn_js_1.default.BN(hex.substring(3), 16)).mul(BN_1);
        }
        return new bn_js_1.default.BN(hex.substring(2), 16);
    }
    var BigNumber = /** @class */ (function () {
        function BigNumber(value) {
            errors.checkNew(this, BigNumber);
            properties_1.setType(this, 'BigNumber');
            if (typeof (value) === 'string') {
                if (bytes_1.isHexString(value)) {
                    if (value == '0x') {
                        value = '0x0';
                    }
                    properties_1.defineReadOnly(this, '_hex', value);
                }
                else if (value[0] === '-' && bytes_1.isHexString(value.substring(1))) {
                    properties_1.defineReadOnly(this, '_hex', value);
                }
                else if (value.match(/^-?[0-9]*$/)) {
                    if (value == '') {
                        value = '0';
                    }
                    properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
                }
                else {
                    errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
                }
            }
            else if (typeof (value) === 'number') {
                if (parseInt(String(value)) !== value) {
                    errors.throwError('underflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'underflow', value: value, outputValue: parseInt(String(value)) });
                }
                try {
                    properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
                }
                catch (error) {
                    errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
                }
            }
            else if (value instanceof BigNumber) {
                properties_1.defineReadOnly(this, '_hex', value._hex);
            }
            else if (value.toHexString) {
                properties_1.defineReadOnly(this, '_hex', toHex(toBN(value.toHexString())));
            }
            else if (value._hex && bytes_1.isHexString(value._hex)) {
                properties_1.defineReadOnly(this, '_hex', value._hex);
            }
            else if (bytes_1.isArrayish(value)) {
                properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));
            }
            else {
                errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
        }
        BigNumber.prototype.fromTwos = function (value) {
            return toBigNumber(_bnify(this).fromTwos(value));
        };
        BigNumber.prototype.toTwos = function (value) {
            return toBigNumber(_bnify(this).toTwos(value));
        };
        BigNumber.prototype.abs = function () {
            if (this._hex[0] === '-') {
                return toBigNumber(_bnify(this).mul(BN_1));
            }
            return this;
        };
        BigNumber.prototype.add = function (other) {
            return toBigNumber(_bnify(this).add(toBN(other)));
        };
        BigNumber.prototype.sub = function (other) {
            return toBigNumber(_bnify(this).sub(toBN(other)));
        };
        BigNumber.prototype.div = function (other) {
            var o = bigNumberify(other);
            if (o.isZero()) {
                errors.throwError('division by zero', errors.NUMERIC_FAULT, { operation: 'divide', fault: 'division by zero' });
            }
            return toBigNumber(_bnify(this).div(toBN(other)));
        };
        BigNumber.prototype.mul = function (other) {
            return toBigNumber(_bnify(this).mul(toBN(other)));
        };
        BigNumber.prototype.mod = function (other) {
            return toBigNumber(_bnify(this).mod(toBN(other)));
        };
        BigNumber.prototype.pow = function (other) {
            return toBigNumber(_bnify(this).pow(toBN(other)));
        };
        BigNumber.prototype.maskn = function (value) {
            return toBigNumber(_bnify(this).maskn(value));
        };
        BigNumber.prototype.eq = function (other) {
            return _bnify(this).eq(toBN(other));
        };
        BigNumber.prototype.lt = function (other) {
            return _bnify(this).lt(toBN(other));
        };
        BigNumber.prototype.lte = function (other) {
            return _bnify(this).lte(toBN(other));
        };
        BigNumber.prototype.gt = function (other) {
            return _bnify(this).gt(toBN(other));
        };
        BigNumber.prototype.gte = function (other) {
            return _bnify(this).gte(toBN(other));
        };
        BigNumber.prototype.isZero = function () {
            return _bnify(this).isZero();
        };
        BigNumber.prototype.toNumber = function () {
            try {
                return _bnify(this).toNumber();
            }
            catch (error) {
                errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
            }
            return null;
        };
        BigNumber.prototype.toString = function () {
            return _bnify(this).toString(10);
        };
        BigNumber.prototype.toHexString = function () {
            return this._hex;
        };
        BigNumber.isBigNumber = function (value) {
            return properties_1.isType(value, 'BigNumber');
        };
        return BigNumber;
    }());
    exports.BigNumber = BigNumber;
    function bigNumberify(value) {
        if (BigNumber.isBigNumber(value)) {
            return value;
        }
        return new BigNumber(value);
    }
    exports.bigNumberify = bigNumberify;
    
    },{"../errors":165,"./bytes":167,"./properties":168,"bn.js":61}],167:[function(require,module,exports){
    "use strict";
    /**
     *  Conversion Utilities
     *
     */
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var errors = __importStar(require("../errors"));
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    exports.isHexable = isHexable;
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            var args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isArrayish(value) {
        if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {
            return false;
        }
        for (var i = 0; i < value.length; i++) {
            var v = value[i];
            if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
                return false;
            }
        }
        return true;
    }
    exports.isArrayish = isArrayish;
    function arrayify(value) {
        if (value == null) {
            errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (typeof (value) === 'string') {
            var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
            if (!match) {
                errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            if (match[1] !== '0x') {
                errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            value = value.substring(2);
            if (value.length % 2) {
                value = '0' + value;
            }
            var result = [];
            for (var i = 0; i < value.length; i += 2) {
                result.push(parseInt(value.substr(i, 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isArrayish(value)) {
            return addSlice(new Uint8Array(value));
        }
        errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });
        return null;
    }
    exports.arrayify = arrayify;
    function concat(objects) {
        var arrays = [];
        var length = 0;
        for (var i = 0; i < objects.length; i++) {
            var object = arrayify(objects[i]);
            arrays.push(object);
            length += object.length;
        }
        var result = new Uint8Array(length);
        var offset = 0;
        for (var i = 0; i < arrays.length; i++) {
            result.set(arrays[i], offset);
            offset += arrays[i].length;
        }
        return addSlice(result);
    }
    exports.concat = concat;
    function stripZeros(value) {
        var result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        var start = 0;
        while (result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    exports.stripZeros = stripZeros;
    function padZeros(value, length) {
        value = arrayify(value);
        if (length < value.length) {
            throw new Error('cannot pad');
        }
        var result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    exports.padZeros = padZeros;
    function isHexString(value, length) {
        if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    exports.isHexString = isHexString;
    var HexCharacters = '0123456789abcdef';
    function hexlify(value) {
        if (isHexable(value)) {
            return value.toHexString();
        }
        if (typeof (value) === 'number') {
            if (value < 0) {
                errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            // @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible
            // We can about (value == MAX_INT) to as well, since that may indicate we underflowed already
            if (value >= 9007199254740991) {
                errors.throwError("out-of-range", errors.NUMERIC_FAULT, {
                    operartion: "hexlify",
                    fault: "out-of-safe-range"
                });
            }
            var hex = '';
            while (value) {
                hex = HexCharacters[value & 0x0f] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = '0' + hex;
                }
                return '0x' + hex;
            }
            return '0x00';
        }
        if (typeof (value) === 'string') {
            var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
            if (!match) {
                errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            if (match[1] !== '0x') {
                errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            if (value.length % 2) {
                value = '0x0' + value.substring(2);
            }
            return value;
        }
        if (isArrayish(value)) {
            var result = [];
            for (var i = 0; i < value.length; i++) {
                var v = value[i];
                result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);
            }
            return '0x' + result.join('');
        }
        errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });
        return 'never';
    }
    exports.hexlify = hexlify;
    function hexDataLength(data) {
        if (!isHexString(data) || (data.length % 2) !== 0) {
            return null;
        }
        return (data.length - 2) / 2;
    }
    exports.hexDataLength = hexDataLength;
    function hexDataSlice(data, offset, endOffset) {
        if (!isHexString(data)) {
            errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
        }
        if ((data.length % 2) !== 0) {
            errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
            return '0x' + data.substring(offset, 2 + 2 * endOffset);
        }
        return '0x' + data.substring(offset);
    }
    exports.hexDataSlice = hexDataSlice;
    function hexStripZeros(value) {
        if (!isHexString(value)) {
            errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        while (value.length > 3 && value.substring(0, 3) === '0x0') {
            value = '0x' + value.substring(3);
        }
        return value;
    }
    exports.hexStripZeros = hexStripZeros;
    function hexZeroPad(value, length) {
        if (!isHexString(value)) {
            errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        while (value.length < 2 * length + 2) {
            value = '0x0' + value.substring(2);
        }
        return value;
    }
    exports.hexZeroPad = hexZeroPad;
    function isSignature(value) {
        return (value && value.r != null && value.s != null);
    }
    function splitSignature(signature) {
        var v = 0;
        var r = '0x', s = '0x';
        if (isSignature(signature)) {
            if (signature.v == null && signature.recoveryParam == null) {
                errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });
            }
            r = hexZeroPad(signature.r, 32);
            s = hexZeroPad(signature.s, 32);
            v = signature.v;
            if (typeof (v) === 'string') {
                v = parseInt(v, 16);
            }
            var recoveryParam = signature.recoveryParam;
            if (recoveryParam == null && signature.v != null) {
                recoveryParam = 1 - (v % 2);
            }
            v = 27 + recoveryParam;
        }
        else {
            var bytes = arrayify(signature);
            if (bytes.length !== 65) {
                throw new Error('invalid signature');
            }
            r = hexlify(bytes.slice(0, 32));
            s = hexlify(bytes.slice(32, 64));
            v = bytes[64];
            if (v !== 27 && v !== 28) {
                v = 27 + (v % 2);
            }
        }
        return {
            r: r,
            s: s,
            recoveryParam: (v - 27),
            v: v
        };
    }
    exports.splitSignature = splitSignature;
    function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat([
            signature.r,
            signature.s,
            (signature.recoveryParam ? '0x1c' : '0x1b')
        ]));
    }
    exports.joinSignature = joinSignature;
    
    },{"../errors":165}],168:[function(require,module,exports){
    'use strict';
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var errors = __importStar(require("../errors"));
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    exports.defineReadOnly = defineReadOnly;
    // There are some issues with instanceof with npm link, so we use this
    // to ensure types are what we expect.
    function setType(object, type) {
        Object.defineProperty(object, '_ethersType', { configurable: false, value: type, writable: false });
    }
    exports.setType = setType;
    function isType(object, type) {
        return (object && object._ethersType === type);
    }
    exports.isType = isType;
    function resolveProperties(object) {
        var result = {};
        var promises = [];
        Object.keys(object).forEach(function (key) {
            var value = object[key];
            if (value instanceof Promise) {
                promises.push(value.then(function (value) {
                    result[key] = value;
                    return null;
                }));
            }
            else {
                result[key] = value;
            }
        });
        return Promise.all(promises).then(function () {
            return result;
        });
    }
    exports.resolveProperties = resolveProperties;
    function checkProperties(object, properties) {
        if (!object || typeof (object) !== 'object') {
            errors.throwError('invalid object', errors.INVALID_ARGUMENT, {
                argument: 'object',
                value: object
            });
        }
        Object.keys(object).forEach(function (key) {
            if (!properties[key]) {
                errors.throwError('invalid object key - ' + key, errors.INVALID_ARGUMENT, {
                    argument: 'transaction',
                    value: object,
                    key: key
                });
            }
        });
    }
    exports.checkProperties = checkProperties;
    function shallowCopy(object) {
        var result = {};
        for (var key in object) {
            result[key] = object[key];
        }
        return result;
    }
    exports.shallowCopy = shallowCopy;
    var opaque = { boolean: true, number: true, string: true };
    function deepCopy(object, frozen) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof (object)]) {
            return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
            var result = object.map(function (item) { return deepCopy(item, frozen); });
            if (frozen) {
                Object.freeze(result);
            }
            return result;
        }
        if (typeof (object) === 'object') {
            // Some internal objects, which are already immutable
            if (isType(object, 'BigNumber')) {
                return object;
            }
            if (isType(object, 'Description')) {
                return object;
            }
            if (isType(object, 'Indexed')) {
                return object;
            }
            var result = {};
            for (var key in object) {
                var value = object[key];
                if (value === undefined) {
                    continue;
                }
                defineReadOnly(result, key, deepCopy(value, frozen));
            }
            if (frozen) {
                Object.freeze(result);
            }
            return result;
        }
        // The function type is also immutable, so safe to copy by assignment
        if (typeof (object) === 'function') {
            return object;
        }
        throw new Error('Cannot deepCopy ' + typeof (object));
    }
    exports.deepCopy = deepCopy;
    // See: https://github.com/isaacs/inherits/blob/master/inherits_browser.js
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
    function inheritable(parent) {
        return function (child) {
            inherits(child, parent);
            defineReadOnly(child, 'inherits', inheritable(child));
        };
    }
    exports.inheritable = inheritable;
    
    },{"../errors":165}],169:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var numberToBN = require('number-to-bn');
    
    var zero = new BN(0);
    var negative1 = new BN(-1);
    
    // complete ethereum unit map
    var unitMap = {
      'noether': '0', // eslint-disable-line
      'wei': '1', // eslint-disable-line
      'kwei': '1000', // eslint-disable-line
      'Kwei': '1000', // eslint-disable-line
      'babbage': '1000', // eslint-disable-line
      'femtoether': '1000', // eslint-disable-line
      'mwei': '1000000', // eslint-disable-line
      'Mwei': '1000000', // eslint-disable-line
      'lovelace': '1000000', // eslint-disable-line
      'picoether': '1000000', // eslint-disable-line
      'gwei': '1000000000', // eslint-disable-line
      'Gwei': '1000000000', // eslint-disable-line
      'shannon': '1000000000', // eslint-disable-line
      'nanoether': '1000000000', // eslint-disable-line
      'nano': '1000000000', // eslint-disable-line
      'szabo': '1000000000000', // eslint-disable-line
      'microether': '1000000000000', // eslint-disable-line
      'micro': '1000000000000', // eslint-disable-line
      'finney': '1000000000000000', // eslint-disable-line
      'milliether': '1000000000000000', // eslint-disable-line
      'milli': '1000000000000000', // eslint-disable-line
      'ether': '1000000000000000000', // eslint-disable-line
      'kether': '1000000000000000000000', // eslint-disable-line
      'grand': '1000000000000000000000', // eslint-disable-line
      'mether': '1000000000000000000000000', // eslint-disable-line
      'gether': '1000000000000000000000000000', // eslint-disable-line
      'tether': '1000000000000000000000000000000' };
    
    /**
     * Returns value of unit in Wei
     *
     * @method getValueOfUnit
     * @param {String} unit the unit to convert to, default ether
     * @returns {BigNumber} value of the unit (in Wei)
     * @throws error if the unit is not correct:w
     */
    function getValueOfUnit(unitInput) {
      var unit = unitInput ? unitInput.toLowerCase() : 'ether';
      var unitValue = unitMap[unit]; // eslint-disable-line
    
      if (typeof unitValue !== 'string') {
        throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
      }
    
      return new BN(unitValue, 10);
    }
    
    function numberToString(arg) {
      if (typeof arg === 'string') {
        if (!arg.match(/^-?[0-9.]+$/)) {
          throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
        }
        return arg;
      } else if (typeof arg === 'number') {
        return String(arg);
      } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
        if (arg.toPrecision) {
          return String(arg.toPrecision());
        } else {
          // eslint-disable-line
          return arg.toString(10);
        }
      }
      throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + typeof arg + '.');
    }
    
    function fromWei(weiInput, unit, optionsInput) {
      var wei = numberToBN(weiInput); // eslint-disable-line
      var negative = wei.lt(zero); // eslint-disable-line
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var options = optionsInput || {};
    
      if (negative) {
        wei = wei.mul(negative1);
      }
    
      var fraction = wei.mod(base).toString(10); // eslint-disable-line
    
      while (fraction.length < baseLength) {
        fraction = '0' + fraction;
      }
    
      if (!options.pad) {
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      }
    
      var whole = wei.div(base).toString(10); // eslint-disable-line
    
      if (options.commify) {
        whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      }
    
      var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line
    
      if (negative) {
        value = '-' + value;
      }
    
      return value;
    }
    
    function toWei(etherInput, unit) {
      var ether = numberToString(etherInput); // eslint-disable-line
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
    
      // Is it negative?
      var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
      if (negative) {
        ether = ether.substring(1);
      }
    
      if (ether === '.') {
        throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
      }
    
      // Split it into a whole and fractional part
      var comps = ether.split('.'); // eslint-disable-line
      if (comps.length > 2) {
        throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
      }
    
      var whole = comps[0],
          fraction = comps[1]; // eslint-disable-line
    
      if (!whole) {
        whole = '0';
      }
      if (!fraction) {
        fraction = '0';
      }
      if (fraction.length > baseLength) {
        throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
      }
    
      while (fraction.length < baseLength) {
        fraction += '0';
      }
    
      whole = new BN(whole);
      fraction = new BN(fraction);
      var wei = whole.mul(base).add(fraction); // eslint-disable-line
    
      if (negative) {
        wei = wei.mul(negative1);
      }
    
      return new BN(wei.toString(10), 10);
    }
    
    module.exports = {
      unitMap: unitMap,
      numberToString: numberToString,
      getValueOfUnit: getValueOfUnit,
      fromWei: fromWei,
      toWei: toWei
    };
    },{"bn.js":170,"number-to-bn":213}],170:[function(require,module,exports){
    (function (module, exports) {
      'use strict';
    
      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }
    
      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    
      // BN
    
      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
    
        this.negative = 0;
        this.words = null;
        this.length = 0;
    
        // Reduction context
        this.red = null;
    
        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }
    
          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }
    
      BN.BN = BN;
      BN.wordSize = 26;
    
      var Buffer;
      try {
        Buffer = require('buf' + 'fer').Buffer;
      } catch (e) {
      }
    
      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }
    
        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
    
      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
    
      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
    
      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }
    
        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }
    
        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
    
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
        }
    
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
    
        if (number[0] === '-') {
          this.negative = 1;
        }
    
        this.strip();
    
        if (endian !== 'le') return;
    
        this._initArray(this.toArray(), base, endian);
      };
    
      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [ number & 0x3ffffff ];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }
    
        if (endian !== 'le') return;
    
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };
    
      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }
    
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
    
      function parseHex (str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
    
          r <<= 4;
    
          // 'a' - 'f'
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 0xa;
    
          // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 0xa;
    
          // '0' - '9'
          } else {
            r |= c & 0xf;
          }
        }
        return r;
      }
    
      BN.prototype._parseHex = function _parseHex (number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        }
        this.strip();
      };
    
      function parseBase (str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
    
          r *= mul;
    
          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;
    
          // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;
    
          // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }
    
      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [ 0 ];
        this.length = 1;
    
        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;
    
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
    
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
    
          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
    
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
    
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
    
          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
    
      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
    
      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
    
      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
    
      // Remove leading `0` from `this`
      BN.prototype.strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
    
      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
    
      BN.prototype.inspect = function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
    
      /*
    
      var zeros = [];
      var groupSizes = [];
      var groupBases = [];
    
      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
    
      */
    
      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];
    
      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];
    
      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];
    
      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
    
        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
    
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        assert(false, 'Base should be between 2 and 36');
      };
    
      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          console.log(this.length);
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };
    
      BN.prototype.toJSON = function toJSON () {
        return this.toString(16);
      };
    
      BN.prototype.toBuffer = function toBuffer (endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };
    
      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
    
      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
    
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
    
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
    
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
    
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
    
            res[i] = b;
          }
    
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
    
        return res;
      };
    
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
    
      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;
    
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };
    
      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
    
      function toBitArray (num) {
        var w = new Array(num.bitLength());
    
        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;
    
          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }
    
        return w;
      }
    
      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;
    
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
    
      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };
    
      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
    
      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
    
      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };
    
      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };
    
      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
    
        return this;
      };
    
      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
    
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
    
        return this.strip();
      };
    
      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
    
      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
    
      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
    
      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
    
        this.length = b.length;
    
        return this.strip();
      };
    
      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
    
      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
    
      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
    
      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
    
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = a.length;
    
        return this.strip();
      };
    
      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
    
      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
    
      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
    
      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);
    
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
    
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
    
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
    
        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }
    
        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }
    
        // And remove leading zeroes
        return this.strip();
      };
    
      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };
    
      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
    
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
    
        this._expand(off + 1);
    
        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
    
        return this.strip();
      };
    
      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;
    
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
    
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
    
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
    
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        return this;
      };
    
      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
    
        if (this.length > num.length) return this.clone().iadd(num);
    
        return num.clone().iadd(this);
      };
    
      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
    
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
    
        // At this point both numbers are positive
        var cmp = this.cmp(num);
    
        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
    
        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
    
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = Math.max(this.length, i);
    
        if (a !== this) {
          this.negative = 1;
        }
    
        return this.strip();
      };
    
      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };
    
      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;
    
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
    
        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;
    
        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
    
        return out.strip();
      }
    
      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
    
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
    
      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
    
      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
    
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
    
            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;
    
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
    
        return out.strip();
      }
    
      function jumboMulTo (self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }
    
      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
    
        return res;
      };
    
      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion
    
      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }
    
      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
    
        return t;
      };
    
      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;
    
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }
    
        return rb;
      };
    
      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
    
      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
    
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
    
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
    
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
    
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
    
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
    
              var rx = rtwdf_ * ro - itwdf_ * io;
    
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
    
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
    
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
    
              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
    
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
    
      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
    
        return 1 << i + 1 + odd;
      };
    
      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;
    
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
    
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
    
          t = iws[i];
    
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
    
      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;
    
          ws[i] = w & 0x3ffffff;
    
          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }
    
        return ws;
      };
    
      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
    
          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }
    
        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
    
        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };
    
      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
    
        return ph;
      };
    
      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
    
        var rbt = this.makeRBT(N);
    
        var _ = this.stub(N);
    
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
    
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
    
        var rmws = out.words;
        rmws.length = N;
    
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
    
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
    
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
    
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
    
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
    
      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
    
      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
    
      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };
    
      BN.prototype.imuln = function imuln (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
    
        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }
    
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
    
        return this;
      };
    
      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };
    
      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };
    
      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };
    
      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
    
        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
    
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
    
            res = res.mul(q);
          }
        }
    
        return res;
      };
    
      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;
    
        if (r !== 0) {
          var carry = 0;
    
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }
    
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
    
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
    
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
    
          this.length += s;
        }
    
        return this.strip();
      };
    
      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };
    
      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }
    
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;
    
        h -= s;
        h = Math.max(0, h);
    
        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
    
        if (s === 0) {
          // No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
    
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }
    
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
    
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
    
        return this.strip();
      };
    
      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
    
      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };
    
      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };
    
      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };
    
      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };
    
      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
    
        // Check bit and return
        var w = this.words[s];
    
        return !!(w & q);
      };
    
      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
    
        assert(this.negative === 0, 'imaskn works only with positive numbers');
    
        if (this.length <= s) {
          return this;
        }
    
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
    
        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }
    
        return this.strip();
      };
    
      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };
    
      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
    
        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
    
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
    
        // Add without checks
        return this._iaddn(num);
      };
    
      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;
    
        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
    
        return this;
      };
    
      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
    
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
    
        this.words[0] -= num;
    
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }
    
        return this.strip();
      };
    
      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };
    
      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };
    
      BN.prototype.iabs = function iabs () {
        this.negative = 0;
    
        return this;
      };
    
      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };
    
      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;
    
        this._expand(len);
    
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }
    
        if (carry === 0) return this.strip();
    
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
    
        return this.strip();
      };
    
      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;
    
        var a = this.clone();
        var b = num;
    
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
    
        // Initialize quotient
        var m = a.length - b.length;
        var q;
    
        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
    
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
    
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);
    
          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);
    
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
    
        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }
    
        return {
          div: q || null,
          mod: a
        };
      };
    
      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());
    
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
    
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
    
          return {
            div: div,
            mod: mod
          };
        }
    
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          return {
            div: div,
            mod: res.mod
          };
        }
    
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
    
          return {
            div: res.div,
            mod: mod
          };
        }
    
        // Both numbers are positive at this point
    
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
    
        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
    
          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
    
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
    
        return this._wordDiv(num, mode);
      };
    
      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };
    
      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };
    
      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };
    
      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);
    
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
    
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
    
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
    
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
    
      BN.prototype.modn = function modn (num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
    
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
    
        return acc;
      };
    
      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        assert(num <= 0x3ffffff);
    
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }
    
        return this.strip();
      };
    
      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };
    
      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var x = this;
        var y = p.clone();
    
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
    
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
    
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
    
        var g = 0;
    
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
    
        var yp = y.clone();
        var xp = x.clone();
    
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
    
              A.iushrn(1);
              B.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
    
              C.iushrn(1);
              D.iushrn(1);
            }
          }
    
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
    
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
    
      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var a = this;
        var b = p.clone();
    
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
    
        var x1 = new BN(1);
        var x2 = new BN(0);
    
        var delta = b.clone();
    
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
    
              x1.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
    
              x2.iushrn(1);
            }
          }
    
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
    
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
    
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
    
        return res;
      };
    
      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
    
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
    
        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
    
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
    
          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
    
          a.isub(b);
        } while (true);
    
        return b.iushln(shift);
      };
    
      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };
    
      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };
    
      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };
    
      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };
    
      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
    
        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
    
      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };
    
      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;
    
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
    
        this.strip();
    
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
    
          assert(num <= 0x3ffffff, 'Number is too big');
    
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
    
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
    
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
    
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
    
      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };
    
      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };
    
      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };
    
      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };
    
      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };
    
      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };
    
      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };
    
      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };
    
      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };
    
      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };
    
      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };
    
      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };
    
      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };
    
      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };
    
      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };
    
      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };
    
      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };
    
      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };
    
      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };
    
      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };
    
      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
    
      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
    
      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };
    
      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };
    
      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
    
      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };
    
      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };
    
      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
    
      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
    
      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
    
        this.tmp = this._tmp();
      }
    
      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
    
      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
    
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
    
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
    
        return r;
      };
    
      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };
    
      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };
    
      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);
    
      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
    
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
    
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
    
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
    
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
    
      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
    
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }
    
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
    
      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);
    
      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);
    
      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);
    
      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
    
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
    
      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
    
        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;
    
        return prime;
      };
    
      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }
    
      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };
    
      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };
    
      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
    
      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }
    
        return this.m.sub(a)._forceRed(this);
      };
    
      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);
    
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);
    
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
    
      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);
    
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);
    
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
    
      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
    
      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
    
      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
    
      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };
    
      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };
    
      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();
    
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
    
        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
    
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
    
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
    
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
    
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
    
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
    
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
    
        return r;
      };
    
      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
    
      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1);
        if (num.cmpn(1) === 0) return a.clone();
    
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
    
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
    
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
    
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
    
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
    
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
    
        return res;
      };
    
      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);
    
        return r === num ? r.clone() : r;
      };
    
      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
    
      //
      // Montgomery method engine
      //
    
      BN.mont = function mont (num) {
        return new Mont(num);
      };
    
      function Mont (m) {
        Red.call(this, m);
    
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }
    
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
    
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
    
      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };
    
      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
    
      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
    
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
    
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);
    
    },{}],171:[function(require,module,exports){
    'use strict';
    
    var has = Object.prototype.hasOwnProperty
      , prefix = '~';
    
    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */
    function Events() {}
    
    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);
    
      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }
    
    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    
    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }
    
      var listener = new EE(fn, context || emitter, once)
        , evt = prefix ? prefix + event : event;
    
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
    
      return emitter;
    }
    
    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    
    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    
    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;
    
      if (this._eventsCount === 0) return names;
    
      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }
    
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
    
      return names;
    };
    
    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event
        , handlers = this._events[evt];
    
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
    
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
    
      return ee;
    };
    
    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event
        , listeners = this._events[evt];
    
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    
    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
    
      if (!this._events[evt]) return false;
    
      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;
    
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
    
        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
    
        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
    
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;
    
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
    
          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
    
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
    
      return true;
    };
    
    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    
    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    
    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
    
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
    
      var listeners = this._events[evt];
    
      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }
    
        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
    
      return this;
    };
    
    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
    
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
    
      return this;
    };
    
    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    
    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;
    
    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;
    
    //
    // Expose the module.
    //
    if ('undefined' !== typeof module) {
      module.exports = EventEmitter;
    }
    
    },{}],172:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var MD5 = require('md5.js')
    
    /* eslint-disable camelcase */
    function EVP_BytesToKey (password, salt, keyBits, ivLen) {
      if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
      if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
      }
    
      var keyLen = keyBits / 8
      var key = Buffer.alloc(keyLen)
      var iv = Buffer.alloc(ivLen || 0)
      var tmp = Buffer.alloc(0)
    
      while (keyLen > 0 || ivLen > 0) {
        var hash = new MD5()
        hash.update(tmp)
        hash.update(password)
        if (salt) hash.update(salt)
        tmp = hash.digest()
    
        var used = 0
    
        if (keyLen > 0) {
          var keyStart = key.length - keyLen
          used = Math.min(keyLen, tmp.length)
          tmp.copy(key, keyStart, 0, used)
          keyLen -= used
        }
    
        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen
          var length = Math.min(ivLen, tmp.length - used)
          tmp.copy(iv, ivStart, used, used + length)
          ivLen -= length
        }
      }
    
      tmp.fill(0)
      return { key: key, iv: iv }
    }
    
    module.exports = EVP_BytesToKey
    
    },{"md5.js":207,"safe-buffer":264}],173:[function(require,module,exports){
    'use strict';
    
    var isArray = Array.isArray;
    var keyList = Object.keys;
    var hasProp = Object.prototype.hasOwnProperty;
    
    module.exports = function equal(a, b) {
      if (a === b) return true;
    
      if (a && b && typeof a == 'object' && typeof b == 'object') {
        var arrA = isArray(a)
          , arrB = isArray(b)
          , i
          , length
          , key;
    
        if (arrA && arrB) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (!equal(a[i], b[i])) return false;
          return true;
        }
    
        if (arrA != arrB) return false;
    
        var dateA = a instanceof Date
          , dateB = b instanceof Date;
        if (dateA != dateB) return false;
        if (dateA && dateB) return a.getTime() == b.getTime();
    
        var regexpA = a instanceof RegExp
          , regexpB = b instanceof RegExp;
        if (regexpA != regexpB) return false;
        if (regexpA && regexpB) return a.toString() == b.toString();
    
        var keys = keyList(a);
        length = keys.length;
    
        if (length !== keyList(b).length)
          return false;
    
        for (i = length; i-- !== 0;)
          if (!hasProp.call(b, keys[i])) return false;
    
        for (i = length; i-- !== 0;) {
          key = keys[i];
          if (!equal(a[key], b[key])) return false;
        }
    
        return true;
      }
    
      return a!==a && b!==b;
    };
    
    },{}],174:[function(require,module,exports){
    'use strict';
    
    module.exports = function (data, opts) {
        if (!opts) opts = {};
        if (typeof opts === 'function') opts = { cmp: opts };
        var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
    
        var cmp = opts.cmp && (function (f) {
            return function (node) {
                return function (a, b) {
                    var aobj = { key: a, value: node[a] };
                    var bobj = { key: b, value: node[b] };
                    return f(aobj, bobj);
                };
            };
        })(opts.cmp);
    
        var seen = [];
        return (function stringify (node) {
            if (node && node.toJSON && typeof node.toJSON === 'function') {
                node = node.toJSON();
            }
    
            if (node === undefined) return;
            if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
            if (typeof node !== 'object') return JSON.stringify(node);
    
            var i, out;
            if (Array.isArray(node)) {
                out = '[';
                for (i = 0; i < node.length; i++) {
                    if (i) out += ',';
                    out += stringify(node[i]) || 'null';
                }
                return out + ']';
            }
    
            if (node === null) return 'null';
    
            if (seen.indexOf(node) !== -1) {
                if (cycles) return JSON.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
            }
    
            var seenIndex = seen.push(node) - 1;
            var keys = Object.keys(node).sort(cmp && cmp(node));
            out = '';
            for (i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = stringify(node[key]);
    
                if (!value) continue;
                if (out) out += ',';
                out += JSON.stringify(key) + ':' + value;
            }
            seen.splice(seenIndex, 1);
            return '{' + out + '}';
        })(data);
    };
    
    },{}],175:[function(require,module,exports){
    'use strict';
    
    var isCallable = require('is-callable');
    
    var toStr = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    
    var forEachArray = function forEachArray(array, iterator, receiver) {
        for (var i = 0, len = array.length; i < len; i++) {
            if (hasOwnProperty.call(array, i)) {
                if (receiver == null) {
                    iterator(array[i], i, array);
                } else {
                    iterator.call(receiver, array[i], i, array);
                }
            }
        }
    };
    
    var forEachString = function forEachString(string, iterator, receiver) {
        for (var i = 0, len = string.length; i < len; i++) {
            // no such thing as a sparse string.
            if (receiver == null) {
                iterator(string.charAt(i), i, string);
            } else {
                iterator.call(receiver, string.charAt(i), i, string);
            }
        }
    };
    
    var forEachObject = function forEachObject(object, iterator, receiver) {
        for (var k in object) {
            if (hasOwnProperty.call(object, k)) {
                if (receiver == null) {
                    iterator(object[k], k, object);
                } else {
                    iterator.call(receiver, object[k], k, object);
                }
            }
        }
    };
    
    var forEach = function forEach(list, iterator, thisArg) {
        if (!isCallable(iterator)) {
            throw new TypeError('iterator must be a function');
        }
    
        var receiver;
        if (arguments.length >= 3) {
            receiver = thisArg;
        }
    
        if (toStr.call(list) === '[object Array]') {
            forEachArray(list, iterator, receiver);
        } else if (typeof list === 'string') {
            forEachString(list, iterator, receiver);
        } else {
            forEachObject(list, iterator, receiver);
        }
    };
    
    module.exports = forEach;
    
    },{"is-callable":201}],176:[function(require,module,exports){
    'use strict';
    
    /* eslint no-invalid-this: 1 */
    
    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = '[object Function]';
    
    module.exports = function bind(that) {
        var target = this;
        if (typeof target !== 'function' || toStr.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice.call(arguments, 1);
    
        var bound;
        var binder = function () {
            if (this instanceof bound) {
                var result = target.apply(
                    this,
                    args.concat(slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;
            } else {
                return target.apply(
                    that,
                    args.concat(slice.call(arguments))
                );
            }
        };
    
        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }
    
        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
    
        if (target.prototype) {
            var Empty = function Empty() {};
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
        }
    
        return bound;
    };
    
    },{}],177:[function(require,module,exports){
    'use strict';
    
    var implementation = require('./implementation');
    
    module.exports = Function.prototype.bind || implementation;
    
    },{"./implementation":176}],178:[function(require,module,exports){
    (function (global){
    var win;
    
    if (typeof window !== "undefined") {
        win = window;
    } else if (typeof global !== "undefined") {
        win = global;
    } else if (typeof self !== "undefined"){
        win = self;
    } else {
        win = {};
    }
    
    module.exports = win;
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}],179:[function(require,module,exports){
    'use strict';
    
    var bind = require('function-bind');
    
    module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
    
    },{"function-bind":177}],180:[function(require,module,exports){
    'use strict'
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('stream').Transform
    var inherits = require('inherits')
    
    function throwIfNotStringOrBuffer (val, prefix) {
      if (!Buffer.isBuffer(val) && typeof val !== 'string') {
        throw new TypeError(prefix + ' must be a string or a buffer')
      }
    }
    
    function HashBase (blockSize) {
      Transform.call(this)
    
      this._block = Buffer.allocUnsafe(blockSize)
      this._blockSize = blockSize
      this._blockOffset = 0
      this._length = [0, 0, 0, 0]
    
      this._finalized = false
    }
    
    inherits(HashBase, Transform)
    
    HashBase.prototype._transform = function (chunk, encoding, callback) {
      var error = null
      try {
        this.update(chunk, encoding)
      } catch (err) {
        error = err
      }
    
      callback(error)
    }
    
    HashBase.prototype._flush = function (callback) {
      var error = null
      try {
        this.push(this.digest())
      } catch (err) {
        error = err
      }
    
      callback(error)
    }
    
    HashBase.prototype.update = function (data, encoding) {
      throwIfNotStringOrBuffer(data, 'Data')
      if (this._finalized) throw new Error('Digest already called')
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
    
      // consume data
      var block = this._block
      var offset = 0
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
        this._update()
        this._blockOffset = 0
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++]
    
      // update length
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry
        carry = (this._length[j] / 0x0100000000) | 0
        if (carry > 0) this._length[j] -= 0x0100000000 * carry
      }
    
      return this
    }
    
    HashBase.prototype._update = function () {
      throw new Error('_update is not implemented')
    }
    
    HashBase.prototype.digest = function (encoding) {
      if (this._finalized) throw new Error('Digest already called')
      this._finalized = true
    
      var digest = this._digest()
      if (encoding !== undefined) digest = digest.toString(encoding)
    
      // reset state
      this._block.fill(0)
      this._blockOffset = 0
      for (var i = 0; i < 4; ++i) this._length[i] = 0
    
      return digest
    }
    
    HashBase.prototype._digest = function () {
      throw new Error('_digest is not implemented')
    }
    
    module.exports = HashBase
    
    },{"inherits":199,"safe-buffer":264,"stream":277}],181:[function(require,module,exports){
    'use strict';
    
    var hash = require('hash.js');
    var utils = require('minimalistic-crypto-utils');
    var assert = require('minimalistic-assert');
    
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
    
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
    
      var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils.toArray(options.pers, options.persEnc || 'hex');
      assert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;
    
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
    
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }
    
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };
    
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };
    
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
    
      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };
    
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
    
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
    
      assert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');
    
      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }
    
      // Optional additional data
      if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
      }
    
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
    
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
    
    },{"hash.js":182,"minimalistic-assert":209,"minimalistic-crypto-utils":210}],182:[function(require,module,exports){
    arguments[4][134][0].apply(exports,arguments)
    },{"./hash/common":183,"./hash/hmac":184,"./hash/ripemd":185,"./hash/sha":186,"./hash/utils":193,"dup":134}],183:[function(require,module,exports){
    arguments[4][135][0].apply(exports,arguments)
    },{"./utils":193,"dup":135,"minimalistic-assert":209}],184:[function(require,module,exports){
    arguments[4][136][0].apply(exports,arguments)
    },{"./utils":193,"dup":136,"minimalistic-assert":209}],185:[function(require,module,exports){
    arguments[4][137][0].apply(exports,arguments)
    },{"./common":183,"./utils":193,"dup":137}],186:[function(require,module,exports){
    arguments[4][138][0].apply(exports,arguments)
    },{"./sha/1":187,"./sha/224":188,"./sha/256":189,"./sha/384":190,"./sha/512":191,"dup":138}],187:[function(require,module,exports){
    arguments[4][139][0].apply(exports,arguments)
    },{"../common":183,"../utils":193,"./common":192,"dup":139}],188:[function(require,module,exports){
    arguments[4][140][0].apply(exports,arguments)
    },{"../utils":193,"./256":189,"dup":140}],189:[function(require,module,exports){
    arguments[4][141][0].apply(exports,arguments)
    },{"../common":183,"../utils":193,"./common":192,"dup":141,"minimalistic-assert":209}],190:[function(require,module,exports){
    arguments[4][142][0].apply(exports,arguments)
    },{"../utils":193,"./512":191,"dup":142}],191:[function(require,module,exports){
    arguments[4][143][0].apply(exports,arguments)
    },{"../common":183,"../utils":193,"dup":143,"minimalistic-assert":209}],192:[function(require,module,exports){
    arguments[4][144][0].apply(exports,arguments)
    },{"../utils":193,"dup":144}],193:[function(require,module,exports){
    arguments[4][145][0].apply(exports,arguments)
    },{"dup":145,"inherits":199,"minimalistic-assert":209}],194:[function(require,module,exports){
    var http = require('http')
    var url = require('url')
    
    var https = module.exports
    
    for (var key in http) {
      if (http.hasOwnProperty(key)) https[key] = http[key]
    }
    
    https.request = function (params, cb) {
      params = validateParams(params)
      return http.request.call(this, params, cb)
    }
    
    https.get = function (params, cb) {
      params = validateParams(params)
      return http.get.call(this, params, cb)
    }
    
    function validateParams (params) {
      if (typeof params === 'string') {
        params = url.parse(params)
      }
      if (!params.protocol) {
        params.protocol = 'https:'
      }
      if (params.protocol !== 'https:') {
        throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
      }
      return params
    }
    
    },{"http":278,"url":300}],195:[function(require,module,exports){
    /* This file is generated from the Unicode IDNA table, using
       the build-unicode-tables.py script. Please edit that
       script instead of this file. */
    
    /* istanbul ignore next */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define([], function () { return factory(); });
      } else if (typeof exports === 'object') {
        module.exports = factory();
      } else {
        root.uts46_map = factory();
      }
    }(this, function () {
    var blocks = [
      new Uint32Array([2157250,2157314,2157378,2157442,2157506,2157570,2157634,0,2157698,2157762,2157826,2157890,2157954,0,2158018,0]),
      new Uint32Array([2179041,6291456,2179073,6291456,2179105,6291456,2179137,6291456,2179169,6291456,2179201,6291456,2179233,6291456,2179265,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064,14680064,14680064,14680064]),
      new Uint32Array([0,2113729,2197345,2197377,2113825,2197409,2197441,2113921,2197473,2114017,2197505,2197537,2197569,2197601,2197633,2197665]),
      new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672,23068672,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,23068672,23068672,23068672,0,0,0,0,23068672]),
      new Uint32Array([14680064,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064]),
      new Uint32Array([2196001,2196033,2196065,2196097,2196129,2196161,2196193,2196225,2196257,2196289,2196321,2196353,2196385,2196417,2196449,2196481]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,6291456,0,0,0,0,0]),
      new Uint32Array([2097281,2105921,2097729,2106081,0,2097601,2162337,2106017,2133281,2097505,2105889,2097185,2097697,2135777,2097633,2097441]),
      new Uint32Array([2177025,6291456,2177057,6291456,2177089,6291456,2177121,6291456,2177153,6291456,2177185,6291456,2177217,6291456,2177249,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,0,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456]),
      new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456]),
      new Uint32Array([2134435,2134531,2134627,2134723,2134723,2134819,2134819,2134915,2134915,2135011,2105987,2135107,2135203,2135299,2131587,2135395]),
      new Uint32Array([0,0,0,0,0,0,0,6291456,2168673,2169249,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2147906,2147970,2148034,2148098,2148162,2148226,2148290,2148354,2147906,2147970,2148034,2148098,2148162,2148226,2148290,2148354]),
      new Uint32Array([2125219,2125315,2152834,2152898,2125411,2152962,2153026,2125506,2125507,2125603,2153090,2153154,2153218,2153282,2153346,2105348]),
      new Uint32Array([2203393,6291456,2203425,6291456,2203457,6291456,2203489,6291456,6291456,6291456,6291456,2203521,6291456,2181281,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,23068672,6291456,2145538,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,6291456]),
      new Uint32Array([2139426,2160834,2160898,2160962,2134242,2161026,2161090,2161154,2161218,2161282,2161346,2161410,2138658,2161474,2161538,2134722]),
      new Uint32Array([2119939,2124930,2125026,2106658,2125218,2128962,2129058,2129154,2129250,2129346,2129442,2108866,2108770,2150466,2150530,2150594]),
      new Uint32Array([2201601,6291456,2201633,6291456,2201665,6291456,2201697,6291456,2201729,6291456,2201761,6291456,2201793,6291456,2201825,6291456]),
      new Uint32Array([2193537,2193569,2193601,2193633,2193665,2193697,2193729,2193761,2193793,2193825,2193857,2193889,2193921,2193953,2193985,2194017]),
      new Uint32Array([6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2190561,6291456,2190593,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2190625,6291456,2190657,6291456,23068672]),
      new Uint32Array([2215905,2215937,2215969,2216001,2216033,2216065,2216097,2216129,2216161,2216193,2216225,2216257,2105441,2216289,2216321,2216353]),
      new Uint32Array([23068672,18884130,23068672,23068672,23068672,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2191233,2191265,2191297,2191329,2191361,2191393,2191425,2117377,2191457,2191489,2191521,2191553,2191585,2191617,2191649,2117953]),
      new Uint32Array([2132227,2132323,2132419,2132419,2132515,2132515,2132611,2132707,2132707,2132803,2132899,2132899,2132995,2132995,2133091,2133187]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,0,0]),
      new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,10609889,10610785,10609921,10610817,2222241]),
      new Uint32Array([6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0]),
      new Uint32Array([2219969,2157121,2157441,2157505,2157889,2157953,2220001,2158465,2158529,10575617,2156994,2157058,2129923,2130019,2157122,2157186]),
      new Uint32Array([6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
      new Uint32Array([2185249,6291456,2185281,6291456,2185313,6291456,2185345,6291456,2185377,6291456,2185409,6291456,2185441,6291456,2185473,6291456]),
      new Uint32Array([0,0,0,0,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,0,0,23068672,23068672,23068672,6291456,0]),
      new Uint32Array([2183361,6291456,2183393,6291456,2183425,6291456,2183457,6291456,2183489,6291456,2183521,6291456,2183553,6291456,2183585,6291456]),
      new Uint32Array([2192161,2192193,2192225,2192257,2192289,2192321,2192353,2192385,2192417,2192449,2192481,2192513,2192545,2192577,2192609,2192641]),
      new Uint32Array([2212001,2212033,2212065,2212097,2212129,2212161,2212193,2212225,2212257,2212289,2212321,2212353,2212385,2212417,2212449,2207265]),
      new Uint32Array([2249825,2249857,2249889,2249921,2249954,2250018,2250082,2250145,2250177,2250209,2250241,2250274,2250337,2250370,2250433,2250465]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2147905,2147969,2148033,2148097,2148161,2148225,2148289,2148353]),
      new Uint32Array([10485857,6291456,2197217,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,23068672,23068672]),
      new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([2180353,2180385,2144033,2180417,2180449,2180481,2180513,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,10610209,10610465,10610241,10610753,10609857]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0,0]),
      new Uint32Array([2223842,2223906,2223970,2224034,2224098,2224162,2224226,2224290,2224354,2224418,2224482,2224546,2224610,2224674,2224738,2224802]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
      new Uint32Array([23068672,23068672,23068672,18923650,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,18923714,23068672,23068672]),
      new Uint32Array([2126179,2125538,2126275,2126371,2126467,2125634,2126563,2105603,2105604,2125346,2126659,2126755,2126851,2098179,2098181,2098182]),
      new Uint32Array([2227426,2227490,2227554,2227618,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2192353,2240642,2240642,2240705,2240737,2240737,2240769,2240802,2240866,2240929,2240961,2240993,2241025,2241057,2241089,2241121]),
      new Uint32Array([6291456,2170881,2170913,2170945,6291456,2170977,6291456,2171009,2171041,6291456,6291456,6291456,2171073,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2132226,2132514,2163586,2132610,2160386,2133090,2133186,2160450,2160514,2160578,2133570,2106178,2160642,2133858,2160706,2160770]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10532162,10532226,10532290,10532354,10532418,10532482,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672]),
      new Uint32Array([2098209,2108353,2108193,2108481,2170241,2111713,2105473,2105569,2105601,2112289,2112481,2098305,2108321,0,0,0]),
      new Uint32Array([2209121,2209153,2209185,2209217,2209249,2209281,2209313,2209345,2209377,2209409,2209441,2209473,2207265,2209505,2209537,2209569]),
      new Uint32Array([2189025,6291456,2189057,6291456,2189089,6291456,2189121,6291456,2189153,6291456,2189185,6291456,2189217,6291456,2189249,6291456]),
      new Uint32Array([2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2165764,2140004]),
      new Uint32Array([2215105,6291456,2215137,6291456,6291456,2215169,2215201,6291456,6291456,6291456,2215233,2215265,2215297,2215329,2215361,2215393]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,6291456,6291456,6291456,23068672,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([10505091,10505187,10505283,10505379,10505475,10505571,10505667,10505763,10505859,10505955,10506051,10506147,10506243,10506339,10506435,10506531]),
      new Uint32Array([2229730,2229794,2229858,2229922,2229986,2230050,2230114,2230178,2230242,2230306,2230370,2230434,2230498,2230562,2230626,2230690]),
      new Uint32Array([2105505,2098241,2108353,2108417,2105825,0,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177]),
      new Uint32Array([6291456,6291456,6291456,6291456,10502115,10502178,10502211,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
      new Uint32Array([2190305,6291456,2190337,6291456,2190369,6291456,2190401,6291456,2190433,6291456,2190465,6291456,2190497,6291456,2190529,6291456]),
      new Uint32Array([2173793,2173985,2174017,6291456,2173761,2173697,6291456,2174689,6291456,2174017,2174721,6291456,6291456,2174753,2174785,2174817]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2099521,2099105,2120705,2098369,2120801,2103361,2097985,2098433,2121377,2121473,2099169,2099873,2098401,2099393,2152609,2100033]),
      new Uint32Array([2132898,2163842,2163906,2133282,2132034,2131938,2137410,2132802,2132706,2164866,2133282,2160578,2165186,2165186,6291456,6291456]),
      new Uint32Array([10500003,10500099,10500195,10500291,10500387,10500483,10500579,10500675,10500771,10500867,10500963,10501059,10501155,10501251,10501347,10501443]),
      new Uint32Array([2163458,2130978,2131074,2131266,2131362,2163522,2160130,2132066,2131010,2131106,2106018,2131618,2131298,2132034,2131938,2137410]),
      new Uint32Array([2212961,2116993,2212993,2213025,2213057,2213089,2213121,2213153,2213185,2213217,2213249,2209633,2213281,2213313,2213345,2213377]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([2113729,2113825,2113921,2114017,2114113,2114209,2114305,2114401,2114497,2114593,2114689,2114785,2114881,2114977,2115073,2115169]),
      new Uint32Array([2238177,2238209,2238241,2238273,2238305,2238337,2238337,2217537,2238369,2238401,2238433,2238465,2215649,2238497,2238529,2238561]),
      new Uint32Array([2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905]),
      new Uint32Array([6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,0]),
      new Uint32Array([6291456,0,6291456,2145026,0,6291456,2145090,0,6291456,6291456,0,0,23068672,0,23068672,23068672]),
      new Uint32Array([2099233,2122017,2200673,2098113,2121537,2103201,2200705,2104033,2121857,2121953,2122401,2099649,2099969,2123009,2100129,2100289]),
      new Uint32Array([6291456,23068672,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0]),
      new Uint32Array([2187681,2187713,2187745,2187777,2187809,2187841,2187873,2187905,2187937,2187969,2188001,2188033,2188065,2188097,2188129,2188161]),
      new Uint32Array([0,10554498,10554562,10554626,10554690,10554754,10554818,10554882,10554946,10555010,10555074,6291456,6291456,0,0,0]),
      new Uint32Array([2235170,2235234,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0]),
      new Uint32Array([2181153,6291456,2188897,6291456,6291456,2188929,6291456,6291456,6291456,6291456,6291456,6291456,2111905,2100865,2188961,2188993]),
      new Uint32Array([2100833,2100897,0,0,2101569,2101697,2101825,2101953,2102081,2102209,10575617,2187041,10502177,10489601,10489697,2112289]),
      new Uint32Array([6291456,2172833,6291456,2172865,2172897,2172929,2172961,6291456,2172993,6291456,2173025,6291456,2173057,6291456,2173089,6291456]),
      new Uint32Array([6291456,0,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,2190721]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,6291456,6291456]),
      new Uint32Array([2184993,6291456,2185025,6291456,2185057,6291456,2185089,6291456,2185121,6291456,2185153,6291456,2185185,6291456,2185217,6291456]),
      new Uint32Array([2115265,2115361,2115457,2115553,2115649,2115745,2115841,2115937,2116033,2116129,2116225,2116321,2150658,2150722,2200225,6291456]),
      new Uint32Array([2168321,6291456,2168353,6291456,2168385,6291456,2168417,6291456,2168449,6291456,2168481,6291456,2168513,6291456,2168545,6291456]),
      new Uint32Array([23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,0,6291456,0,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,2186625,0,0,6291456,6291456,2186657,2186689,2186721,2173505,0,10496067,10496163,10496259]),
      new Uint32Array([2178785,6291456,2178817,6291456,2178849,6291456,2178881,6291456,2178913,6291456,2178945,6291456,2178977,6291456,2179009,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0]),
      new Uint32Array([2097152,0,0,0,2097152,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,2197857,2197889,2197921,2197953,2197985,2198017,0,0,2198049,2198081,2198113,2198145,2198177,2198209]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2098209,2167297,2111137,6291456]),
      new Uint32Array([2171393,6291456,2171425,6291456,2171457,6291456,2171489,6291456,2171521,6291456,2171553,6291456,2171585,6291456,2171617,6291456]),
      new Uint32Array([2206753,2206785,2195457,2206817,2206849,2206881,2206913,2197153,2197153,2206945,2117857,2206977,2207009,2207041,2207073,2207105]),
      new Uint32Array([0,0,0,0,0,0,0,23068672,0,0,0,0,2144834,2144898,0,2144962]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672]),
      new Uint32Array([2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,0,2105505,2098241]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,2202049,6291456,2202081,6291456,2202113,6291456,2202145,6291456,2202177,6291456,2202209,6291456,2202241,6291456]),
      new Uint32Array([10501155,10501251,10501347,10501443,10501539,10501635,10501731,10501827,10501923,10502019,2141731,2105505,2098177,2155586,2166530,0]),
      new Uint32Array([2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441]),
      new Uint32Array([2146882,2146946,2147010,2147074,2147138,2147202,2147266,2147330,2146882,2146946,2147010,2147074,2147138,2147202,2147266,2147330]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([10502307,10502403,10502499,10502595,10502691,10502787,10502883,10502979,10503075,10503171,10503267,10503363,10503459,10503555,10503651,10503747]),
      new Uint32Array([2179937,2179969,2180001,2180033,2156545,2180065,2156577,2180097,2180129,2180161,2180193,2180225,2180257,2180289,2156737,2180321]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,0,0,0,6291456,0,0,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0]),
      new Uint32Array([2227682,2227746,2227810,2227874,2227938,2228002,2228066,2228130,2228194,2228258,2228322,2228386,2228450,2228514,2228578,2228642]),
      new Uint32Array([2105601,2169121,2108193,2170049,2181025,2181057,2112481,2108321,2108289,2181089,2170497,2100865,2181121,2173601,2173633,2173665]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2180641,6291456,6291456,6291456]),
      new Uint32Array([0,6291456,6291456,6291456,0,6291456,0,6291456,0,0,6291456,6291456,0,6291456,6291456,6291456]),
      new Uint32Array([2178273,6291456,2178305,6291456,2178337,6291456,2178369,6291456,2178401,6291456,2178433,6291456,2178465,6291456,2178497,6291456]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064,14680064,14680064,14680064,14680064]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456]),
      new Uint32Array([2237377,2237409,2236225,2237441,2237473,2217441,2215521,2215553,2217473,2237505,2237537,2209697,2237569,2215585,2237601,2237633]),
      new Uint32Array([2221985,2165601,2165601,2165665,2165665,2222017,2222017,2165729,2165729,2158913,2158913,2158913,2158913,2097281,2097281,2105921]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2149634,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2176897,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,2176929,6291456,2176961,6291456,2176993,6291456]),
      new Uint32Array([2172641,6291456,2172673,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2172705,2172737,6291456,2172769,2172801,6291456]),
      new Uint32Array([2099173,2104196,2121667,2099395,2121763,2152258,2152322,2098946,2152386,2121859,2121955,2099333,2122051,2104324,2099493,2122147]),
      new Uint32Array([6291456,6291456,6291456,2145794,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,2145858,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,0,0,6291456,0]),
      new Uint32Array([0,2105921,2097729,0,2097377,0,0,2106017,0,2097505,2105889,2097185,2097697,2135777,2097633,2097441]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2239074,2239138,2239201,2239233,2239265,2239297,2239329,2239361,0,2239393,2239425,2239425,2239458,2239521,2239553,2209569]),
      new Uint32Array([14680064,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,6291456,23068672]),
      new Uint32Array([2108321,2108289,2113153,2098209,2180897,2180929,2180961,2111137,2098241,2108353,2170241,2170273,2180993,2105825,6291456,2105473]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2146114,6291456,6291456,6291456,0,0,0]),
      new Uint32Array([2105921,2105921,2105921,2222049,2222049,2130977,2130977,2130977,2130977,2160065,2160065,2160065,2160065,2097729,2097729,2097729]),
      new Uint32Array([2218145,2214785,2207937,2218177,2218209,2192993,2210113,2212769,2218241,2218273,2216129,2218305,2216161,2218337,2218369,2218401]),
      new Uint32Array([0,0,0,2156546,2156610,2156674,2156738,2156802,0,0,0,0,0,2156866,23068672,2156930]),
      new Uint32Array([23068672,23068672,23068672,0,0,0,0,23068672,23068672,0,0,23068672,23068672,23068672,0,0]),
      new Uint32Array([2213409,2213441,2213473,2213505,2213537,2213569,2213601,2213633,2213665,2195681,2213697,2213729,2213761,2213793,2213825,2213857]),
      new Uint32Array([2100033,2099233,2122017,2200673,2098113,2121537,2103201,2200705,2104033,2121857,2121953,2122401,2099649,2099969,2123009,2100129]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2201857,6291456,2201889,6291456,2201921,6291456,2201953,6291456,2201985,6291456,2202017,6291456,2176193,2176257,23068672,23068672]),
      new Uint32Array([6291456,6291456,23068672,23068672,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2188193,2188225,2188257,2188289,2188321,2188353,2188385,2188417,2188449,2188481,2188513,2188545,2188577,2188609,2188641,0]),
      new Uint32Array([10554529,2221089,0,10502113,10562017,10537921,10538049,2221121,2221153,0,0,0,0,0,0,0]),
      new Uint32Array([2213889,2213921,2213953,2213985,2214017,2214049,2214081,2194177,2214113,2214145,2214177,2214209,2214241,2214273,2214305,2214337]),
      new Uint32Array([2166978,2167042,2099169,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2180545,6291456,6291456,6291456]),
      new Uint32Array([10518915,10519011,10519107,10519203,2162242,2162306,2159554,2162370,2159362,2159618,2105922,2162434,2159746,2162498,2159810,2159874]),
      new Uint32Array([2161730,2161794,2135586,2161858,2161922,2137186,2131810,2160290,2135170,2161986,2137954,2162050,2162114,2162178,10518723,10518819]),
      new Uint32Array([10506627,10506723,10506819,10506915,10507011,10507107,10507203,10507299,10507395,10507491,10507587,10507683,10507779,10507875,10507971,10508067]),
      new Uint32Array([6291456,23068672,23068672,23068672,0,23068672,23068672,0,0,0,0,0,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0]),
      new Uint32Array([2175873,2175905,2175937,2175969,2176001,2176033,2176065,2176097,2176129,2176161,2176193,2176225,2176257,2176289,2176321,2176353]),
      new Uint32Array([2140006,2140198,2140390,2140582,2140774,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,23068672,23068672,23068672]),
      new Uint32Array([2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241]),
      new Uint32Array([0,23068672,0,0,0,0,0,0,0,2145154,2145218,2145282,6291456,0,2145346,0]),
      new Uint32Array([0,0,0,0,10531458,10495395,2148545,2143201,2173473,2148865,2173505,0,2173537,0,2173569,2149121]),
      new Uint32Array([10537282,10495683,2148738,2148802,2148866,0,6291456,2148930,2186593,2173473,2148737,2148865,2148802,10495779,10495875,10495971]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2215425,2215457,2215489,2215521,2215553,2215585,2215617,2215649,2215681,2215713,2215745,2215777,2192033,2215809,2215841,2215873]),
      new Uint32Array([2242049,2242081,2242113,2242145,2242177,2242209,2242241,2242273,2215937,2242305,2242338,2242401,2242433,2242465,2242497,2216001]),
      new Uint32Array([10554529,2221089,0,0,10562017,10502113,10538049,10537921,2221185,10489601,10489697,10609889,10609921,2141729,2141793,10610273]),
      new Uint32Array([2141923,2142019,2142115,2142211,2142307,2142403,2142499,2142595,2142691,0,0,0,0,0,0,0]),
      new Uint32Array([0,2221185,2221217,10609857,10609857,10489601,10489697,10609889,10609921,2141729,2141793,2221345,2221377,2221409,2221441,2187105]),
      new Uint32Array([6291456,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,18923970,23068672,23068672,23068672,0,6291456,6291456]),
      new Uint32Array([2183105,6291456,2183137,6291456,2183169,6291456,2183201,6291456,2183233,6291456,2183265,6291456,2183297,6291456,2183329,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456]),
      new Uint32Array([2134434,2134818,2097666,2097186,2097474,2097698,2105986,2131586,2132450,2131874,2131778,2135970,2135778,2161602,2136162,2161666]),
      new Uint32Array([2236865,2236897,2236930,2236993,2237025,2235681,2237058,2237121,2237153,2237185,2237217,2217281,2237250,2191233,2237313,2237345]),
      new Uint32Array([2190049,6291456,2190081,6291456,2190113,6291456,2190145,6291456,2190177,6291456,2190209,6291456,2190241,6291456,2190273,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2101922,2102050,2102178,2102306,10498755,10498851,10498947,10499043,10499139,10499235,10499331,10499427,10499523,10489604,10489732,10489860]),
      new Uint32Array([2166914,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
      new Uint32Array([2181601,2170561,2181633,2181665,2170753,2181697,2172897,2170881,2181729,2170913,2172929,2113441,2181761,2181793,2171009,2173761]),
      new Uint32Array([0,2105921,2097729,2106081,0,2097601,2162337,2106017,2133281,2097505,0,2097185,2097697,2135777,2097633,2097441]),
      new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,0,0,0,0]),
      new Uint32Array([2248001,2248033,2248066,2248130,2248193,2248226,2248289,2248322,2248385,2248417,2216673,2248450,2248514,2248577,2248610,2248673]),
      new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,0,0,0]),
      new Uint32Array([2169729,6291456,2169761,6291456,2169793,6291456,2169825,6291456,2169857,2169889,6291456,2169921,6291456,2143329,6291456,2098305]),
      new Uint32Array([2162178,2163202,2163266,2135170,2136226,2161986,2137954,2159426,2159490,2163330,2159554,2163394,2159682,2139522,2136450,2159746]),
      new Uint32Array([2173953,2173985,0,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2174209,2174241,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,4271169,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2174273]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,6291456,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,2190785,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2189793,6291456,2189825,6291456,2189857,6291456,2189889,6291456,2189921,6291456,2189953,6291456,2189985,6291456,2190017,6291456]),
      new Uint32Array([2105601,2112289,2108193,2112481,2112577,0,2098305,2108321,2108289,2100865,2113153,2108481,2113345,0,2098209,2111137]),
      new Uint32Array([2172129,6291456,2172161,6291456,2172193,6291456,2172225,6291456,2172257,6291456,2172289,6291456,2172321,6291456,2172353,6291456]),
      new Uint32Array([2214753,6291456,2214785,6291456,6291456,2214817,2214849,2214881,2214913,2214945,2214977,2215009,2215041,2215073,2194401,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([0,0,0,0,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([10610305,10610337,10575617,2221761,10610401,10610433,10502177,0,10610465,10610497,10610529,10610561,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,23068672,0,0,0,0,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2187105,2187137,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2199393,2199425,2199457,2199489,2199521,2199553,2199585,2199617,2199649,2199681,2199713,2199745,2199777,2199809,2199841,0]),
      new Uint32Array([2217249,2217281,2217313,2217345,2217377,2217409,2217441,2217473,2215617,2217505,2217537,2217569,2214753,2217601,2217633,2217665]),
      new Uint32Array([2170273,2170305,6291456,2170337,2170369,6291456,2170401,2170433,2170465,6291456,6291456,6291456,2170497,2170529,6291456,2170561]),
      new Uint32Array([2188673,6291456,2188705,2188737,2188769,6291456,6291456,2188801,6291456,2188833,6291456,2188865,6291456,2180929,2181505,2180897]),
      new Uint32Array([10489988,10490116,10490244,10490372,10490500,10490628,10490756,10490884,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2147393,2147457,2147521,2147585,2147649,2147713,2147777,2147841]),
      new Uint32Array([23068672,23068672,0,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
      new Uint32Array([2241153,2241185,2241217,2215809,2241250,2241313,2241345,2241377,2217921,2241377,2241409,2215873,2241441,2241473,2241505,2241537]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2220417,2220417,2220449,2220449,2220481,2220481,2220513,2220513,2220545,2220545,2220577,2220577,2220609,2220609,2220641,2220641]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,2144002,0,6291456,6291456,0,0,6291456,6291456,6291456]),
      new Uint32Array([2167105,2167137,2167169,2167201,2167233,2167265,2167297,2167329,2167361,2167393,2167425,2167457,2167489,2167521,2167553,2167585]),
      new Uint32Array([10575521,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
      new Uint32Array([2234146,2234210,2234274,2234338,2234402,2234466,2234530,2234594,2234658,2234722,2234786,2234850,2234914,2234978,2235042,2235106]),
      new Uint32Array([0,0,0,0,0,0,0,2180577,0,0,0,0,0,2180609,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,0,0,6291456,6291456]),
      new Uint32Array([2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2242529,2242561,2242593,2242625,2242657,2242689,2242721,2242753,2207937,2218177,2242785,2242817,2242849,2242882,2242945,2242977]),
      new Uint32Array([2118049,2105345,2118241,2105441,2118433,2118529,2118625,2118721,2118817,2200257,2200289,2191809,2200321,2200353,2200385,2200417]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
      new Uint32Array([2185505,6291456,2185537,6291456,2185569,6291456,2185601,6291456,2185633,6291456,2185665,6291456,2185697,6291456,2185729,6291456]),
      new Uint32Array([2231970,2232034,2232098,2232162,2232226,2232290,2232354,2232418,2232482,2232546,2232610,2232674,2232738,2232802,2232866,2232930]),
      new Uint32Array([2218625,2246402,2246466,2246530,2246594,2246657,2246689,2246689,2218657,2219681,2246721,2246753,2246785,2246818,2246881,2208481]),
      new Uint32Array([2197025,2197057,2197089,2197121,2197153,2197185,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2219137,2216961,2219169,2219201,2219233,2219265,2219297,2217025,2215041,2219329,2217057,2219361,2217089,2219393,2197153,2219426]),
      new Uint32Array([23068672,23068672,23068672,0,0,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,0,0]),
      new Uint32Array([2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713]),
      new Uint32Array([2243522,2243585,2243617,2243649,2243681,2210113,2243713,2243746,2243810,2243874,2243937,2243970,2244033,2244065,2244097,2244129]),
      new Uint32Array([2178017,6291456,2178049,6291456,2178081,6291456,2178113,6291456,2178145,6291456,2178177,6291456,2178209,6291456,2178241,6291456]),
      new Uint32Array([10553858,2165314,10518722,6291456,10518818,0,10518914,2130690,10519010,2130786,10519106,2130882,10519202,2165378,10554050,2165506]),
      new Uint32Array([0,0,2135491,2135587,2135683,2135779,2135875,2135971,2135971,2136067,2136163,2136259,2136355,2136355,2136451,2136547]),
      new Uint32Array([23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2220033,2220033,2220065,2220065,2220065,2220065,2220097,2220097,2220097,2220097,2220129,2220129,2220129,2220129,2220161,2220161]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2100897,2100898,2100899,2150018,2100865,2100866,2100867,2100868,2150082,2108481,2109858,2109859,2105569,2105505,2098241,2105601]),
      new Uint32Array([2097217,2097505,2097505,2097505,2097505,2165570,2165570,2165634,2165634,2165698,2165698,2097858,2097858,0,0,2097152]),
      new Uint32Array([23068672,6291456,23068672,23068672,23068672,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,23068672,23068672]),
      new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([10503843,10503939,10504035,10504131,10504227,10504323,10504419,10504515,10504611,10504707,10504803,10504899,10504995,10491140,10491268,0]),
      new Uint32Array([2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2134145,2097153,2134241,2105953,2132705,2130977,2160065,2131297,2162049,2133089,2160577,2133857,2235297,2220769,2235329,2235361]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2222401,2222433,2222465,10531394,2222497,2222529,2222561,0,2222593,2222625,2222657,2222689,2222721,2222753,2222785,0]),
      new Uint32Array([2184481,6291456,2184513,6291456,2184545,6291456,2184577,6291456,2184609,6291456,2184641,6291456,2184673,6291456,2184705,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2105570,2156034,2126947,2156098,2153666,2127043,2127139,2156162,0,2127235,2156226,2156290,2156354,2156418,2127331,2127427]),
      new Uint32Array([2215905,2207041,2153185,2241569,2241601,2241633,2241665,2241697,2241730,2241793,2241825,2241857,2241889,2241921,2241954,2242017]),
      new Uint32Array([2203777,6291456,2203809,6291456,2203841,6291456,2203873,6291456,2203905,6291456,2173121,2180993,2181249,2203937,2181313,0]),
      new Uint32Array([2168577,6291456,2168609,6291456,2168641,6291456,2168673,6291456,2168705,6291456,2168737,6291456,2168769,6291456,2168801,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,23068672,23068672,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,0,0]),
      new Uint32Array([2210113,2195521,2210145,2210177,2210209,2210241,2210273,2210305,2210337,2210369,2210401,2210433,2210465,2210497,2210529,2210561]),
      new Uint32Array([6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([2228706,2228770,2228834,2228898,2228962,2229026,2229090,2229154,2229218,2229282,2229346,2229410,2229474,2229538,2229602,2229666]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,18874368,18874368,18874368,0,0]),
      new Uint32Array([2133089,2133281,2133281,2133281,2133281,2160577,2160577,2160577,2160577,2097441,2097441,2097441,2097441,2133857,2133857,2133857]),
      new Uint32Array([6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089]),
      new Uint32Array([2178529,6291456,2178561,6291456,2178593,6291456,2178625,6291456,2178657,6291456,2178689,6291456,2178721,6291456,2178753,6291456]),
      new Uint32Array([2221025,2221025,2221057,2221057,2159329,2159329,2159329,2159329,2097217,2097217,2158914,2158914,2158978,2158978,2159042,2159042]),
      new Uint32Array([2208161,2208193,2208225,2208257,2194433,2208289,2208321,2208353,2208385,2208417,2208449,2208481,2208513,2208545,2208577,2208609]),
      new Uint32Array([2169217,6291456,2169249,6291456,2169281,6291456,2169313,6291456,2169345,6291456,2169377,6291456,2169409,6291456,2169441,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456]),
      new Uint32Array([2133187,2133283,2133283,2133379,2133475,2133571,2133667,2133667,2133763,2133859,2133955,2134051,2134147,2134147,2134243,2134339]),
      new Uint32Array([2197697,2114113,2114209,2197729,2197761,2114305,2197793,2114401,2114497,2197825,2114593,2114689,2114785,2114881,2114977,0]),
      new Uint32Array([2193089,2193121,2193153,2193185,2117665,2117569,2193217,2193249,2193281,2193313,2193345,2193377,2193409,2193441,2193473,2193505]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2184225,6291456,2184257,6291456,2184289,6291456,2184321,6291456,2184353,6291456,2184385,6291456,2184417,6291456,2184449,6291456]),
      new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2100833,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2098657,2098049,2200737,2123489,2123681,2200769,2098625,2100321,2098145,2100449,2098017,2098753,2200801,2200833,2200865,0]),
      new Uint32Array([23068672,23068672,23068672,0,0,0,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
      new Uint32Array([2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,0,2098241,2108353,2108417,2105825,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2181153,2105505,2181185,2167617,2180993]),
      new Uint32Array([2160002,2160066,2160130,2160194,2160258,2132066,2131010,2131106,2106018,2131618,2160322,2131298,2132034,2131938,2137410,2132226]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,6291456]),
      new Uint32Array([2183617,6291456,2183649,6291456,2183681,6291456,2183713,6291456,2183745,6291456,2183777,6291456,2183809,6291456,2183841,6291456]),
      new Uint32Array([0,6291456,6291456,0,6291456,0,0,6291456,6291456,0,6291456,0,0,6291456,0,0]),
      new Uint32Array([2250977,2251009,2251041,2251073,2195009,2251106,2251169,2251201,2251233,2251265,2251297,2251330,2251394,2251457,2251489,2251521]),
      new Uint32Array([2205729,2205761,2205793,2205825,2205857,2205889,2205921,2205953,2205985,2206017,2206049,2206081,2206113,2206145,2206177,2206209]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2143170,2168993,6291456,2169025,6291456,2169057,6291456,2169089,6291456,2143234,2169121,6291456,2169153,6291456,2169185,6291456]),
      new Uint32Array([23068672,23068672,2190689,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2248706,2248769,2248801,2248833,2248865,2248897,2248929,2248962,2249026,2249090,2249154,2240705,2249217,2249249,2249281,2249313]),
      new Uint32Array([10485857,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10495394,6291456,2098209,6291456,6291456,2097152,6291456,10531394]),
      new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([14680064,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2173985,2173953,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889]),
      new Uint32Array([6291456,2186977,6291456,6291456,6291456,6291456,6291456,10537858,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2209601,2209633,2209665,2209697,2209729,2209761,2209793,2209825,2209857,2209889,2209921,2209953,2209985,2210017,2210049,2210081]),
      new Uint32Array([10501539,10501635,10501731,10501827,10501923,10502019,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905]),
      new Uint32Array([2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2194561,2194593,2194625,2119777,2119873,2194657,2194689,2194721,2194753,2194785,2194817,2194849,2194881,2194913,2194945,2194977]),
      new Uint32Array([2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569]),
      new Uint32Array([2222818,2222882,2222946,2223010,2223074,2223138,2223202,2223266,2223330,2223394,2223458,2223522,2223586,2223650,2223714,2223778]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672]),
      new Uint32Array([0,2179553,2179585,2179617,2179649,2144001,2179681,2179713,2179745,2179777,2179809,2156705,2179841,2156833,2179873,2179905]),
      new Uint32Array([6291456,23068672,6291456,2145602,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,6291456,0,0]),
      new Uint32Array([2196513,2196545,2196577,2196609,2196641,2196673,2196705,2196737,2196769,2196801,2196833,2196865,2196897,2196929,2196961,2196993]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2177281,6291456,2177313,6291456,2177345,6291456,2177377,6291456,2177409,6291456,2177441,6291456,2177473,6291456,2177505,6291456]),
      new Uint32Array([2187137,2221473,2221505,2221537,2221569,6291456,6291456,10610209,10610241,10537986,10537986,10537986,10537986,10609857,10609857,10609857]),
      new Uint32Array([2243009,2243041,2216033,2243074,2243137,2243169,2243201,2219617,2243233,2243265,2243297,2243329,2243362,2243425,2243457,2243489]),
      new Uint32Array([10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,2097152,4194304,4194304,0,0]),
      new Uint32Array([2143042,6291456,2143106,2143106,2168833,6291456,2168865,6291456,6291456,2168897,6291456,2168929,6291456,2168961,6291456,2143170]),
      new Uint32Array([6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2204193,2204225,2204257,2204289,2204321,2204353,2204385,2204417,2204449,2204481,2204513,2204545,2204577,2204609,2204641,2204673]),
      new Uint32Array([2202753,6291456,2202785,6291456,2202817,6291456,2202849,6291456,2202881,6291456,2202913,6291456,2202945,6291456,2202977,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321]),
      new Uint32Array([2147394,2147458,2147522,2147586,2147650,2147714,2147778,2147842,2147394,2147458,2147522,2147586,2147650,2147714,2147778,2147842]),
      new Uint32Array([2253313,2253346,2253409,2253441,2253473,2253505,2253537,2253569,2253601,2253634,2219393,2253697,2253729,2253761,2253793,2253825]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([2162562,2162626,2131362,2162690,2159938,2160002,2162754,2162818,2160130,2162882,2160194,2160258,2160834,2160898,2161026,2161090]),
      new Uint32Array([2175361,2175393,2175425,2175457,2175489,2175521,2175553,2175585,2175617,2175649,2175681,2175713,2175745,2175777,2175809,2175841]),
      new Uint32Array([2253858,2253921,2253954,2254018,2254082,2196737,2254145,2196865,2254177,2254209,2254241,2254273,2197025,2254306,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2202113,2204129,2188705,2204161]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953]),
      new Uint32Array([2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209]),
      new Uint32Array([2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,0,2108417,0,2111713,2100897,2111905]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0]),
      new Uint32Array([2175425,2175489,2175809,2175905,2175937,2175937,2176193,2176417,2180865,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,2143298,2143298,2143298,2143362,2143362,2143362,2143426,2143426,2143426,2171105,6291456,2171137]),
      new Uint32Array([2120162,2120258,2151618,2151682,2151746,2151810,2151874,2151938,2152002,2120035,2120131,2120227,2152066,2120323,2152130,2120419]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2195361,2142433,2236065,2236097,2236129,2236161,2118241,2117473,2236193,2236225,2236257,2236289,0,0,0,0]),
      new Uint32Array([2189281,6291456,2189313,6291456,2189345,6291456,2189377,6291456,2189409,6291456,2189441,6291456,2189473,6291456,2189505,6291456]),
      new Uint32Array([6291456,6291456,2145922,6291456,6291456,6291456,6291456,2145986,6291456,6291456,6291456,6291456,2146050,6291456,6291456,6291456]),
      new Uint32Array([2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,10502113,10562017,10610401,10502177,10610433,10538049]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,2186401,0,2186433,0,2186465,0,2186497]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,23068672,23068672,23068672]),
      new Uint32Array([0,0,2198241,2198273,2198305,2198337,2198369,2198401,0,0,2198433,2198465,2198497,0,0,0]),
      new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,6291456,0,23068672,23068672,23068672,23068672,23068672,23068672,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
      new Uint32Array([0,2105921,2097729,0,2097377,0,0,2106017,2133281,2097505,2105889,0,2097697,2135777,2097633,2097441]),
      new Uint32Array([2197889,2197921,2197953,2197985,2198017,2198049,2198081,2198113,2198145,2198177,2198209,2198241,2198273,2198305,2198337,2198369]),
      new Uint32Array([2132514,2132610,2160386,2133090,2133186,2160450,2160514,2133282,2160578,2133570,2106178,2160642,2133858,2160706,2160770,2134146]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,23068672,23068672,6291456,23068672,23068672,6291456,23068672,0,0,0,0,0,0,0,0]),
      new Uint32Array([2184737,6291456,2184769,6291456,2184801,6291456,2184833,6291456,2184865,6291456,2184897,6291456,2184929,6291456,2184961,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,6291456,6291456,6291456,0,6291456]),
      new Uint32Array([6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,0,0]),
      new Uint32Array([6291456,6291456,6291456,2186753,6291456,6291456,6291456,6291456,2186785,2186817,2186849,2173569,2186881,10496355,10495395,10575521]),
      new Uint32Array([0,0,2097729,0,0,0,0,2106017,0,2097505,0,2097185,0,2135777,2097633,2097441]),
      new Uint32Array([2189537,6291456,2189569,6291456,2189601,6291456,2189633,6291456,2189665,6291456,2189697,6291456,2189729,6291456,2189761,6291456]),
      new Uint32Array([2202497,6291456,2202529,6291456,2202561,6291456,2202593,6291456,2202625,6291456,2202657,6291456,2202689,6291456,2202721,6291456]),
      new Uint32Array([2245217,2218369,2245249,2245282,2245345,2245377,2245410,2245474,2245537,2245569,2245601,2245633,2245665,2245665,2245697,2245729]),
      new Uint32Array([6291456,0,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,0,0,0,0,0,0,23068672,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,6291456,23068672,6291456,23068672,6291456,6291456,6291456,6291456,23068672,23068672]),
      new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2097281,2105921,2097729,2106081,2097377,2097601,2162337,2106017,2133281,2097505,0,2097185,2097697,2135777,2097633,2097441]),
      new Uint32Array([2176641,6291456,2176673,6291456,2176705,6291456,2176737,6291456,2176769,6291456,2176801,6291456,2176833,6291456,2176865,6291456]),
      new Uint32Array([2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953,2174369,2174369,0,0,2100833,2100737]),
      new Uint32Array([2116513,2190817,2190849,2190881,2190913,2190945,2116609,2190977,2191009,2191041,2191073,2117185,2191105,2191137,2191169,2191201]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456]),
      new Uint32Array([0,0,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456]),
      new Uint32Array([2167617,2167649,2167681,2167713,2167745,2167777,2167809,6291456,2167841,2167873,2167905,2167937,2167969,2168001,2168033,4240130]),
      new Uint32Array([2165122,2163970,2164034,2164098,2164162,2164226,2164290,2164354,2164418,2164482,2164546,2133122,2134562,2132162,2132834,2136866]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2186209,2186241,2186273,2186305,2186337,2186369,0,0]),
      new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,14680064,14680064,14680064,14680064,14680064]),
      new Uint32Array([0,0,23068672,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456]),
      new Uint32Array([0,10537921,10610689,10610273,10610497,10610529,10610305,10610721,10489601,10489697,10610337,10575617,10554529,2221761,2197217,10496577]),
      new Uint32Array([2105473,2105569,2105601,2112289,0,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441]),
      new Uint32Array([2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481]),
      new Uint32Array([2125346,2153410,2153474,2127394,2153538,2153602,2153666,2153730,2105507,2105476,2153794,2153858,2153922,2153986,2154050,2105794]),
      new Uint32Array([2200449,2119681,2200481,2153313,2199873,2199905,2199937,2200513,2200545,2200577,2200609,2119105,2119201,2119297,2119393,2119489]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2175777,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2222273,2197217,2221473,2221505,2221089,2222305,2200865,2099681,2104481,2222337,2099905,2120737,2222369,2103713,2100225,2098785]),
      new Uint32Array([2201377,6291456,2201409,6291456,2201441,6291456,2201473,6291456,2201505,6291456,2201537,6291456,2201569,6291456,6291456,23068672]),
      new Uint32Array([2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793]),
      new Uint32Array([2200897,6291456,2200929,6291456,2200961,6291456,2200993,6291456,2201025,6291456,2180865,6291456,2201057,6291456,2201089,6291456]),
      new Uint32Array([0,0,0,0,0,23068672,23068672,0,6291456,6291456,6291456,0,0,0,0,0]),
      new Uint32Array([2161154,2161410,2138658,2161474,2161538,2097666,2097186,2097474,2162946,2132450,2163010,2163074,2136162,2163138,2161666,2161730]),
      new Uint32Array([2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953]),
      new Uint32Array([0,0,0,0,0,0,23068672,23068672,0,0,0,0,2145410,2145474,0,6291456]),
      new Uint32Array([2244161,2216065,2212769,2244193,2244225,2244257,2244290,2244353,2244385,2244417,2244449,2218273,2244481,2244514,2244577,2244609]),
      new Uint32Array([2125730,2125699,2125795,2125891,2125987,2154114,2154178,2154242,2154306,2154370,2154434,2154498,2126082,2126178,2126274,2126083]),
      new Uint32Array([2237665,2237697,2237697,2237697,2237730,2237793,2237825,2237857,2237890,2237953,2237985,2238017,2238049,2238081,2238113,2238145]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2150146,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,0,0,23068672,23068672,23068672,0,0]),
      new Uint32Array([2214369,2238593,2238625,2238657,2238689,2238721,2238753,2238785,2238817,2238850,2238913,2238945,2238977,2235457,2239009,2239041]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([2252066,2252130,2252193,2252225,2252257,2252290,2252353,2252385,2252417,2252449,2252481,2252513,2252545,2252578,2252641,2252673]),
      new Uint32Array([2197697,2114113,2114209,2197729,2197761,2114305,2197793,2114401,2114497,2197825,2114593,2114689,2114785,2114881,2114977,2197857]),
      new Uint32Array([2224866,2224930,2224994,2225058,2225122,2225186,2225250,2225314,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2219490,2219554,2219617,2219649,2219681,2219714,2219778,2219842,2219905,2219937,0,0,0,0,0,0]),
      new Uint32Array([6291456,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
      new Uint32Array([2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289]),
      new Uint32Array([2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953,2148481,2173601,2173633,2173665]),
      new Uint32Array([2220161,2220161,2220193,2220193,2220193,2220193,2220225,2220225,2220225,2220225,2220257,2220257,2220257,2220257,2220289,2220289]),
      new Uint32Array([2192673,2192705,2192737,2192769,2192801,2192833,2192865,2118049,2192897,2117473,2117761,2192929,2192961,2192993,2193025,2193057]),
      new Uint32Array([2179297,6291456,2179329,6291456,2179361,6291456,2179393,6291456,2179425,6291456,2179457,6291456,2179489,6291456,2179521,6291456]),
      new Uint32Array([6291456,6291456,6291456,23068672,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2235745,2235777,2193633,2235809,2235841,2235873,2235905,2235937,2235969,2116513,2116705,2236001,2200513,2199905,2200545,2236033]),
      new Uint32Array([2113153,2108481,2113345,2113441,2232993,2233025,0,0,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761]),
      new Uint32Array([2170593,6291456,2170625,6291456,2170657,6291456,2170689,2170721,6291456,2170753,6291456,6291456,2170785,6291456,2170817,2170849]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2166786,2166850,0,0,0,0]),
      new Uint32Array([23068672,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,10575617,2187041,10502177,10489601,10489697,0]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2134562,2132162,2132834,2136866,2136482,2164610,2164674,2164738,2164802,2132802,2132706,2164866,2132898,2164930,2164994,2165058]),
      new Uint32Array([6291456,6291456,2098337,2101441,10531458,2153473,6291456,6291456,10531522,2100737,2108193,6291456,2106499,2106595,2106691,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2233122,2233186,2233250,2233314,2233378,2233442,2233506,2233570,2233634,2233698,2233762,2233826,2233890,2233954,2234018,2234082]),
      new Uint32Array([23068672,6291456,23068672,23068672,23068672,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2205217,2205249,2205281,2205313,2205345,2205377,2205409,2205441,2205473,2205505,2205537,2205569,2205601,2205633,2205665,2205697]),
      new Uint32Array([6291456,0,6291456,0,0,0,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
      new Uint32Array([2173601,2173761,2174081,2173569,2174241,2174113,2173953,6291456,2174305,6291456,2174337,6291456,2174369,6291456,2174401,6291456]),
      new Uint32Array([6291456,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([2152450,2152514,2099653,2104452,2099813,2122243,2099973,2152578,2122339,2122435,2122531,2122627,2122723,2104580,2122819,2152642]),
      new Uint32Array([2236385,2236417,2236449,2236482,2236545,2215425,2236577,2236609,2236641,2236673,2215457,2236705,2236737,2236770,2215489,2236833]),
      new Uint32Array([2163394,2159746,2163458,2131362,2163522,2160130,2163778,2132226,2163842,2132898,2163906,2161410,2138658,2097666,2136162,2163650]),
      new Uint32Array([2218721,2246913,2246946,2216385,2247010,2247074,2215009,2247137,2247169,2216481,2247201,2247233,2247266,2247330,2247330,0]),
      new Uint32Array([2129730,2129762,2129858,2129731,2129827,2156482,2156482,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,0,0,0,0,6291456,0,0]),
      new Uint32Array([2203969,2204001,2181377,2204033,2204065,6291456,2204097,6291456,0,0,0,0,0,0,0,0]),
      new Uint32Array([2169473,6291456,2169505,6291456,2169537,6291456,2169569,6291456,2169601,6291456,2169633,6291456,2169665,6291456,2169697,6291456]),
      new Uint32Array([2141542,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2220801,2220801,2220801,2220801,2220833,2220833,2220865,2220865,2220865,2220865,2220897,2220897,2220897,2220897,2139873,2139873]),
      new Uint32Array([0,0,0,0,0,23068672,23068672,0,0,0,0,0,0,0,6291456,0]),
      new Uint32Array([2214849,2218433,2218465,2218497,2218529,2218561,2214881,2218593,2218625,2218657,2218689,2218721,2218753,2216545,2218785,2218817]),
      new Uint32Array([23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,6291456]),
      new Uint32Array([2136482,2164610,2164674,2164738,2164802,2132802,2132706,2164866,2132898,2164930,2164994,2165058,2165122,2132802,2132706,2164866]),
      new Uint32Array([2207649,2207681,2207713,2207745,2207777,2207809,2207841,2207873,2207905,2207937,2207969,2208001,2208033,2208065,2208097,2208129]),
      new Uint32Array([2123683,2105092,2152706,2123779,2105220,2152770,2100453,2098755,2123906,2124002,2124098,2124194,2124290,2124386,2124482,2124578]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,6291456,0,0,0,0,0,0,0,10485857]),
      new Uint32Array([6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([10508163,10508259,10508355,10508451,2200129,2200161,2192737,2200193,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2203553,6291456,2203585,6291456,6291456,6291456,2203617,6291456,2203649,6291456,2203681,6291456,2203713,6291456,2203745,6291456]),
      new Uint32Array([18884449,18884065,23068672,18884417,18884034,18921185,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,18874368]),
      new Uint32Array([2247393,2247426,2247489,2247521,2247553,2247586,2247649,2247681,2247713,2247745,2247777,2247810,2247873,2247905,2247937,2247969]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672]),
      new Uint32Array([2134145,2097153,2134241,0,2132705,2130977,2160065,2131297,0,2133089,2160577,2133857,2235297,0,2235329,0]),
      new Uint32Array([2182593,6291456,2182625,6291456,2182657,6291456,2182689,6291456,2182721,6291456,2182753,6291456,2182785,6291456,2182817,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2102402,2102403,6291456,2110050]),
      new Uint32Array([2149890,2108323,2149954,6291456,2113441,6291456,2149057,6291456,2113441,6291456,2105473,2167265,2111137,2105505,6291456,2108353]),
      new Uint32Array([2219105,2219137,2195233,2251554,2251617,2251649,2251681,2251713,2251746,2251810,2251873,2251905,2251937,2251970,2252033,2219169]),
      new Uint32Array([2203009,6291456,2203041,6291456,2203073,6291456,2203105,6291456,2203137,6291456,2203169,6291456,2203201,6291456,2203233,6291456]),
      new Uint32Array([2128195,2128291,2128387,2128483,2128579,2128675,2128771,2128867,2128963,2129059,2129155,2129251,2129347,2129443,2129539,2129635]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2140964,2141156,2140966,2141158,2141350]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2225378,2225442,2225506,2225570,2225634,2225698,2225762,2225826,2225890,2225954,2226018,2226082,2226146,2226210,2226274,2226338]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417]),
      new Uint32Array([2108353,2108417,0,2105601,2108193,2157121,2157313,2157377,2157441,2100897,6291456,2108419,2173953,2173633,2173633,2173953]),
      new Uint32Array([2111713,2173121,2111905,2098177,2173153,2173185,2173217,2113153,2113345,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,2190753]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,2197249,6291456,2117377,2197281,2197313,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,0,0,0,0,0,0,23068672,0,0,0,0,0,6291456,6291456,6291456]),
      new Uint32Array([2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0]),
      new Uint32Array([0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,23068672,23068672,23068672]),
      new Uint32Array([2173281,6291456,2173313,6291456,2173345,6291456,2173377,6291456,0,0,10532546,6291456,6291456,6291456,10562017,2173441]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0]),
      new Uint32Array([23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2159426,2159490,2159554,2159362,2159618,2159682,2139522,2136450,2159746,2159810,2159874,2130978,2131074,2131266,2131362,2159938]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2203233,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2203265,6291456,2203297,6291456,2203329,2203361,6291456]),
      new Uint32Array([6291456,6291456,2148418,2148482,2148546,0,6291456,2148610,2186529,2186561,2148417,2148545,2148482,10495778,2143969,10495778]),
      new Uint32Array([2134146,2139426,2160962,2134242,2161218,2161282,2161346,2161410,2138658,2134722,2134434,2134818,2097666,2097346,2097698,2105986]),
      new Uint32Array([2198881,2198913,2198945,2198977,2199009,2199041,2199073,2199105,2199137,2199169,2199201,2199233,2199265,2199297,2199329,2199361]),
      new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
      new Uint32Array([10610561,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
      new Uint32Array([2183873,6291456,2183905,6291456,2183937,6291456,2183969,6291456,2184001,6291456,2184033,6291456,2184065,6291456,2184097,6291456]),
      new Uint32Array([2244642,2244706,2244769,2244801,2218305,2244833,2244865,2244897,2244929,2244961,2244993,2245026,2245089,2245122,2245185,0]),
      new Uint32Array([6291456,6291456,2116513,2116609,2116705,2116801,2199873,2199905,2199937,2199969,2190913,2200001,2200033,2200065,2200097,2191009]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2180673,2180705,2180737,2180769,2180801,2180833,0,0]),
      new Uint32Array([2098081,2099521,2099105,2120705,2098369,2120801,2103361,2097985,2098433,2121377,2121473,2099169,2099873,2098401,2099393,2152609]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2150402]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,2145666,2145730,6291456,6291456]),
      new Uint32Array([2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665]),
      new Uint32Array([2187073,6291456,6291456,6291456,6291456,2098241,2098241,2108353,2100897,2111905,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2102404,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,2100612,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10485857]),
      new Uint32Array([2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889]),
      new Uint32Array([2217697,2217729,2217761,2217793,2217825,2217857,2217889,2217921,2217953,2215873,2217985,2215905,2218017,2218049,2218081,2218113]),
      new Uint32Array([2211233,2218849,2216673,2218881,2218913,2218945,2218977,2219009,2216833,2219041,2215137,2219073,2216865,2209505,2219105,2216897]),
      new Uint32Array([2240097,2240129,2240161,2240193,2240225,2240257,2240289,2240321,2240353,2240386,2240449,2240481,2240513,2240545,2207905,2240578]),
      new Uint32Array([6291456,6291456,2202273,6291456,2202305,6291456,2202337,6291456,2202369,6291456,2202401,6291456,2202433,6291456,2202465,6291456]),
      new Uint32Array([0,23068672,23068672,18923394,23068672,18923458,18923522,18884099,18923586,18884195,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2201121,6291456,2201153,6291456,2201185,6291456,2201217,6291456,2201249,6291456,2201281,6291456,2201313,6291456,2201345,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456]),
      new Uint32Array([2211041,2211073,2211105,2211137,2211169,2211201,2211233,2211265,2211297,2211329,2211361,2211393,2211425,2211457,2211489,2211521]),
      new Uint32Array([2181825,6291456,2181857,6291456,2181889,6291456,2181921,6291456,2181953,6291456,2181985,6291456,2182017,6291456,2182049,6291456]),
      new Uint32Array([2162337,2097633,2097633,2097633,2097633,2132705,2132705,2132705,2132705,2097153,2097153,2097153,2097153,2133089,2133089,2133089]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,2148545,6291456,2173473,6291456,2148865,6291456,2173505,6291456,2173537,6291456,2173569,6291456,2149121,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
      new Uint32Array([2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2207137,2207169,2207201,2207233,2207265,2207297,2207329,2207361,2207393,2207425,2207457,2207489,2207521,2207553,2207585,2207617]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,6291456,0,23068672,23068672,0,0,0,0,0,0]),
      new Uint32Array([2198401,2198433,2198465,2198497,0,2198529,2198561,2198593,2198625,2198657,2198689,2198721,2198753,2198785,2198817,2198849]),
      new Uint32Array([2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0,0]),
      new Uint32Array([2216385,2118721,2216417,2216449,2216481,2216513,2216545,2211233,2216577,2216609,2216641,2216673,2216705,2216737,2216737,2216769]),
      new Uint32Array([2216801,2216833,2216865,2216897,2216929,2216961,2216993,2215169,2217025,2217057,2217089,2217121,2217154,2217217,0,0]),
      new Uint32Array([2210593,2191809,2210625,2210657,2210689,2210721,2210753,2210785,2210817,2210849,2191297,2210881,2210913,2210945,2210977,2211009]),
      new Uint32Array([0,0,2105825,0,0,2111905,2105473,0,0,2112289,2108193,2112481,2112577,0,2098305,2108321]),
      new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,2097153,2134241,0,2132705,0,0,2131297,0,2133089,0,2133857,0,2220769,0,2235361]),
      new Uint32Array([14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,6291456,6291456,14680064]),
      new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
      new Uint32Array([2171873,6291456,2171905,6291456,2171937,6291456,2171969,6291456,2172001,6291456,2172033,6291456,2172065,6291456,2172097,6291456]),
      new Uint32Array([2220929,2220929,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2133857,2134145,2134145,2134145,2134145,2134241,2134241,2134241,2134241,2105889,2105889,2105889,2105889,2097185,2097185,2097185]),
      new Uint32Array([2173697,2173761,2173793,2174113,2173985,2173953,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,10499619,10499715,10499811,10499907]),
      new Uint32Array([0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,0,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,2144322,2144386,2144450,2144514,2144578,2144642,2144706,2144770]),
      new Uint32Array([23068672,23068672,23068672,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456]),
      new Uint32Array([2113153,2108481,2113345,2113441,2098209,2111137,0,2098241,2108353,2108417,2105825,0,0,2111905,2105473,2105569]),
      new Uint32Array([2236321,2236353,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2152194,2121283,2103684,2103812,2097986,2098533,2097990,2098693,2098595,2098853,2099013,2103940,2121379,2121475,2121571,2104068]),
      new Uint32Array([2206241,2206273,2206305,2206337,2206369,2206401,2206433,2206465,2206497,2206529,2206561,2206593,2206625,2206657,2206689,2206721]),
      new Uint32Array([6291456,6291456,6291456,6291456,16777216,16777216,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,23068672,23068672,10538818,10538882,6291456,6291456,2150338]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2214369,2214401,2214433,2214465,2214497,2214529,2214561,2214593,2194977,2214625,2195073,2214657,2214689,2214721,6291456,6291456]),
      new Uint32Array([2097152,2097152,2097152,2097152,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2182081,6291456,2182113,6291456,2182145,6291456,2182177,6291456,2182209,6291456,2182241,6291456,2182273,6291456,2182305,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2146881,2146945,2147009,2147073,2147137,2147201,2147265,2147329]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,23068672,23068672]),
      new Uint32Array([0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2122915,2123011,2123107,2104708,2123203,2123299,2123395,2100133,2104836,2100290,2100293,2104962,2104964,2098052,2123491,2123587]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
      new Uint32Array([6291456,2171169,6291456,2171201,6291456,2171233,6291456,2171265,6291456,2171297,6291456,2171329,6291456,6291456,2171361,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,2148994,2149058,2149122,0,6291456,2149186,2186945,2173537,2148993,2149121,2149058,10531458,10496066,0]),
      new Uint32Array([2195009,2195041,2195073,2195105,2195137,2195169,2195201,2195233,2195265,2195297,2195329,2195361,2195393,2195425,2195457,2195489]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,0,0,6291456,6291456]),
      new Uint32Array([2182849,6291456,2182881,6291456,2182913,6291456,2182945,6291456,2182977,6291456,2183009,6291456,2183041,6291456,2183073,6291456]),
      new Uint32Array([2211553,2210081,2211585,2211617,2211649,2211681,2211713,2211745,2211777,2211809,2209569,2211841,2211873,2211905,2211937,2211969]),
      new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2166594,2127298,2166658,2142978,2141827,2166722]),
      new Uint32Array([2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2185761,2185793,2185825,2185857,2185889,2185921,0,0]),
      new Uint32Array([6291456,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,6291456]),
      new Uint32Array([0,0,0,2220961,2220961,2220961,2220961,2144193,2144193,2159201,2159201,2159265,2159265,2144194,2220993,2220993]),
      new Uint32Array([2192641,2235393,2235425,2152257,2116609,2235457,2235489,2200065,2235521,2235553,2235585,2212449,2235617,2235649,2235681,2235713]),
      new Uint32Array([2194049,2194081,2194113,2194145,2194177,2194209,2194241,2194273,2194305,2194337,2194369,2194401,2194433,2194465,2194497,2194529]),
      new Uint32Array([2196673,2208641,2208673,2208705,2208737,2208769,2208801,2208833,2208865,2208897,2208929,2208961,2208993,2209025,2209057,2209089]),
      new Uint32Array([2191681,2191713,2191745,2191777,2153281,2191809,2191841,2191873,2191905,2191937,2191969,2192001,2192033,2192065,2192097,2192129]),
      new Uint32Array([2230946,2231010,2231074,2231138,2231202,2231266,2231330,2231394,2231458,2231522,2231586,2231650,2231714,2231778,2231842,2231906]),
      new Uint32Array([14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2185953,2185985,2186017,2186049,2186081,2186113,2186145,2186177]),
      new Uint32Array([2139811,2139907,2097284,2105860,2105988,2106116,2106244,2097444,2097604,2097155,10485778,10486344,2106372,6291456,0,0]),
      new Uint32Array([2110051,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2172385,6291456,2172417,6291456,2172449,6291456,2172481,6291456,2172513,6291456,2172545,6291456,2172577,6291456,2172609,6291456]),
      new Uint32Array([0,0,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2249345,2249377,2249409,2249441,2249473,2249505,2249537,2249570,2210209,2249633,2249665,2249697,2249729,2249761,2249793,2216769]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456]),
      new Uint32Array([2187169,2187201,2187233,2187265,2187297,2187329,2187361,2187393,2187425,2187457,2187489,2187521,2187553,2187585,2187617,2187649]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,0,6291456,6291456,0,0,0,6291456,6291456,6291456,0,0,0,6291456,6291456]),
      new Uint32Array([2182337,6291456,2182369,6291456,2182401,6291456,2182433,6291456,2182465,6291456,2182497,6291456,2182529,6291456,2182561,6291456]),
      new Uint32Array([2138179,2138275,2138371,2138467,2134243,2134435,2138563,2138659,2138755,2138851,2138947,2139043,2138947,2138755,2139139,2139235]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
      new Uint32Array([0,0,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2250498,2250562,2250625,2250657,2208321,2250689,2250721,2250753,2250785,2250817,2250849,2218945,2250881,2250913,2250945,0]),
      new Uint32Array([2170369,2105569,2098305,2108481,2173249,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
      new Uint32Array([2100897,2111905,2105473,2105569,2105601,0,2108193,0,0,0,2098305,2108321,2108289,2100865,2113153,2108481]),
      new Uint32Array([2100897,2100897,2105569,2105569,6291456,2112289,2149826,6291456,6291456,2112481,2112577,2098177,2098177,2098177,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,6291456,6291456,6291456]),
      new Uint32Array([6291456,2169953,2169985,6291456,2170017,6291456,2170049,2170081,6291456,2170113,2170145,2170177,6291456,6291456,2170209,2170241]),
      new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2220641,2220641,2220673,2220673,2220673,2220673,2220705,2220705,2220705,2220705,2220737,2220737,2220737,2220737,2220769,2220769]),
      new Uint32Array([2127650,2127746,2127842,2127938,2128034,2128130,2128226,2128322,2128418,2127523,2127619,2127715,2127811,2127907,2128003,2128099]),
      new Uint32Array([2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177]),
      new Uint32Array([0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2204705,2204737,2204769,2204801,2204833,2204865,2204897,2204929,2204961,2204993,2205025,2205057,2205089,2205121,2205153,2205185]),
      new Uint32Array([2176385,6291456,2176417,6291456,2176449,6291456,2176481,6291456,2176513,6291456,2176545,6291456,2176577,6291456,2176609,6291456]),
      new Uint32Array([2195521,2195553,2195585,2195617,2195649,2195681,2117857,2195713,2195745,2195777,2195809,2195841,2195873,2195905,2195937,2195969]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456]),
      new Uint32Array([2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113]),
      new Uint32Array([2131586,2132450,2135970,2135778,2161602,2136162,2163650,2161794,2135586,2163714,2137186,2131810,2160290,2135170,2097506,2159554]),
      new Uint32Array([2134145,2097153,2134241,2105953,2132705,2130977,2160065,2131297,2162049,2133089,2160577,2133857,0,0,0,0]),
      new Uint32Array([2116513,2116609,2116705,2116801,2116897,2116993,2117089,2117185,2117281,2117377,2117473,2117569,2117665,2117761,2117857,2117953]),
      new Uint32Array([2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100802,2101154,2101282,2101410,2101538,2101666,2101794]),
      new Uint32Array([2100289,2098657,2098049,2200737,2123489,2123681,2200769,2098625,2100321,2098145,2100449,2098017,2098753,2098977,2150241,2150305]),
      new Uint32Array([6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,2109955,6291456,6291456,0,0,0,0]),
      new Uint32Array([18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,0,0]),
      new Uint32Array([2130979,2131075,2131075,2131171,2131267,2131363,2131459,2131555,2131651,2131651,2131747,2131843,2131939,2132035,2132131,2132227]),
      new Uint32Array([0,2177793,6291456,2177825,6291456,2177857,6291456,2177889,6291456,2177921,6291456,2177953,6291456,2177985,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2113345,0,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289]),
      new Uint32Array([2136643,2136739,2136835,2136931,2137027,2137123,2137219,2137315,2137411,2137507,2137603,2137699,2137795,2137891,2137987,2138083]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([2174433,6291456,2174465,6291456,2174497,6291456,2174529,6291456,2174561,6291456,2174593,6291456,2174625,6291456,2174657,6291456]),
      new Uint32Array([0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441]),
      new Uint32Array([10496547,10496643,2105505,2149698,6291456,10496739,10496835,2170273,6291456,2149762,2105825,2111713,2111713,2111713,2111713,2168673]),
      new Uint32Array([6291456,2143490,2143490,2143490,2171649,6291456,2171681,2171713,2171745,6291456,2171777,6291456,2171809,6291456,2171841,6291456]),
      new Uint32Array([2159106,2159106,2159170,2159170,2159234,2159234,2159298,2159298,2159298,2159362,2159362,2159362,2106401,2106401,2106401,2106401]),
      new Uint32Array([2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137]),
      new Uint32Array([2108417,2181217,2181249,2181281,2170433,2170401,2181313,2181345,2181377,2181409,2181441,2181473,2181505,2181537,2170529,2181569]),
      new Uint32Array([2218433,2245761,2245793,2245825,2245857,2245890,2245953,2245986,2209665,2246050,2246113,2246146,2246210,2246274,2246337,2246369]),
      new Uint32Array([2230754,2230818,2230882,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2184129,6291456,2184161,6291456,2184193,6291456,6291456,6291456,6291456,6291456,2146818,2183361,6291456,6291456,2142978,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2135170,2097506,2130691,2130787,2130883,2163970,2164034,2164098,2164162,2164226,2164290,2164354,2164418,2164482,2164546,2133122]),
      new Uint32Array([2108515,2108611,2100740,2108707,2108803,2108899,2108995,2109091,2109187,2109283,2109379,2109475,2109571,2109667,2109763,2100738]),
      new Uint32Array([2102788,2102916,2103044,2120515,2103172,2120611,2120707,2098373,2103300,2120803,2120899,2120995,2103428,2103556,2121091,2121187]),
      new Uint32Array([2158082,2158146,0,2158210,2158274,0,2158338,2158402,2158466,2129922,2158530,2158594,2158658,2158722,2158786,2158850]),
      new Uint32Array([10499619,10499715,10499811,10499907,10500003,10500099,10500195,10500291,10500387,10500483,10500579,10500675,10500771,10500867,10500963,10501059]),
      new Uint32Array([2239585,2239618,2239681,2239713,0,2191969,2239745,2239777,2192033,2239809,2239841,2239874,2239937,2239970,2240033,2240065]),
      new Uint32Array([2252705,2252738,2252801,2252833,2252865,2252897,2252930,2252994,2253057,2253089,2253121,2253154,2253217,2253250,2219361,2219361]),
      new Uint32Array([2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,10538050,10538114,10538178,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2226402,2226466,2226530,2226594,2226658,2226722,2226786,2226850,2226914,2226978,2227042,2227106,2227170,2227234,2227298,2227362]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,2144066,2144130,2144194,2144258,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
      new Uint32Array([2124674,2124770,2123875,2123971,2124067,2124163,2124259,2124355,2124451,2124547,2124643,2124739,2124835,2124931,2125027,2125123]),
      new Uint32Array([2168065,6291456,2168097,6291456,2168129,6291456,2168161,6291456,2168193,6291456,2168225,6291456,2168257,6291456,2168289,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0]),
      new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,2100610,2100611,6291456,2107842,2107843,6291456,6291456,6291456,6291456,10537922,6291456,10537986,6291456]),
      new Uint32Array([2174849,2174881,2174913,2174945,2174977,2175009,2175041,2175073,2175105,2175137,2175169,2175201,2175233,2175265,2175297,2175329]),
      new Uint32Array([2154562,2154626,2154690,2154754,2141858,2154818,2154882,2127298,2154946,2127298,2155010,2155074,2155138,2155202,2155266,2155202]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0]),
      new Uint32Array([2200641,2150786,2150850,2150914,2150978,2151042,2106562,2151106,2150562,2151170,2151234,2151298,2151362,2151426,2151490,2151554]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,6291456,6291456]),
      new Uint32Array([2220289,2220289,2220321,2220321,2220321,2220321,2220353,2220353,2220353,2220353,2220385,2220385,2220385,2220385,2220417,2220417]),
      new Uint32Array([2155330,2155394,0,2155458,2155522,2155586,2105732,0,2155650,2155714,2155778,2125314,2155842,2155906,2126274,2155970]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,23068672,23068672,6291456,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0]),
      new Uint32Array([2097729,2106017,2106017,2106017,2106017,2131297,2131297,2131297,2131297,2106081,2106081,2162049,2162049,2105953,2105953,2162337]),
      new Uint32Array([2097185,2097697,2097697,2097697,2097697,2135777,2135777,2135777,2135777,2097377,2097377,2097377,2097377,2097601,2097601,2097217]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23068672]),
      new Uint32Array([2139331,2139427,2139523,2139043,2133571,2132611,2139619,2139715,0,0,0,0,0,0,0,0]),
      new Uint32Array([2174113,2174145,2100897,2098177,2108289,2100865,2173601,2173633,2173985,2174113,2174145,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,23068672,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,18923778,23068672,23068672,23068672,23068672,18923842,23068672,23068672,23068672,23068672,18923906,23068672,23068672,23068672]),
      new Uint32Array([2134145,2097153,2134241,0,2132705,2130977,2160065,2131297,0,2133089,0,2133857,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2177537,6291456,2177569,6291456,2177601,6291456,2177633,6291456,2177665,6291456,2177697,6291456,2177729,6291456,2177761,6291456]),
      new Uint32Array([2212481,2212513,2212545,2212577,2197121,2212609,2212641,2212673,2212705,2212737,2212769,2212801,2212833,2212865,2212897,2212929]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,6291456,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2098241,2108353,2170209,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,6291456,2108193,2172417,2112481,2098177]),
      new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
    ];
    var blockIdxes = new Uint16Array([616,616,565,147,161,411,330,2,131,131,328,454,241,408,86,86,696,113,285,350,325,301,473,214,639,232,447,64,369,598,124,672,567,223,621,154,107,86,86,86,86,86,86,505,86,68,634,86,218,218,218,218,486,218,218,513,188,608,216,86,217,463,668,85,700,360,184,86,86,86,647,402,153,10,346,718,662,260,145,298,117,1,443,342,138,54,563,86,240,572,218,70,387,86,118,460,641,602,86,86,306,218,86,692,86,86,86,86,86,162,707,86,458,26,86,218,638,86,86,86,86,86,65,449,86,86,306,183,86,58,391,667,86,157,131,131,131,131,86,433,131,406,31,218,247,86,86,693,218,581,351,86,438,295,69,462,45,126,173,650,14,295,69,97,168,187,641,78,523,390,69,108,287,664,173,219,83,295,69,108,431,426,173,694,412,115,628,52,257,398,641,118,501,121,69,579,151,423,173,620,464,121,69,382,151,476,173,27,53,121,86,594,578,226,173,86,632,130,86,96,228,268,641,622,563,86,86,21,148,650,131,131,321,43,144,343,381,531,131,131,178,20,86,399,156,375,164,541,30,60,715,198,92,118,131,131,86,86,306,407,86,280,457,196,488,358,131,131,244,86,86,143,86,86,86,86,86,667,563,86,86,86,86,86,86,86,86,86,86,86,86,86,336,363,86,86,336,86,86,380,678,67,86,86,86,678,86,86,86,512,86,307,86,708,86,86,86,86,86,528,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,563,307,86,86,86,86,86,104,450,337,86,720,86,32,450,397,86,86,86,587,218,558,708,708,293,708,86,86,86,86,86,694,205,86,8,86,86,86,86,549,86,667,697,697,679,86,458,460,86,86,650,86,708,543,86,86,86,245,86,86,86,140,218,127,708,708,458,197,131,131,131,131,500,86,86,483,251,86,306,510,515,86,722,86,86,86,65,201,86,86,483,580,470,86,86,86,368,131,131,131,694,114,110,555,86,86,123,721,163,142,713,418,86,317,675,209,218,218,218,371,545,592,629,490,603,199,46,320,525,680,310,279,388,111,42,252,593,607,235,617,410,377,50,548,135,356,17,520,189,116,392,600,349,332,482,699,690,535,119,106,451,71,152,667,131,218,218,265,671,637,492,504,533,683,269,269,658,86,86,86,86,86,86,86,86,86,491,619,86,86,6,86,86,86,86,86,86,86,86,86,86,86,229,86,86,86,86,86,86,86,86,86,86,86,86,667,86,86,171,131,118,131,656,206,234,571,89,334,670,246,311,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,534,86,86,86,86,86,86,82,86,86,86,86,86,430,86,86,86,86,86,86,86,86,86,599,86,324,86,470,69,640,264,131,626,101,174,86,86,667,233,105,73,374,394,221,204,84,28,326,86,86,471,86,86,86,109,573,86,171,200,200,200,200,218,218,86,86,86,86,460,131,131,131,86,506,86,86,86,86,86,220,404,34,614,47,442,305,25,612,338,601,648,7,344,255,131,131,51,86,312,507,563,86,86,86,86,588,86,86,86,86,86,530,511,86,458,3,435,384,556,522,230,527,86,118,86,86,717,86,137,273,79,181,484,23,93,112,655,249,417,703,370,87,98,313,684,585,155,465,596,481,695,18,416,428,61,701,706,282,643,495,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,307,86,86,86,171,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,650,131,422,542,420,263,24,172,86,86,86,86,86,566,86,86,132,540,395,353,494,519,19,485,284,472,131,131,131,16,714,86,211,708,86,86,86,694,698,86,86,483,704,708,218,272,86,86,120,86,159,478,86,307,247,86,86,663,597,459,627,667,86,86,277,455,39,302,86,250,86,86,86,271,99,452,306,281,329,400,200,86,86,362,549,352,646,461,323,586,86,86,4,708,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,717,86,518,86,86,650,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,125,554,480,300,613,72,333,288,561,544,604,48,719,91,169,176,590,224,76,191,29,559,560,231,537,166,477,538,256,437,131,131,469,167,40,0,685,266,441,705,239,642,475,568,640,610,299,673,517,318,385,22,202,180,179,359,424,215,90,66,521,653,467,682,453,409,479,88,131,661,35,303,15,262,666,630,712,131,131,618,659,175,218,195,347,193,227,261,150,165,709,546,294,569,710,270,413,376,524,55,242,38,419,529,170,657,3,304,122,379,278,131,651,86,67,576,458,458,131,131,86,86,86,86,86,86,86,118,309,86,86,547,86,86,86,86,667,650,664,131,131,86,86,56,131,131,131,131,131,131,131,131,86,307,86,86,86,664,238,650,86,86,717,86,118,86,86,315,86,59,86,86,574,549,131,131,340,57,436,86,86,86,86,86,86,458,708,499,691,62,86,650,86,86,694,86,86,86,319,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,86,549,694,131,131,131,131,131,131,131,131,131,77,86,86,139,86,502,86,86,86,667,595,131,131,131,86,12,86,13,86,609,131,131,131,131,86,86,86,625,86,669,86,86,182,129,86,5,694,104,86,86,86,86,131,131,86,86,386,171,86,86,86,345,86,324,86,589,86,213,36,131,131,131,131,131,86,86,86,86,104,131,131,131,141,290,80,677,86,86,86,267,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,667,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,515,86,86,33,136,669,86,711,515,86,86,550,640,86,104,708,515,86,159,372,717,86,86,444,515,86,86,663,37,86,563,460,86,390,624,702,131,131,131,131,389,59,708,86,86,341,208,708,635,295,69,108,431,508,100,190,131,131,131,131,131,131,131,131,86,86,86,649,516,660,131,131,86,86,86,218,631,708,131,131,131,131,131,131,131,131,131,131,86,86,341,575,238,514,131,131,86,86,86,218,291,708,307,131,86,86,306,367,708,131,131,131,86,378,697,86,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,615,253,86,86,86,292,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,104,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,69,86,341,553,549,86,307,86,86,645,275,455,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,708,131,131,131,131,131,131,86,86,86,86,86,86,667,460,86,86,86,86,86,86,86,86,86,86,86,86,717,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,667,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,104,86,667,459,131,131,131,131,131,131,86,458,225,86,86,86,516,549,11,390,405,86,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,460,44,218,197,711,515,131,131,131,131,664,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,307,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,308,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,118,307,104,286,591,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,86,86,681,86,86,75,185,314,582,86,358,496,474,86,104,131,86,86,86,86,146,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,171,86,640,131,131,131,131,131,131,131,131,246,503,689,339,674,81,258,415,439,128,562,366,414,246,503,689,583,222,557,316,636,665,186,355,95,670,246,503,689,339,674,557,258,415,439,186,355,95,670,246,503,689,446,644,536,652,331,532,335,440,274,421,297,570,74,425,364,425,606,552,403,509,134,365,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,218,218,218,498,218,218,577,627,551,497,572,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,553,354,236,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,296,455,131,131,456,243,103,86,41,459,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,9,276,158,716,393,564,383,489,401,654,210,654,131,131,131,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,650,86,86,86,86,86,86,717,667,563,563,563,86,549,102,686,133,246,605,86,448,86,86,207,307,131,131,131,641,86,177,611,445,373,194,584,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,308,307,171,86,86,86,86,86,86,86,717,86,86,86,86,86,460,131,131,650,86,86,86,694,708,86,86,694,86,458,131,131,131,131,131,131,667,694,289,650,667,131,131,86,640,131,131,664,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,460,86,86,86,86,86,86,86,86,86,86,86,86,86,458,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,466,203,149,429,94,432,160,687,539,63,237,283,192,248,348,259,427,526,396,676,254,468,487,212,327,623,49,633,322,493,434,688,357,361,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131]);
    var mappingStr = "صلى الله عليه وسلمجل جلالهキロメートルrad∕s2エスクードキログラムキロワットグラムトンクルゼイロサンチームパーセントピアストルファラッドブッシェルヘクタールマンションミリバールレントゲン′′′′1⁄10viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)∫∫∫∫(오전)(오후)アパートアルファアンペアイニングエーカーカラットカロリーキュリーギルダークローネサイクルシリングバーレルフィートポイントマイクロミクロンメガトンリットルルーブル株式会社kcalm∕s2c∕kgاكبرمحمدصلعمرسولریال1⁄41⁄23⁄4 ̈́ྲཱྀླཱྀ ̈͂ ̓̀ ̓́ ̓͂ ̔̀ ̔́ ̔͂ ̈̀‵‵‵a/ca/sc/oc/utelfax1⁄71⁄91⁄32⁄31⁄52⁄53⁄54⁄51⁄65⁄61⁄83⁄85⁄87⁄8xii0⁄3∮∮∮(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(ᄀ)(ᄂ)(ᄃ)(ᄅ)(ᄆ)(ᄇ)(ᄉ)(ᄋ)(ᄌ)(ᄎ)(ᄏ)(ᄐ)(ᄑ)(ᄒ)(가)(나)(다)(라)(마)(바)(사)(아)(자)(차)(카)(타)(파)(하)(주)(一)(二)(三)(四)(五)(六)(七)(八)(九)(十)(月)(火)(水)(木)(金)(土)(日)(株)(有)(社)(名)(特)(財)(祝)(労)(代)(呼)(学)(監)(企)(資)(協)(祭)(休)(自)(至)pte10月11月12月ergltdアールインチウォンオンスオームカイリガロンガンマギニーケースコルナコーポセンチダースノットハイツパーツピクルフランペニヒヘルツペンスページベータボルトポンドホールホーンマイルマッハマルクヤードヤールユアンルピー10点11点12点13点14点15点16点17点18点19点20点21点22点23点24点hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmv∕ma∕m10日11日12日13日14日15日16日17日18日19日20日21日22日23日24日25日26日27日28日29日30日31日galffifflשּׁשּׂ ٌّ ٍّ َّ ُّ ِّ ّٰـَّـُّـِّتجمتحجتحمتخمتمجتمحتمخجمححميحمىسحجسجحسجىسمحسمجسممصححصممشحمشجيشمخشممضحىضخمطمحطممطميعجمعممعمىغممغميغمىفخمقمحقمملحملحيلحىلججلخملمحمحجمحيمجحمجممخممجخهمجهممنحمنحىنجمنجىنمينمىيممبخيتجيتجىتخيتخىتميتمىجميجحىجمىسخىصحيشحيضحيلجيلمييحييجييميمميقمينحيعميكمينجحمخيلجمكممجحيحجيمجيفميبحيسخينجيصلےقلے𝅘𝅥𝅮𝅘𝅥𝅯𝅘𝅥𝅰𝅘𝅥𝅱𝅘𝅥𝅲𝆹𝅥𝅮𝆺𝅥𝅮𝆹𝅥𝅯𝆺𝅥𝅯〔s〕ppv〔本〕〔三〕〔二〕〔安〕〔点〕〔打〕〔盗〕〔勝〕〔敗〕 ̄ ́ ̧ssi̇ijl·ʼndžljnjdz ̆ ̇ ̊ ̨ ̃ ̋ ιեւاٴوٴۇٴيٴक़ख़ग़ज़ड़ढ़फ़य़ড়ঢ়য়ਲ਼ਸ਼ਖ਼ਗ਼ਜ਼ਫ਼ଡ଼ଢ଼ําໍາຫນຫມགྷཌྷདྷབྷཛྷཀྵཱཱིུྲྀླྀྒྷྜྷྡྷྦྷྫྷྐྵaʾἀιἁιἂιἃιἄιἅιἆιἇιἠιἡιἢιἣιἤιἥιἦιἧιὠιὡιὢιὣιὤιὥιὦιὧιὰιαιάιᾶι ͂ὴιηιήιῆιὼιωιώιῶι ̳!! ̅???!!?rs°c°fnosmtmivix⫝̸ ゙ ゚よりコト333435참고주의363738394042444546474849503月4月5月6月7月8月9月hgevギガデシドルナノピコビルペソホンリラレムdaauovpciu平成昭和大正明治naμakakbmbgbpfnfμfμgmgμlmldlklfmnmμmpsnsμsmsnvμvkvpwnwμwmwkwkωmωbqcccddbgyhainkkktlnlxphprsrsvwbstմնմեմիվնմխיִײַשׁשׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּתּוֹבֿכֿפֿאלئائەئوئۇئۆئۈئېئىئجئحئمئيبجبمبىبيتىتيثجثمثىثيخحضجضمطحظمغجفجفحفىفيقحقىقيكاكجكحكخكلكىكينخنىنيهجهىهييىذٰرٰىٰئرئزئنبزبنترتزتنثرثزثنمانرنزننيريزئخئهبهتهصخنههٰثهسهشهطىطيعىعيغىغيسىسيشىشيصىصيضىضيشخشرسرصرضراً ًـًـّ ْـْلآلألإ𝅗𝅥0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddjほかココàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįĵķĺļľłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷÿźżɓƃƅɔƈɖɗƌǝəɛƒɠɣɩɨƙɯɲɵơƣƥʀƨʃƭʈưʊʋƴƶʒƹƽǎǐǒǔǖǘǚǜǟǡǣǥǧǩǫǭǯǵƕƿǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟƞȣȥȧȩȫȭȯȱȳⱥȼƚⱦɂƀʉʌɇɉɋɍɏɦɹɻʁʕͱͳʹͷ;ϳέίόύβγδεζθκλνξοπρστυφχψϊϋϗϙϛϝϟϡϣϥϧϩϫϭϯϸϻͻͼͽѐёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯաբգդզէըթժլծկհձղճյշոչպջռստրցփքօֆ་ⴧⴭნᏰᏱᏲᏳᏴᏵꙋɐɑᴂɜᴖᴗᴝᴥɒɕɟɡɥɪᵻʝɭᶅʟɱɰɳɴɸʂƫᴜʐʑḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿἐἑἒἓἔἕἰἱἲἳἴἵἶἷὀὁὂὃὄὅὑὓὕὗᾰᾱὲΐῐῑὶΰῠῡὺῥ`ὸ‐+−∑〈〉ⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱡɫᵽɽⱨⱪⱬⱳⱶȿɀⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳬⳮⳳⵡ母龟丨丶丿乙亅亠人儿入冂冖冫几凵刀力勹匕匚匸卜卩厂厶又口囗士夂夊夕女子宀寸小尢尸屮山巛工己巾干幺广廴廾弋弓彐彡彳心戈戶手支攴文斗斤方无曰欠止歹殳毋比毛氏气爪父爻爿片牙牛犬玄玉瓜瓦甘生用田疋疒癶白皮皿目矛矢石示禸禾穴立竹米糸缶网羊羽老而耒耳聿肉臣臼舌舛舟艮色艸虍虫血行衣襾見角言谷豆豕豸貝赤走足身車辛辰辵邑酉釆里長門阜隶隹雨靑非面革韋韭音頁風飛食首香馬骨高髟鬥鬯鬲鬼魚鳥鹵鹿麥麻黃黍黑黹黽鼎鼓鼠鼻齊齒龍龜龠.〒卄卅ᄁᆪᆬᆭᄄᆰᆱᆲᆳᆴᆵᄚᄈᄡᄊ짜ᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᄔᄕᇇᇈᇌᇎᇓᇗᇙᄜᇝᇟᄝᄞᄠᄢᄣᄧᄩᄫᄬᄭᄮᄯᄲᄶᅀᅇᅌᇱᇲᅗᅘᅙᆄᆅᆈᆑᆒᆔᆞᆡ上中下甲丙丁天地問幼箏우秘男適優印注項写左右医宗夜テヌモヨヰヱヲꙁꙃꙅꙇꙉꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝺꝼᵹꝿꞁꞃꞅꞇꞌꞑꞓꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩɬʞʇꭓꞵꞷꬷꭒᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯ豈更賈滑串句契喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧蘆虜路露魯鷺碌祿綠菉錄論壟弄籠聾牢磊賂雷壘屢樓淚漏累縷陋勒肋凜凌稜綾菱陵讀拏諾丹寧怒率異北磻便復不泌數索參塞省葉說殺沈拾若掠略亮兩凉梁糧良諒量勵呂廬旅濾礪閭驪麗黎曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂廉念捻殮簾獵令囹嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料燎療蓼遼暈阮劉杻柳流溜琉留硫紐類戮陸倫崙淪輪律慄栗隆利吏履易李梨泥理痢罹裏裡離匿溺吝燐璘藺隣鱗麟林淋臨笠粒狀炙識什茶刺切度拓糖宅洞暴輻降廓兀嗀塚晴凞猪益礼神祥福靖精蘒諸逸都飯飼館鶴郞隷侮僧免勉勤卑喝嘆器塀墨層悔慨憎懲敏既暑梅海渚漢煮爫琢碑祉祈祐祖禍禎穀突節縉繁署者臭艹著褐視謁謹賓贈辶難響頻恵𤋮舘並况全侀充冀勇勺啕喙嗢墳奄奔婢嬨廒廙彩徭惘慎愈慠戴揄搜摒敖望杖滛滋瀞瞧爵犯瑱甆画瘝瘟盛直睊着磌窱类絛缾荒華蝹襁覆調請諭變輸遲醙鉶陼韛頋鬒𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎עםٱٻپڀٺٿٹڤڦڄڃچڇڍڌڎڈژڑکگڳڱںڻۀہھۓڭۋۅۉ、〖〗—–_{}【】《》「」『』[]#&*-<>\\$%@ءؤة\"'^|~⦅⦆・ゥャ¢£¬¦¥₩│←↑→↓■○𐐨𐐩𐐪𐐫𐐬𐐭𐐮𐐯𐐰𐐱𐐲𐐳𐐴𐐵𐐶𐐷𐐸𐐹𐐺𐐻𐐼𐐽𐐾𐐿𐑀𐑁𐑂𐑃𐑄𐑅𐑆𐑇𐑈𐑉𐑊𐑋𐑌𐑍𐑎𐑏𐓘𐓙𐓚𐓛𐓜𐓝𐓞𐓟𐓠𐓡𐓢𐓣𐓤𐓥𐓦𐓧𐓨𐓩𐓪𐓫𐓬𐓭𐓮𐓯𐓰𐓱𐓲𐓳𐓴𐓵𐓶𐓷𐓸𐓹𐓺𐓻𐳀𐳁𐳂𐳃𐳄𐳅𐳆𐳇𐳈𐳉𐳊𐳋𐳌𐳍𐳎𐳏𐳐𐳑𐳒𐳓𐳔𐳕𐳖𐳗𐳘𐳙𐳚𐳛𐳜𐳝𐳞𐳟𐳠𐳡𐳢𐳣𐳤𐳥𐳦𐳧𐳨𐳩𐳪𐳫𐳬𐳭𐳮𐳯𐳰𐳱𐳲𑣀𑣁𑣂𑣃𑣄𑣅𑣆𑣇𑣈𑣉𑣊𑣋𑣌𑣍𑣎𑣏𑣐𑣑𑣒𑣓𑣔𑣕𑣖𑣗𑣘𑣙𑣚𑣛𑣜𑣝𑣞𑣟ıȷ∇∂𞤢𞤣𞤤𞤥𞤦𞤧𞤨𞤩𞤪𞤫𞤬𞤭𞤮𞤯𞤰𞤱𞤲𞤳𞤴𞤵𞤶𞤷𞤸𞤹𞤺𞤻𞤼𞤽𞤾𞤿𞥀𞥁𞥂𞥃ٮڡٯ字双多解交映無前後再新初終販声吹演投捕遊指禁空合満申割営配得可丽丸乁𠄢你侻倂偺備像㒞𠘺兔兤具𠔜㒹內𠕋冗冤仌冬𩇟刃㓟刻剆剷㔕包匆卉博即卽卿𠨬灰及叟𠭣叫叱吆咞吸呈周咢哶唐啓啣善喫喳嗂圖圗噑噴壮城埴堍型堲報墬𡓤売壷夆夢奢𡚨𡛪姬娛娧姘婦㛮嬈嬾𡧈寃寘寳𡬘寿将㞁屠峀岍𡷤嵃𡷦嵮嵫嵼巡巢㠯巽帨帽幩㡢𢆃㡼庰庳庶𪎒𢌱舁弢㣇𣊸𦇚形彫㣣徚忍志忹悁㤺㤜𢛔惇慈慌慺憲憤憯懞戛扝抱拔捐𢬌挽拼捨掃揤𢯱搢揅掩㨮摩摾撝摷㩬敬𣀊旣書晉㬙㬈㫤冒冕最暜肭䏙朡杞杓𣏃㭉柺枅桒𣑭梎栟椔楂榣槪檨𣚣櫛㰘次𣢧歔㱎歲殟殻𣪍𡴋𣫺汎𣲼沿泍汧洖派浩浸涅𣴞洴港湮㴳滇𣻑淹潮𣽞𣾎濆瀹瀛㶖灊災灷炭𠔥煅𤉣熜爨牐𤘈犀犕𤜵𤠔獺王㺬玥㺸瑇瑜璅瓊㼛甤𤰶甾𤲒𢆟瘐𤾡𤾸𥁄㿼䀈𥃳𥃲𥄙𥄳眞真瞋䁆䂖𥐝硎䃣𥘦𥚚𥛅秫䄯穊穏𥥼𥪧䈂𥮫篆築䈧𥲀糒䊠糨糣紀𥾆絣䌁緇縂繅䌴𦈨𦉇䍙𦋙罺𦌾羕翺𦓚𦔣聠𦖨聰𣍟䏕育脃䐋脾媵𦞧𦞵𣎓𣎜舄辞䑫芑芋芝劳花芳芽苦𦬼茝荣莭茣莽菧荓菊菌菜𦰶𦵫𦳕䔫蓱蓳蔖𧏊蕤𦼬䕝䕡𦾱𧃒䕫虐虧虩蚩蚈蜎蛢蜨蝫螆蟡蠁䗹衠𧙧裗裞䘵裺㒻𧢮𧥦䚾䛇誠𧲨貫賁贛起𧼯𠠄跋趼跰𠣞軔𨗒𨗭邔郱鄑𨜮鄛鈸鋗鋘鉼鏹鐕𨯺開䦕閷𨵷䧦雃嶲霣𩅅𩈚䩮䩶韠𩐊䪲𩒖頩𩖶飢䬳餩馧駂駾䯎𩬰鱀鳽䳎䳭鵧𪃎䳸𪄅𪈎𪊑䵖黾鼅鼏鼖𪘀";
    
    function mapChar(codePoint) {
      if (codePoint >= 0x30000) {
        // High planes are special cased.
        if (codePoint >= 0xE0100 && codePoint <= 0xE01EF)
          return 18874368;
        return 0;
      }
      return blocks[blockIdxes[codePoint >> 4]][codePoint & 15];
    }
    
    return {
      mapStr: mappingStr,
      mapChar: mapChar
    };
    }));
    
    },{}],196:[function(require,module,exports){
    (function(root, factory) {
      /* istanbul ignore next */
      if (typeof define === 'function' && define.amd) {
        define(['punycode', './idna-map'], function(punycode, idna_map) {
          return factory(punycode, idna_map);
        });
      }
      else if (typeof exports === 'object') {
        module.exports = factory(require('punycode'), require('./idna-map'));
      }
      else {
        root.uts46 = factory(root.punycode, root.idna_map);
      }
    }(this, function(punycode, idna_map) {
    
      function mapLabel(label, useStd3ASCII, transitional) {
        var mapped = [];
        var chars = punycode.ucs2.decode(label);
        for (var i = 0; i < chars.length; i++) {
          var cp = chars[i];
          var ch = punycode.ucs2.encode([chars[i]]);
          var composite = idna_map.mapChar(cp);
          var flags = (composite >> 23);
          var kind = (composite >> 21) & 3;
          var index = (composite >> 5) & 0xffff;
          var length = composite & 0x1f;
          var value = idna_map.mapStr.substr(index, length);
          if (kind === 0 || (useStd3ASCII && (flags & 1))) {
            throw new Error("Illegal char " + ch);
          }
          else if (kind === 1) {
            mapped.push(value);
          }
          else if (kind === 2) {
            mapped.push(transitional ? value : ch);
          }
          /* istanbul ignore next */
          else if (kind === 3) {
            mapped.push(ch);
          }
        }
    
        var newLabel = mapped.join("").normalize("NFC");
        return newLabel;
      }
    
      function process(domain, transitional, useStd3ASCII) {
        /* istanbul ignore if */
        if (useStd3ASCII === undefined)
          useStd3ASCII = false;
        var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);
    
        // Step 3. Break
        var labels = mappedIDNA.split(".");
    
        // Step 4. Convert/Validate
        labels = labels.map(function(label) {
          if (label.startsWith("xn--")) {
            label = punycode.decode(label.substring(4));
            validateLabel(label, useStd3ASCII, false);
          }
          else {
            validateLabel(label, useStd3ASCII, transitional);
          }
          return label;
        });
    
        return labels.join(".");
      }
    
      function validateLabel(label, useStd3ASCII, transitional) {
        // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the
        // third position and fourth positions.
        if (label[2] === '-' && label[3] === '-')
          throw new Error("Failed to validate " + label);
    
        // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS
        // character.
        if (label.startsWith('-') || label.endsWith('-'))
          throw new Error("Failed to validate " + label);
    
        // 4. The label must not contain a U+002E ( . ) FULL STOP.
        // this should nerver happen as label is chunked internally by this character
        /* istanbul ignore if */
        if (label.includes('.'))
          throw new Error("Failed to validate " + label);
    
        if (mapLabel(label, useStd3ASCII, transitional) !== label)
          throw new Error("Failed to validate " + label);
    
        // 5. The label must not begin with a combining mark, that is:
        // General_Category=Mark.
        var ch = label.codePointAt(0);
        if (idna_map.mapChar(ch) & (0x2 << 23))
          throw new Error("Label contains illegal character: " + ch);
      }
    
      function toAscii(domain, options) {
        if (options === undefined)
          options = {};
        var transitional = 'transitional' in options ? options.transitional : true;
        var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;
        var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;
        var labels = process(domain, transitional, useStd3ASCII).split('.');
        var asciiLabels = labels.map(punycode.toASCII);
        var asciiString = asciiLabels.join('.');
        var i;
        if (verifyDnsLength) {
          if (asciiString.length < 1 || asciiString.length > 253) {
            throw new Error("DNS name has wrong length: " + asciiString);
          }
          for (i = 0; i < asciiLabels.length; i++) {//for .. of replacement
            var label = asciiLabels[i];
            if (label.length < 1 || label.length > 63)
              throw new Error("DNS label has wrong length: " + label);
          }
        }
        return asciiString;
      }
    
      function toUnicode(domain, options) {
        if (options === undefined)
          options = {};
        var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;
        return process(domain, false, useStd3ASCII);
      }
    
      return {
        toUnicode: toUnicode,
        toAscii: toAscii,
      };
    }));
    
    },{"./idna-map":195,"punycode":238}],197:[function(require,module,exports){
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var nBits = -7
      var i = isLE ? (nBytes - 1) : 0
      var d = isLE ? -1 : 1
      var s = buffer[offset + i]
    
      i += d
    
      e = s & ((1 << (-nBits)) - 1)
      s >>= (-nBits)
      nBits += eLen
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
    
      m = e & ((1 << (-nBits)) - 1)
      e >>= (-nBits)
      nBits += mLen
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
    
      if (e === 0) {
        e = 1 - eBias
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen)
        e = e - eBias
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }
    
    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
      var i = isLE ? 0 : (nBytes - 1)
      var d = isLE ? 1 : -1
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
    
      value = Math.abs(value)
    
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0
        e = eMax
      } else {
        e = Math.floor(Math.log(value) / Math.LN2)
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--
          c *= 2
        }
        if (e + eBias >= 1) {
          value += rt / c
        } else {
          value += rt * Math.pow(2, 1 - eBias)
        }
        if (value * c >= 2) {
          e++
          c /= 2
        }
    
        if (e + eBias >= eMax) {
          m = 0
          e = eMax
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen)
          e = e + eBias
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
          e = 0
        }
      }
    
      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
    
      e = (e << mLen) | m
      eLen += mLen
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
    
      buffer[offset + i - d] |= s * 128
    }
    
    },{}],198:[function(require,module,exports){
    
    var indexOf = [].indexOf;
    
    module.exports = function(arr, obj){
      if (indexOf) return arr.indexOf(obj);
      for (var i = 0; i < arr.length; ++i) {
        if (arr[i] === obj) return i;
      }
      return -1;
    };
    },{}],199:[function(require,module,exports){
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        var TempCtor = function () {}
        TempCtor.prototype = superCtor.prototype
        ctor.prototype = new TempCtor()
        ctor.prototype.constructor = ctor
      }
    }
    
    },{}],200:[function(require,module,exports){
    /*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
    }
    
    function isBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }
    
    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
    }
    
    },{}],201:[function(require,module,exports){
    'use strict';
    
    var fnToStr = Function.prototype.toString;
    
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
        try {
            var fnStr = fnToStr.call(value);
            return constructorRegex.test(fnStr);
        } catch (e) {
            return false; // not a function
        }
    };
    
    var tryFunctionObject = function tryFunctionToStr(value) {
        try {
            if (isES6ClassFn(value)) { return false; }
            fnToStr.call(value);
            return true;
        } catch (e) {
            return false;
        }
    };
    var toStr = Object.prototype.toString;
    var fnClass = '[object Function]';
    var genClass = '[object GeneratorFunction]';
    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
    
    module.exports = function isCallable(value) {
        if (!value) { return false; }
        if (typeof value !== 'function' && typeof value !== 'object') { return false; }
        if (typeof value === 'function' && !value.prototype) { return true; }
        if (hasToStringTag) { return tryFunctionObject(value); }
        if (isES6ClassFn(value)) { return false; }
        var strClass = toStr.call(value);
        return strClass === fnClass || strClass === genClass;
    };
    
    },{}],202:[function(require,module,exports){
    module.exports = isFunction
    
    var toString = Object.prototype.toString
    
    function isFunction (fn) {
      var string = toString.call(fn)
      return string === '[object Function]' ||
        (typeof fn === 'function' && string !== '[object RegExp]') ||
        (typeof window !== 'undefined' &&
         // IE8 and below
         (fn === window.setTimeout ||
          fn === window.alert ||
          fn === window.confirm ||
          fn === window.prompt))
    };
    
    },{}],203:[function(require,module,exports){
    /**
     * Returns a `Boolean` on whether or not the a `String` starts with '0x'
     * @param {String} str the string input value
     * @return {Boolean} a boolean if it is or is not hex prefixed
     * @throws if the str input is not a string
     */
    module.exports = function isHexPrefixed(str) {
      if (typeof str !== 'string') {
        throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
      }
    
      return str.slice(0, 2) === '0x';
    }
    
    },{}],204:[function(require,module,exports){
    var toString = {}.toString;
    
    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
    
    },{}],205:[function(require,module,exports){
    (function (process,global){
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.5.7
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2016
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {
      'use strict';
    
      var root = typeof window === 'object' ? window : {};
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
                0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
                2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
                2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
                2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];
    
      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };
    
      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };
    
      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createOutputMethod(bits, padding, type);
        }
        return method;
      };
    
      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createShakeOutputMethod(bits, padding, type);
        }
        return method;
      };
    
      var algorithms = [
        {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
        {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
        {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
      ];
    
      var methods = {}, methodNames = [];
    
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits  = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name +'_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        }
      }
    
      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
    
        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }
    
      Keccak.prototype.update = function (message) {
        var notString = typeof message !== 'string';
        if (notString && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
        var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;
    
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };
    
      Keccak.prototype.finalize = function () {
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };
    
      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();
    
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                   HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                   HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                   HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          if (extraBytes > 0) {
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          }
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };
    
      Keccak.prototype.arrayBuffer = function () {
        this.finalize();
    
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
    
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
    
      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();
    
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          if (extraBytes > 0) {
            array[offset] = block & 0xFF;
          }
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };
    
      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
            b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
            b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
            b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
    
          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
    
          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);
    
          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);
    
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
    
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (var i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":231}],206:[function(require,module,exports){
    'use strict';
    
    var traverse = module.exports = function (schema, opts, cb) {
      // Legacy support for v0.3.1 and earlier.
      if (typeof opts == 'function') {
        cb = opts;
        opts = {};
      }
    
      cb = opts.cb || cb;
      var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
      var post = cb.post || function() {};
    
      _traverse(opts, pre, post, schema, '', schema);
    };
    
    
    traverse.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true
    };
    
    traverse.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true
    };
    
    traverse.propsKeywords = {
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };
    
    traverse.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true
    };
    
    
    function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse.arrayKeywords) {
              for (var i=0; i<sch.length; i++)
                _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
            }
          } else if (key in traverse.propsKeywords) {
            if (sch && typeof sch == 'object') {
              for (var prop in sch)
                _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
            _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
          }
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      }
    }
    
    
    function escapeJsonPtr(str) {
      return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }
    
    },{}],207:[function(require,module,exports){
    'use strict'
    var inherits = require('inherits')
    var HashBase = require('hash-base')
    var Buffer = require('safe-buffer').Buffer
    
    var ARRAY16 = new Array(16)
    
    function MD5 () {
      HashBase.call(this, 64)
    
      // state
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
    }
    
    inherits(MD5, HashBase)
    
    MD5.prototype._update = function () {
      var M = ARRAY16
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)
    
      var a = this._a
      var b = this._b
      var c = this._c
      var d = this._d
    
      a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
      d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
      c = fnF(c, d, a, b, M[2], 0x242070db, 17)
      b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
      a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
      d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
      c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
      b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
      a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
      d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
      c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
      b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
      a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
      d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
      c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
      b = fnF(b, c, d, a, M[15], 0x49b40821, 22)
    
      a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
      d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
      c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
      b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
      a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
      d = fnG(d, a, b, c, M[10], 0x02441453, 9)
      c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
      b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
      a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
      d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
      c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
      b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
      a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
      d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
      c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
      b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)
    
      a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
      d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
      c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
      b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
      a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
      d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
      c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
      b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
      a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
      d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
      c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
      b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
      a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
      d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
      c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
      b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)
    
      a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
      d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
      c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
      b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
      a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
      d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
      c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
      b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
      a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
      d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
      c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
      b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
      a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
      d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
      c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
      b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)
    
      this._a = (this._a + a) | 0
      this._b = (this._b + b) | 0
      this._c = (this._c + c) | 0
      this._d = (this._d + d) | 0
    }
    
    MD5.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64)
        this._update()
        this._blockOffset = 0
      }
    
      this._block.fill(0, this._blockOffset, 56)
      this._block.writeUInt32LE(this._length[0], 56)
      this._block.writeUInt32LE(this._length[1], 60)
      this._update()
    
      // produce result
      var buffer = Buffer.allocUnsafe(16)
      buffer.writeInt32LE(this._a, 0)
      buffer.writeInt32LE(this._b, 4)
      buffer.writeInt32LE(this._c, 8)
      buffer.writeInt32LE(this._d, 12)
      return buffer
    }
    
    function rotl (x, n) {
      return (x << n) | (x >>> (32 - n))
    }
    
    function fnF (a, b, c, d, m, k, s) {
      return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
    }
    
    function fnG (a, b, c, d, m, k, s) {
      return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
    }
    
    function fnH (a, b, c, d, m, k, s) {
      return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
    }
    
    function fnI (a, b, c, d, m, k, s) {
      return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
    }
    
    module.exports = MD5
    
    },{"hash-base":180,"inherits":199,"safe-buffer":264}],208:[function(require,module,exports){
    var bn = require('bn.js');
    var brorand = require('brorand');
    
    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }
    module.exports = MillerRabin;
    
    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };
    
    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8);
    
      // Generage random bytes until a number less than n is found.
      // This ensures that 0..n-1 have an equal probability of being selected.
      do
        var a = new bn(this.rand.generate(min_bytes));
      while (a.cmp(n) >= 0);
    
      return a;
    };
    
    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      // Generate a random number greater than or equal to start and less than stop.
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };
    
    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
    
      if (!k)
        k = Math.max(1, (len / 48) | 0);
    
      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);
    
      var rn1 = n1.toRed(red);
    
      var prime = true;
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        if (cb)
          cb(a);
    
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
    
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
    
          if (x.cmp(rone) === 0)
            return false;
          if (x.cmp(rn1) === 0)
            break;
        }
    
        if (i === s)
          return false;
      }
    
      return prime;
    };
    
    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
    
      if (!k)
        k = Math.max(1, (len / 48) | 0);
    
      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);
    
      var rn1 = n1.toRed(red);
    
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
    
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0)
          return g;
    
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
    
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
    
          if (x.cmp(rone) === 0)
            return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0)
            break;
        }
    
        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }
    
      return false;
    };
    
    },{"bn.js":61,"brorand":62}],209:[function(require,module,exports){
    module.exports = assert;
    
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }
    
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };
    
    },{}],210:[function(require,module,exports){
    'use strict';
    
    var utils = exports;
    
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;
    
    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;
    
    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;
    
    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    
    },{}],211:[function(require,module,exports){
    /**
     * Helpers.
     */
    
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    
    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */
    
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
          JSON.stringify(val)
      );
    };
    
    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */
    
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }
    
    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */
    
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }
    
    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */
    
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }
      return ms + ' ms';
    }
    
    /**
     * Pluralization helper.
     */
    
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }
    
    },{}],212:[function(require,module,exports){
    arguments[4][170][0].apply(exports,arguments)
    },{"dup":170}],213:[function(require,module,exports){
    var BN = require('bn.js');
    var stripHexPrefix = require('strip-hex-prefix');
    
    /**
     * Returns a BN object, converts a number value to a BN
     * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
     * @return {Object} `output` BN object of the number
     * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
     */
    module.exports = function numberToBN(arg) {
      if (typeof arg === 'string' || typeof arg === 'number') {
        var multiplier = new BN(1); // eslint-disable-line
        var formattedString = String(arg).toLowerCase().trim();
        var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
        var stringArg = stripHexPrefix(formattedString); // eslint-disable-line
        if (stringArg.substr(0, 1) === '-') {
          stringArg = stripHexPrefix(stringArg.slice(1));
          multiplier = new BN(-1, 10);
        }
        stringArg = stringArg === '' ? '0' : stringArg;
    
        if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
          || stringArg.match(/^[a-fA-F]+$/)
          || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
          return new BN(stringArg, 16).mul(multiplier);
        }
    
        if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
          return new BN(stringArg, 10).mul(multiplier);
        }
      } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
        if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
          return new BN(arg.toString(10), 10);
        }
      }
    
      throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
    }
    
    },{"bn.js":212,"strip-hex-prefix":287}],214:[function(require,module,exports){
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    
    'use strict';
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
    
        return Object(val);
    }
    
    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }
    
            // Detect buggy property enumeration order in older V8 versions.
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            }
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            }
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !==
                    'abcdefghijklmnopqrst') {
                return false;
            }
    
            return true;
        } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }
    
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
    
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
    
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
    
            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
    
        return to;
    };
    
    },{}],215:[function(require,module,exports){
    'use strict';
    
    var keysShim;
    if (!Object.keys) {
        // modified from https://github.com/es-shims/es5-shim
        var has = Object.prototype.hasOwnProperty;
        var toStr = Object.prototype.toString;
        var isArgs = require('./isArguments'); // eslint-disable-line global-require
        var isEnumerable = Object.prototype.propertyIsEnumerable;
        var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
        var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
        var dontEnums = [
            'toString',
            'toLocaleString',
            'valueOf',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'constructor'
        ];
        var equalsConstructorPrototype = function (o) {
            var ctor = o.constructor;
            return ctor && ctor.prototype === o;
        };
        var excludedKeys = {
            $applicationCache: true,
            $console: true,
            $external: true,
            $frame: true,
            $frameElement: true,
            $frames: true,
            $innerHeight: true,
            $innerWidth: true,
            $onmozfullscreenchange: true,
            $onmozfullscreenerror: true,
            $outerHeight: true,
            $outerWidth: true,
            $pageXOffset: true,
            $pageYOffset: true,
            $parent: true,
            $scrollLeft: true,
            $scrollTop: true,
            $scrollX: true,
            $scrollY: true,
            $self: true,
            $webkitIndexedDB: true,
            $webkitStorageInfo: true,
            $window: true
        };
        var hasAutomationEqualityBug = (function () {
            /* global window */
            if (typeof window === 'undefined') { return false; }
            for (var k in window) {
                try {
                    if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                        try {
                            equalsConstructorPrototype(window[k]);
                        } catch (e) {
                            return true;
                        }
                    }
                } catch (e) {
                    return true;
                }
            }
            return false;
        }());
        var equalsConstructorPrototypeIfNotBuggy = function (o) {
            /* global window */
            if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                return equalsConstructorPrototype(o);
            }
            try {
                return equalsConstructorPrototype(o);
            } catch (e) {
                return false;
            }
        };
    
        keysShim = function keys(object) {
            var isObject = object !== null && typeof object === 'object';
            var isFunction = toStr.call(object) === '[object Function]';
            var isArguments = isArgs(object);
            var isString = isObject && toStr.call(object) === '[object String]';
            var theKeys = [];
    
            if (!isObject && !isFunction && !isArguments) {
                throw new TypeError('Object.keys called on a non-object');
            }
    
            var skipProto = hasProtoEnumBug && isFunction;
            if (isString && object.length > 0 && !has.call(object, 0)) {
                for (var i = 0; i < object.length; ++i) {
                    theKeys.push(String(i));
                }
            }
    
            if (isArguments && object.length > 0) {
                for (var j = 0; j < object.length; ++j) {
                    theKeys.push(String(j));
                }
            } else {
                for (var name in object) {
                    if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                        theKeys.push(String(name));
                    }
                }
            }
    
            if (hasDontEnumBug) {
                var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
    
                for (var k = 0; k < dontEnums.length; ++k) {
                    if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                        theKeys.push(dontEnums[k]);
                    }
                }
            }
            return theKeys;
        };
    }
    module.exports = keysShim;
    
    },{"./isArguments":217}],216:[function(require,module,exports){
    'use strict';
    
    var slice = Array.prototype.slice;
    var isArgs = require('./isArguments');
    
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');
    
    var originalKeys = Object.keys;
    
    keysShim.shim = function shimObjectKeys() {
        if (Object.keys) {
            var keysWorksWithArguments = (function () {
                // Safari 5.0 bug
                var args = Object.keys(arguments);
                return args && args.length === arguments.length;
            }(1, 2));
            if (!keysWorksWithArguments) {
                Object.keys = function keys(object) { // eslint-disable-line func-name-matching
                    if (isArgs(object)) {
                        return originalKeys(slice.call(object));
                    }
                    return originalKeys(object);
                };
            }
        } else {
            Object.keys = keysShim;
        }
        return Object.keys || keysShim;
    };
    
    module.exports = keysShim;
    
    },{"./implementation":215,"./isArguments":217}],217:[function(require,module,exports){
    'use strict';
    
    var toStr = Object.prototype.toString;
    
    module.exports = function isArguments(value) {
        var str = toStr.call(value);
        var isArgs = str === '[object Arguments]';
        if (!isArgs) {
            isArgs = str !== '[object Array]' &&
                value !== null &&
                typeof value === 'object' &&
                typeof value.length === 'number' &&
                value.length >= 0 &&
                toStr.call(value.callee) === '[object Function]';
        }
        return isArgs;
    };
    
    },{}],218:[function(require,module,exports){
    // This file is the concatenation of many js files.
    // See http://github.com/jimhigson/oboe.js for the raw source
    
    // having a local undefined, window, Object etc allows slightly better minification:
    (function  (window, Object, Array, Error, JSON, undefined ) {
    
       // v2.1.3-15-g7432b49
    
    /*
    
    Copyright (c) 2013, Jim Higson
    
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:
    
    1.  Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
    
    2.  Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
    IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
    PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
    TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    
    */
    
    /** 
     * Partially complete a function.
     * 
     *  var add3 = partialComplete( function add(a,b){return a+b}, 3 );
     *  
     *  add3(4) // gives 7
     *  
     *  function wrap(left, right, cen){return left + " " + cen + " " + right;}
     *  
     *  var pirateGreeting = partialComplete( wrap , "I'm", ", a mighty pirate!" );
     *  
     *  pirateGreeting("Guybrush Threepwood"); 
     *  // gives "I'm Guybrush Threepwood, a mighty pirate!"
     */
    var partialComplete = varArgs(function( fn, args ) {
    
          // this isn't the shortest way to write this but it does
          // avoid creating a new array each time to pass to fn.apply,
          // otherwise could just call boundArgs.concat(callArgs)       
    
          var numBoundArgs = args.length;
    
          return varArgs(function( callArgs ) {
             
             for (var i = 0; i < callArgs.length; i++) {
                args[numBoundArgs + i] = callArgs[i];
             }
             
             args.length = numBoundArgs + callArgs.length;         
                         
             return fn.apply(this, args);
          }); 
       }),
    
    /**
     * Compose zero or more functions:
     * 
     *    compose(f1, f2, f3)(x) = f1(f2(f3(x))))
     * 
     * The last (inner-most) function may take more than one parameter:
     * 
     *    compose(f1, f2, f3)(x,y) = f1(f2(f3(x,y))))
     */
       compose = varArgs(function(fns) {
    
          var fnsList = arrayAsList(fns);
       
          function next(params, curFn) {  
             return [apply(params, curFn)];   
          }
                
          return varArgs(function(startParams){
            
             return foldR(next, startParams, fnsList)[0];
          });
       });
    
    /**
     * A more optimised version of compose that takes exactly two functions
     * @param f1
     * @param f2
     */
    function compose2(f1, f2){
       return function(){
          return f1.call(this,f2.apply(this,arguments));
       }
    }
    
    /**
     * Generic form for a function to get a property from an object
     * 
     *    var o = {
     *       foo:'bar'
     *    }
     *    
     *    var getFoo = attr('foo')
     *    
     *    fetFoo(o) // returns 'bar'
     * 
     * @param {String} key the property name
     */
    function attr(key) {
       return function(o) { return o[key]; };
    }
            
    /**
     * Call a list of functions with the same args until one returns a 
     * truthy result. Similar to the || operator.
     * 
     * So:
     *      lazyUnion([f1,f2,f3 ... fn])( p1, p2 ... pn )
     *      
     * Is equivalent to: 
     *      apply([p1, p2 ... pn], f1) || 
     *      apply([p1, p2 ... pn], f2) || 
     *      apply([p1, p2 ... pn], f3) ... apply(fn, [p1, p2 ... pn])  
     *  
     * @returns the first return value that is given that is truthy.
     */
       var lazyUnion = varArgs(function(fns) {
    
          return varArgs(function(params){
       
             var maybeValue;
       
             for (var i = 0; i < len(fns); i++) {
       
                maybeValue = apply(params, fns[i]);
       
                if( maybeValue ) {
                   return maybeValue;
                }
             }
          });
       });   
    
    /**
     * This file declares various pieces of functional programming.
     * 
     * This isn't a general purpose functional library, to keep things small it
     * has just the parts useful for Oboe.js.
     */
    
    
    /**
     * Call a single function with the given arguments array.
     * Basically, a functional-style version of the OO-style Function#apply for 
     * when we don't care about the context ('this') of the call.
     * 
     * The order of arguments allows partial completion of the arguments array
     */
    function apply(args, fn) {
       return fn.apply(undefined, args);
    }
    
    /**
     * Define variable argument functions but cut out all that tedious messing about 
     * with the arguments object. Delivers the variable-length part of the arguments
     * list as an array.
     * 
     * Eg:
     * 
     * var myFunction = varArgs(
     *    function( fixedArgument, otherFixedArgument, variableNumberOfArguments ){
     *       console.log( variableNumberOfArguments );
     *    }
     * )
     * 
     * myFunction('a', 'b', 1, 2, 3); // logs [1,2,3]
     * 
     * var myOtherFunction = varArgs(function( variableNumberOfArguments ){
     *    console.log( variableNumberOfArguments );
     * })
     * 
     * myFunction(1, 2, 3); // logs [1,2,3]
     * 
     */
    function varArgs(fn){
    
       var numberOfFixedArguments = fn.length -1,
           slice = Array.prototype.slice;          
             
                       
       if( numberOfFixedArguments == 0 ) {
          // an optimised case for when there are no fixed args:   
       
          return function(){
             return fn.call(this, slice.call(arguments));
          }
          
       } else if( numberOfFixedArguments == 1 ) {
          // an optimised case for when there are is one fixed args:
       
          return function(){
             return fn.call(this, arguments[0], slice.call(arguments, 1));
          }
       }
       
       // general case   
    
       // we know how many arguments fn will always take. Create a
       // fixed-size array to hold that many, to be re-used on
       // every call to the returned function
       var argsHolder = Array(fn.length);   
                                 
       return function(){
                                
          for (var i = 0; i < numberOfFixedArguments; i++) {
             argsHolder[i] = arguments[i];         
          }
    
          argsHolder[numberOfFixedArguments] = 
             slice.call(arguments, numberOfFixedArguments);
                                    
          return fn.apply( this, argsHolder);      
       }       
    }
    
    
    /**
     * Swap the order of parameters to a binary function
     * 
     * A bit like this flip: http://zvon.org/other/haskell/Outputprelude/flip_f.html
     */
    function flip(fn){
       return function(a, b){
          return fn(b,a);
       }
    }
    
    
    /**
     * Create a function which is the intersection of two other functions.
     * 
     * Like the && operator, if the first is truthy, the second is never called,
     * otherwise the return value from the second is returned.
     */
    function lazyIntersection(fn1, fn2) {
    
       return function (param) {
                                                                  
          return fn1(param) && fn2(param);
       };   
    }
    
    /**
     * A function which does nothing
     */
    function noop(){}
    
    /**
     * A function which is always happy
     */
    function always(){return true}
    
    /**
     * Create a function which always returns the same
     * value
     * 
     * var return3 = functor(3);
     * 
     * return3() // gives 3
     * return3() // still gives 3
     * return3() // will always give 3
     */
    function functor(val){
       return function(){
          return val;
       }
    }
    
    /**
     * This file defines some loosely associated syntactic sugar for 
     * Javascript programming 
     */
    
    
    /**
     * Returns true if the given candidate is of type T
     */
    function isOfType(T, maybeSomething){
       return maybeSomething && maybeSomething.constructor === T;
    }
    
    var len = attr('length'),    
        isString = partialComplete(isOfType, String);
    
    /** 
     * I don't like saying this:
     * 
     *    foo !=== undefined
     *    
     * because of the double-negative. I find this:
     * 
     *    defined(foo)
     *    
     * easier to read.
     */ 
    function defined( value ) {
       return value !== undefined;
    }
    
    /**
     * Returns true if object o has a key named like every property in 
     * the properties array. Will give false if any are missing, or if o 
     * is not an object.
     */
    function hasAllProperties(fieldList, o) {
    
       return      (o instanceof Object) 
                &&
                   all(function (field) {         
                      return (field in o);         
                   }, fieldList);
    }
    /**
     * Like cons in Lisp
     */
    function cons(x, xs) {
       
       /* Internally lists are linked 2-element Javascript arrays.
              
          Ideally the return here would be Object.freeze([x,xs])
          so that bugs related to mutation are found fast.
          However, cons is right on the critical path for
          performance and this slows oboe-mark down by
          ~25%. Under theoretical future JS engines that freeze more
          efficiently (possibly even use immutability to
          run faster) this should be considered for
          restoration.
       */
       
       return [x,xs];
    }
    
    /**
     * The empty list
     */
    var emptyList = null,
    
    /**
     * Get the head of a list.
     * 
     * Ie, head(cons(a,b)) = a
     */
        head = attr(0),
    
    /**
     * Get the tail of a list.
     * 
     * Ie, tail(cons(a,b)) = b
     */
        tail = attr(1);
    
    
    /** 
     * Converts an array to a list 
     * 
     *    asList([a,b,c])
     * 
     * is equivalent to:
     *    
     *    cons(a, cons(b, cons(c, emptyList))) 
     **/
    function arrayAsList(inputArray){
    
       return reverseList( 
          inputArray.reduce(
             flip(cons),
             emptyList 
          )
       );
    }
    
    /**
     * A varargs version of arrayAsList. Works a bit like list
     * in LISP.
     * 
     *    list(a,b,c) 
     *    
     * is equivalent to:
     * 
     *    cons(a, cons(b, cons(c, emptyList)))
     */
    var list = varArgs(arrayAsList);
    
    /**
     * Convert a list back to a js native array
     */
    function listAsArray(list){
    
       return foldR( function(arraySoFar, listItem){
          
          arraySoFar.unshift(listItem);
          return arraySoFar;
               
       }, [], list );
       
    }
    
    /**
     * Map a function over a list 
     */
    function map(fn, list) {
    
       return list
                ? cons(fn(head(list)), map(fn,tail(list)))
                : emptyList
                ;
    }
    
    /**
     * foldR implementation. Reduce a list down to a single value.
     * 
     * @pram {Function} fn     (rightEval, curVal) -> result 
     */
    function foldR(fn, startValue, list) {
          
       return list 
                ? fn(foldR(fn, startValue, tail(list)), head(list))
                : startValue
                ;
    }
    
    /**
     * foldR implementation. Reduce a list down to a single value.
     * 
     * @pram {Function} fn     (rightEval, curVal) -> result 
     */
    function foldR1(fn, list) {
          
       return tail(list) 
                ? fn(foldR1(fn, tail(list)), head(list))
                : head(list)
                ;
    }
    
    
    /**
     * Return a list like the one given but with the first instance equal 
     * to item removed 
     */
    function without(list, test, removedFn) {
     
       return withoutInner(list, removedFn || noop);
     
       function withoutInner(subList, removedFn) {
          return subList  
             ?  ( test(head(subList)) 
                      ? (removedFn(head(subList)), tail(subList)) 
                      : cons(head(subList), withoutInner(tail(subList), removedFn))
                )
             : emptyList
             ;
       }               
    }
    
    /** 
     * Returns true if the given function holds for every item in 
     * the list, false otherwise 
     */
    function all(fn, list) {
       
       return !list || 
              ( fn(head(list)) && all(fn, tail(list)) );
    }
    
    /**
     * Call every function in a list of functions with the same arguments
     * 
     * This doesn't make any sense if we're doing pure functional because 
     * it doesn't return anything. Hence, this is only really useful if the
     * functions being called have side-effects. 
     */
    function applyEach(fnList, args) {
    
       if( fnList ) {  
          head(fnList).apply(null, args);
          
          applyEach(tail(fnList), args);
       }
    }
    
    /**
     * Reverse the order of a list
     */
    function reverseList(list){ 
    
       // js re-implementation of 3rd solution from:
       //    http://www.haskell.org/haskellwiki/99_questions/Solutions/5
       function reverseInner( list, reversedAlready ) {
          if( !list ) {
             return reversedAlready;
          }
          
          return reverseInner(tail(list), cons(head(list), reversedAlready))
       }
    
       return reverseInner(list, emptyList);
    }
    
    function first(test, list) {
       return   list &&
                   (test(head(list)) 
                      ? head(list) 
                      : first(test,tail(list))); 
    }
    
    /* 
       This is a slightly hacked-up browser only version of clarinet 
       
          *  some features removed to help keep browser Oboe under 
             the 5k micro-library limit
          *  plug directly into event bus
       
       For the original go here:
          https://github.com/dscape/clarinet
    
       We receive the events:
          STREAM_DATA
          STREAM_END
          
       We emit the events:
          SAX_KEY
          SAX_VALUE_OPEN
          SAX_VALUE_CLOSE      
          FAIL_EVENT      
     */
    
    function clarinet(eventBus) {
      "use strict";
       
      var 
          // shortcut some events on the bus
          emitSaxKey           = eventBus(SAX_KEY).emit,
          emitValueOpen        = eventBus(SAX_VALUE_OPEN).emit,
          emitValueClose       = eventBus(SAX_VALUE_CLOSE).emit,
          emitFail             = eventBus(FAIL_EVENT).emit,
                  
          MAX_BUFFER_LENGTH = 64 * 1024
      ,   stringTokenPattern = /[\\"\n]/g
      ,   _n = 0
      
          // states
      ,   BEGIN                = _n++
      ,   VALUE                = _n++ // general stuff
      ,   OPEN_OBJECT          = _n++ // {
      ,   CLOSE_OBJECT         = _n++ // }
      ,   OPEN_ARRAY           = _n++ // [
      ,   CLOSE_ARRAY          = _n++ // ]
      ,   STRING               = _n++ // ""
      ,   OPEN_KEY             = _n++ // , "a"
      ,   CLOSE_KEY            = _n++ // :
      ,   TRUE                 = _n++ // r
      ,   TRUE2                = _n++ // u
      ,   TRUE3                = _n++ // e
      ,   FALSE                = _n++ // a
      ,   FALSE2               = _n++ // l
      ,   FALSE3               = _n++ // s
      ,   FALSE4               = _n++ // e
      ,   NULL                 = _n++ // u
      ,   NULL2                = _n++ // l
      ,   NULL3                = _n++ // l
      ,   NUMBER_DECIMAL_POINT = _n++ // .
      ,   NUMBER_DIGIT         = _n   // [0-9]
    
          // setup initial parser values
      ,   bufferCheckPosition  = MAX_BUFFER_LENGTH
      ,   latestError                
      ,   c                    
      ,   p                    
      ,   textNode             = undefined
      ,   numberNode           = ""     
      ,   slashed              = false
      ,   closed               = false
      ,   state                = BEGIN
      ,   stack                = []
      ,   unicodeS             = null
      ,   unicodeI             = 0
      ,   depth                = 0
      ,   position             = 0
      ,   column               = 0  //mostly for error reporting
      ,   line                 = 1
      ;
    
      function checkBufferLength () {
         
        var maxActual = 0;
         
        if (textNode !== undefined && textNode.length > MAX_BUFFER_LENGTH) {
          emitError("Max buffer length exceeded: textNode");
          maxActual = Math.max(maxActual, textNode.length);
        }
        if (numberNode.length > MAX_BUFFER_LENGTH) {
          emitError("Max buffer length exceeded: numberNode");
          maxActual = Math.max(maxActual, numberNode.length);
        }
         
        bufferCheckPosition = (MAX_BUFFER_LENGTH - maxActual)
                                   + position;
      }
    
      eventBus(STREAM_DATA).on(handleData);
    
       /* At the end of the http content close the clarinet 
        This will provide an error if the total content provided was not 
        valid json, ie if not all arrays, objects and Strings closed properly */
      eventBus(STREAM_END).on(handleStreamEnd);   
    
      function emitError (errorString) {
         if (textNode !== undefined) {
            emitValueOpen(textNode);
            emitValueClose();
            textNode = undefined;
         }
    
         latestError = Error(errorString + "\nLn: "+line+
                                           "\nCol: "+column+
                                           "\nChr: "+c);
         
         emitFail(errorReport(undefined, undefined, latestError));
      }
    
      function handleStreamEnd() {
        if( state == BEGIN ) {
          // Handle the case where the stream closes without ever receiving
          // any input. This isn't an error - response bodies can be blank,
          // particularly for 204 http responses
          
          // Because of how Oboe is currently implemented, we parse a
          // completely empty stream as containing an empty object.
          // This is because Oboe's done event is only fired when the
          // root object of the JSON stream closes.
          
          // This should be decoupled and attached instead to the input stream
          // from the http (or whatever) resource ending.
          // If this decoupling could happen the SAX parser could simply emit
          // zero events on a completely empty input.
          emitValueOpen({});
          emitValueClose();
    
          closed = true;
          return;
        }
      
        if (state !== VALUE || depth !== 0)
          emitError("Unexpected end");
     
        if (textNode !== undefined) {
          emitValueOpen(textNode);
          emitValueClose();
          textNode = undefined;
        }
         
        closed = true;
      }
    
      function whitespace(c){
         return c == '\r' || c == '\n' || c == ' ' || c == '\t';
      }
       
      function handleData (chunk) {
             
        // this used to throw the error but inside Oboe we will have already
        // gotten the error when it was emitted. The important thing is to
        // not continue with the parse.
        if (latestError)
          return;
          
        if (closed) {
           return emitError("Cannot write after close");
        }
    
        var i = 0;
        c = chunk[0]; 
    
        while (c) {
          if (i > 0) {
            p = c;
          }
          c = chunk[i++];
          if(!c) break;
    
          position ++;
          if (c == "\n") {
            line ++;
            column = 0;
          } else column ++;
          switch (state) {
    
            case BEGIN:
              if (c === "{") state = OPEN_OBJECT;
              else if (c === "[") state = OPEN_ARRAY;
              else if (!whitespace(c))
                return emitError("Non-whitespace before {[.");
            continue;
    
            case OPEN_KEY:
            case OPEN_OBJECT:
              if (whitespace(c)) continue;
              if(state === OPEN_KEY) stack.push(CLOSE_KEY);
              else {
                if(c === '}') {
                  emitValueOpen({});
                  emitValueClose();
                  state = stack.pop() || VALUE;
                  continue;
                } else  stack.push(CLOSE_OBJECT);
              }
              if(c === '"')
                 state = STRING;
              else
                 return emitError("Malformed object key should start with \" ");
            continue;
    
            case CLOSE_KEY:
            case CLOSE_OBJECT:
              if (whitespace(c)) continue;
    
              if(c===':') {
                if(state === CLOSE_OBJECT) {
                  stack.push(CLOSE_OBJECT);
    
                   if (textNode !== undefined) {
                      // was previously (in upstream Clarinet) one event
                      //  - object open came with the text of the first
                      emitValueOpen({});
                      emitSaxKey(textNode);
                      textNode = undefined;
                   }
                   depth++;
                } else {
                   if (textNode !== undefined) {
                      emitSaxKey(textNode);
                      textNode = undefined;
                   }
                }
                 state  = VALUE;
              } else if (c==='}') {
                 if (textNode !== undefined) {
                    emitValueOpen(textNode);
                    emitValueClose();
                    textNode = undefined;
                 }
                 emitValueClose();
                depth--;
                state = stack.pop() || VALUE;
              } else if(c===',') {
                if(state === CLOSE_OBJECT)
                  stack.push(CLOSE_OBJECT);
                 if (textNode !== undefined) {
                    emitValueOpen(textNode);
                    emitValueClose();
                    textNode = undefined;
                 }
                 state  = OPEN_KEY;
              } else 
                 return emitError('Bad object');
            continue;
    
            case OPEN_ARRAY: // after an array there always a value
            case VALUE:
              if (whitespace(c)) continue;
              if(state===OPEN_ARRAY) {
                emitValueOpen([]);
                depth++;             
                state = VALUE;
                if(c === ']') {
                  emitValueClose();
                  depth--;
                  state = stack.pop() || VALUE;
                  continue;
                } else {
                  stack.push(CLOSE_ARRAY);
                }
              }
                   if(c === '"') state = STRING;
              else if(c === '{') state = OPEN_OBJECT;
              else if(c === '[') state = OPEN_ARRAY;
              else if(c === 't') state = TRUE;
              else if(c === 'f') state = FALSE;
              else if(c === 'n') state = NULL;
              else if(c === '-') { // keep and continue
                numberNode += c;
              } else if(c==='0') {
                numberNode += c;
                state = NUMBER_DIGIT;
              } else if('123456789'.indexOf(c) !== -1) {
                numberNode += c;
                state = NUMBER_DIGIT;
              } else               
                return emitError("Bad value");
            continue;
    
            case CLOSE_ARRAY:
              if(c===',') {
                stack.push(CLOSE_ARRAY);
                 if (textNode !== undefined) {
                    emitValueOpen(textNode);
                    emitValueClose();
                    textNode = undefined;
                 }
                 state  = VALUE;
              } else if (c===']') {
                 if (textNode !== undefined) {
                    emitValueOpen(textNode);
                    emitValueClose();
                    textNode = undefined;
                 }
                 emitValueClose();
                depth--;
                state = stack.pop() || VALUE;
              } else if (whitespace(c))
                  continue;
              else 
                 return emitError('Bad array');
            continue;
    
            case STRING:
              if (textNode === undefined) {
                  textNode = "";
              }
    
              // thanks thejh, this is an about 50% performance improvement.
              var starti              = i-1;
               
              STRING_BIGLOOP: while (true) {
    
                // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
                while (unicodeI > 0) {
                  unicodeS += c;
                  c = chunk.charAt(i++);
                  if (unicodeI === 4) {
                    // TODO this might be slow? well, probably not used too often anyway
                    textNode += String.fromCharCode(parseInt(unicodeS, 16));
                    unicodeI = 0;
                    starti = i-1;
                  } else {
                    unicodeI++;
                  }
                  // we can just break here: no stuff we skipped that still has to be sliced out or so
                  if (!c) break STRING_BIGLOOP;
                }
                if (c === '"' && !slashed) {
                  state = stack.pop() || VALUE;
                  textNode += chunk.substring(starti, i-1);
                  break;
                }
                if (c === '\\' && !slashed) {
                  slashed = true;
                  textNode += chunk.substring(starti, i-1);
                   c = chunk.charAt(i++);
                  if (!c) break;
                }
                if (slashed) {
                  slashed = false;
                       if (c === 'n') { textNode += '\n'; }
                  else if (c === 'r') { textNode += '\r'; }
                  else if (c === 't') { textNode += '\t'; }
                  else if (c === 'f') { textNode += '\f'; }
                  else if (c === 'b') { textNode += '\b'; }
                  else if (c === 'u') {
                    // \uxxxx. meh!
                    unicodeI = 1;
                    unicodeS = '';
                  } else {
                    textNode += c;
                  }
                  c = chunk.charAt(i++);
                  starti = i-1;
                  if (!c) break;
                  else continue;
                }
    
                stringTokenPattern.lastIndex = i;
                var reResult = stringTokenPattern.exec(chunk);
                if (!reResult) {
                  i = chunk.length+1;
                  textNode += chunk.substring(starti, i-1);
                  break;
                }
                i = reResult.index+1;
                c = chunk.charAt(reResult.index);
                if (!c) {
                  textNode += chunk.substring(starti, i-1);
                  break;
                }
              }
            continue;
    
            case TRUE:
              if (!c)  continue; // strange buffers
              if (c==='r') state = TRUE2;
              else
                 return emitError( 'Invalid true started with t'+ c);
            continue;
    
            case TRUE2:
              if (!c)  continue;
              if (c==='u') state = TRUE3;
              else
                 return emitError('Invalid true started with tr'+ c);
            continue;
    
            case TRUE3:
              if (!c) continue;
              if(c==='e') {
                emitValueOpen(true);
                emitValueClose();
                state = stack.pop() || VALUE;
              } else
                 return emitError('Invalid true started with tru'+ c);
            continue;
    
            case FALSE:
              if (!c)  continue;
              if (c==='a') state = FALSE2;
              else
                 return emitError('Invalid false started with f'+ c);
            continue;
    
            case FALSE2:
              if (!c)  continue;
              if (c==='l') state = FALSE3;
              else
                 return emitError('Invalid false started with fa'+ c);
            continue;
    
            case FALSE3:
              if (!c)  continue;
              if (c==='s') state = FALSE4;
              else
                 return emitError('Invalid false started with fal'+ c);
            continue;
    
            case FALSE4:
              if (!c)  continue;
              if (c==='e') {
                emitValueOpen(false);
                emitValueClose();
                state = stack.pop() || VALUE;
              } else
                 return emitError('Invalid false started with fals'+ c);
            continue;
    
            case NULL:
              if (!c)  continue;
              if (c==='u') state = NULL2;
              else
                 return emitError('Invalid null started with n'+ c);
            continue;
    
            case NULL2:
              if (!c)  continue;
              if (c==='l') state = NULL3;
              else
                 return emitError('Invalid null started with nu'+ c);
            continue;
    
            case NULL3:
              if (!c) continue;
              if(c==='l') {
                emitValueOpen(null);
                emitValueClose();
                state = stack.pop() || VALUE;
              } else 
                 return emitError('Invalid null started with nul'+ c);
            continue;
    
            case NUMBER_DECIMAL_POINT:
              if(c==='.') {
                numberNode += c;
                state       = NUMBER_DIGIT;
              } else 
                 return emitError('Leading zero not followed by .');
            continue;
    
            case NUMBER_DIGIT:
              if('0123456789'.indexOf(c) !== -1) numberNode += c;
              else if (c==='.') {
                if(numberNode.indexOf('.')!==-1)
                   return emitError('Invalid number has two dots');
                numberNode += c;
              } else if (c==='e' || c==='E') {
                if(numberNode.indexOf('e')!==-1 ||
                   numberNode.indexOf('E')!==-1 )
                   return emitError('Invalid number has two exponential');
                numberNode += c;
              } else if (c==="+" || c==="-") {
                if(!(p==='e' || p==='E'))
                   return emitError('Invalid symbol in number');
                numberNode += c;
              } else {
                if (numberNode) {
                  emitValueOpen(parseFloat(numberNode));
                  emitValueClose();
                  numberNode = "";
                }
                i--; // go back one
                state = stack.pop() || VALUE;
              }
            continue;
    
            default:
              return emitError("Unknown state: " + state);
          }
        }
        if (position >= bufferCheckPosition)
          checkBufferLength();
      }
    }
    
    
    /** 
     * A bridge used to assign stateless functions to listen to clarinet.
     * 
     * As well as the parameter from clarinet, each callback will also be passed
     * the result of the last callback.
     * 
     * This may also be used to clear all listeners by assigning zero handlers:
     * 
     *    ascentManager( clarinet, {} )
     */
    function ascentManager(oboeBus, handlers){
       "use strict";
       
       var listenerId = {},
           ascent;
    
       function stateAfter(handler) {
          return function(param){
             ascent = handler( ascent, param);
          }
       }
       
       for( var eventName in handlers ) {
    
          oboeBus(eventName).on(stateAfter(handlers[eventName]), listenerId);
       }
       
       oboeBus(NODE_SWAP).on(function(newNode) {
          
          var oldHead = head(ascent),
              key = keyOf(oldHead),
              ancestors = tail(ascent),
              parentNode;
    
          if( ancestors ) {
             parentNode = nodeOf(head(ancestors));
             parentNode[key] = newNode;
          }
       });
    
       oboeBus(NODE_DROP).on(function() {
    
          var oldHead = head(ascent),
              key = keyOf(oldHead),
              ancestors = tail(ascent),
              parentNode;
    
          if( ancestors ) {
             parentNode = nodeOf(head(ancestors));
     
             delete parentNode[key];
          }
       });
    
       oboeBus(ABORTING).on(function(){
          
          for( var eventName in handlers ) {
             oboeBus(eventName).un(listenerId);
          }
       });   
    }
    
    // based on gist https://gist.github.com/monsur/706839
    
    /**
     * XmlHttpRequest's getAllResponseHeaders() method returns a string of response
     * headers according to the format described here:
     * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method
     * This method parses that string into a user-friendly key/value pair object.
     */
    function parseResponseHeaders(headerStr) {
       var headers = {};
       
       headerStr && headerStr.split('\u000d\u000a')
          .forEach(function(headerPair){
       
             // Can't use split() here because it does the wrong thing
             // if the header value has the string ": " in it.
             var index = headerPair.indexOf('\u003a\u0020');
             
             headers[headerPair.substring(0, index)] 
                         = headerPair.substring(index + 2);
          });
       
       return headers;
    }
    
    /**
     * Detect if a given URL is cross-origin in the scope of the
     * current page.
     * 
     * Browser only (since cross-origin has no meaning in Node.js)
     *
     * @param {Object} pageLocation - as in window.location
     * @param {Object} ajaxHost - an object like window.location describing the 
     *    origin of the url that we want to ajax in
     */
    function isCrossOrigin(pageLocation, ajaxHost) {
    
       /*
        * NB: defaultPort only knows http and https.
        * Returns undefined otherwise.
        */
       function defaultPort(protocol) {
          return {'http:':80, 'https:':443}[protocol];
       }
       
       function portOf(location) {
          // pageLocation should always have a protocol. ajaxHost if no port or
          // protocol is specified, should use the port of the containing page
          
          return location.port || defaultPort(location.protocol||pageLocation.protocol);
       }
    
       // if ajaxHost doesn't give a domain, port is the same as pageLocation
       // it can't give a protocol but not a domain
       // it can't give a port but not a domain
       
       return !!(  (ajaxHost.protocol  && (ajaxHost.protocol  != pageLocation.protocol)) ||
                   (ajaxHost.host      && (ajaxHost.host      != pageLocation.host))     ||
                   (ajaxHost.host      && (portOf(ajaxHost) != portOf(pageLocation)))
              );
    }
    
    /* turn any url into an object like window.location */
    function parseUrlOrigin(url) {
       // url could be domain-relative
       // url could give a domain
    
       // cross origin means:
       //    same domain
       //    same port
       //    some protocol
       // so, same everything up to the first (single) slash 
       // if such is given
       //
       // can ignore everything after that   
       
       var URL_HOST_PATTERN = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/,
    
             // if no match, use an empty array so that
             // subexpressions 1,2,3 are all undefined
             // and will ultimately return all empty
             // strings as the parse result:
           urlHostMatch = URL_HOST_PATTERN.exec(url) || [];
       
       return {
          protocol:   urlHostMatch[1] || '',
          host:       urlHostMatch[2] || '',
          port:       urlHostMatch[3] || ''
       };
    }
    
    function httpTransport(){
       return new XMLHttpRequest();
    }
    
    /**
     * A wrapper around the browser XmlHttpRequest object that raises an 
     * event whenever a new part of the response is available.
     * 
     * In older browsers progressive reading is impossible so all the 
     * content is given in a single call. For newer ones several events
     * should be raised, allowing progressive interpretation of the response.
     *      
     * @param {Function} oboeBus an event bus local to this Oboe instance
     * @param {XMLHttpRequest} xhr the xhr to use as the transport. Under normal
     *          operation, will have been created using httpTransport() above
     *          but for tests a stub can be provided instead.
     * @param {String} method one of 'GET' 'POST' 'PUT' 'PATCH' 'DELETE'
     * @param {String} url the url to make a request to
     * @param {String|Null} data some content to be sent with the request.
     *                      Only valid if method is POST or PUT.
     * @param {Object} [headers] the http request headers to send
     * @param {boolean} withCredentials the XHR withCredentials property will be
     *    set to this value
     */  
    function streamingHttp(oboeBus, xhr, method, url, data, headers, withCredentials) {
               
       "use strict";
       
       var emitStreamData = oboeBus(STREAM_DATA).emit,
           emitFail       = oboeBus(FAIL_EVENT).emit,
           numberOfCharsAlreadyGivenToCallback = 0,
           stillToSendStartEvent = true;
    
       // When an ABORTING message is put on the event bus abort 
       // the ajax request         
       oboeBus( ABORTING ).on( function(){
      
          // if we keep the onreadystatechange while aborting the XHR gives 
          // a callback like a successful call so first remove this listener
          // by assigning null:
          xhr.onreadystatechange = null;
                
          xhr.abort();
       });
    
       /** 
        * Handle input from the underlying xhr: either a state change,
        * the progress event or the request being complete.
        */
       function handleProgress() {
                            
          var textSoFar = xhr.responseText,
              newText = textSoFar.substr(numberOfCharsAlreadyGivenToCallback);
          
          
          /* Raise the event for new text.
          
             On older browsers, the new text is the whole response. 
             On newer/better ones, the fragment part that we got since 
             last progress. */
             
          if( newText ) {
             emitStreamData( newText );
          } 
    
          numberOfCharsAlreadyGivenToCallback = len(textSoFar);
       }
       
       
       if('onprogress' in xhr){  // detect browser support for progressive delivery
          xhr.onprogress = handleProgress;
       }
          
       xhr.onreadystatechange = function() {
    
          function sendStartIfNotAlready() {
             // Internet Explorer is very unreliable as to when xhr.status etc can
             // be read so has to be protected with try/catch and tried again on 
             // the next readyState if it fails
             try{
                stillToSendStartEvent && oboeBus( HTTP_START ).emit(
                   xhr.status,
                   parseResponseHeaders(xhr.getAllResponseHeaders()) );
                stillToSendStartEvent = false;
             } catch(e){/* do nothing, will try again on next readyState*/}
          }
          
          switch( xhr.readyState ) {
                   
             case 2: // HEADERS_RECEIVED
             case 3: // LOADING
                return sendStartIfNotAlready();
                
             case 4: // DONE
                sendStartIfNotAlready(); // if xhr.status hasn't been available yet, it must be NOW, huh IE?
                
                // is this a 2xx http code?
                var successful = String(xhr.status)[0] == 2;
                
                if( successful ) {
                   // In Chrome 29 (not 28) no onprogress is emitted when a response
                   // is complete before the onload. We need to always do handleInput
                   // in case we get the load but have not had a final progress event.
                   // This looks like a bug and may change in future but let's take
                   // the safest approach and assume we might not have received a 
                   // progress event for each part of the response
                   handleProgress();
                   
                   oboeBus(STREAM_END).emit();
                } else {
    
                   emitFail( errorReport(
                      xhr.status, 
                      xhr.responseText
                   ));
                }
          }
       };
       
       try{
       
          xhr.open(method, url, true);
       
          for( var headerName in headers ){
             xhr.setRequestHeader(headerName, headers[headerName]);
          }
          
          if( !isCrossOrigin(window.location, parseUrlOrigin(url)) ) {
             xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          }
    
          xhr.withCredentials = withCredentials;
          
          xhr.send(data);
          
       } catch( e ) {
          
          // To keep a consistent interface with Node, we can't emit an event here.
          // Node's streaming http adaptor receives the error as an asynchronous
          // event rather than as an exception. If we emitted now, the Oboe user
          // has had no chance to add a .fail listener so there is no way
          // the event could be useful. For both these reasons defer the
          // firing to the next JS frame.  
          window.setTimeout(
             partialComplete(emitFail, errorReport(undefined, undefined, e))
          ,  0
          );
       }            
    }
    
    var jsonPathSyntax = (function() {
     
       var
       
       /** 
        * Export a regular expression as a simple function by exposing just 
        * the Regex#exec. This allows regex tests to be used under the same 
        * interface as differently implemented tests, or for a user of the
        * tests to not concern themselves with their implementation as regular
        * expressions.
        * 
        * This could also be expressed point-free as:
        *   Function.prototype.bind.bind(RegExp.prototype.exec),
        *   
        * But that's far too confusing! (and not even smaller once minified 
        * and gzipped)
        */
           regexDescriptor = function regexDescriptor(regex) {
                return regex.exec.bind(regex);
           }
           
       /**
        * Join several regular expressions and express as a function.
        * This allows the token patterns to reuse component regular expressions
        * instead of being expressed in full using huge and confusing regular
        * expressions.
        */       
       ,   jsonPathClause = varArgs(function( componentRegexes ) {
    
                // The regular expressions all start with ^ because we 
                // only want to find matches at the start of the 
                // JSONPath fragment we are inspecting           
                componentRegexes.unshift(/^/);
                
                return   regexDescriptor(
                            RegExp(
                               componentRegexes.map(attr('source')).join('')
                            )
                         );
           })
           
       ,   possiblyCapturing =           /(\$?)/
       ,   namedNode =                   /([\w-_]+|\*)/
       ,   namePlaceholder =             /()/
       ,   nodeInArrayNotation =         /\["([^"]+)"\]/
       ,   numberedNodeInArrayNotation = /\[(\d+|\*)\]/
       ,   fieldList =                      /{([\w ]*?)}/
       ,   optionalFieldList =           /(?:{([\w ]*?)})?/
        
    
           //   foo or *                  
       ,   jsonPathNamedNodeInObjectNotation   = jsonPathClause( 
                                                    possiblyCapturing, 
                                                    namedNode, 
                                                    optionalFieldList
                                                 )
                                                 
           //   ["foo"]   
       ,   jsonPathNamedNodeInArrayNotation    = jsonPathClause( 
                                                    possiblyCapturing, 
                                                    nodeInArrayNotation, 
                                                    optionalFieldList
                                                 )  
    
           //   [2] or [*]       
       ,   jsonPathNumberedNodeInArrayNotation = jsonPathClause( 
                                                    possiblyCapturing, 
                                                    numberedNodeInArrayNotation, 
                                                    optionalFieldList
                                                 )
    
           //   {a b c}      
       ,   jsonPathPureDuckTyping              = jsonPathClause( 
                                                    possiblyCapturing, 
                                                    namePlaceholder, 
                                                    fieldList
                                                 )
       
           //   ..
       ,   jsonPathDoubleDot                   = jsonPathClause(/\.\./)                  
       
           //   .
       ,   jsonPathDot                         = jsonPathClause(/\./)                    
       
           //   !
       ,   jsonPathBang                        = jsonPathClause(
                                                    possiblyCapturing, 
                                                    /!/
                                                 )  
       
           //   nada!
       ,   emptyString                         = jsonPathClause(/$/)                     
       
       ;
       
      
       /* We export only a single function. When called, this function injects 
          into another function the descriptors from above.             
        */
       return function (fn){      
          return fn(      
             lazyUnion(
                jsonPathNamedNodeInObjectNotation
             ,  jsonPathNamedNodeInArrayNotation
             ,  jsonPathNumberedNodeInArrayNotation
             ,  jsonPathPureDuckTyping 
             )
          ,  jsonPathDoubleDot
          ,  jsonPathDot
          ,  jsonPathBang
          ,  emptyString 
          );
       }; 
    
    }());
    /**
     * Get a new key->node mapping
     * 
     * @param {String|Number} key
     * @param {Object|Array|String|Number|null} node a value found in the json
     */
    function namedNode(key, node) {
       return {key:key, node:node};
    }
    
    /** get the key of a namedNode */
    var keyOf = attr('key');
    
    /** get the node from a namedNode */
    var nodeOf = attr('node');
    /** 
     * This file provides various listeners which can be used to build up
     * a changing ascent based on the callbacks provided by Clarinet. It listens
     * to the low-level events from Clarinet and emits higher-level ones.
     *  
     * The building up is stateless so to track a JSON file
     * ascentManager.js is required to store the ascent state
     * between calls.
     */
    
    
    
    /** 
     * A special value to use in the path list to represent the path 'to' a root 
     * object (which doesn't really have any path). This prevents the need for 
     * special-casing detection of the root object and allows it to be treated 
     * like any other object. We might think of this as being similar to the 
     * 'unnamed root' domain ".", eg if I go to 
     * http://en.wikipedia.org./wiki/En/Main_page the dot after 'org' deliminates 
     * the unnamed root of the DNS.
     * 
     * This is kept as an object to take advantage that in Javascript's OO objects 
     * are guaranteed to be distinct, therefore no other object can possibly clash 
     * with this one. Strings, numbers etc provide no such guarantee. 
     **/
    var ROOT_PATH = {};
    
    
    /**
     * Create a new set of handlers for clarinet's events, bound to the emit 
     * function given.  
     */ 
    function incrementalContentBuilder( oboeBus ) {
    
       var emitNodeOpened = oboeBus(NODE_OPENED).emit,
           emitNodeClosed = oboeBus(NODE_CLOSED).emit,
           emitRootOpened = oboeBus(ROOT_PATH_FOUND).emit,
           emitRootClosed = oboeBus(ROOT_NODE_FOUND).emit;
    
       function arrayIndicesAreKeys( possiblyInconsistentAscent, newDeepestNode) {
       
          /* for values in arrays we aren't pre-warned of the coming paths 
             (Clarinet gives no call to onkey like it does for values in objects) 
             so if we are in an array we need to create this path ourselves. The 
             key will be len(parentNode) because array keys are always sequential 
             numbers. */
    
          var parentNode = nodeOf( head( possiblyInconsistentAscent));
          
          return      isOfType( Array, parentNode)
                   ?
                      keyFound(  possiblyInconsistentAscent, 
                                  len(parentNode), 
                                  newDeepestNode
                      )
                   :  
                      // nothing needed, return unchanged
                      possiblyInconsistentAscent 
                   ;
       }
                     
       function nodeOpened( ascent, newDeepestNode ) {
          
          if( !ascent ) {
             // we discovered the root node,         
             emitRootOpened( newDeepestNode);
                        
             return keyFound( ascent, ROOT_PATH, newDeepestNode);         
          }
    
          // we discovered a non-root node
                     
          var arrayConsistentAscent  = arrayIndicesAreKeys( ascent, newDeepestNode),      
              ancestorBranches       = tail( arrayConsistentAscent),
              previouslyUnmappedName = keyOf( head( arrayConsistentAscent));
              
          appendBuiltContent( 
             ancestorBranches, 
             previouslyUnmappedName, 
             newDeepestNode 
          );
                                                                                                             
          return cons( 
                   namedNode( previouslyUnmappedName, newDeepestNode ), 
                   ancestorBranches
          );                                                                          
       }
    
    
       /**
        * Add a new value to the object we are building up to represent the
        * parsed JSON
        */
       function appendBuiltContent( ancestorBranches, key, node ){
         
          nodeOf( head( ancestorBranches))[key] = node;
       }
    
         
       /**
        * For when we find a new key in the json.
        * 
        * @param {String|Number|Object} newDeepestName the key. If we are in an 
        *    array will be a number, otherwise a string. May take the special 
        *    value ROOT_PATH if the root node has just been found
        *    
        * @param {String|Number|Object|Array|Null|undefined} [maybeNewDeepestNode] 
        *    usually this won't be known so can be undefined. Can't use null 
        *    to represent unknown because null is a valid value in JSON
        **/  
       function keyFound(ascent, newDeepestName, maybeNewDeepestNode) {
    
          if( ascent ) { // if not root
          
             // If we have the key but (unless adding to an array) no known value
             // yet. Put that key in the output but against no defined value:      
             appendBuiltContent( ascent, newDeepestName, maybeNewDeepestNode );
          }
       
          var ascentWithNewPath = cons( 
                                     namedNode( newDeepestName, 
                                                maybeNewDeepestNode), 
                                     ascent
                                  );
    
          emitNodeOpened( ascentWithNewPath);
     
          return ascentWithNewPath;
       }
    
    
       /**
        * For when the current node ends.
        */
       function nodeClosed( ascent ) {
    
          emitNodeClosed( ascent);
           
          return tail( ascent) ||
                 // If there are no nodes left in the ascent the root node
                 // just closed. Emit a special event for this: 
                 emitRootClosed(nodeOf(head(ascent)));
       }      
    
       var contentBuilderHandlers = {};
       contentBuilderHandlers[SAX_VALUE_OPEN] = nodeOpened;
       contentBuilderHandlers[SAX_VALUE_CLOSE] = nodeClosed;
       contentBuilderHandlers[SAX_KEY] = keyFound;
       return contentBuilderHandlers;
    }
    
    /**
     * The jsonPath evaluator compiler used for Oboe.js. 
     * 
     * One function is exposed. This function takes a String JSONPath spec and 
     * returns a function to test candidate ascents for matches.
     * 
     *  String jsonPath -> (List ascent) -> Boolean|Object
     *
     * This file is coded in a pure functional style. That is, no function has 
     * side effects, every function evaluates to the same value for the same 
     * arguments and no variables are reassigned.
     */  
    // the call to jsonPathSyntax injects the token syntaxes that are needed 
    // inside the compiler
    var jsonPathCompiler = jsonPathSyntax(function (pathNodeSyntax, 
                                                    doubleDotSyntax, 
                                                    dotSyntax,
                                                    bangSyntax,
                                                    emptySyntax ) {
    
       var CAPTURING_INDEX = 1;
       var NAME_INDEX = 2;
       var FIELD_LIST_INDEX = 3;
    
       var headKey  = compose2(keyOf, head),
           headNode = compose2(nodeOf, head);
                       
       /**
        * Create an evaluator function for a named path node, expressed in the
        * JSONPath like:
        *    foo
        *    ["bar"]
        *    [2]   
        */
       function nameClause(previousExpr, detection ) {
         
          var name = detection[NAME_INDEX],
                
              matchesName = ( !name || name == '*' ) 
                               ?  always
                               :  function(ascent){return headKey(ascent) == name};
         
    
          return lazyIntersection(matchesName, previousExpr);
       }
    
       /**
        * Create an evaluator function for a a duck-typed node, expressed like:
        * 
        *    {spin, taste, colour}
        *    .particle{spin, taste, colour}
        *    *{spin, taste, colour}
        */
       function duckTypeClause(previousExpr, detection) {
    
          var fieldListStr = detection[FIELD_LIST_INDEX];
    
          if (!fieldListStr) 
             return previousExpr; // don't wrap at all, return given expr as-is      
    
          var hasAllrequiredFields = partialComplete(
                                        hasAllProperties, 
                                        arrayAsList(fieldListStr.split(/\W+/))
                                     ),
                                     
              isMatch =  compose2( 
                            hasAllrequiredFields, 
                            headNode
                         );
    
          return lazyIntersection(isMatch, previousExpr);
       }
    
       /**
        * Expression for $, returns the evaluator function
        */
       function capture( previousExpr, detection ) {
    
          // extract meaning from the detection      
          var capturing = !!detection[CAPTURING_INDEX];
    
          if (!capturing)          
             return previousExpr; // don't wrap at all, return given expr as-is      
          
          return lazyIntersection(previousExpr, head);
                
       }            
          
       /**
        * Create an evaluator function that moves onto the next item on the 
        * lists. This function is the place where the logic to move up a 
        * level in the ascent exists. 
        * 
        * Eg, for JSONPath ".foo" we need skip1(nameClause(always, [,'foo']))
        */
       function skip1(previousExpr) {
       
       
          if( previousExpr == always ) {
             /* If there is no previous expression this consume command 
                is at the start of the jsonPath.
                Since JSONPath specifies what we'd like to find but not 
                necessarily everything leading down to it, when running
                out of JSONPath to check against we default to true */
             return always;
          }
    
          /** return true if the ascent we have contains only the JSON root,
           *  false otherwise
           */
          function notAtRoot(ascent){
             return headKey(ascent) != ROOT_PATH;
          }
          
          return lazyIntersection(
                   /* If we're already at the root but there are more 
                      expressions to satisfy, can't consume any more. No match.
    
                      This check is why none of the other exprs have to be able 
                      to handle empty lists; skip1 is the only evaluator that 
                      moves onto the next token and it refuses to do so once it 
                      reaches the last item in the list. */
                   notAtRoot,
                   
                   /* We are not at the root of the ascent yet.
                      Move to the next level of the ascent by handing only 
                      the tail to the previous expression */ 
                   compose2(previousExpr, tail) 
          );
                                                                                                                   
       }   
       
       /**
        * Create an evaluator function for the .. (double dot) token. Consumes
        * zero or more levels of the ascent, the fewest that are required to find
        * a match when given to previousExpr.
        */   
       function skipMany(previousExpr) {
    
          if( previousExpr == always ) {
             /* If there is no previous expression this consume command 
                is at the start of the jsonPath.
                Since JSONPath specifies what we'd like to find but not 
                necessarily everything leading down to it, when running
                out of JSONPath to check against we default to true */            
             return always;
          }
              
          var 
              // In JSONPath .. is equivalent to !.. so if .. reaches the root
              // the match has succeeded. Ie, we might write ..foo or !..foo
              // and both should match identically.
              terminalCaseWhenArrivingAtRoot = rootExpr(),
              terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr,
              recursiveCase = skip1(function(ascent) {
                 return cases(ascent);
              }),
    
              cases = lazyUnion(
                         terminalCaseWhenArrivingAtRoot
                      ,  terminalCaseWhenPreviousExpressionIsSatisfied
                      ,  recursiveCase  
                      );
          
          return cases;
       }      
       
       /**
        * Generate an evaluator for ! - matches only the root element of the json
        * and ignores any previous expressions since nothing may precede !. 
        */   
       function rootExpr() {
          
          return function(ascent){
             return headKey(ascent) == ROOT_PATH;
          };
       }   
             
       /**
        * Generate a statement wrapper to sit around the outermost 
        * clause evaluator.
        * 
        * Handles the case where the capturing is implicit because the JSONPath
        * did not contain a '$' by returning the last node.
        */   
       function statementExpr(lastClause) {
          
          return function(ascent) {
       
             // kick off the evaluation by passing through to the last clause
             var exprMatch = lastClause(ascent);
                                                         
             return exprMatch === true ? head(ascent) : exprMatch;
          };
       }      
                              
       /**
        * For when a token has been found in the JSONPath input.
        * Compiles the parser for that token and returns in combination with the
        * parser already generated.
        * 
        * @param {Function} exprs  a list of the clause evaluator generators for
        *                          the token that was found
        * @param {Function} parserGeneratedSoFar the parser already found
        * @param {Array} detection the match given by the regex engine when 
        *                          the feature was found
        */
       function expressionsReader( exprs, parserGeneratedSoFar, detection ) {
                         
          // if exprs is zero-length foldR will pass back the 
          // parserGeneratedSoFar as-is so we don't need to treat 
          // this as a special case
          
          return   foldR( 
                      function( parserGeneratedSoFar, expr ){
             
                         return expr(parserGeneratedSoFar, detection);
                      }, 
                      parserGeneratedSoFar, 
                      exprs
                   );                     
    
       }
    
       /** 
        *  If jsonPath matches the given detector function, creates a function which
        *  evaluates against every clause in the clauseEvaluatorGenerators. The
        *  created function is propagated to the onSuccess function, along with
        *  the remaining unparsed JSONPath substring.
        *  
        *  The intended use is to create a clauseMatcher by filling in
        *  the first two arguments, thus providing a function that knows
        *  some syntax to match and what kind of generator to create if it
        *  finds it. The parameter list once completed is:
        *  
        *    (jsonPath, parserGeneratedSoFar, onSuccess)
        *  
        *  onSuccess may be compileJsonPathToFunction, to recursively continue 
        *  parsing after finding a match or returnFoundParser to stop here.
        */
       function generateClauseReaderIfTokenFound (
         
                            tokenDetector, clauseEvaluatorGenerators,
                             
                            jsonPath, parserGeneratedSoFar, onSuccess) {
                            
          var detected = tokenDetector(jsonPath);
    
          if(detected) {
             var compiledParser = expressionsReader(
                                     clauseEvaluatorGenerators, 
                                     parserGeneratedSoFar, 
                                     detected
                                  ),
             
                 remainingUnparsedJsonPath = jsonPath.substr(len(detected[0]));                
                                   
             return onSuccess(remainingUnparsedJsonPath, compiledParser);
          }         
       }
                     
       /**
        * Partially completes generateClauseReaderIfTokenFound above. 
        */
       function clauseMatcher(tokenDetector, exprs) {
            
          return   partialComplete( 
                      generateClauseReaderIfTokenFound, 
                      tokenDetector, 
                      exprs 
                   );
       }
    
       /**
        * clauseForJsonPath is a function which attempts to match against 
        * several clause matchers in order until one matches. If non match the
        * jsonPath expression is invalid and an error is thrown.
        * 
        * The parameter list is the same as a single clauseMatcher:
        * 
        *    (jsonPath, parserGeneratedSoFar, onSuccess)
        */     
       var clauseForJsonPath = lazyUnion(
    
          clauseMatcher(pathNodeSyntax   , list( capture, 
                                                 duckTypeClause, 
                                                 nameClause, 
                                                 skip1 ))
                                                         
       ,  clauseMatcher(doubleDotSyntax  , list( skipMany))
           
           // dot is a separator only (like whitespace in other languages) but 
           // rather than make it a special case, use an empty list of 
           // expressions when this token is found
       ,  clauseMatcher(dotSyntax        , list() )  
                                                                                          
       ,  clauseMatcher(bangSyntax       , list( capture,
                                                 rootExpr))
                                                              
       ,  clauseMatcher(emptySyntax      , list( statementExpr))
       
       ,  function (jsonPath) {
             throw Error('"' + jsonPath + '" could not be tokenised')      
          }
       );
    
    
       /**
        * One of two possible values for the onSuccess argument of 
        * generateClauseReaderIfTokenFound.
        * 
        * When this function is used, generateClauseReaderIfTokenFound simply 
        * returns the compiledParser that it made, regardless of if there is 
        * any remaining jsonPath to be compiled.
        */
       function returnFoundParser(_remainingJsonPath, compiledParser){ 
          return compiledParser 
       }     
                  
       /**
        * Recursively compile a JSONPath expression.
        * 
        * This function serves as one of two possible values for the onSuccess 
        * argument of generateClauseReaderIfTokenFound, meaning continue to
        * recursively compile. Otherwise, returnFoundParser is given and
        * compilation terminates.
        */
       function compileJsonPathToFunction( uncompiledJsonPath, 
                                           parserGeneratedSoFar ) {
    
          /**
           * On finding a match, if there is remaining text to be compiled
           * we want to either continue parsing using a recursive call to 
           * compileJsonPathToFunction. Otherwise, we want to stop and return 
           * the parser that we have found so far.
           */
          var onFind =      uncompiledJsonPath
                         ?  compileJsonPathToFunction 
                         :  returnFoundParser;
                       
          return   clauseForJsonPath( 
                      uncompiledJsonPath, 
                      parserGeneratedSoFar, 
                      onFind
                   );                              
       }
    
       /**
        * This is the function that we expose to the rest of the library.
        */
       return function(jsonPath){
            
          try {
             // Kick off the recursive parsing of the jsonPath 
             return compileJsonPathToFunction(jsonPath, always);
             
          } catch( e ) {
             throw Error( 'Could not compile "' + jsonPath + 
                          '" because ' + e.message
             );
          }
       }
    
    });
    
    /**
     * A pub/sub which is responsible for a single event type. A
     * multi-event type event bus is created by pubSub by collecting
     * several of these.
     *
     * @param {String} eventType
     *    the name of the events managed by this singleEventPubSub
     * @param {singleEventPubSub} [newListener]
     *    place to notify of new listeners
     * @param {singleEventPubSub} [removeListener]
     *    place to notify of when listeners are removed
     */
    function singleEventPubSub(eventType, newListener, removeListener){
    
      /** we are optimised for emitting events over firing them.
       *  As well as the tuple list which stores event ids and
       *  listeners there is a list with just the listeners which
       *  can be iterated more quickly when we are emitting
       */
      var listenerTupleList,
          listenerList;
    
      function hasId(id){
        return function(tuple) {
          return tuple.id == id;
        };
      }
    
      return {
    
        /**
         * @param {Function} listener
         * @param {*} listenerId
         *    an id that this listener can later by removed by.
         *    Can be of any type, to be compared to other ids using ==
         */
        on:function( listener, listenerId ) {
    
          var tuple = {
            listener: listener
            ,  id:       listenerId || listener // when no id is given use the
            // listener function as the id
          };
    
          if( newListener ) {
            newListener.emit(eventType, listener, tuple.id);
          }
    
          listenerTupleList = cons( tuple,    listenerTupleList );
          listenerList      = cons( listener, listenerList      );
    
          return this; // chaining
        },
    
        emit:function () {
          applyEach( listenerList, arguments );
        },
    
        un: function( listenerId ) {
    
          var removed;
    
          listenerTupleList = without(
            listenerTupleList,
            hasId(listenerId),
            function(tuple){
              removed = tuple;
            }
          );
    
          if( removed ) {
            listenerList = without( listenerList, function(listener){
              return listener == removed.listener;
            });
    
            if( removeListener ) {
              removeListener.emit(eventType, removed.listener, removed.id);
            }
          }
        },
    
        listeners: function(){
          // differs from Node EventEmitter: returns list, not array
          return listenerList;
        },
    
        hasListener: function(listenerId){
          var test = listenerId? hasId(listenerId) : always;
    
          return defined(first( test, listenerTupleList));
        }
      };
    }
    
    /**
     * pubSub is a curried interface for listening to and emitting
     * events.
     *
     * If we get a bus:
     *
     *    var bus = pubSub();
     *
     * We can listen to event 'foo' like:
     *
     *    bus('foo').on(myCallback)
     *
     * And emit event foo like:
     *
     *    bus('foo').emit()
     *
     * or, with a parameter:
     *
     *    bus('foo').emit('bar')
     *
     * All functions can be cached and don't need to be
     * bound. Ie:
     *
     *    var fooEmitter = bus('foo').emit
     *    fooEmitter('bar');  // emit an event
     *    fooEmitter('baz');  // emit another
     *
     * There's also an uncurried[1] shortcut for .emit and .on:
     *
     *    bus.on('foo', callback)
     *    bus.emit('foo', 'bar')
     *
     * [1]: http://zvon.org/other/haskell/Outputprelude/uncurry_f.html
     */
    function pubSub(){
    
       var singles = {},
           newListener = newSingle('newListener'),
           removeListener = newSingle('removeListener');
    
       function newSingle(eventName) {
          return singles[eventName] = singleEventPubSub(
             eventName,
             newListener,
             removeListener
          );
       }
    
       /** pubSub instances are functions */
       function pubSubInstance( eventName ){
    
          return singles[eventName] || newSingle( eventName );
       }
    
       // add convenience EventEmitter-style uncurried form of 'emit' and 'on'
       ['emit', 'on', 'un'].forEach(function(methodName){
    
          pubSubInstance[methodName] = varArgs(function(eventName, parameters){
             apply( parameters, pubSubInstance( eventName )[methodName]);
          });
       });
    
       return pubSubInstance;
    }
    
    /**
     * This file declares some constants to use as names for event types.
     */
    
    var // the events which are never exported are kept as 
        // the smallest possible representation, in numbers:
        _S = 1,
    
        // fired whenever a new node starts in the JSON stream:
        NODE_OPENED     = _S++,
    
        // fired whenever a node closes in the JSON stream:
        NODE_CLOSED     = _S++,
    
        // called if a .node callback returns a value - 
        NODE_SWAP       = _S++,
        NODE_DROP       = _S++,
    
        FAIL_EVENT      = 'fail',
       
        ROOT_NODE_FOUND = _S++,
        ROOT_PATH_FOUND = _S++,
       
        HTTP_START      = 'start',
        STREAM_DATA     = 'data',
        STREAM_END      = 'end',
        ABORTING        = _S++,
    
        // SAX events butchered from Clarinet
        SAX_KEY          = _S++,
        SAX_VALUE_OPEN   = _S++,
        SAX_VALUE_CLOSE  = _S++;
        
    function errorReport(statusCode, body, error) {
       try{
          var jsonBody = JSON.parse(body);
       }catch(e){}
    
       return {
          statusCode:statusCode,
          body:body,
          jsonBody:jsonBody,
          thrown:error
       };
    }    
    
    /** 
     *  The pattern adaptor listens for newListener and removeListener
     *  events. When patterns are added or removed it compiles the JSONPath
     *  and wires them up.
     *  
     *  When nodes and paths are found it emits the fully-qualified match 
     *  events with parameters ready to ship to the outside world
     */
    
    function patternAdapter(oboeBus, jsonPathCompiler) {
    
       var predicateEventMap = {
          node:oboeBus(NODE_CLOSED)
       ,  path:oboeBus(NODE_OPENED)
       };
         
       function emitMatchingNode(emitMatch, node, ascent) {
             
          /* 
             We're now calling to the outside world where Lisp-style 
             lists will not be familiar. Convert to standard arrays. 
       
             Also, reverse the order because it is more common to 
             list paths "root to leaf" than "leaf to root"  */
          var descent     = reverseList(ascent);
                    
          emitMatch(
             node,
             
             // To make a path, strip off the last item which is the special
             // ROOT_PATH token for the 'path' to the root node          
             listAsArray(tail(map(keyOf,descent))),  // path
             listAsArray(map(nodeOf, descent))       // ancestors    
          );         
       }
    
       /* 
        * Set up the catching of events such as NODE_CLOSED and NODE_OPENED and, if 
        * matching the specified pattern, propagate to pattern-match events such as 
        * oboeBus('node:!')
        * 
        * 
        * 
        * @param {Function} predicateEvent 
        *          either oboeBus(NODE_CLOSED) or oboeBus(NODE_OPENED).
        * @param {Function} compiledJsonPath          
        */
       function addUnderlyingListener( fullEventName, predicateEvent, compiledJsonPath ){
       
          var emitMatch = oboeBus(fullEventName).emit;
       
          predicateEvent.on( function (ascent) {
    
             var maybeMatchingMapping = compiledJsonPath(ascent);
    
             /* Possible values for maybeMatchingMapping are now:
    
              false: 
              we did not match 
    
              an object/array/string/number/null: 
              we matched and have the node that matched.
              Because nulls are valid json values this can be null.
    
              undefined:
              we matched but don't have the matching node yet.
              ie, we know there is an upcoming node that matches but we 
              can't say anything else about it. 
              */
             if (maybeMatchingMapping !== false) {
    
                emitMatchingNode(
                   emitMatch, 
                   nodeOf(maybeMatchingMapping), 
                   ascent
                );
             }
          }, fullEventName);
         
          oboeBus('removeListener').on( function(removedEventName){
    
             // if the fully qualified match event listener is later removed, clean up 
             // by removing the underlying listener if it was the last using that pattern:
          
             if( removedEventName == fullEventName ) {
             
                if( !oboeBus(removedEventName).listeners(  )) {
                   predicateEvent.un( fullEventName );
                }
             }
          });   
       }
    
       oboeBus('newListener').on( function(fullEventName){
    
          var match = /(node|path):(.*)/.exec(fullEventName);
          
          if( match ) {
             var predicateEvent = predicateEventMap[match[1]];
                        
             if( !predicateEvent.hasListener( fullEventName) ) {  
                      
                addUnderlyingListener(
                   fullEventName,
                   predicateEvent, 
                   jsonPathCompiler( match[2] )
                );
             }
          }    
       })
    
    }
    
    /**
     * The instance API is the thing that is returned when oboe() is called.
     * it allows:
     *
     *    - listeners for various events to be added and removed
     *    - the http response header/headers to be read
     */
    function instanceApi(oboeBus, contentSource){
    
      var oboeApi,
          fullyQualifiedNamePattern = /^(node|path):./,
          rootNodeFinishedEvent = oboeBus(ROOT_NODE_FOUND),
          emitNodeDrop = oboeBus(NODE_DROP).emit,
          emitNodeSwap = oboeBus(NODE_SWAP).emit,
    
          /**
           * Add any kind of listener that the instance api exposes
           */
          addListener = varArgs(function( eventId, parameters ){
    
            if( oboeApi[eventId] ) {
    
              // for events added as .on(event, callback), if there is a
              // .event() equivalent with special behaviour , pass through
              // to that:
              apply(parameters, oboeApi[eventId]);
            } else {
    
              // we have a standard Node.js EventEmitter 2-argument call.
              // The first parameter is the listener.
              var event = oboeBus(eventId),
                  listener = parameters[0];
    
              if( fullyQualifiedNamePattern.test(eventId) ) {
    
                // allow fully-qualified node/path listeners
                // to be added
                addForgettableCallback(event, listener);
              } else  {
    
                // the event has no special handling, pass through
                // directly onto the event bus:
                event.on( listener);
              }
            }
    
            return oboeApi; // chaining
          }),
    
          /**
           * Remove any kind of listener that the instance api exposes
           */
          removeListener = function( eventId, p2, p3 ){
    
            if( eventId == 'done' ) {
    
              rootNodeFinishedEvent.un(p2);
    
            } else if( eventId == 'node' || eventId == 'path' ) {
    
              // allow removal of node and path
              oboeBus.un(eventId + ':' + p2, p3);
            } else {
    
              // we have a standard Node.js EventEmitter 2-argument call.
              // The second parameter is the listener. This may be a call
              // to remove a fully-qualified node/path listener but requires
              // no special handling
              var listener = p2;
    
              oboeBus(eventId).un(listener);
            }
    
            return oboeApi; // chaining
          };
    
      /**
       * Add a callback, wrapped in a try/catch so as to not break the
       * execution of Oboe if an exception is thrown (fail events are
       * fired instead)
       *
       * The callback is used as the listener id so that it can later be
       * removed using .un(callback)
       */
      function addProtectedCallback(eventName, callback) {
        oboeBus(eventName).on(protectedCallback(callback), callback);
        return oboeApi; // chaining
      }
    
      /**
       * Add a callback where, if .forget() is called during the callback's
       * execution, the callback will be de-registered
       */
      function addForgettableCallback(event, callback, listenerId) {
    
        // listenerId is optional and if not given, the original
        // callback will be used
        listenerId = listenerId || callback;
    
        var safeCallback = protectedCallback(callback);
    
        event.on( function() {
    
          var discard = false;
    
          oboeApi.forget = function(){
            discard = true;
          };
    
          apply( arguments, safeCallback );
    
          delete oboeApi.forget;
    
          if( discard ) {
            event.un(listenerId);
          }
        }, listenerId);
    
        return oboeApi; // chaining
      }
    
      /**
       *  wrap a callback so that if it throws, Oboe.js doesn't crash but instead
       *  throw the error in another event loop
       */
      function protectedCallback( callback ) {
        return function() {
          try{
            return callback.apply(oboeApi, arguments);
          }catch(e)  {
            setTimeout(function() {
              throw new Error(e.message);
            });
          }
        }
      }
    
      /**
       * Return the fully qualified event for when a pattern matches
       * either a node or a path
       *
       * @param type {String} either 'node' or 'path'
       */
      function fullyQualifiedPatternMatchEvent(type, pattern) {
        return oboeBus(type + ':' + pattern);
      }
    
      function wrapCallbackToSwapNodeIfSomethingReturned( callback ) {
        return function() {
          var returnValueFromCallback = callback.apply(this, arguments);
    
          if( defined(returnValueFromCallback) ) {
    
            if( returnValueFromCallback == oboe.drop ) {
              emitNodeDrop();
            } else {
              emitNodeSwap(returnValueFromCallback);
            }
          }
        }
      }
    
      function addSingleNodeOrPathListener(eventId, pattern, callback) {
    
        var effectiveCallback;
    
        if( eventId == 'node' ) {
          effectiveCallback = wrapCallbackToSwapNodeIfSomethingReturned(callback);
        } else {
          effectiveCallback = callback;
        }
    
        addForgettableCallback(
          fullyQualifiedPatternMatchEvent(eventId, pattern),
          effectiveCallback,
          callback
        );
      }
    
      /**
       * Add several listeners at a time, from a map
       */
      function addMultipleNodeOrPathListeners(eventId, listenerMap) {
    
        for( var pattern in listenerMap ) {
          addSingleNodeOrPathListener(eventId, pattern, listenerMap[pattern]);
        }
      }
    
      /**
       * implementation behind .onPath() and .onNode()
       */
      function addNodeOrPathListenerApi( eventId, jsonPathOrListenerMap, callback ){
    
        if( isString(jsonPathOrListenerMap) ) {
          addSingleNodeOrPathListener(eventId, jsonPathOrListenerMap, callback);
    
        } else {
          addMultipleNodeOrPathListeners(eventId, jsonPathOrListenerMap);
        }
    
        return oboeApi; // chaining
      }
    
    
      // some interface methods are only filled in after we receive
      // values and are noops before that:
      oboeBus(ROOT_PATH_FOUND).on( function(rootNode) {
        oboeApi.root = functor(rootNode);
      });
    
      /**
       * When content starts make the headers readable through the
       * instance API
       */
      oboeBus(HTTP_START).on( function(_statusCode, headers) {
    
        oboeApi.header =  function(name) {
          return name ? headers[name]
            : headers
          ;
        }
      });
    
      /**
       * Construct and return the public API of the Oboe instance to be
       * returned to the calling application
       */
      return oboeApi = {
        on             : addListener,
        addListener    : addListener,
        removeListener : removeListener,
        emit           : oboeBus.emit,
    
        node           : partialComplete(addNodeOrPathListenerApi, 'node'),
        path           : partialComplete(addNodeOrPathListenerApi, 'path'),
    
        done           : partialComplete(addForgettableCallback, rootNodeFinishedEvent),
        start          : partialComplete(addProtectedCallback, HTTP_START ),
    
        // fail doesn't use protectedCallback because
        // could lead to non-terminating loops
        fail           : oboeBus(FAIL_EVENT).on,
    
        // public api calling abort fires the ABORTING event
        abort          : oboeBus(ABORTING).emit,
    
        // initially return nothing for header and root
        header         : noop,
        root           : noop,
    
        source         : contentSource
      };
    }
    
    /**
     * This file sits just behind the API which is used to attain a new
     * Oboe instance. It creates the new components that are required
     * and introduces them to each other.
     */
    
    function wire (httpMethodName, contentSource, body, headers, withCredentials){
    
       var oboeBus = pubSub();
       
       // Wire the input stream in if we are given a content source.
       // This will usually be the case. If not, the instance created
       // will have to be passed content from an external source.
      
       if( contentSource ) {
    
          streamingHttp( oboeBus,
                         httpTransport(), 
                         httpMethodName,
                         contentSource,
                         body,
                         headers,
                         withCredentials
          );
       }
    
       clarinet(oboeBus);
    
       ascentManager(oboeBus, incrementalContentBuilder(oboeBus));
          
       patternAdapter(oboeBus, jsonPathCompiler);      
          
       return instanceApi(oboeBus, contentSource);
    }
    
    function applyDefaults( passthrough, url, httpMethodName, body, headers, withCredentials, cached ){
    
       headers = headers ?
          // Shallow-clone the headers array. This allows it to be
          // modified without side effects to the caller. We don't
          // want to change objects that the user passes in.
          JSON.parse(JSON.stringify(headers))
          : {};
    
       if( body ) {
          if( !isString(body) ) {
    
             // If the body is not a string, stringify it. This allows objects to
             // be given which will be sent as JSON.
             body = JSON.stringify(body);
    
             // Default Content-Type to JSON unless given otherwise.
             headers['Content-Type'] = headers['Content-Type'] || 'application/json';
          }
          headers['Content-Length'] = headers['Content-Length'] || body.length;
       } else {
          body = null;
       }
    
       // support cache busting like jQuery.ajax({cache:false})
       function modifiedUrl(baseUrl, cached) {
    
          if( cached === false ) {
    
             if( baseUrl.indexOf('?') == -1 ) {
                baseUrl += '?';
             } else {
                baseUrl += '&';
             }
    
             baseUrl += '_=' + new Date().getTime();
          }
          return baseUrl;
       }
    
       return passthrough( httpMethodName || 'GET', modifiedUrl(url, cached), body, headers, withCredentials || false );
    }
    
    // export public API
    function oboe(arg1) {
    
       // We use duck-typing to detect if the parameter given is a stream, with the
       // below list of parameters.
       // Unpipe and unshift would normally be present on a stream but this breaks
       // compatibility with Request streams.
       // See https://github.com/jimhigson/oboe.js/issues/65
       
       var nodeStreamMethodNames = list('resume', 'pause', 'pipe'),
           isStream = partialComplete(
                         hasAllProperties
                      ,  nodeStreamMethodNames
                      );
       
       if( arg1 ) {
          if (isStream(arg1) || isString(arg1)) {
    
             //  simple version for GETs. Signature is:
             //    oboe( url )
             //  or, under node:
             //    oboe( readableStream )
             return applyDefaults(
                wire,
                arg1 // url
             );
    
          } else {
    
             // method signature is:
             //    oboe({method:m, url:u, body:b, headers:{...}})
    
             return applyDefaults(
                wire,
                arg1.url,
                arg1.method,
                arg1.body,
                arg1.headers,
                arg1.withCredentials,
                arg1.cached
             );
             
          }
       } else {
          // wire up a no-AJAX, no-stream Oboe. Will have to have content 
          // fed in externally and using .emit.
          return wire();
       }
    }
    
    /* oboe.drop is a special value. If a node callback returns this value the
       parsed node is deleted from the JSON
     */
    oboe.drop = function() {
       return oboe.drop;
    };
    
    
       if ( typeof define === "function" && define.amd ) {
          define( "oboe", [], function () { return oboe; } );
       } else if (typeof exports === 'object') {
          module.exports = oboe;
       } else {
          window.oboe = oboe;
       }
    })((function(){
       // Access to the window object throws an exception in HTML5 web workers so
       // point it to "self" if it runs in a web worker
          try {
             return window;
          } catch (e) {
             return self;
          }
       }()), Object, Array, Error, JSON);
    
    },{}],219:[function(require,module,exports){
    exports.endianness = function () { return 'LE' };
    
    exports.hostname = function () {
        if (typeof location !== 'undefined') {
            return location.hostname
        }
        else return '';
    };
    
    exports.loadavg = function () { return [] };
    
    exports.uptime = function () { return 0 };
    
    exports.freemem = function () {
        return Number.MAX_VALUE;
    };
    
    exports.totalmem = function () {
        return Number.MAX_VALUE;
    };
    
    exports.cpus = function () { return [] };
    
    exports.type = function () { return 'Browser' };
    
    exports.release = function () {
        if (typeof navigator !== 'undefined') {
            return navigator.appVersion;
        }
        return '';
    };
    
    exports.networkInterfaces
    = exports.getNetworkInterfaces
    = function () { return {} };
    
    exports.arch = function () { return 'javascript' };
    
    exports.platform = function () { return 'browser' };
    
    exports.tmpdir = exports.tmpDir = function () {
        return '/tmp';
    };
    
    exports.EOL = '\n';
    
    exports.homedir = function () {
        return '/'
    };
    
    },{}],220:[function(require,module,exports){
    module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
    "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
    "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
    "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
    "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
    "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
    "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
    "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
    "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
    "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
    "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
    "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    }
    },{}],221:[function(require,module,exports){
    // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
    // Fedor, you are amazing.
    'use strict'
    
    var asn1 = require('asn1.js')
    
    exports.certificate = require('./certificate')
    
    var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('modulus').int(),
        this.key('publicExponent').int(),
        this.key('privateExponent').int(),
        this.key('prime1').int(),
        this.key('prime2').int(),
        this.key('exponent1').int(),
        this.key('exponent2').int(),
        this.key('coefficient').int()
      )
    })
    exports.RSAPrivateKey = RSAPrivateKey
    
    var RSAPublicKey = asn1.define('RSAPublicKey', function () {
      this.seq().obj(
        this.key('modulus').int(),
        this.key('publicExponent').int()
      )
    })
    exports.RSAPublicKey = RSAPublicKey
    
    var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPublicKey').bitstr()
      )
    })
    exports.PublicKey = PublicKey
    
    var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
      this.seq().obj(
        this.key('algorithm').objid(),
        this.key('none').null_().optional(),
        this.key('curve').objid().optional(),
        this.key('params').seq().obj(
          this.key('p').int(),
          this.key('q').int(),
          this.key('g').int()
        ).optional()
      )
    })
    
    var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPrivateKey').octstr()
      )
    })
    exports.PrivateKey = PrivateKeyInfo
    var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').seq().obj(
          this.key('id').objid(),
          this.key('decrypt').seq().obj(
            this.key('kde').seq().obj(
              this.key('id').objid(),
              this.key('kdeparams').seq().obj(
                this.key('salt').octstr(),
                this.key('iters').int()
              )
            ),
            this.key('cipher').seq().obj(
              this.key('algo').objid(),
              this.key('iv').octstr()
            )
          )
        ),
        this.key('subjectPrivateKey').octstr()
      )
    })
    
    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo
    
    var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int(),
        this.key('pub_key').int(),
        this.key('priv_key').int()
      )
    })
    exports.DSAPrivateKey = DSAPrivateKey
    
    exports.DSAparam = asn1.define('DSAparam', function () {
      this.int()
    })
    
    var ECPrivateKey = asn1.define('ECPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('privateKey').octstr(),
        this.key('parameters').optional().explicit(0).use(ECParameters),
        this.key('publicKey').optional().explicit(1).bitstr()
      )
    })
    exports.ECPrivateKey = ECPrivateKey
    
    var ECParameters = asn1.define('ECParameters', function () {
      this.choice({
        namedCurve: this.objid()
      })
    })
    
    exports.signature = asn1.define('signature', function () {
      this.seq().obj(
        this.key('r').int(),
        this.key('s').int()
      )
    })
    
    },{"./certificate":222,"asn1.js":45}],222:[function(require,module,exports){
    // from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
    // thanks to @Rantanen
    
    'use strict'
    
    var asn = require('asn1.js')
    
    var Time = asn.define('Time', function () {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      })
    })
    
    var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
      this.seq().obj(
        this.key('type').objid(),
        this.key('value').any()
      )
    })
    
    var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
      this.seq().obj(
        this.key('algorithm').objid(),
        this.key('parameters').optional(),
        this.key('curve').objid().optional()
      )
    })
    
    var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPublicKey').bitstr()
      )
    })
    
    var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
      this.setof(AttributeTypeValue)
    })
    
    var RDNSequence = asn.define('RDNSequence', function () {
      this.seqof(RelativeDistinguishedName)
    })
    
    var Name = asn.define('Name', function () {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      })
    })
    
    var Validity = asn.define('Validity', function () {
      this.seq().obj(
        this.key('notBefore').use(Time),
        this.key('notAfter').use(Time)
      )
    })
    
    var Extension = asn.define('Extension', function () {
      this.seq().obj(
        this.key('extnID').objid(),
        this.key('critical').bool().def(false),
        this.key('extnValue').octstr()
      )
    })
    
    var TBSCertificate = asn.define('TBSCertificate', function () {
      this.seq().obj(
        this.key('version').explicit(0).int().optional(),
        this.key('serialNumber').int(),
        this.key('signature').use(AlgorithmIdentifier),
        this.key('issuer').use(Name),
        this.key('validity').use(Validity),
        this.key('subject').use(Name),
        this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
        this.key('issuerUniqueID').implicit(1).bitstr().optional(),
        this.key('subjectUniqueID').implicit(2).bitstr().optional(),
        this.key('extensions').explicit(3).seqof(Extension).optional()
      )
    })
    
    var X509Certificate = asn.define('X509Certificate', function () {
      this.seq().obj(
        this.key('tbsCertificate').use(TBSCertificate),
        this.key('signatureAlgorithm').use(AlgorithmIdentifier),
        this.key('signatureValue').bitstr()
      )
    })
    
    module.exports = X509Certificate
    
    },{"asn1.js":45}],223:[function(require,module,exports){
    // adapted from https://github.com/apatil/pemstrip
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
    var evp = require('evp_bytestokey')
    var ciphers = require('browserify-aes')
    var Buffer = require('safe-buffer').Buffer
    module.exports = function (okey, password) {
      var key = okey.toString()
      var match = key.match(findProc)
      var decrypted
      if (!match) {
        var match2 = key.match(fullRegex)
        decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
      } else {
        var suite = 'aes' + match[1]
        var iv = Buffer.from(match[2], 'hex')
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
        var out = []
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
        out.push(cipher.update(cipherText))
        out.push(cipher.final())
        decrypted = Buffer.concat(out)
      }
      var tag = key.match(startRegex)[1]
      return {
        tag: tag,
        data: decrypted
      }
    }
    
    },{"browserify-aes":66,"evp_bytestokey":172,"safe-buffer":264}],224:[function(require,module,exports){
    var asn1 = require('./asn1')
    var aesid = require('./aesid.json')
    var fixProc = require('./fixProc')
    var ciphers = require('browserify-aes')
    var compat = require('pbkdf2')
    var Buffer = require('safe-buffer').Buffer
    module.exports = parseKeys
    
    function parseKeys (buffer) {
      var password
      if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase
        buffer = buffer.key
      }
      if (typeof buffer === 'string') {
        buffer = Buffer.from(buffer)
      }
    
      var stripped = fixProc(buffer, password)
    
      var type = stripped.tag
      var data = stripped.data
      var subtype, ndata
      switch (type) {
        case 'CERTIFICATE':
          ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
          // falls through
        case 'PUBLIC KEY':
          if (!ndata) {
            ndata = asn1.PublicKey.decode(data, 'der')
          }
          subtype = ndata.algorithm.algorithm.join('.')
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
            case '1.2.840.10045.2.1':
              ndata.subjectPrivateKey = ndata.subjectPublicKey
              return {
                type: 'ec',
                data: ndata
              }
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
              return {
                type: 'dsa',
                data: ndata.algorithm.params
              }
            default: throw new Error('unknown key id ' + subtype)
          }
          throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
          data = asn1.EncryptedPrivateKey.decode(data, 'der')
          data = decrypt(data, password)
          // falls through
        case 'PRIVATE KEY':
          ndata = asn1.PrivateKey.decode(data, 'der')
          subtype = ndata.algorithm.algorithm.join('.')
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
            case '1.2.840.10045.2.1':
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
              }
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
              return {
                type: 'dsa',
                params: ndata.algorithm.params
              }
            default: throw new Error('unknown key id ' + subtype)
          }
          throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
          return asn1.RSAPublicKey.decode(data, 'der')
        case 'RSA PRIVATE KEY':
          return asn1.RSAPrivateKey.decode(data, 'der')
        case 'DSA PRIVATE KEY':
          return {
            type: 'dsa',
            params: asn1.DSAPrivateKey.decode(data, 'der')
          }
        case 'EC PRIVATE KEY':
          data = asn1.ECPrivateKey.decode(data, 'der')
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          }
        default: throw new Error('unknown key type ' + type)
      }
    }
    parseKeys.signature = asn1.signature
    function decrypt (data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
      var iv = data.algorithm.decrypt.cipher.iv
      var cipherText = data.subjectPrivateKey
      var keylen = parseInt(algo.split('-')[1], 10) / 8
      var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
      var cipher = ciphers.createDecipheriv(algo, key, iv)
      var out = []
      out.push(cipher.update(cipherText))
      out.push(cipher.final())
      return Buffer.concat(out)
    }
    
    },{"./aesid.json":220,"./asn1":221,"./fixProc":223,"browserify-aes":66,"pbkdf2":226,"safe-buffer":264}],225:[function(require,module,exports){
    var trim = require('string.prototype.trim')
      , forEach = require('for-each')
      , isArray = function(arg) {
          return Object.prototype.toString.call(arg) === '[object Array]';
        }
    
    module.exports = function (headers) {
      if (!headers)
        return {}
    
      var result = {}
    
      forEach(
          trim(headers).split('\n')
        , function (row) {
            var index = row.indexOf(':')
              , key = trim(row.slice(0, index)).toLowerCase()
              , value = trim(row.slice(index + 1))
    
            if (typeof(result[key]) === 'undefined') {
              result[key] = value
            } else if (isArray(result[key])) {
              result[key].push(value)
            } else {
              result[key] = [ result[key], value ]
            }
          }
      )
    
      return result
    }
    
    },{"for-each":175,"string.prototype.trim":284}],226:[function(require,module,exports){
    exports.pbkdf2 = require('./lib/async')
    exports.pbkdf2Sync = require('./lib/sync')
    
    },{"./lib/async":227,"./lib/sync":230}],227:[function(require,module,exports){
    (function (process,global){
    var checkParameters = require('./precondition')
    var defaultEncoding = require('./default-encoding')
    var sync = require('./sync')
    var Buffer = require('safe-buffer').Buffer
    
    var ZERO_BUF
    var subtle = global.crypto && global.crypto.subtle
    var toBrowser = {
      'sha': 'SHA-1',
      'sha-1': 'SHA-1',
      'sha1': 'SHA-1',
      'sha256': 'SHA-256',
      'sha-256': 'SHA-256',
      'sha384': 'SHA-384',
      'sha-384': 'SHA-384',
      'sha-512': 'SHA-512',
      'sha512': 'SHA-512'
    }
    var checks = []
    function checkNative (algo) {
      if (global.process && !global.process.browser) {
        return Promise.resolve(false)
      }
      if (!subtle || !subtle.importKey || !subtle.deriveBits) {
        return Promise.resolve(false)
      }
      if (checks[algo] !== undefined) {
        return checks[algo]
      }
      ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
        .then(function () {
          return true
        }).catch(function () {
          return false
        })
      checks[algo] = prom
      return prom
    }
    
    function browserPbkdf2 (password, salt, iterations, length, algo) {
      return subtle.importKey(
        'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
      ).then(function (key) {
        return subtle.deriveBits({
          name: 'PBKDF2',
          salt: salt,
          iterations: iterations,
          hash: {
            name: algo
          }
        }, key, length << 3)
      }).then(function (res) {
        return Buffer.from(res)
      })
    }
    
    function resolvePromise (promise, callback) {
      promise.then(function (out) {
        process.nextTick(function () {
          callback(null, out)
        })
      }, function (e) {
        process.nextTick(function () {
          callback(e)
        })
      })
    }
    module.exports = function (password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === 'function') {
        callback = digest
        digest = undefined
      }
    
      digest = digest || 'sha1'
      var algo = toBrowser[digest.toLowerCase()]
    
      if (!algo || typeof global.Promise !== 'function') {
        return process.nextTick(function () {
          var out
          try {
            out = sync(password, salt, iterations, keylen, digest)
          } catch (e) {
            return callback(e)
          }
          callback(null, out)
        })
      }
    
      checkParameters(password, salt, iterations, keylen)
      if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
      if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
      if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)
    
      resolvePromise(checkNative(algo).then(function (resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)
    
        return sync(password, salt, iterations, keylen, digest)
      }), callback)
    }
    
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./default-encoding":228,"./precondition":229,"./sync":230,"_process":231,"safe-buffer":264}],228:[function(require,module,exports){
    (function (process){
    var defaultEncoding
    /* istanbul ignore next */
    if (process.browser) {
      defaultEncoding = 'utf-8'
    } else {
      var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)
    
      defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
    }
    module.exports = defaultEncoding
    
    }).call(this,require('_process'))
    },{"_process":231}],229:[function(require,module,exports){
    (function (Buffer){
    var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
    
    function checkBuffer (buf, name) {
      if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
        throw new TypeError(name + ' must be a buffer or string')
      }
    }
    
    module.exports = function (password, salt, iterations, keylen) {
      checkBuffer(password, 'Password')
      checkBuffer(salt, 'Salt')
    
      if (typeof iterations !== 'number') {
        throw new TypeError('Iterations not a number')
      }
    
      if (iterations < 0) {
        throw new TypeError('Bad iterations')
      }
    
      if (typeof keylen !== 'number') {
        throw new TypeError('Key length not a number')
      }
    
      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
        throw new TypeError('Bad key length')
      }
    }
    
    }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
    },{"../../is-buffer/index.js":200}],230:[function(require,module,exports){
    var md5 = require('create-hash/md5')
    var RIPEMD160 = require('ripemd160')
    var sha = require('sha.js')
    
    var checkParameters = require('./precondition')
    var defaultEncoding = require('./default-encoding')
    var Buffer = require('safe-buffer').Buffer
    var ZEROS = Buffer.alloc(128)
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    }
    
    function Hmac (alg, key, saltLen) {
      var hash = getDigest(alg)
      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64
    
      if (key.length > blocksize) {
        key = hash(key)
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }
    
      var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
      var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }
    
      var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
      ipad.copy(ipad1, 0, 0, blocksize)
      this.ipad1 = ipad1
      this.ipad2 = ipad
      this.opad = opad
      this.alg = alg
      this.blocksize = blocksize
      this.hash = hash
      this.size = sizes[alg]
    }
    
    Hmac.prototype.run = function (data, ipad) {
      data.copy(ipad, this.blocksize)
      var h = this.hash(ipad)
      h.copy(this.opad, this.blocksize)
      return this.hash(this.opad)
    }
    
    function getDigest (alg) {
      function shaFunc (data) {
        return sha(alg).update(data).digest()
      }
      function rmd160Func (data) {
        return new RIPEMD160().update(data).digest()
      }
    
      if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
      if (alg === 'md5') return md5
      return shaFunc
    }
    
    function pbkdf2 (password, salt, iterations, keylen, digest) {
      checkParameters(password, salt, iterations, keylen)
    
      if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
      if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)
    
      digest = digest || 'sha1'
    
      var hmac = new Hmac(digest, password, salt.length)
    
      var DK = Buffer.allocUnsafe(keylen)
      var block1 = Buffer.allocUnsafe(salt.length + 4)
      salt.copy(block1, 0, 0, salt.length)
    
      var destPos = 0
      var hLen = sizes[digest]
      var l = Math.ceil(keylen / hLen)
    
      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length)
    
        var T = hmac.run(block1, hmac.ipad1)
        var U = T
    
        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2)
          for (var k = 0; k < hLen; k++) T[k] ^= U[k]
        }
    
        T.copy(DK, destPos)
        destPos += hLen
      }
    
      return DK
    }
    
    module.exports = pbkdf2
    
    },{"./default-encoding":228,"./precondition":229,"create-hash/md5":103,"ripemd160":263,"safe-buffer":264,"sha.js":270}],231:[function(require,module,exports){
    // shim for using process in browser
    var process = module.exports = {};
    
    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.
    
    var cachedSetTimeout;
    var cachedClearTimeout;
    
    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ())
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    
    
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }
    
    
    
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    
    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }
    
    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
    
        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    
    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };
    
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};
    
    function noop() {}
    
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    
    process.listeners = function (name) { return [] }
    
    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };
    
    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };
    
    },{}],232:[function(require,module,exports){
    exports.publicEncrypt = require('./publicEncrypt')
    exports.privateDecrypt = require('./privateDecrypt')
    
    exports.privateEncrypt = function privateEncrypt (key, buf) {
      return exports.publicEncrypt(key, buf, true)
    }
    
    exports.publicDecrypt = function publicDecrypt (key, buf) {
      return exports.privateDecrypt(key, buf, true)
    }
    
    },{"./privateDecrypt":234,"./publicEncrypt":235}],233:[function(require,module,exports){
    var createHash = require('create-hash')
    var Buffer = require('safe-buffer').Buffer
    
    module.exports = function (seed, len) {
      var t = Buffer.alloc(0)
      var i = 0
      var c
      while (t.length < len) {
        c = i2ops(i++)
        t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
      }
      return t.slice(0, len)
    }
    
    function i2ops (c) {
      var out = Buffer.allocUnsafe(4)
      out.writeUInt32BE(c, 0)
      return out
    }
    
    },{"create-hash":102,"safe-buffer":264}],234:[function(require,module,exports){
    var parseKeys = require('parse-asn1')
    var mgf = require('./mgf')
    var xor = require('./xor')
    var BN = require('bn.js')
    var crt = require('browserify-rsa')
    var createHash = require('create-hash')
    var withPublic = require('./withPublic')
    var Buffer = require('safe-buffer').Buffer
    
    module.exports = function privateDecrypt (privateKey, enc, reverse) {
      var padding
      if (privateKey.padding) {
        padding = privateKey.padding
      } else if (reverse) {
        padding = 1
      } else {
        padding = 4
      }
    
      var key = parseKeys(privateKey)
      var k = key.modulus.byteLength()
      if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
        throw new Error('decryption error')
      }
      var msg
      if (reverse) {
        msg = withPublic(new BN(enc), key)
      } else {
        msg = crt(enc, key)
      }
      var zBuffer = Buffer.alloc(k - msg.length)
      msg = Buffer.concat([zBuffer, msg], k)
      if (padding === 4) {
        return oaep(key, msg)
      } else if (padding === 1) {
        return pkcs1(key, msg, reverse)
      } else if (padding === 3) {
        return msg
      } else {
        throw new Error('unknown padding')
      }
    }
    
    function oaep (key, msg) {
      var k = key.modulus.byteLength()
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
      var hLen = iHash.length
      if (msg[0] !== 0) {
        throw new Error('decryption error')
      }
      var maskedSeed = msg.slice(1, hLen + 1)
      var maskedDb = msg.slice(hLen + 1)
      var seed = xor(maskedSeed, mgf(maskedDb, hLen))
      var db = xor(maskedDb, mgf(seed, k - hLen - 1))
      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error('decryption error')
      }
      var i = hLen
      while (db[i] === 0) {
        i++
      }
      if (db[i++] !== 1) {
        throw new Error('decryption error')
      }
      return db.slice(i)
    }
    
    function pkcs1 (key, msg, reverse) {
      var p1 = msg.slice(0, 2)
      var i = 2
      var status = 0
      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++
          break
        }
      }
      var ps = msg.slice(2, i - 1)
    
      if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
        status++
      }
      if (ps.length < 8) {
        status++
      }
      if (status) {
        throw new Error('decryption error')
      }
      return msg.slice(i)
    }
    function compare (a, b) {
      a = Buffer.from(a)
      b = Buffer.from(b)
      var dif = 0
      var len = a.length
      if (a.length !== b.length) {
        dif++
        len = Math.min(a.length, b.length)
      }
      var i = -1
      while (++i < len) {
        dif += (a[i] ^ b[i])
      }
      return dif
    }
    
    },{"./mgf":233,"./withPublic":236,"./xor":237,"bn.js":61,"browserify-rsa":84,"create-hash":102,"parse-asn1":224,"safe-buffer":264}],235:[function(require,module,exports){
    var parseKeys = require('parse-asn1')
    var randomBytes = require('randombytes')
    var createHash = require('create-hash')
    var mgf = require('./mgf')
    var xor = require('./xor')
    var BN = require('bn.js')
    var withPublic = require('./withPublic')
    var crt = require('browserify-rsa')
    var Buffer = require('safe-buffer').Buffer
    
    module.exports = function publicEncrypt (publicKey, msg, reverse) {
      var padding
      if (publicKey.padding) {
        padding = publicKey.padding
      } else if (reverse) {
        padding = 1
      } else {
        padding = 4
      }
      var key = parseKeys(publicKey)
      var paddedMsg
      if (padding === 4) {
        paddedMsg = oaep(key, msg)
      } else if (padding === 1) {
        paddedMsg = pkcs1(key, msg, reverse)
      } else if (padding === 3) {
        paddedMsg = new BN(msg)
        if (paddedMsg.cmp(key.modulus) >= 0) {
          throw new Error('data too long for modulus')
        }
      } else {
        throw new Error('unknown padding')
      }
      if (reverse) {
        return crt(paddedMsg, key)
      } else {
        return withPublic(paddedMsg, key)
      }
    }
    
    function oaep (key, msg) {
      var k = key.modulus.byteLength()
      var mLen = msg.length
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
      var hLen = iHash.length
      var hLen2 = 2 * hLen
      if (mLen > k - hLen2 - 2) {
        throw new Error('message too long')
      }
      var ps = Buffer.alloc(k - mLen - hLen2 - 2)
      var dblen = k - hLen - 1
      var seed = randomBytes(hLen)
      var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
      var maskedSeed = xor(seed, mgf(maskedDb, hLen))
      return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
    }
    function pkcs1 (key, msg, reverse) {
      var mLen = msg.length
      var k = key.modulus.byteLength()
      if (mLen > k - 11) {
        throw new Error('message too long')
      }
      var ps
      if (reverse) {
        ps = Buffer.alloc(k - mLen - 3, 0xff)
      } else {
        ps = nonZero(k - mLen - 3)
      }
      return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
    }
    function nonZero (len) {
      var out = Buffer.allocUnsafe(len)
      var i = 0
      var cache = randomBytes(len * 2)
      var cur = 0
      var num
      while (i < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2)
          cur = 0
        }
        num = cache[cur++]
        if (num) {
          out[i++] = num
        }
      }
      return out
    }
    
    },{"./mgf":233,"./withPublic":236,"./xor":237,"bn.js":61,"browserify-rsa":84,"create-hash":102,"parse-asn1":224,"randombytes":243,"safe-buffer":264}],236:[function(require,module,exports){
    var BN = require('bn.js')
    var Buffer = require('safe-buffer').Buffer
    
    function withPublic (paddedMsg, key) {
      return Buffer.from(paddedMsg
        .toRed(BN.mont(key.modulus))
        .redPow(new BN(key.publicExponent))
        .fromRed()
        .toArray())
    }
    
    module.exports = withPublic
    
    },{"bn.js":61,"safe-buffer":264}],237:[function(require,module,exports){
    module.exports = function xor (a, b) {
      var len = a.length
      var i = -1
      while (++i < len) {
        a[i] ^= b[i]
      }
      return a
    }
    
    },{}],238:[function(require,module,exports){
    (function (global){
    /*! https://mths.be/punycode v1.4.1 by @mathias */
    ;(function(root) {
    
        /** Detect free variables */
        var freeExports = typeof exports == 'object' && exports &&
            !exports.nodeType && exports;
        var freeModule = typeof module == 'object' && module &&
            !module.nodeType && module;
        var freeGlobal = typeof global == 'object' && global;
        if (
            freeGlobal.global === freeGlobal ||
            freeGlobal.window === freeGlobal ||
            freeGlobal.self === freeGlobal
        ) {
            root = freeGlobal;
        }
    
        /**
         * The `punycode` object.
         * @name punycode
         * @type Object
         */
        var punycode,
    
        /** Highest positive signed 32-bit float value */
        maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
    
        /** Bootstring parameters */
        base = 36,
        tMin = 1,
        tMax = 26,
        skew = 38,
        damp = 700,
        initialBias = 72,
        initialN = 128, // 0x80
        delimiter = '-', // '\x2D'
    
        /** Regular expressions */
        regexPunycode = /^xn--/,
        regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
        regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
    
        /** Error messages */
        errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
        },
    
        /** Convenience shortcuts */
        baseMinusTMin = base - tMin,
        floor = Math.floor,
        stringFromCharCode = String.fromCharCode,
    
        /** Temporary variable */
        key;
    
        /*--------------------------------------------------------------------------*/
    
        /**
         * A generic error utility function.
         * @private
         * @param {String} type The error type.
         * @returns {Error} Throws a `RangeError` with the applicable error message.
         */
        function error(type) {
            throw new RangeError(errors[type]);
        }
    
        /**
         * A generic `Array#map` utility function.
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} callback The function that gets called for every array
         * item.
         * @returns {Array} A new array of values returned by the callback function.
         */
        function map(array, fn) {
            var length = array.length;
            var result = [];
            while (length--) {
                result[length] = fn(array[length]);
            }
            return result;
        }
    
        /**
         * A simple `Array#map`-like wrapper to work with domain name strings or email
         * addresses.
         * @private
         * @param {String} domain The domain name or email address.
         * @param {Function} callback The function that gets called for every
         * character.
         * @returns {Array} A new string of characters returned by the callback
         * function.
         */
        function mapDomain(string, fn) {
            var parts = string.split('@');
            var result = '';
            if (parts.length > 1) {
                // In email addresses, only the domain name should be punycoded. Leave
                // the local part (i.e. everything up to `@`) intact.
                result = parts[0] + '@';
                string = parts[1];
            }
            // Avoid `split(regex)` for IE8 compatibility. See #17.
            string = string.replace(regexSeparators, '\x2E');
            var labels = string.split('.');
            var encoded = map(labels, fn).join('.');
            return result + encoded;
        }
    
        /**
         * Creates an array containing the numeric code points of each Unicode
         * character in the string. While JavaScript uses UCS-2 internally,
         * this function will convert a pair of surrogate halves (each of which
         * UCS-2 exposes as separate characters) into a single code point,
         * matching UTF-16.
         * @see `punycode.ucs2.encode`
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode.ucs2
         * @name decode
         * @param {String} string The Unicode input string (UCS-2).
         * @returns {Array} The new array of code points.
         */
        function ucs2decode(string) {
            var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;
            while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                    // high surrogate, and there is a next character
                    extra = string.charCodeAt(counter++);
                    if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                    } else {
                        // unmatched surrogate; only append this code unit, in case the next
                        // code unit is the high surrogate of a surrogate pair
                        output.push(value);
                        counter--;
                    }
                } else {
                    output.push(value);
                }
            }
            return output;
        }
    
        /**
         * Creates a string based on an array of numeric code points.
         * @see `punycode.ucs2.decode`
         * @memberOf punycode.ucs2
         * @name encode
         * @param {Array} codePoints The array of numeric code points.
         * @returns {String} The new Unicode string (UCS-2).
         */
        function ucs2encode(array) {
            return map(array, function(value) {
                var output = '';
                if (value > 0xFFFF) {
                    value -= 0x10000;
                    output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                    value = 0xDC00 | value & 0x3FF;
                }
                output += stringFromCharCode(value);
                return output;
            }).join('');
        }
    
        /**
         * Converts a basic code point into a digit/integer.
         * @see `digitToBasic()`
         * @private
         * @param {Number} codePoint The basic numeric code point value.
         * @returns {Number} The numeric value of a basic code point (for use in
         * representing integers) in the range `0` to `base - 1`, or `base` if
         * the code point does not represent a value.
         */
        function basicToDigit(codePoint) {
            if (codePoint - 48 < 10) {
                return codePoint - 22;
            }
            if (codePoint - 65 < 26) {
                return codePoint - 65;
            }
            if (codePoint - 97 < 26) {
                return codePoint - 97;
            }
            return base;
        }
    
        /**
         * Converts a digit/integer into a basic code point.
         * @see `basicToDigit()`
         * @private
         * @param {Number} digit The numeric value of a basic code point.
         * @returns {Number} The basic code point whose value (when used for
         * representing integers) is `digit`, which needs to be in the range
         * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
         * used; else, the lowercase form is used. The behavior is undefined
         * if `flag` is non-zero and `digit` has no uppercase form.
         */
        function digitToBasic(digit, flag) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }
    
        /**
         * Bias adaptation function as per section 3.4 of RFC 3492.
         * https://tools.ietf.org/html/rfc3492#section-3.4
         * @private
         */
        function adapt(delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);
            for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
                delta = floor(delta / baseMinusTMin);
            }
            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        }
    
        /**
         * Converts a Punycode string of ASCII-only symbols to a string of Unicode
         * symbols.
         * @memberOf punycode
         * @param {String} input The Punycode string of ASCII-only symbols.
         * @returns {String} The resulting string of Unicode symbols.
         */
        function decode(input) {
            // Don't use UCS-2
            var output = [],
                inputLength = input.length,
                out,
                i = 0,
                n = initialN,
                bias = initialBias,
                basic,
                j,
                index,
                oldi,
                w,
                k,
                digit,
                t,
                /** Cached calculation results */
                baseMinusT;
    
            // Handle the basic code points: let `basic` be the number of input code
            // points before the last delimiter, or `0` if there is none, then copy
            // the first basic code points to the output.
    
            basic = input.lastIndexOf(delimiter);
            if (basic < 0) {
                basic = 0;
            }
    
            for (j = 0; j < basic; ++j) {
                // if it's not a basic code point
                if (input.charCodeAt(j) >= 0x80) {
                    error('not-basic');
                }
                output.push(input.charCodeAt(j));
            }
    
            // Main decoding loop: start just after the last delimiter if any basic code
            // points were copied; start at the beginning otherwise.
    
            for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
    
                // `index` is the index of the next character to be consumed.
                // Decode a generalized variable-length integer into `delta`,
                // which gets added to `i`. The overflow checking is easier
                // if we increase `i` as we go, then subtract off its starting
                // value at the end to obtain `delta`.
                for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
    
                    if (index >= inputLength) {
                        error('invalid-input');
                    }
    
                    digit = basicToDigit(input.charCodeAt(index++));
    
                    if (digit >= base || digit > floor((maxInt - i) / w)) {
                        error('overflow');
                    }
    
                    i += digit * w;
                    t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
    
                    if (digit < t) {
                        break;
                    }
    
                    baseMinusT = base - t;
                    if (w > floor(maxInt / baseMinusT)) {
                        error('overflow');
                    }
    
                    w *= baseMinusT;
    
                }
    
                out = output.length + 1;
                bias = adapt(i - oldi, out, oldi == 0);
    
                // `i` was supposed to wrap around from `out` to `0`,
                // incrementing `n` each time, so we'll fix that now:
                if (floor(i / out) > maxInt - n) {
                    error('overflow');
                }
    
                n += floor(i / out);
                i %= out;
    
                // Insert `n` at position `i` of the output
                output.splice(i++, 0, n);
    
            }
    
            return ucs2encode(output);
        }
    
        /**
         * Converts a string of Unicode symbols (e.g. a domain name label) to a
         * Punycode string of ASCII-only symbols.
         * @memberOf punycode
         * @param {String} input The string of Unicode symbols.
         * @returns {String} The resulting Punycode string of ASCII-only symbols.
         */
        function encode(input) {
            var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],
                /** `inputLength` will hold the number of code points in `input`. */
                inputLength,
                /** Cached calculation results */
                handledCPCountPlusOne,
                baseMinusT,
                qMinusT;
    
            // Convert the input in UCS-2 to Unicode
            input = ucs2decode(input);
    
            // Cache the length
            inputLength = input.length;
    
            // Initialize the state
            n = initialN;
            delta = 0;
            bias = initialBias;
    
            // Handle the basic code points
            for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue < 0x80) {
                    output.push(stringFromCharCode(currentValue));
                }
            }
    
            handledCPCount = basicLength = output.length;
    
            // `handledCPCount` is the number of code points that have been handled;
            // `basicLength` is the number of basic code points.
    
            // Finish the basic string - if it is not empty - with a delimiter
            if (basicLength) {
                output.push(delimiter);
            }
    
            // Main encoding loop:
            while (handledCPCount < inputLength) {
    
                // All non-basic code points < n have been handled already. Find the next
                // larger one:
                for (m = maxInt, j = 0; j < inputLength; ++j) {
                    currentValue = input[j];
                    if (currentValue >= n && currentValue < m) {
                        m = currentValue;
                    }
                }
    
                // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                // but guard against overflow
                handledCPCountPlusOne = handledCPCount + 1;
                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                    error('overflow');
                }
    
                delta += (m - n) * handledCPCountPlusOne;
                n = m;
    
                for (j = 0; j < inputLength; ++j) {
                    currentValue = input[j];
    
                    if (currentValue < n && ++delta > maxInt) {
                        error('overflow');
                    }
    
                    if (currentValue == n) {
                        // Represent delta as a generalized variable-length integer
                        for (q = delta, k = base; /* no condition */; k += base) {
                            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                            if (q < t) {
                                break;
                            }
                            qMinusT = q - t;
                            baseMinusT = base - t;
                            output.push(
                                stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                            );
                            q = floor(qMinusT / baseMinusT);
                        }
    
                        output.push(stringFromCharCode(digitToBasic(q, 0)));
                        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                        delta = 0;
                        ++handledCPCount;
                    }
                }
    
                ++delta;
                ++n;
    
            }
            return output.join('');
        }
    
        /**
         * Converts a Punycode string representing a domain name or an email address
         * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
         * it doesn't matter if you call it on a string that has already been
         * converted to Unicode.
         * @memberOf punycode
         * @param {String} input The Punycoded domain name or email address to
         * convert to Unicode.
         * @returns {String} The Unicode representation of the given Punycode
         * string.
         */
        function toUnicode(input) {
            return mapDomain(input, function(string) {
                return regexPunycode.test(string)
                    ? decode(string.slice(4).toLowerCase())
                    : string;
            });
        }
    
        /**
         * Converts a Unicode string representing a domain name or an email address to
         * Punycode. Only the non-ASCII parts of the domain name will be converted,
         * i.e. it doesn't matter if you call it with a domain that's already in
         * ASCII.
         * @memberOf punycode
         * @param {String} input The domain name or email address to convert, as a
         * Unicode string.
         * @returns {String} The Punycode representation of the given domain name or
         * email address.
         */
        function toASCII(input) {
            return mapDomain(input, function(string) {
                return regexNonASCII.test(string)
                    ? 'xn--' + encode(string)
                    : string;
            });
        }
    
        /*--------------------------------------------------------------------------*/
    
        /** Define the public API */
        punycode = {
            /**
             * A string representing the current Punycode.js version number.
             * @memberOf punycode
             * @type String
             */
            'version': '1.4.1',
            /**
             * An object of methods to convert from JavaScript's internal character
             * representation (UCS-2) to Unicode code points, and back.
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode
             * @type Object
             */
            'ucs2': {
                'decode': ucs2decode,
                'encode': ucs2encode
            },
            'decode': decode,
            'encode': encode,
            'toASCII': toASCII,
            'toUnicode': toUnicode
        };
    
        /** Expose `punycode` */
        // Some AMD build optimizers, like r.js, check for specific condition patterns
        // like the following:
        if (
            typeof define == 'function' &&
            typeof define.amd == 'object' &&
            define.amd
        ) {
            define('punycode', function() {
                return punycode;
            });
        } else if (freeExports && freeModule) {
            if (module.exports == freeExports) {
                // in Node.js, io.js, or RingoJS v0.8.0+
                freeModule.exports = punycode;
            } else {
                // in Narwhal or RingoJS v0.7.0-
                for (key in punycode) {
                    punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
                }
            }
        } else {
            // in Rhino or a web browser
            root.punycode = punycode;
        }
    
    }(this));
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}],239:[function(require,module,exports){
    'use strict';
    var strictUriEncode = require('strict-uri-encode');
    var objectAssign = require('object-assign');
    var decodeComponent = require('decode-uri-component');
    
    function encoderForArrayFormat(opts) {
        switch (opts.arrayFormat) {
            case 'index':
                return function (key, value, index) {
                    return value === null ? [
                        encode(key, opts),
                        '[',
                        index,
                        ']'
                    ].join('') : [
                        encode(key, opts),
                        '[',
                        encode(index, opts),
                        ']=',
                        encode(value, opts)
                    ].join('');
                };
    
            case 'bracket':
                return function (key, value) {
                    return value === null ? encode(key, opts) : [
                        encode(key, opts),
                        '[]=',
                        encode(value, opts)
                    ].join('');
                };
    
            default:
                return function (key, value) {
                    return value === null ? encode(key, opts) : [
                        encode(key, opts),
                        '=',
                        encode(value, opts)
                    ].join('');
                };
        }
    }
    
    function parserForArrayFormat(opts) {
        var result;
    
        switch (opts.arrayFormat) {
            case 'index':
                return function (key, value, accumulator) {
                    result = /\[(\d*)\]$/.exec(key);
    
                    key = key.replace(/\[\d*\]$/, '');
    
                    if (!result) {
                        accumulator[key] = value;
                        return;
                    }
    
                    if (accumulator[key] === undefined) {
                        accumulator[key] = {};
                    }
    
                    accumulator[key][result[1]] = value;
                };
    
            case 'bracket':
                return function (key, value, accumulator) {
                    result = /(\[\])$/.exec(key);
                    key = key.replace(/\[\]$/, '');
    
                    if (!result) {
                        accumulator[key] = value;
                        return;
                    } else if (accumulator[key] === undefined) {
                        accumulator[key] = [value];
                        return;
                    }
    
                    accumulator[key] = [].concat(accumulator[key], value);
                };
    
            default:
                return function (key, value, accumulator) {
                    if (accumulator[key] === undefined) {
                        accumulator[key] = value;
                        return;
                    }
    
                    accumulator[key] = [].concat(accumulator[key], value);
                };
        }
    }
    
    function encode(value, opts) {
        if (opts.encode) {
            return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
        }
    
        return value;
    }
    
    function keysSorter(input) {
        if (Array.isArray(input)) {
            return input.sort();
        } else if (typeof input === 'object') {
            return keysSorter(Object.keys(input)).sort(function (a, b) {
                return Number(a) - Number(b);
            }).map(function (key) {
                return input[key];
            });
        }
    
        return input;
    }
    
    function extract(str) {
        var queryStart = str.indexOf('?');
        if (queryStart === -1) {
            return '';
        }
        return str.slice(queryStart + 1);
    }
    
    function parse(str, opts) {
        opts = objectAssign({arrayFormat: 'none'}, opts);
    
        var formatter = parserForArrayFormat(opts);
    
        // Create an object with no prototype
        // https://github.com/sindresorhus/query-string/issues/47
        var ret = Object.create(null);
    
        if (typeof str !== 'string') {
            return ret;
        }
    
        str = str.trim().replace(/^[?#&]/, '');
    
        if (!str) {
            return ret;
        }
    
        str.split('&').forEach(function (param) {
            var parts = param.replace(/\+/g, ' ').split('=');
            // Firefox (pre 40) decodes `%3D` to `=`
            // https://github.com/sindresorhus/query-string/pull/37
            var key = parts.shift();
            var val = parts.length > 0 ? parts.join('=') : undefined;
    
            // missing `=` should be `null`:
            // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
            val = val === undefined ? null : decodeComponent(val);
    
            formatter(decodeComponent(key), val, ret);
        });
    
        return Object.keys(ret).sort().reduce(function (result, key) {
            var val = ret[key];
            if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
                // Sort object keys, not values
                result[key] = keysSorter(val);
            } else {
                result[key] = val;
            }
    
            return result;
        }, Object.create(null));
    }
    
    exports.extract = extract;
    exports.parse = parse;
    
    exports.stringify = function (obj, opts) {
        var defaults = {
            encode: true,
            strict: true,
            arrayFormat: 'none'
        };
    
        opts = objectAssign(defaults, opts);
    
        if (opts.sort === false) {
            opts.sort = function () {};
        }
    
        var formatter = encoderForArrayFormat(opts);
    
        return obj ? Object.keys(obj).sort(opts.sort).map(function (key) {
            var val = obj[key];
    
            if (val === undefined) {
                return '';
            }
    
            if (val === null) {
                return encode(key, opts);
            }
    
            if (Array.isArray(val)) {
                var result = [];
    
                val.slice().forEach(function (val2) {
                    if (val2 === undefined) {
                        return;
                    }
    
                    result.push(formatter(key, val2, result.length));
                });
    
                return result.join('&');
            }
    
            return encode(key, opts) + '=' + encode(val, opts);
        }).filter(function (x) {
            return x.length > 0;
        }).join('&') : '';
    };
    
    exports.parseUrl = function (str, opts) {
        return {
            url: str.split('?')[0] || '',
            query: parse(extract(str), opts)
        };
    };
    
    },{"decode-uri-component":107,"object-assign":214,"strict-uri-encode":282}],240:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    'use strict';
    
    // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    
    module.exports = function(qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};
    
      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }
    
      var regexp = /\+/g;
      qs = qs.split(sep);
    
      var maxKeys = 1000;
      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }
    
      var len = qs.length;
      // maxKeys <= 0 means that we should not limit keys count
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }
    
      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr, vstr, k, v;
    
        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }
    
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
    
        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }
    
      return obj;
    };
    
    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
    
    },{}],241:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    'use strict';
    
    var stringifyPrimitive = function(v) {
      switch (typeof v) {
        case 'string':
          return v;
    
        case 'boolean':
          return v ? 'true' : 'false';
    
        case 'number':
          return isFinite(v) ? v : '';
    
        default:
          return '';
      }
    };
    
    module.exports = function(obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';
      if (obj === null) {
        obj = undefined;
      }
    
      if (typeof obj === 'object') {
        return map(objectKeys(obj), function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (isArray(obj[k])) {
            return map(obj[k], function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
    
      }
    
      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq +
             encodeURIComponent(stringifyPrimitive(obj));
    };
    
    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
    
    function map (xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }
      return res;
    }
    
    var objectKeys = Object.keys || function (obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }
      return res;
    };
    
    },{}],242:[function(require,module,exports){
    'use strict';
    
    exports.decode = exports.parse = require('./decode');
    exports.encode = exports.stringify = require('./encode');
    
    },{"./decode":240,"./encode":241}],243:[function(require,module,exports){
    (function (process,global){
    'use strict'
    
    // limit of Crypto.getRandomValues()
    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
    var MAX_BYTES = 65536
    
    // Node supports requesting up to this number of bytes
    // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
    var MAX_UINT32 = 4294967295
    
    function oldBrowser () {
      throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
    }
    
    var Buffer = require('safe-buffer').Buffer
    var crypto = global.crypto || global.msCrypto
    
    if (crypto && crypto.getRandomValues) {
      module.exports = randomBytes
    } else {
      module.exports = oldBrowser
    }
    
    function randomBytes (size, cb) {
      // phantomjs needs to throw
      if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')
    
      var bytes = Buffer.allocUnsafe(size)
    
      if (size > 0) {  // getRandomValues fails on IE if size == 0
        if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
          // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            // buffer.slice automatically checks if the end is past the end of
            // the buffer so we don't have to here
            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
          }
        } else {
          crypto.getRandomValues(bytes)
        }
      }
    
      if (typeof cb === 'function') {
        return process.nextTick(function () {
          cb(null, bytes)
        })
      }
    
      return bytes
    }
    
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":231,"safe-buffer":264}],244:[function(require,module,exports){
    (function (process,global){
    'use strict'
    
    function oldBrowser () {
      throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
    }
    var safeBuffer = require('safe-buffer')
    var randombytes = require('randombytes')
    var Buffer = safeBuffer.Buffer
    var kBufferMaxLength = safeBuffer.kMaxLength
    var crypto = global.crypto || global.msCrypto
    var kMaxUint32 = Math.pow(2, 32) - 1
    function assertOffset (offset, length) {
      if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
        throw new TypeError('offset must be a number')
      }
    
      if (offset > kMaxUint32 || offset < 0) {
        throw new TypeError('offset must be a uint32')
      }
    
      if (offset > kBufferMaxLength || offset > length) {
        throw new RangeError('offset out of range')
      }
    }
    
    function assertSize (size, offset, length) {
      if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
        throw new TypeError('size must be a number')
      }
    
      if (size > kMaxUint32 || size < 0) {
        throw new TypeError('size must be a uint32')
      }
    
      if (size + offset > length || size > kBufferMaxLength) {
        throw new RangeError('buffer too small')
      }
    }
    if ((crypto && crypto.getRandomValues) || !process.browser) {
      exports.randomFill = randomFill
      exports.randomFillSync = randomFillSync
    } else {
      exports.randomFill = oldBrowser
      exports.randomFillSync = oldBrowser
    }
    function randomFill (buf, offset, size, cb) {
      if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
      }
    
      if (typeof offset === 'function') {
        cb = offset
        offset = 0
        size = buf.length
      } else if (typeof size === 'function') {
        cb = size
        size = buf.length - offset
      } else if (typeof cb !== 'function') {
        throw new TypeError('"cb" argument must be a function')
      }
      assertOffset(offset, buf.length)
      assertSize(size, offset, buf.length)
      return actualFill(buf, offset, size, cb)
    }
    
    function actualFill (buf, offset, size, cb) {
      if (process.browser) {
        var ourBuf = buf.buffer
        var uint = new Uint8Array(ourBuf, offset, size)
        crypto.getRandomValues(uint)
        if (cb) {
          process.nextTick(function () {
            cb(null, buf)
          })
          return
        }
        return buf
      }
      if (cb) {
        randombytes(size, function (err, bytes) {
          if (err) {
            return cb(err)
          }
          bytes.copy(buf, offset)
          cb(null, buf)
        })
        return
      }
      var bytes = randombytes(size)
      bytes.copy(buf, offset)
      return buf
    }
    function randomFillSync (buf, offset, size) {
      if (typeof offset === 'undefined') {
        offset = 0
      }
      if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
      }
    
      assertOffset(offset, buf.length)
    
      if (size === undefined) size = buf.length - offset
    
      assertSize(size, offset, buf.length)
    
      return actualFill(buf, offset, size)
    }
    
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":231,"randombytes":243,"safe-buffer":264}],245:[function(require,module,exports){
    module.exports = window.crypto;
    },{}],246:[function(require,module,exports){
    module.exports = require('crypto');
    },{"crypto":245}],247:[function(require,module,exports){
    var randomHex = function(size, callback) {
        var crypto = require('./crypto.js');
        var isCallback = (typeof callback === 'function');
    
        
        if (size > 65536) {
            if(isCallback) {
                callback(new Error('Requested too many random bytes.'));
            } else {
                throw new Error('Requested too many random bytes.');
            }
        };
    
    
        // is node
        if (typeof crypto !== 'undefined' && crypto.randomBytes) {
    
            if(isCallback) {
                crypto.randomBytes(size, function(err, result){
                    if(!err) {
                        callback(null, '0x'+ result.toString('hex'));
                    } else {
                        callback(error);
                    }
                })
            } else {
                return '0x'+ crypto.randomBytes(size).toString('hex');
            }
    
        // is browser
        } else {
            var cryptoLib;
    
            if (typeof crypto !== 'undefined') {
                cryptoLib = crypto;
            } else if(typeof msCrypto !== 'undefined') {
                cryptoLib = msCrypto;
            }
    
            if (cryptoLib && cryptoLib.getRandomValues) {
                var randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));
                var returnValue = '0x'+ Array.from(randomBytes).map(function(arr){ return arr.toString(16); }).join('');
    
                if(isCallback) {
                    callback(null, returnValue);
                } else {
                    return returnValue;
                }
    
            // not crypto object
            } else {
                var error = new Error('No "crypto" object available. This Browser doesn\'t support generating secure random bytes.');
    
                if(isCallback) {
                    callback(error);
                } else {
                   throw error;
                }
            }
        }
    };
    
    
    module.exports = randomHex;
    
    },{"./crypto.js":246}],248:[function(require,module,exports){
    module.exports = require('./lib/_stream_duplex.js');
    
    },{"./lib/_stream_duplex.js":249}],249:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.
    
    'use strict';
    
    /*<replacement>*/
    
    var pna = require('process-nextick-args');
    /*</replacement>*/
    
    /*<replacement>*/
    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        keys.push(key);
      }return keys;
    };
    /*</replacement>*/
    
    module.exports = Duplex;
    
    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/
    
    var Readable = require('./_stream_readable');
    var Writable = require('./_stream_writable');
    
    util.inherits(Duplex, Readable);
    
    {
      // avoid scope creep, the keys array can then be collected
      var keys = objectKeys(Writable.prototype);
      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
    
      Readable.call(this, options);
      Writable.call(this, options);
    
      if (options && options.readable === false) this.readable = false;
    
      if (options && options.writable === false) this.writable = false;
    
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
    
      this.once('end', onend);
    }
    
    Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._writableState.highWaterMark;
      }
    });
    
    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;
    
      // no more data can be written.
      // But allow more writes to happen in this tick.
      pna.nextTick(onEndNT, this);
    }
    
    function onEndNT(self) {
      self.end();
    }
    
    Object.defineProperty(Duplex.prototype, 'destroyed', {
      get: function () {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        }
    
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    
    Duplex.prototype._destroy = function (err, cb) {
      this.push(null);
      this.end();
    
      pna.nextTick(cb, err);
    };
    },{"./_stream_readable":251,"./_stream_writable":253,"core-util-is":100,"inherits":199,"process-nextick-args":257}],250:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.
    
    'use strict';
    
    module.exports = PassThrough;
    
    var Transform = require('./_stream_transform');
    
    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/
    
    util.inherits(PassThrough, Transform);
    
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
    
      Transform.call(this, options);
    }
    
    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
    },{"./_stream_transform":252,"core-util-is":100,"inherits":199}],251:[function(require,module,exports){
    (function (process,global){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    'use strict';
    
    /*<replacement>*/
    
    var pna = require('process-nextick-args');
    /*</replacement>*/
    
    module.exports = Readable;
    
    /*<replacement>*/
    var isArray = require('isarray');
    /*</replacement>*/
    
    /*<replacement>*/
    var Duplex;
    /*</replacement>*/
    
    Readable.ReadableState = ReadableState;
    
    /*<replacement>*/
    var EE = require('events').EventEmitter;
    
    var EElistenerCount = function (emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/
    
    /*<replacement>*/
    var Stream = require('./internal/streams/stream');
    /*</replacement>*/
    
    /*<replacement>*/
    
    var Buffer = require('safe-buffer').Buffer;
    var OurUint8Array = global.Uint8Array || function () {};
    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    
    /*</replacement>*/
    
    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/
    
    /*<replacement>*/
    var debugUtil = require('util');
    var debug = void 0;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog('stream');
    } else {
      debug = function () {};
    }
    /*</replacement>*/
    
    var BufferList = require('./internal/streams/BufferList');
    var destroyImpl = require('./internal/streams/destroy');
    var StringDecoder;
    
    util.inherits(Readable, Stream);
    
    var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
    
    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);
    
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }
    
    function ReadableState(options, stream) {
      Duplex = Duplex || require('./_stream_duplex');
    
      options = options || {};
    
      // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.
      var isDuplex = stream instanceof Duplex;
    
      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;
    
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    
      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var readableHwm = options.readableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    
      if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;
    
      // cast to ints.
      this.highWaterMark = Math.floor(this.highWaterMark);
    
      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
    
      // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.
      this.sync = true;
    
      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
    
      // has it been destroyed
      this.destroyed = false;
    
      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';
    
      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;
    
      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;
    
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    
    function Readable(options) {
      Duplex = Duplex || require('./_stream_duplex');
    
      if (!(this instanceof Readable)) return new Readable(options);
    
      this._readableState = new ReadableState(options, this);
    
      // legacy
      this.readable = true;
    
      if (options) {
        if (typeof options.read === 'function') this._read = options.read;
    
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }
    
      Stream.call(this);
    }
    
    Object.defineProperty(Readable.prototype, 'destroyed', {
      get: function () {
        if (this._readableState === undefined) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        }
    
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
      }
    });
    
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function (err, cb) {
      this.push(null);
      cb(err);
    };
    
    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
    
      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer.from(chunk, encoding);
            encoding = '';
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
    
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    
    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) {
          stream.emit('error', er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
    
          if (addToFront) {
            if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            stream.emit('error', new Error('stream.push() after EOF'));
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
        }
      }
    
      return needMoreData(state);
    }
    
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    
        if (state.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }
    
    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }
    
    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };
    
    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };
    
    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    
    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
    
      if (n !== 0) state.emittedReadable = false;
    
      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }
    
      n = howMuchToRead(n, state);
    
      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }
    
      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.
    
      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);
    
      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }
    
      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }
    
      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;
    
      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }
    
      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
    
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }
    
      if (ret !== null) this.emit('data', ret);
    
      return ret;
    };
    
    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
    
      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }
    
    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }
    
    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }
    
    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state);
      }
    }
    
    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }
    
    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('_read() is not implemented'));
    };
    
    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
    
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
    
      dest.on('unpipe', onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
    
      function onend() {
        debug('onend');
        dest.end();
      }
    
      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);
    
      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
    
        cleanedUp = true;
    
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
    
      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }
    
      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
      }
    
      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);
    
      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);
    
      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }
    
      // tell the dest that it's being piped to
      dest.emit('pipe', src);
    
      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }
    
      return dest;
    };
    
    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    
    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = { hasUnpiped: false };
    
      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;
    
      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
    
        if (!dest) dest = state.pipes;
    
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      }
    
      // slow case. multiple pipe destinations.
    
      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
    
        for (var i = 0; i < len; i++) {
          dests[i].emit('unpipe', this, unpipeInfo);
        }return this;
      }
    
      // try to find the right one.
      var index = indexOf(state.pipes, dest);
      if (index === -1) return this;
    
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
    
      dest.emit('unpipe', this, unpipeInfo);
    
      return this;
    };
    
    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
    
      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            pna.nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }
    
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    
    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }
    
    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };
    
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream, state);
      }
    }
    
    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }
    
      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }
    
    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };
    
    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }
    
    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var _this = this;
    
      var state = this._readableState;
      var paused = false;
    
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
    
        _this.push(null);
      });
    
      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);
    
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
    
      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
    
      // proxy certain important events.
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
    
      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      this._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
    
      return this;
    };
    
    Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._readableState.highWaterMark;
      }
    });
    
    // exposed for testing purposes only.
    Readable._fromList = fromList;
    
    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;
    
      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }
    
      return ret;
    }
    
    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }
    
    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    
    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    
    function endReadable(stream) {
      var state = stream._readableState;
    
      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
    
      if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream);
      }
    }
    
    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }
    
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./_stream_duplex":249,"./internal/streams/BufferList":254,"./internal/streams/destroy":255,"./internal/streams/stream":256,"_process":231,"core-util-is":100,"events":91,"inherits":199,"isarray":204,"process-nextick-args":257,"safe-buffer":264,"string_decoder/":258,"util":63}],252:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.
    
    'use strict';
    
    module.exports = Transform;
    
    var Duplex = require('./_stream_duplex');
    
    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/
    
    util.inherits(Transform, Duplex);
    
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
    
      var cb = ts.writecb;
    
      if (!cb) {
        return this.emit('error', new Error('write callback called multiple times'));
      }
    
      ts.writechunk = null;
      ts.writecb = null;
    
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
    
      cb(er);
    
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
    
      Duplex.call(this, options);
    
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
    
      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;
    
      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;
    
      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
    
        if (typeof options.flush === 'function') this._flush = options.flush;
      }
    
      // When the writable side finishes, then flush out anything remaining.
      this.on('prefinish', prefinish);
    }
    
    function prefinish() {
      var _this = this;
    
      if (typeof this._flush === 'function') {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    
    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    
    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('_transform() is not implemented');
    };
    
    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };
    
    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;
    
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };
    
    Transform.prototype._destroy = function (err, cb) {
      var _this2 = this;
    
      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
        _this2.emit('close');
      });
    };
    
    function done(stream, er, data) {
      if (er) return stream.emit('error', er);
    
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data);
    
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
    
      if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
    
      return stream.push(null);
    }
    },{"./_stream_duplex":249,"core-util-is":100,"inherits":199}],253:[function(require,module,exports){
    (function (process,global,setImmediate){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    // A bit simpler than readable streams.
    // Implement an async ._write(chunk, encoding, cb), and it'll handle all
    // the drain event emission and buffering.
    
    'use strict';
    
    /*<replacement>*/
    
    var pna = require('process-nextick-args');
    /*</replacement>*/
    
    module.exports = Writable;
    
    /* <replacement> */
    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }
    
    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;
    
      this.next = null;
      this.entry = null;
      this.finish = function () {
        onCorkedFinish(_this, state);
      };
    }
    /* </replacement> */
    
    /*<replacement>*/
    var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
    /*</replacement>*/
    
    /*<replacement>*/
    var Duplex;
    /*</replacement>*/
    
    Writable.WritableState = WritableState;
    
    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/
    
    /*<replacement>*/
    var internalUtil = {
      deprecate: require('util-deprecate')
    };
    /*</replacement>*/
    
    /*<replacement>*/
    var Stream = require('./internal/streams/stream');
    /*</replacement>*/
    
    /*<replacement>*/
    
    var Buffer = require('safe-buffer').Buffer;
    var OurUint8Array = global.Uint8Array || function () {};
    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    
    /*</replacement>*/
    
    var destroyImpl = require('./internal/streams/destroy');
    
    util.inherits(Writable, Stream);
    
    function nop() {}
    
    function WritableState(options, stream) {
      Duplex = Duplex || require('./_stream_duplex');
    
      options = options || {};
    
      // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.
      var isDuplex = stream instanceof Duplex;
    
      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;
    
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    
      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var writableHwm = options.writableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    
      if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;
    
      // cast to ints.
      this.highWaterMark = Math.floor(this.highWaterMark);
    
      // if _final has been called
      this.finalCalled = false;
    
      // drain event flag.
      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;
    
      // has it been destroyed
      this.destroyed = false;
    
      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
    
      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';
    
      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;
    
      // a flag to see when we're in the middle of a write.
      this.writing = false;
    
      // when true all writes will be buffered until .uncork() call
      this.corked = 0;
    
      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;
    
      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;
    
      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };
    
      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;
    
      // the amount that is being written when _write is called.
      this.writelen = 0;
    
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
    
      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;
    
      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;
    
      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;
    
      // count buffered requests
      this.bufferedRequestCount = 0;
    
      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    
    (function () {
      try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
          get: internalUtil.deprecate(function () {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })();
    
    // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.
    var realHasInstance;
    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function (object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
    
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function (object) {
        return object instanceof this;
      };
    }
    
    function Writable(options) {
      Duplex = Duplex || require('./_stream_duplex');
    
      // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.
    
      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.
      if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
      }
    
      this._writableState = new WritableState(options, this);
    
      // legacy.
      this.writable = true;
    
      if (options) {
        if (typeof options.write === 'function') this._write = options.write;
    
        if (typeof options.writev === 'function') this._writev = options.writev;
    
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    
        if (typeof options.final === 'function') this._final = options.final;
      }
    
      Stream.call(this);
    }
    
    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };
    
    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      pna.nextTick(cb, er);
    }
    
    // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
    
      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        pna.nextTick(cb, er);
        valid = false;
      }
      return valid;
    }
    
    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
    
      if (isBuf && !Buffer.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
    
      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }
    
      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
    
      if (typeof cb !== 'function') cb = nop;
    
      if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
    
      return ret;
    };
    
    Writable.prototype.cork = function () {
      var state = this._writableState;
    
      state.corked++;
    };
    
    Writable.prototype.uncork = function () {
      var state = this._writableState;
    
      if (state.corked) {
        state.corked--;
    
        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };
    
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }
      return chunk;
    }
    
    Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._writableState.highWaterMark;
      }
    });
    
    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
    
      state.length += len;
    
      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;
    
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
    
      return ret;
    }
    
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
    
      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        pna.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        pna.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        stream.emit('error', er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        stream.emit('error', er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
      }
    }
    
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
    
      onwriteStateUpdate(state);
    
      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);
    
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
    
        if (sync) {
          /*<replacement>*/
          asyncWrite(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    
    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    
    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }
    
    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
    
      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
    
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
    
        doWrite(stream, state, true, state.length, buffer, '', holder.finish);
    
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
    
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }
    
        if (entry === null) state.lastBufferedRequest = null;
      }
    
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    
    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('_write() is not implemented'));
    };
    
    Writable.prototype._writev = null;
    
    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;
    
      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }
    
      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    
      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
    
      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };
    
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;
        if (err) {
          stream.emit('error', err);
        }
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function') {
          state.pendingcb++;
          state.finalCalled = true;
          pna.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }
    
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');
        }
      }
      return need;
    }
    
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = corkReq;
      } else {
        state.corkedRequestsFree = corkReq;
      }
    }
    
    Object.defineProperty(Writable.prototype, 'destroyed', {
      get: function () {
        if (this._writableState === undefined) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        }
    
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
      }
    });
    
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function (err, cb) {
      this.end();
      cb(err);
    };
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
    },{"./_stream_duplex":249,"./internal/streams/destroy":255,"./internal/streams/stream":256,"_process":231,"core-util-is":100,"inherits":199,"process-nextick-args":257,"safe-buffer":264,"timers":295,"util-deprecate":303}],254:[function(require,module,exports){
    'use strict';
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Buffer = require('safe-buffer').Buffer;
    var util = require('util');
    
    function copyBuffer(src, target, offset) {
      src.copy(target, offset);
    }
    
    module.exports = function () {
      function BufferList() {
        _classCallCheck(this, BufferList);
    
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
    
      BufferList.prototype.push = function push(v) {
        var entry = { data: v, next: null };
        if (this.length > 0) this.tail.next = entry;else this.head = entry;
        this.tail = entry;
        ++this.length;
      };
    
      BufferList.prototype.unshift = function unshift(v) {
        var entry = { data: v, next: this.head };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };
    
      BufferList.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
        --this.length;
        return ret;
      };
    
      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };
    
      BufferList.prototype.join = function join(s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;
        while (p = p.next) {
          ret += s + p.data;
        }return ret;
      };
    
      BufferList.prototype.concat = function concat(n) {
        if (this.length === 0) return Buffer.alloc(0);
        if (this.length === 1) return this.head.data;
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      };
    
      return BufferList;
    }();
    
    if (util && util.inspect && util.inspect.custom) {
      module.exports.prototype[util.inspect.custom] = function () {
        var obj = util.inspect({ length: this.length });
        return this.constructor.name + ' ' + obj;
      };
    }
    },{"safe-buffer":264,"util":63}],255:[function(require,module,exports){
    'use strict';
    
    /*<replacement>*/
    
    var pna = require('process-nextick-args');
    /*</replacement>*/
    
    // undocumented cb() API, needed for core, not for public API
    function destroy(err, cb) {
      var _this = this;
    
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
    
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
          pna.nextTick(emitErrorNT, this, err);
        }
        return this;
      }
    
      // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks
    
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
    
      // if this is a duplex stream mark the writable part as destroyed as well
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
    
      this._destroy(err || null, function (err) {
        if (!cb && err) {
          pna.nextTick(emitErrorNT, _this, err);
          if (_this._writableState) {
            _this._writableState.errorEmitted = true;
          }
        } else if (cb) {
          cb(err);
        }
      });
    
      return this;
    }
    
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
    
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    
    function emitErrorNT(self, err) {
      self.emit('error', err);
    }
    
    module.exports = {
      destroy: destroy,
      undestroy: undestroy
    };
    },{"process-nextick-args":257}],256:[function(require,module,exports){
    module.exports = require('events').EventEmitter;
    
    },{"events":91}],257:[function(require,module,exports){
    (function (process){
    'use strict';
    
    if (!process.version ||
        process.version.indexOf('v0.') === 0 ||
        process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
      module.exports = { nextTick: nextTick };
    } else {
      module.exports = process
    }
    
    function nextTick(fn, arg1, arg2, arg3) {
      if (typeof fn !== 'function') {
        throw new TypeError('"callback" argument must be a function');
      }
      var len = arguments.length;
      var args, i;
      switch (len) {
      case 0:
      case 1:
        return process.nextTick(fn);
      case 2:
        return process.nextTick(function afterTickOne() {
          fn.call(null, arg1);
        });
      case 3:
        return process.nextTick(function afterTickTwo() {
          fn.call(null, arg1, arg2);
        });
      case 4:
        return process.nextTick(function afterTickThree() {
          fn.call(null, arg1, arg2, arg3);
        });
      default:
        args = new Array(len - 1);
        i = 0;
        while (i < args.length) {
          args[i++] = arguments[i];
        }
        return process.nextTick(function afterTick() {
          fn.apply(null, args);
        });
      }
    }
    
    
    }).call(this,require('_process'))
    },{"_process":231}],258:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    'use strict';
    
    /*<replacement>*/
    
    var Buffer = require('safe-buffer').Buffer;
    /*</replacement>*/
    
    var isEncoding = Buffer.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };
    
    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    };
    
    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }
    
    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }
    
    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };
    
    StringDecoder.prototype.end = utf8End;
    
    // Returns only complete characters in a Buffer
    StringDecoder.prototype.text = utf8Text;
    
    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    
    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    }
    
    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    
    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    }
    
    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    
    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }
    
    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    }
    
    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }
    
    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }
    
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }
    
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }
    
    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }
    },{"safe-buffer":264}],259:[function(require,module,exports){
    module.exports = require('./readable').PassThrough
    
    },{"./readable":260}],260:[function(require,module,exports){
    exports = module.exports = require('./lib/_stream_readable.js');
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require('./lib/_stream_writable.js');
    exports.Duplex = require('./lib/_stream_duplex.js');
    exports.Transform = require('./lib/_stream_transform.js');
    exports.PassThrough = require('./lib/_stream_passthrough.js');
    
    },{"./lib/_stream_duplex.js":249,"./lib/_stream_passthrough.js":250,"./lib/_stream_readable.js":251,"./lib/_stream_transform.js":252,"./lib/_stream_writable.js":253}],261:[function(require,module,exports){
    module.exports = require('./readable').Transform
    
    },{"./readable":260}],262:[function(require,module,exports){
    module.exports = require('./lib/_stream_writable.js');
    
    },{"./lib/_stream_writable.js":253}],263:[function(require,module,exports){
    'use strict'
    var Buffer = require('buffer').Buffer
    var inherits = require('inherits')
    var HashBase = require('hash-base')
    
    var ARRAY16 = new Array(16)
    
    var zl = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ]
    
    var zr = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ]
    
    var sl = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ]
    
    var sr = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ]
    
    var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
    var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]
    
    function RIPEMD160 () {
      HashBase.call(this, 64)
    
      // state
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0
    }
    
    inherits(RIPEMD160, HashBase)
    
    RIPEMD160.prototype._update = function () {
      var words = ARRAY16
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)
    
      var al = this._a | 0
      var bl = this._b | 0
      var cl = this._c | 0
      var dl = this._d | 0
      var el = this._e | 0
    
      var ar = this._a | 0
      var br = this._b | 0
      var cr = this._c | 0
      var dr = this._d | 0
      var er = this._e | 0
    
      // computation
      for (var i = 0; i < 80; i += 1) {
        var tl
        var tr
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
        } else { // if (i<80) {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
        }
    
        al = el
        el = dl
        dl = rotl(cl, 10)
        cl = bl
        bl = tl
    
        ar = er
        er = dr
        dr = rotl(cr, 10)
        cr = br
        br = tr
      }
    
      // update state
      var t = (this._b + cl + dr) | 0
      this._b = (this._c + dl + er) | 0
      this._c = (this._d + el + ar) | 0
      this._d = (this._e + al + br) | 0
      this._e = (this._a + bl + cr) | 0
      this._a = t
    }
    
    RIPEMD160.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64)
        this._update()
        this._blockOffset = 0
      }
    
      this._block.fill(0, this._blockOffset, 56)
      this._block.writeUInt32LE(this._length[0], 56)
      this._block.writeUInt32LE(this._length[1], 60)
      this._update()
    
      // produce result
      var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
      buffer.writeInt32LE(this._a, 0)
      buffer.writeInt32LE(this._b, 4)
      buffer.writeInt32LE(this._c, 8)
      buffer.writeInt32LE(this._d, 12)
      buffer.writeInt32LE(this._e, 16)
      return buffer
    }
    
    function rotl (x, n) {
      return (x << n) | (x >>> (32 - n))
    }
    
    function fn1 (a, b, c, d, e, m, k, s) {
      return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
    }
    
    function fn2 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
    }
    
    function fn3 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
    }
    
    function fn4 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
    }
    
    function fn5 (a, b, c, d, e, m, k, s) {
      return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
    }
    
    module.exports = RIPEMD160
    
    },{"buffer":96,"hash-base":180,"inherits":199}],264:[function(require,module,exports){
    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer')
    var Buffer = buffer.Buffer
    
    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key]
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports)
      exports.Buffer = SafeBuffer
    }
    
    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }
    
    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer)
    
    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    }
    
    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size)
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding)
        } else {
          buf.fill(fill)
        }
      } else {
        buf.fill(0)
      }
      return buf
    }
    
    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    }
    
    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    }
    
    },{"buffer":96}],265:[function(require,module,exports){
    const scrypt = require('./scryptSync')
    scrypt.async = require('./scrypt')
    module.exports = scrypt
    
    },{"./scrypt":266,"./scryptSync":267}],266:[function(require,module,exports){
    const crypto = require('crypto')
    const {
      checkAndInit,
      smix
    } = require('./utils')
    
    // N = Cpu cost, r = Memory cost, p = parallelization cost
    async function scrypt (key, salt, N, r, p, dkLen, progressCallback, promiseInterval) {
      const {
        XY,
        V,
        B32,
        x,
        _X,
        B,
        tickCallback
      } = checkAndInit(key, salt, N, r, p, dkLen, progressCallback)
    
      for (var i = 0; i < p; i++) {
        await smix(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval)
      }
    
      return crypto.pbkdf2Sync(key, B, 1, dkLen, 'sha256')
    }
    
    module.exports = scrypt
    
    },{"./utils":268,"crypto":106}],267:[function(require,module,exports){
    const crypto = require('crypto')
    const {
      checkAndInit,
      smixSync
    } = require('./utils')
    
    // N = Cpu cost, r = Memory cost, p = parallelization cost
    function scrypt (key, salt, N, r, p, dkLen, progressCallback) {
      const {
        XY,
        V,
        B32,
        x,
        _X,
        B,
        tickCallback
      } = checkAndInit(key, salt, N, r, p, dkLen, progressCallback)
    
      for (var i = 0; i < p; i++) {
        smixSync(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback)
      }
    
      return crypto.pbkdf2Sync(key, B, 1, dkLen, 'sha256')
    }
    
    module.exports = scrypt
    
    },{"./utils":268,"crypto":106}],268:[function(require,module,exports){
    (function (Buffer,setImmediate){
    const crypto = require('crypto')
    const MAX_VALUE = 0x7fffffff
    const DEFAULT_PROMISE_INTERVAL = 5000
    /* eslint-disable camelcase */
    
    function checkAndInit (key, salt, N, r, p, dkLen, progressCallback) {
      if (N === 0 || (N & (N - 1)) !== 0) throw Error('N must be > 0 and a power of 2')
    
      if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large')
      if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large')
    
      let XY = Buffer.alloc(256 * r)
      let V = Buffer.alloc(128 * r * N)
    
      // pseudo global
      let B32 = new Int32Array(16) // salsa20_8
      let x = new Int32Array(16) // salsa20_8
      let _X = Buffer.alloc(64) // blockmix_salsa8
    
      // pseudo global
      let B = crypto.pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256')
    
      let tickCallback
      if (progressCallback) {
        let totalOps = p * N * 2
        let currentOp = 0
    
        tickCallback = function () {
          ++currentOp
    
          // send progress notifications once every 1,000 ops
          if (currentOp % 1000 === 0) {
            progressCallback({
              current: currentOp,
              total: totalOps,
              percent: (currentOp / totalOps) * 100.0
            })
          }
        }
      }
      return {
        XY,
        V,
        B32,
        x,
        _X,
        B,
        tickCallback
      }
    }
    
    async function smix (B, Bi, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval) {
      promiseInterval = promiseInterval || DEFAULT_PROMISE_INTERVAL
      let Xi = 0
      let Yi = 128 * r
      let i
    
      B.copy(XY, Xi, Bi, Bi + Yi)
    
      for (i = 0; i < N; i++) {
        XY.copy(V, i * Yi, Xi, Xi + Yi)
        if (i % promiseInterval === 0) {
          await new Promise(resolve => setImmediate(resolve))
        }
        blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x)
    
        if (tickCallback) tickCallback()
      }
    
      for (i = 0; i < N; i++) {
        let offset = Xi + (2 * r - 1) * 64
        let j = XY.readUInt32LE(offset) & (N - 1)
        blockxor(V, j * Yi, XY, Xi, Yi)
        if (i % promiseInterval === 0) {
          await new Promise(resolve => setImmediate(resolve))
        }
        blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x)
    
        if (tickCallback) tickCallback()
      }
    
      XY.copy(B, Bi, Xi, Xi + Yi)
    }
    
    function smixSync (B, Bi, r, N, V, XY, _X, B32, x, tickCallback) {
      let Xi = 0
      let Yi = 128 * r
      let i
    
      B.copy(XY, Xi, Bi, Bi + Yi)
    
      for (i = 0; i < N; i++) {
        XY.copy(V, i * Yi, Xi, Xi + Yi)
        blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x)
    
        if (tickCallback) tickCallback()
      }
    
      for (i = 0; i < N; i++) {
        let offset = Xi + (2 * r - 1) * 64
        let j = XY.readUInt32LE(offset) & (N - 1)
        blockxor(V, j * Yi, XY, Xi, Yi)
        blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x)
    
        if (tickCallback) tickCallback()
      }
    
      XY.copy(B, Bi, Xi, Xi + Yi)
    }
    
    function blockmix_salsa8 (BY, Bi, Yi, r, _X, B32, x) {
      let i
    
      arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64)
    
      for (i = 0; i < 2 * r; i++) {
        blockxor(BY, i * 64, _X, 0, 64)
        salsa20_8(_X, B32, x)
        arraycopy(_X, 0, BY, Yi + (i * 64), 64)
      }
    
      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2) * 64, BY, Bi + (i * 64), 64)
      }
    
      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64)
      }
    }
    
    function R (a, b) {
      return (a << b) | (a >>> (32 - b))
    }
    
    function salsa20_8 (B, B32, x) {
      let i
    
      for (i = 0; i < 16; i++) {
        B32[i] = (B[i * 4 + 0] & 0xff) << 0
        B32[i] |= (B[i * 4 + 1] & 0xff) << 8
        B32[i] |= (B[i * 4 + 2] & 0xff) << 16
        B32[i] |= (B[i * 4 + 3] & 0xff) << 24
        // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js
      }
    
      arraycopy(B32, 0, x, 0, 16)
    
      for (i = 8; i > 0; i -= 2) {
        x[4] ^= R(x[0] + x[12], 7)
        x[8] ^= R(x[4] + x[0], 9)
        x[12] ^= R(x[8] + x[4], 13)
        x[0] ^= R(x[12] + x[8], 18)
        x[9] ^= R(x[5] + x[1], 7)
        x[13] ^= R(x[9] + x[5], 9)
        x[1] ^= R(x[13] + x[9], 13)
        x[5] ^= R(x[1] + x[13], 18)
        x[14] ^= R(x[10] + x[6], 7)
        x[2] ^= R(x[14] + x[10], 9)
        x[6] ^= R(x[2] + x[14], 13)
        x[10] ^= R(x[6] + x[2], 18)
        x[3] ^= R(x[15] + x[11], 7)
        x[7] ^= R(x[3] + x[15], 9)
        x[11] ^= R(x[7] + x[3], 13)
        x[15] ^= R(x[11] + x[7], 18)
        x[1] ^= R(x[0] + x[3], 7)
        x[2] ^= R(x[1] + x[0], 9)
        x[3] ^= R(x[2] + x[1], 13)
        x[0] ^= R(x[3] + x[2], 18)
        x[6] ^= R(x[5] + x[4], 7)
        x[7] ^= R(x[6] + x[5], 9)
        x[4] ^= R(x[7] + x[6], 13)
        x[5] ^= R(x[4] + x[7], 18)
        x[11] ^= R(x[10] + x[9], 7)
        x[8] ^= R(x[11] + x[10], 9)
        x[9] ^= R(x[8] + x[11], 13)
        x[10] ^= R(x[9] + x[8], 18)
        x[12] ^= R(x[15] + x[14], 7)
        x[13] ^= R(x[12] + x[15], 9)
        x[14] ^= R(x[13] + x[12], 13)
        x[15] ^= R(x[14] + x[13], 18)
      }
    
      for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i]
    
      for (i = 0; i < 16; i++) {
        let bi = i * 4
        B[bi + 0] = (B32[i] >> 0 & 0xff)
        B[bi + 1] = (B32[i] >> 8 & 0xff)
        B[bi + 2] = (B32[i] >> 16 & 0xff)
        B[bi + 3] = (B32[i] >> 24 & 0xff)
        // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js
      }
    }
    
    // naive approach... going back to loop unrolling may yield additional performance
    function blockxor (S, Si, D, Di, len) {
      for (let i = 0; i < len; i++) {
        D[Di + i] ^= S[Si + i]
      }
    }
    
    function arraycopy (src, srcPos, dest, destPos, length) {
      if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {
        src.copy(dest, destPos, srcPos, srcPos + length)
      } else {
        while (length--) {
          dest[destPos++] = src[srcPos++]
        }
      }
    }
    
    module.exports = {
      checkAndInit,
      smix,
      smixSync
    }
    
    }).call(this,require("buffer").Buffer,require("timers").setImmediate)
    },{"buffer":96,"crypto":106,"timers":295}],269:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    
    // prototype class for hash functions
    function Hash (blockSize, finalSize) {
      this._block = Buffer.alloc(blockSize)
      this._finalSize = finalSize
      this._blockSize = blockSize
      this._len = 0
    }
    
    Hash.prototype.update = function (data, enc) {
      if (typeof data === 'string') {
        enc = enc || 'utf8'
        data = Buffer.from(data, enc)
      }
    
      var block = this._block
      var blockSize = this._blockSize
      var length = data.length
      var accum = this._len
    
      for (var offset = 0; offset < length;) {
        var assigned = accum % blockSize
        var remainder = Math.min(length - offset, blockSize - assigned)
    
        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i]
        }
    
        accum += remainder
        offset += remainder
    
        if ((accum % blockSize) === 0) {
          this._update(block)
        }
      }
    
      this._len += length
      return this
    }
    
    Hash.prototype.digest = function (enc) {
      var rem = this._len % this._blockSize
    
      this._block[rem] = 0x80
    
      // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
      // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
      this._block.fill(0, rem + 1)
    
      if (rem >= this._finalSize) {
        this._update(this._block)
        this._block.fill(0)
      }
    
      var bits = this._len * 8
    
      // uint32
      if (bits <= 0xffffffff) {
        this._block.writeUInt32BE(bits, this._blockSize - 4)
    
      // uint64
      } else {
        var lowBits = (bits & 0xffffffff) >>> 0
        var highBits = (bits - lowBits) / 0x100000000
    
        this._block.writeUInt32BE(highBits, this._blockSize - 8)
        this._block.writeUInt32BE(lowBits, this._blockSize - 4)
      }
    
      this._update(this._block)
      var hash = this._hash()
    
      return enc ? hash.toString(enc) : hash
    }
    
    Hash.prototype._update = function () {
      throw new Error('_update must be implemented by subclass')
    }
    
    module.exports = Hash
    
    },{"safe-buffer":264}],270:[function(require,module,exports){
    var exports = module.exports = function SHA (algorithm) {
      algorithm = algorithm.toLowerCase()
    
      var Algorithm = exports[algorithm]
      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')
    
      return new Algorithm()
    }
    
    exports.sha = require('./sha')
    exports.sha1 = require('./sha1')
    exports.sha224 = require('./sha224')
    exports.sha256 = require('./sha256')
    exports.sha384 = require('./sha384')
    exports.sha512 = require('./sha512')
    
    },{"./sha":271,"./sha1":272,"./sha224":273,"./sha256":274,"./sha384":275,"./sha512":276}],271:[function(require,module,exports){
    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
     * in FIPS PUB 180-1
     * This source code is derived from sha1.js of the same repository.
     * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
     * operation was added.
     */
    
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var K = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ]
    
    var W = new Array(80)
    
    function Sha () {
      this.init()
      this._w = W
    
      Hash.call(this, 64, 56)
    }
    
    inherits(Sha, Hash)
    
    Sha.prototype.init = function () {
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0
    
      return this
    }
    
    function rotl5 (num) {
      return (num << 5) | (num >>> 27)
    }
    
    function rotl30 (num) {
      return (num << 30) | (num >>> 2)
    }
    
    function ft (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }
    
    Sha.prototype._update = function (M) {
      var W = this._w
    
      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0
    
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]
    
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20)
        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
    
        e = d
        d = c
        c = rotl30(b)
        b = a
        a = t
      }
    
      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
    }
    
    Sha.prototype._hash = function () {
      var H = Buffer.allocUnsafe(20)
    
      H.writeInt32BE(this._a | 0, 0)
      H.writeInt32BE(this._b | 0, 4)
      H.writeInt32BE(this._c | 0, 8)
      H.writeInt32BE(this._d | 0, 12)
      H.writeInt32BE(this._e | 0, 16)
    
      return H
    }
    
    module.exports = Sha
    
    },{"./hash":269,"inherits":199,"safe-buffer":264}],272:[function(require,module,exports){
    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
     * in FIPS PUB 180-1
     * Version 2.1a Copyright Paul Johnston 2000 - 2002.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for details.
     */
    
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var K = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ]
    
    var W = new Array(80)
    
    function Sha1 () {
      this.init()
      this._w = W
    
      Hash.call(this, 64, 56)
    }
    
    inherits(Sha1, Hash)
    
    Sha1.prototype.init = function () {
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0
    
      return this
    }
    
    function rotl1 (num) {
      return (num << 1) | (num >>> 31)
    }
    
    function rotl5 (num) {
      return (num << 5) | (num >>> 27)
    }
    
    function rotl30 (num) {
      return (num << 30) | (num >>> 2)
    }
    
    function ft (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }
    
    Sha1.prototype._update = function (M) {
      var W = this._w
    
      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0
    
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])
    
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20)
        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
    
        e = d
        d = c
        c = rotl30(b)
        b = a
        a = t
      }
    
      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
    }
    
    Sha1.prototype._hash = function () {
      var H = Buffer.allocUnsafe(20)
    
      H.writeInt32BE(this._a | 0, 0)
      H.writeInt32BE(this._b | 0, 4)
      H.writeInt32BE(this._c | 0, 8)
      H.writeInt32BE(this._d | 0, 12)
      H.writeInt32BE(this._e | 0, 16)
    
      return H
    }
    
    module.exports = Sha1
    
    },{"./hash":269,"inherits":199,"safe-buffer":264}],273:[function(require,module,exports){
    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */
    
    var inherits = require('inherits')
    var Sha256 = require('./sha256')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var W = new Array(64)
    
    function Sha224 () {
      this.init()
    
      this._w = W // new Array(64)
    
      Hash.call(this, 64, 56)
    }
    
    inherits(Sha224, Sha256)
    
    Sha224.prototype.init = function () {
      this._a = 0xc1059ed8
      this._b = 0x367cd507
      this._c = 0x3070dd17
      this._d = 0xf70e5939
      this._e = 0xffc00b31
      this._f = 0x68581511
      this._g = 0x64f98fa7
      this._h = 0xbefa4fa4
    
      return this
    }
    
    Sha224.prototype._hash = function () {
      var H = Buffer.allocUnsafe(28)
    
      H.writeInt32BE(this._a, 0)
      H.writeInt32BE(this._b, 4)
      H.writeInt32BE(this._c, 8)
      H.writeInt32BE(this._d, 12)
      H.writeInt32BE(this._e, 16)
      H.writeInt32BE(this._f, 20)
      H.writeInt32BE(this._g, 24)
    
      return H
    }
    
    module.exports = Sha224
    
    },{"./hash":269,"./sha256":274,"inherits":199,"safe-buffer":264}],274:[function(require,module,exports){
    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */
    
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var K = [
      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
    ]
    
    var W = new Array(64)
    
    function Sha256 () {
      this.init()
    
      this._w = W // new Array(64)
    
      Hash.call(this, 64, 56)
    }
    
    inherits(Sha256, Hash)
    
    Sha256.prototype.init = function () {
      this._a = 0x6a09e667
      this._b = 0xbb67ae85
      this._c = 0x3c6ef372
      this._d = 0xa54ff53a
      this._e = 0x510e527f
      this._f = 0x9b05688c
      this._g = 0x1f83d9ab
      this._h = 0x5be0cd19
    
      return this
    }
    
    function ch (x, y, z) {
      return z ^ (x & (y ^ z))
    }
    
    function maj (x, y, z) {
      return (x & y) | (z & (x | y))
    }
    
    function sigma0 (x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
    }
    
    function sigma1 (x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
    }
    
    function gamma0 (x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
    }
    
    function gamma1 (x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
    }
    
    Sha256.prototype._update = function (M) {
      var W = this._w
    
      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0
      var f = this._f | 0
      var g = this._g | 0
      var h = this._h | 0
    
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0
    
      for (var j = 0; j < 64; ++j) {
        var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
        var T2 = (sigma0(a) + maj(a, b, c)) | 0
    
        h = g
        g = f
        f = e
        e = (d + T1) | 0
        d = c
        c = b
        b = a
        a = (T1 + T2) | 0
      }
    
      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
      this._f = (f + this._f) | 0
      this._g = (g + this._g) | 0
      this._h = (h + this._h) | 0
    }
    
    Sha256.prototype._hash = function () {
      var H = Buffer.allocUnsafe(32)
    
      H.writeInt32BE(this._a, 0)
      H.writeInt32BE(this._b, 4)
      H.writeInt32BE(this._c, 8)
      H.writeInt32BE(this._d, 12)
      H.writeInt32BE(this._e, 16)
      H.writeInt32BE(this._f, 20)
      H.writeInt32BE(this._g, 24)
      H.writeInt32BE(this._h, 28)
    
      return H
    }
    
    module.exports = Sha256
    
    },{"./hash":269,"inherits":199,"safe-buffer":264}],275:[function(require,module,exports){
    var inherits = require('inherits')
    var SHA512 = require('./sha512')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var W = new Array(160)
    
    function Sha384 () {
      this.init()
      this._w = W
    
      Hash.call(this, 128, 112)
    }
    
    inherits(Sha384, SHA512)
    
    Sha384.prototype.init = function () {
      this._ah = 0xcbbb9d5d
      this._bh = 0x629a292a
      this._ch = 0x9159015a
      this._dh = 0x152fecd8
      this._eh = 0x67332667
      this._fh = 0x8eb44a87
      this._gh = 0xdb0c2e0d
      this._hh = 0x47b5481d
    
      this._al = 0xc1059ed8
      this._bl = 0x367cd507
      this._cl = 0x3070dd17
      this._dl = 0xf70e5939
      this._el = 0xffc00b31
      this._fl = 0x68581511
      this._gl = 0x64f98fa7
      this._hl = 0xbefa4fa4
    
      return this
    }
    
    Sha384.prototype._hash = function () {
      var H = Buffer.allocUnsafe(48)
    
      function writeInt64BE (h, l, offset) {
        H.writeInt32BE(h, offset)
        H.writeInt32BE(l, offset + 4)
      }
    
      writeInt64BE(this._ah, this._al, 0)
      writeInt64BE(this._bh, this._bl, 8)
      writeInt64BE(this._ch, this._cl, 16)
      writeInt64BE(this._dh, this._dl, 24)
      writeInt64BE(this._eh, this._el, 32)
      writeInt64BE(this._fh, this._fl, 40)
    
      return H
    }
    
    module.exports = Sha384
    
    },{"./hash":269,"./sha512":276,"inherits":199,"safe-buffer":264}],276:[function(require,module,exports){
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ]
    
    var W = new Array(160)
    
    function Sha512 () {
      this.init()
      this._w = W
    
      Hash.call(this, 128, 112)
    }
    
    inherits(Sha512, Hash)
    
    Sha512.prototype.init = function () {
      this._ah = 0x6a09e667
      this._bh = 0xbb67ae85
      this._ch = 0x3c6ef372
      this._dh = 0xa54ff53a
      this._eh = 0x510e527f
      this._fh = 0x9b05688c
      this._gh = 0x1f83d9ab
      this._hh = 0x5be0cd19
    
      this._al = 0xf3bcc908
      this._bl = 0x84caa73b
      this._cl = 0xfe94f82b
      this._dl = 0x5f1d36f1
      this._el = 0xade682d1
      this._fl = 0x2b3e6c1f
      this._gl = 0xfb41bd6b
      this._hl = 0x137e2179
    
      return this
    }
    
    function Ch (x, y, z) {
      return z ^ (x & (y ^ z))
    }
    
    function maj (x, y, z) {
      return (x & y) | (z & (x | y))
    }
    
    function sigma0 (x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
    }
    
    function sigma1 (x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
    }
    
    function Gamma0 (x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
    }
    
    function Gamma0l (x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
    }
    
    function Gamma1 (x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
    }
    
    function Gamma1l (x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
    }
    
    function getCarry (a, b) {
      return (a >>> 0) < (b >>> 0) ? 1 : 0
    }
    
    Sha512.prototype._update = function (M) {
      var W = this._w
    
      var ah = this._ah | 0
      var bh = this._bh | 0
      var ch = this._ch | 0
      var dh = this._dh | 0
      var eh = this._eh | 0
      var fh = this._fh | 0
      var gh = this._gh | 0
      var hh = this._hh | 0
    
      var al = this._al | 0
      var bl = this._bl | 0
      var cl = this._cl | 0
      var dl = this._dl | 0
      var el = this._el | 0
      var fl = this._fl | 0
      var gl = this._gl | 0
      var hl = this._hl | 0
    
      for (var i = 0; i < 32; i += 2) {
        W[i] = M.readInt32BE(i * 4)
        W[i + 1] = M.readInt32BE(i * 4 + 4)
      }
      for (; i < 160; i += 2) {
        var xh = W[i - 15 * 2]
        var xl = W[i - 15 * 2 + 1]
        var gamma0 = Gamma0(xh, xl)
        var gamma0l = Gamma0l(xl, xh)
    
        xh = W[i - 2 * 2]
        xl = W[i - 2 * 2 + 1]
        var gamma1 = Gamma1(xh, xl)
        var gamma1l = Gamma1l(xl, xh)
    
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 7 * 2]
        var Wi7l = W[i - 7 * 2 + 1]
    
        var Wi16h = W[i - 16 * 2]
        var Wi16l = W[i - 16 * 2 + 1]
    
        var Wil = (gamma0l + Wi7l) | 0
        var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
        Wil = (Wil + gamma1l) | 0
        Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
        Wil = (Wil + Wi16l) | 0
        Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0
    
        W[i] = Wih
        W[i + 1] = Wil
      }
    
      for (var j = 0; j < 160; j += 2) {
        Wih = W[j]
        Wil = W[j + 1]
    
        var majh = maj(ah, bh, ch)
        var majl = maj(al, bl, cl)
    
        var sigma0h = sigma0(ah, al)
        var sigma0l = sigma0(al, ah)
        var sigma1h = sigma1(eh, el)
        var sigma1l = sigma1(el, eh)
    
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j]
        var Kil = K[j + 1]
    
        var chh = Ch(eh, fh, gh)
        var chl = Ch(el, fl, gl)
    
        var t1l = (hl + sigma1l) | 0
        var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
        t1l = (t1l + chl) | 0
        t1h = (t1h + chh + getCarry(t1l, chl)) | 0
        t1l = (t1l + Kil) | 0
        t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
        t1l = (t1l + Wil) | 0
        t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0
    
        // t2 = sigma0 + maj
        var t2l = (sigma0l + majl) | 0
        var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0
    
        hh = gh
        hl = gl
        gh = fh
        gl = fl
        fh = eh
        fl = el
        el = (dl + t1l) | 0
        eh = (dh + t1h + getCarry(el, dl)) | 0
        dh = ch
        dl = cl
        ch = bh
        cl = bl
        bh = ah
        bl = al
        al = (t1l + t2l) | 0
        ah = (t1h + t2h + getCarry(al, t1l)) | 0
      }
    
      this._al = (this._al + al) | 0
      this._bl = (this._bl + bl) | 0
      this._cl = (this._cl + cl) | 0
      this._dl = (this._dl + dl) | 0
      this._el = (this._el + el) | 0
      this._fl = (this._fl + fl) | 0
      this._gl = (this._gl + gl) | 0
      this._hl = (this._hl + hl) | 0
    
      this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
      this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
      this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
      this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
      this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
      this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
      this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
      this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
    }
    
    Sha512.prototype._hash = function () {
      var H = Buffer.allocUnsafe(64)
    
      function writeInt64BE (h, l, offset) {
        H.writeInt32BE(h, offset)
        H.writeInt32BE(l, offset + 4)
      }
    
      writeInt64BE(this._ah, this._al, 0)
      writeInt64BE(this._bh, this._bl, 8)
      writeInt64BE(this._ch, this._cl, 16)
      writeInt64BE(this._dh, this._dl, 24)
      writeInt64BE(this._eh, this._el, 32)
      writeInt64BE(this._fh, this._fl, 40)
      writeInt64BE(this._gh, this._gl, 48)
      writeInt64BE(this._hh, this._hl, 56)
    
      return H
    }
    
    module.exports = Sha512
    
    },{"./hash":269,"inherits":199,"safe-buffer":264}],277:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    module.exports = Stream;
    
    var EE = require('events').EventEmitter;
    var inherits = require('inherits');
    
    inherits(Stream, EE);
    Stream.Readable = require('readable-stream/readable.js');
    Stream.Writable = require('readable-stream/writable.js');
    Stream.Duplex = require('readable-stream/duplex.js');
    Stream.Transform = require('readable-stream/transform.js');
    Stream.PassThrough = require('readable-stream/passthrough.js');
    
    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;
    
    
    
    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.
    
    function Stream() {
      EE.call(this);
    }
    
    Stream.prototype.pipe = function(dest, options) {
      var source = this;
    
      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }
    
      source.on('data', ondata);
    
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
    
      dest.on('drain', ondrain);
    
      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }
    
      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
    
        dest.end();
      }
    
    
      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
    
        if (typeof dest.destroy === 'function') dest.destroy();
      }
    
      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }
    
      source.on('error', onerror);
      dest.on('error', onerror);
    
      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
    
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
    
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
    
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
    
        dest.removeListener('close', cleanup);
      }
    
      source.on('end', cleanup);
      source.on('close', cleanup);
    
      dest.on('close', cleanup);
    
      dest.emit('pipe', source);
    
      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };
    
    },{"events":91,"inherits":199,"readable-stream/duplex.js":248,"readable-stream/passthrough.js":259,"readable-stream/readable.js":260,"readable-stream/transform.js":261,"readable-stream/writable.js":262}],278:[function(require,module,exports){
    (function (global){
    var ClientRequest = require('./lib/request')
    var response = require('./lib/response')
    var extend = require('xtend')
    var statusCodes = require('builtin-status-codes')
    var url = require('url')
    
    var http = exports
    
    http.request = function (opts, cb) {
        if (typeof opts === 'string')
            opts = url.parse(opts)
        else
            opts = extend(opts)
    
        // Normally, the page is loaded from http or https, so not specifying a protocol
        // will result in a (valid) protocol-relative url. However, this won't work if
        // the protocol is something else, like 'file:'
        var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''
    
        var protocol = opts.protocol || defaultProtocol
        var host = opts.hostname || opts.host
        var port = opts.port
        var path = opts.path || '/'
    
        // Necessary for IPv6 addresses
        if (host && host.indexOf(':') !== -1)
            host = '[' + host + ']'
    
        // This may be a relative url. The browser should always be able to interpret it correctly.
        opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
        opts.method = (opts.method || 'GET').toUpperCase()
        opts.headers = opts.headers || {}
    
        // Also valid opts.auth, opts.mode
    
        var req = new ClientRequest(opts)
        if (cb)
            req.on('response', cb)
        return req
    }
    
    http.get = function get (opts, cb) {
        var req = http.request(opts, cb)
        req.end()
        return req
    }
    
    http.ClientRequest = ClientRequest
    http.IncomingMessage = response.IncomingMessage
    
    http.Agent = function () {}
    http.Agent.defaultMaxSockets = 4
    
    http.globalAgent = new http.Agent()
    
    http.STATUS_CODES = statusCodes
    
    http.METHODS = [
        'CHECKOUT',
        'CONNECT',
        'COPY',
        'DELETE',
        'GET',
        'HEAD',
        'LOCK',
        'M-SEARCH',
        'MERGE',
        'MKACTIVITY',
        'MKCOL',
        'MOVE',
        'NOTIFY',
        'OPTIONS',
        'PATCH',
        'POST',
        'PROPFIND',
        'PROPPATCH',
        'PURGE',
        'PUT',
        'REPORT',
        'SEARCH',
        'SUBSCRIBE',
        'TRACE',
        'UNLOCK',
        'UNSUBSCRIBE'
    ]
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./lib/request":280,"./lib/response":281,"builtin-status-codes":97,"url":300,"xtend":375}],279:[function(require,module,exports){
    (function (global){
    exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)
    
    exports.writableStream = isFunction(global.WritableStream)
    
    exports.abortController = isFunction(global.AbortController)
    
    exports.blobConstructor = false
    try {
        new Blob([new ArrayBuffer(1)])
        exports.blobConstructor = true
    } catch (e) {}
    
    // The xhr request to example.com may violate some restrictive CSP configurations,
    // so if we're running in a browser that supports `fetch`, avoid calling getXHR()
    // and assume support for certain features below.
    var xhr
    function getXHR () {
        // Cache the xhr value
        if (xhr !== undefined) return xhr
    
        if (global.XMLHttpRequest) {
            xhr = new global.XMLHttpRequest()
            // If XDomainRequest is available (ie only, where xhr might not work
            // cross domain), use the page location. Otherwise use example.com
            // Note: this doesn't actually make an http request.
            try {
                xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
            } catch(e) {
                xhr = null
            }
        } else {
            // Service workers don't have XHR
            xhr = null
        }
        return xhr
    }
    
    function checkTypeSupport (type) {
        var xhr = getXHR()
        if (!xhr) return false
        try {
            xhr.responseType = type
            return xhr.responseType === type
        } catch (e) {}
        return false
    }
    
    // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
    // Safari 7.1 appears to have fixed this bug.
    var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
    var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)
    
    // If fetch is supported, then arraybuffer will be supported too. Skip calling
    // checkTypeSupport(), since that calls getXHR().
    exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))
    
    // These next two tests unavoidably show warnings in Chrome. Since fetch will always
    // be used if it's available, just return false for these to avoid the warnings.
    exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
    exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
        checkTypeSupport('moz-chunked-arraybuffer')
    
    // If fetch is supported, then overrideMimeType will be supported too. Skip calling
    // getXHR().
    exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)
    
    exports.vbArray = isFunction(global.VBArray)
    
    function isFunction (value) {
        return typeof value === 'function'
    }
    
    xhr = null // Help gc
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}],280:[function(require,module,exports){
    (function (process,global,Buffer){
    var capability = require('./capability')
    var inherits = require('inherits')
    var response = require('./response')
    var stream = require('readable-stream')
    var toArrayBuffer = require('to-arraybuffer')
    
    var IncomingMessage = response.IncomingMessage
    var rStates = response.readyStates
    
    function decideMode (preferBinary, useFetch) {
        if (capability.fetch && useFetch) {
            return 'fetch'
        } else if (capability.mozchunkedarraybuffer) {
            return 'moz-chunked-arraybuffer'
        } else if (capability.msstream) {
            return 'ms-stream'
        } else if (capability.arraybuffer && preferBinary) {
            return 'arraybuffer'
        } else if (capability.vbArray && preferBinary) {
            return 'text:vbarray'
        } else {
            return 'text'
        }
    }
    
    var ClientRequest = module.exports = function (opts) {
        var self = this
        stream.Writable.call(self)
    
        self._opts = opts
        self._body = []
        self._headers = {}
        if (opts.auth)
            self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
        Object.keys(opts.headers).forEach(function (name) {
            self.setHeader(name, opts.headers[name])
        })
    
        var preferBinary
        var useFetch = true
        if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
            // If the use of XHR should be preferred. Not typically needed.
            useFetch = false
            preferBinary = true
        } else if (opts.mode === 'prefer-streaming') {
            // If streaming is a high priority but binary compatibility and
            // the accuracy of the 'content-type' header aren't
            preferBinary = false
        } else if (opts.mode === 'allow-wrong-content-type') {
            // If streaming is more important than preserving the 'content-type' header
            preferBinary = !capability.overrideMimeType
        } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
            // Use binary if text streaming may corrupt data or the content-type header, or for speed
            preferBinary = true
        } else {
            throw new Error('Invalid value for opts.mode')
        }
        self._mode = decideMode(preferBinary, useFetch)
        self._fetchTimer = null
    
        self.on('finish', function () {
            self._onFinish()
        })
    }
    
    inherits(ClientRequest, stream.Writable)
    
    ClientRequest.prototype.setHeader = function (name, value) {
        var self = this
        var lowerName = name.toLowerCase()
        // This check is not necessary, but it prevents warnings from browsers about setting unsafe
        // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
        // http-browserify did it, so I will too.
        if (unsafeHeaders.indexOf(lowerName) !== -1)
            return
    
        self._headers[lowerName] = {
            name: name,
            value: value
        }
    }
    
    ClientRequest.prototype.getHeader = function (name) {
        var header = this._headers[name.toLowerCase()]
        if (header)
            return header.value
        return null
    }
    
    ClientRequest.prototype.removeHeader = function (name) {
        var self = this
        delete self._headers[name.toLowerCase()]
    }
    
    ClientRequest.prototype._onFinish = function () {
        var self = this
    
        if (self._destroyed)
            return
        var opts = self._opts
    
        var headersObj = self._headers
        var body = null
        if (opts.method !== 'GET' && opts.method !== 'HEAD') {
            if (capability.arraybuffer) {
                body = toArrayBuffer(Buffer.concat(self._body))
            } else if (capability.blobConstructor) {
                body = new global.Blob(self._body.map(function (buffer) {
                    return toArrayBuffer(buffer)
                }), {
                    type: (headersObj['content-type'] || {}).value || ''
                })
            } else {
                // get utf8 string
                body = Buffer.concat(self._body).toString()
            }
        }
    
        // create flattened list of headers
        var headersList = []
        Object.keys(headersObj).forEach(function (keyName) {
            var name = headersObj[keyName].name
            var value = headersObj[keyName].value
            if (Array.isArray(value)) {
                value.forEach(function (v) {
                    headersList.push([name, v])
                })
            } else {
                headersList.push([name, value])
            }
        })
    
        if (self._mode === 'fetch') {
            var signal = null
            var fetchTimer = null
            if (capability.abortController) {
                var controller = new AbortController()
                signal = controller.signal
                self._fetchAbortController = controller
    
                if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
                    self._fetchTimer = global.setTimeout(function () {
                        self.emit('requestTimeout')
                        if (self._fetchAbortController)
                            self._fetchAbortController.abort()
                    }, opts.requestTimeout)
                }
            }
    
            global.fetch(self._opts.url, {
                method: self._opts.method,
                headers: headersList,
                body: body || undefined,
                mode: 'cors',
                credentials: opts.withCredentials ? 'include' : 'same-origin',
                signal: signal
            }).then(function (response) {
                self._fetchResponse = response
                self._connect()
            }, function (reason) {
                global.clearTimeout(self._fetchTimer)
                if (!self._destroyed)
                    self.emit('error', reason)
            })
        } else {
            var xhr = self._xhr = new global.XMLHttpRequest()
            try {
                xhr.open(self._opts.method, self._opts.url, true)
            } catch (err) {
                process.nextTick(function () {
                    self.emit('error', err)
                })
                return
            }
    
            // Can't set responseType on really old browsers
            if ('responseType' in xhr)
                xhr.responseType = self._mode.split(':')[0]
    
            if ('withCredentials' in xhr)
                xhr.withCredentials = !!opts.withCredentials
    
            if (self._mode === 'text' && 'overrideMimeType' in xhr)
                xhr.overrideMimeType('text/plain; charset=x-user-defined')
    
            if ('requestTimeout' in opts) {
                xhr.timeout = opts.requestTimeout
                xhr.ontimeout = function () {
                    self.emit('requestTimeout')
                }
            }
    
            headersList.forEach(function (header) {
                xhr.setRequestHeader(header[0], header[1])
            })
    
            self._response = null
            xhr.onreadystatechange = function () {
                switch (xhr.readyState) {
                    case rStates.LOADING:
                    case rStates.DONE:
                        self._onXHRProgress()
                        break
                }
            }
            // Necessary for streaming in Firefox, since xhr.response is ONLY defined
            // in onprogress, not in onreadystatechange with xhr.readyState = 3
            if (self._mode === 'moz-chunked-arraybuffer') {
                xhr.onprogress = function () {
                    self._onXHRProgress()
                }
            }
    
            xhr.onerror = function () {
                if (self._destroyed)
                    return
                self.emit('error', new Error('XHR error'))
            }
    
            try {
                xhr.send(body)
            } catch (err) {
                process.nextTick(function () {
                    self.emit('error', err)
                })
                return
            }
        }
    }
    
    /**
     * Checks if xhr.status is readable and non-zero, indicating no error.
     * Even though the spec says it should be available in readyState 3,
     * accessing it throws an exception in IE8
     */
    function statusValid (xhr) {
        try {
            var status = xhr.status
            return (status !== null && status !== 0)
        } catch (e) {
            return false
        }
    }
    
    ClientRequest.prototype._onXHRProgress = function () {
        var self = this
    
        if (!statusValid(self._xhr) || self._destroyed)
            return
    
        if (!self._response)
            self._connect()
    
        self._response._onXHRProgress()
    }
    
    ClientRequest.prototype._connect = function () {
        var self = this
    
        if (self._destroyed)
            return
    
        self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer)
        self._response.on('error', function(err) {
            self.emit('error', err)
        })
    
        self.emit('response', self._response)
    }
    
    ClientRequest.prototype._write = function (chunk, encoding, cb) {
        var self = this
    
        self._body.push(chunk)
        cb()
    }
    
    ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
        var self = this
        self._destroyed = true
        global.clearTimeout(self._fetchTimer)
        if (self._response)
            self._response._destroyed = true
        if (self._xhr)
            self._xhr.abort()
        else if (self._fetchAbortController)
            self._fetchAbortController.abort()
    }
    
    ClientRequest.prototype.end = function (data, encoding, cb) {
        var self = this
        if (typeof data === 'function') {
            cb = data
            data = undefined
        }
    
        stream.Writable.prototype.end.call(self, data, encoding, cb)
    }
    
    ClientRequest.prototype.flushHeaders = function () {}
    ClientRequest.prototype.setTimeout = function () {}
    ClientRequest.prototype.setNoDelay = function () {}
    ClientRequest.prototype.setSocketKeepAlive = function () {}
    
    // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
    var unsafeHeaders = [
        'accept-charset',
        'accept-encoding',
        'access-control-request-headers',
        'access-control-request-method',
        'connection',
        'content-length',
        'cookie',
        'cookie2',
        'date',
        'dnt',
        'expect',
        'host',
        'keep-alive',
        'origin',
        'referer',
        'te',
        'trailer',
        'transfer-encoding',
        'upgrade',
        'via'
    ]
    
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
    },{"./capability":279,"./response":281,"_process":231,"buffer":96,"inherits":199,"readable-stream":260,"to-arraybuffer":296}],281:[function(require,module,exports){
    (function (process,global,Buffer){
    var capability = require('./capability')
    var inherits = require('inherits')
    var stream = require('readable-stream')
    
    var rStates = exports.readyStates = {
        UNSENT: 0,
        OPENED: 1,
        HEADERS_RECEIVED: 2,
        LOADING: 3,
        DONE: 4
    }
    
    var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
        var self = this
        stream.Readable.call(self)
    
        self._mode = mode
        self.headers = {}
        self.rawHeaders = []
        self.trailers = {}
        self.rawTrailers = []
    
        // Fake the 'close' event, but only once 'end' fires
        self.on('end', function () {
            // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
            process.nextTick(function () {
                self.emit('close')
            })
        })
    
        if (mode === 'fetch') {
            self._fetchResponse = response
    
            self.url = response.url
            self.statusCode = response.status
            self.statusMessage = response.statusText
            
            response.headers.forEach(function (header, key){
                self.headers[key.toLowerCase()] = header
                self.rawHeaders.push(key, header)
            })
    
            if (capability.writableStream) {
                var writable = new WritableStream({
                    write: function (chunk) {
                        return new Promise(function (resolve, reject) {
                            if (self._destroyed) {
                                reject()
                            } else if(self.push(new Buffer(chunk))) {
                                resolve()
                            } else {
                                self._resumeFetch = resolve
                            }
                        })
                    },
                    close: function () {
                        global.clearTimeout(fetchTimer)
                        if (!self._destroyed)
                            self.push(null)
                    },
                    abort: function (err) {
                        if (!self._destroyed)
                            self.emit('error', err)
                    }
                })
    
                try {
                    response.body.pipeTo(writable).catch(function (err) {
                        global.clearTimeout(fetchTimer)
                        if (!self._destroyed)
                            self.emit('error', err)
                    })
                    return
                } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
            }
            // fallback for when writableStream or pipeTo aren't available
            var reader = response.body.getReader()
            function read () {
                reader.read().then(function (result) {
                    if (self._destroyed)
                        return
                    if (result.done) {
                        global.clearTimeout(fetchTimer)
                        self.push(null)
                        return
                    }
                    self.push(new Buffer(result.value))
                    read()
                }).catch(function (err) {
                    global.clearTimeout(fetchTimer)
                    if (!self._destroyed)
                        self.emit('error', err)
                })
            }
            read()
        } else {
            self._xhr = xhr
            self._pos = 0
    
            self.url = xhr.responseURL
            self.statusCode = xhr.status
            self.statusMessage = xhr.statusText
            var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
            headers.forEach(function (header) {
                var matches = header.match(/^([^:]+):\s*(.*)/)
                if (matches) {
                    var key = matches[1].toLowerCase()
                    if (key === 'set-cookie') {
                        if (self.headers[key] === undefined) {
                            self.headers[key] = []
                        }
                        self.headers[key].push(matches[2])
                    } else if (self.headers[key] !== undefined) {
                        self.headers[key] += ', ' + matches[2]
                    } else {
                        self.headers[key] = matches[2]
                    }
                    self.rawHeaders.push(matches[1], matches[2])
                }
            })
    
            self._charset = 'x-user-defined'
            if (!capability.overrideMimeType) {
                var mimeType = self.rawHeaders['mime-type']
                if (mimeType) {
                    var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
                    if (charsetMatch) {
                        self._charset = charsetMatch[1].toLowerCase()
                    }
                }
                if (!self._charset)
                    self._charset = 'utf-8' // best guess
            }
        }
    }
    
    inherits(IncomingMessage, stream.Readable)
    
    IncomingMessage.prototype._read = function () {
        var self = this
    
        var resolve = self._resumeFetch
        if (resolve) {
            self._resumeFetch = null
            resolve()
        }
    }
    
    IncomingMessage.prototype._onXHRProgress = function () {
        var self = this
    
        var xhr = self._xhr
    
        var response = null
        switch (self._mode) {
            case 'text:vbarray': // For IE9
                if (xhr.readyState !== rStates.DONE)
                    break
                try {
                    // This fails in IE8
                    response = new global.VBArray(xhr.responseBody).toArray()
                } catch (e) {}
                if (response !== null) {
                    self.push(new Buffer(response))
                    break
                }
                // Falls through in IE8	
            case 'text':
                try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
                    response = xhr.responseText
                } catch (e) {
                    self._mode = 'text:vbarray'
                    break
                }
                if (response.length > self._pos) {
                    var newData = response.substr(self._pos)
                    if (self._charset === 'x-user-defined') {
                        var buffer = new Buffer(newData.length)
                        for (var i = 0; i < newData.length; i++)
                            buffer[i] = newData.charCodeAt(i) & 0xff
    
                        self.push(buffer)
                    } else {
                        self.push(newData, self._charset)
                    }
                    self._pos = response.length
                }
                break
            case 'arraybuffer':
                if (xhr.readyState !== rStates.DONE || !xhr.response)
                    break
                response = xhr.response
                self.push(new Buffer(new Uint8Array(response)))
                break
            case 'moz-chunked-arraybuffer': // take whole
                response = xhr.response
                if (xhr.readyState !== rStates.LOADING || !response)
                    break
                self.push(new Buffer(new Uint8Array(response)))
                break
            case 'ms-stream':
                response = xhr.response
                if (xhr.readyState !== rStates.LOADING)
                    break
                var reader = new global.MSStreamReader()
                reader.onprogress = function () {
                    if (reader.result.byteLength > self._pos) {
                        self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
                        self._pos = reader.result.byteLength
                    }
                }
                reader.onload = function () {
                    self.push(null)
                }
                // reader.onerror = ??? // TODO: this
                reader.readAsArrayBuffer(response)
                break
        }
    
        // The ms-stream case handles end separately in reader.onload()
        if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
            self.push(null)
        }
    }
    
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
    },{"./capability":279,"_process":231,"buffer":96,"inherits":199,"readable-stream":260}],282:[function(require,module,exports){
    'use strict';
    module.exports = function (str) {
        return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
            return '%' + c.charCodeAt(0).toString(16).toUpperCase();
        });
    };
    
    },{}],283:[function(require,module,exports){
    'use strict';
    
    var bind = require('function-bind');
    var ES = require('es-abstract/es5');
    var replace = bind.call(Function.call, String.prototype.replace);
    
    var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
    var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;
    
    module.exports = function trim() {
        var S = ES.ToString(ES.CheckObjectCoercible(this));
        return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
    };
    
    },{"es-abstract/es5":148,"function-bind":177}],284:[function(require,module,exports){
    'use strict';
    
    var bind = require('function-bind');
    var define = require('define-properties');
    
    var implementation = require('./implementation');
    var getPolyfill = require('./polyfill');
    var shim = require('./shim');
    
    var boundTrim = bind.call(Function.call, getPolyfill());
    
    define(boundTrim, {
        getPolyfill: getPolyfill,
        implementation: implementation,
        shim: shim
    });
    
    module.exports = boundTrim;
    
    },{"./implementation":283,"./polyfill":285,"./shim":286,"define-properties":108,"function-bind":177}],285:[function(require,module,exports){
    'use strict';
    
    var implementation = require('./implementation');
    
    var zeroWidthSpace = '\u200b';
    
    module.exports = function getPolyfill() {
        if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
            return String.prototype.trim;
        }
        return implementation;
    };
    
    },{"./implementation":283}],286:[function(require,module,exports){
    'use strict';
    
    var define = require('define-properties');
    var getPolyfill = require('./polyfill');
    
    module.exports = function shimStringTrim() {
        var polyfill = getPolyfill();
        define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
        return polyfill;
    };
    
    },{"./polyfill":285,"define-properties":108}],287:[function(require,module,exports){
    var isHexPrefixed = require('is-hex-prefixed');
    
    /**
     * Removes '0x' from a given `String` is present
     * @param {String} str the string value
     * @return {String|Optional} a string by pass if necessary
     */
    module.exports = function stripHexPrefix(str) {
      if (typeof str !== 'string') {
        return str;
      }
    
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    
    },{"is-hex-prefixed":203}],288:[function(require,module,exports){
    var unavailable = function unavailable() {
      throw "This swarm.js function isn't available on the browser.";
    };
    
    var fs = {
      readFile: unavailable
    };
    var files = {
      download: unavailable,
      safeDownloadArchived: unavailable,
      directoryTree: unavailable
    };
    var os = {
      platform: unavailable,
      arch: unavailable
    };
    var path = {
      join: unavailable,
      slice: unavailable
    };
    var child_process = {
      spawn: unavailable
    };
    var mimetype = {
      lookup: unavailable
    };
    var defaultArchives = {};
    var downloadUrl = null;
    
    var request = require("xhr-request-promise");
    
    var bytes = require("eth-lib/lib/bytes");
    
    var hash = require("./swarm-hash.js");
    
    var pick = require("./pick.js");
    
    var swarm = require("./swarm");
    
    module.exports = swarm({
      fs: fs,
      files: files,
      os: os,
      path: path,
      child_process: child_process,
      defaultArchives: defaultArchives,
      mimetype: mimetype,
      request: request,
      downloadUrl: downloadUrl,
      bytes: bytes,
      hash: hash,
      pick: pick
    });
    },{"./pick.js":289,"./swarm":291,"./swarm-hash.js":290,"eth-lib/lib/bytes":293,"xhr-request-promise":363}],289:[function(require,module,exports){
    var picker = function picker(type) {
      return function () {
        return new Promise(function (resolve, reject) {
          var fileLoader = function fileLoader(e) {
            var directory = {};
            var totalFiles = e.target.files.length;
            var loadedFiles = 0;
            [].map.call(e.target.files, function (file) {
              var reader = new FileReader();
    
              reader.onload = function (e) {
                var data = new Uint8Array(e.target.result);
    
                if (type === "directory") {
                  var path = file.webkitRelativePath;
                  directory[path.slice(path.indexOf("/") + 1)] = {
                    type: "text/plain",
                    data: data
                  };
                  if (++loadedFiles === totalFiles) resolve(directory);
                } else if (type === "file") {
                  var _path = file.webkitRelativePath;
                  resolve({
                    "type": mimetype.lookup(_path),
                    "data": data
                  });
                } else {
                  resolve(data);
                }
              };
    
              reader.readAsArrayBuffer(file);
            });
          };
    
          var fileInput;
    
          if (type === "directory") {
            fileInput = document.createElement("input");
            fileInput.addEventListener("change", fileLoader);
            fileInput.type = "file";
            fileInput.webkitdirectory = true;
            fileInput.mozdirectory = true;
            fileInput.msdirectory = true;
            fileInput.odirectory = true;
            fileInput.directory = true;
          } else {
            fileInput = document.createElement("input");
            fileInput.addEventListener("change", fileLoader);
            fileInput.type = "file";
          }
    
          ;
          var mouseEvent = document.createEvent("MouseEvents");
          mouseEvent.initEvent("click", true, false);
          fileInput.dispatchEvent(mouseEvent);
        });
      };
    };
    
    module.exports = {
      data: picker("data"),
      file: picker("file"),
      directory: picker("directory")
    };
    },{}],290:[function(require,module,exports){
    // Thanks https://github.com/axic/swarmhash
    var keccak = require("eth-lib/lib/hash").keccak256;
    
    var Bytes = require("eth-lib/lib/bytes");
    
    var swarmHashBlock = function swarmHashBlock(length, data) {
      var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));
      var bytes = Bytes.flatten([lengthEncoded, "0x0000", data]);
      return keccak(bytes).slice(2);
    }; // (Bytes | Uint8Array | String) -> String
    
    
    var swarmHash = function swarmHash(data) {
      if (typeof data === "string" && data.slice(0, 2) !== "0x") {
        data = Bytes.fromString(data);
      } else if (typeof data !== "string" && data.length !== undefined) {
        data = Bytes.fromUint8Array(data);
      }
    
      var length = Bytes.length(data);
    
      if (length <= 4096) {
        return swarmHashBlock(length, data);
      }
    
      var maxSize = 4096;
    
      while (maxSize * (4096 / 32) < length) {
        maxSize *= 4096 / 32;
      }
    
      var innerNodes = [];
    
      for (var i = 0; i < length; i += maxSize) {
        var size = maxSize < length - i ? maxSize : length - i;
        innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));
      }
    
      return swarmHashBlock(length, Bytes.flatten(innerNodes));
    };
    
    module.exports = swarmHash;
    },{"eth-lib/lib/bytes":293,"eth-lib/lib/hash":294}],291:[function(require,module,exports){
    // TODO: this is a temporary fix to hide those libraries from the browser. A
    // slightly better long-term solution would be to split this file into two,
    // separating the functions that are used on Node.js from the functions that
    // are used only on the browser.
    module.exports = function (_ref) {
      var fs = _ref.fs,
          files = _ref.files,
          os = _ref.os,
          path = _ref.path,
          child_process = _ref.child_process,
          mimetype = _ref.mimetype,
          defaultArchives = _ref.defaultArchives,
          request = _ref.request,
          downloadUrl = _ref.downloadUrl,
          bytes = _ref.bytes,
          hash = _ref.hash,
          pick = _ref.pick;
    
      // ∀ a . String -> JSON -> Map String a -o Map String a
      //   Inserts a key/val pair in an object impurely.
      var impureInsert = function impureInsert(key) {
        return function (val) {
          return function (map) {
            return map[key] = val, map;
          };
        };
      }; // String -> JSON -> Map String JSON
      //   Merges an array of keys and an array of vals into an object.
    
    
      var toMap = function toMap(keys) {
        return function (vals) {
          var map = {};
    
          for (var i = 0, l = keys.length; i < l; ++i) {
            map[keys[i]] = vals[i];
          }
    
          return map;
        };
      }; // ∀ a . Map String a -> Map String a -> Map String a
      //   Merges two maps into one.
    
    
      var merge = function merge(a) {
        return function (b) {
          var map = {};
    
          for (var key in a) {
            map[key] = a[key];
          }
    
          for (var _key in b) {
            map[_key] = b[_key];
          }
    
          return map;
        };
      }; // ∀ a . [a] -> [a] -> Bool
    
    
      var equals = function equals(a) {
        return function (b) {
          if (a.length !== b.length) {
            return false;
          } else {
            for (var i = 0, l = a.length; i < l; ++i) {
              if (a[i] !== b[i]) return false;
            }
          }
    
          return true;
        };
      }; // String -> String -> String
    
    
      var rawUrl = function rawUrl(swarmUrl) {
        return function (hash) {
          return "".concat(swarmUrl, "/bzzr:/").concat(hash);
        };
      }; // String -> String -> Promise Uint8Array
      //   Gets the raw contents of a Swarm hash address.
    
    
      var downloadData = function downloadData(swarmUrl) {
        return function (hash) {
          return request(rawUrl(swarmUrl)(hash), {
            responseType: "arraybuffer"
          }).then(function (arrayBuffer) {
            var uint8Array = new Uint8Array(arrayBuffer);
            var error404 = [52, 48, 52, 32, 112, 97, 103, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10];
            if (equals(uint8Array)(error404)) throw "Error 404.";
            return uint8Array;
          });
        };
      }; // type Entry = {"type": String, "hash": String}
      // type File = {"type": String, "data": Uint8Array}
      // String -> String -> Promise (Map String Entry)
      //   Solves the manifest of a Swarm address recursively.
      //   Returns a map from full paths to entries.
    
    
      var downloadEntries = function downloadEntries(swarmUrl) {
        return function (hash) {
          var search = function search(hash) {
            return function (path) {
              return function (routes) {
                // Formats an entry to the Swarm.js type.
                var format = function format(entry) {
                  return {
                    type: entry.contentType,
                    hash: entry.hash
                  };
                }; // To download a single entry:
                //   if type is bzz-manifest, go deeper
                //   if not, add it to the routing table
    
    
                var downloadEntry = function downloadEntry(entry) {
                  if (entry.path === undefined) {
                    return Promise.resolve();
                  } else {
                    return entry.contentType === "application/bzz-manifest+json" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));
                  }
                }; // Downloads the initial manifest and then each entry.
    
    
                return downloadData(swarmUrl)(hash).then(function (text) {
                  return JSON.parse(toString(text)).entries;
                }).then(function (entries) {
                  return Promise.all(entries.map(downloadEntry));
                }).then(function () {
                  return routes;
                });
              };
            };
          };
    
          return search(hash)("")({});
        };
      }; // String -> String -> Promise (Map String String)
      //   Same as `downloadEntries`, but returns only hashes (no types).
    
    
      var downloadRoutes = function downloadRoutes(swarmUrl) {
        return function (hash) {
          return downloadEntries(swarmUrl)(hash).then(function (entries) {
            return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {
              return entries[route].hash;
            }));
          });
        };
      }; // String -> String -> Promise (Map String File)
      //   Gets the entire directory tree in a Swarm address.
      //   Returns a promise mapping paths to file contents.
    
    
      var downloadDirectory = function downloadDirectory(swarmUrl) {
        return function (hash) {
          return downloadEntries(swarmUrl)(hash).then(function (entries) {
            var paths = Object.keys(entries);
            var hashs = paths.map(function (path) {
              return entries[path].hash;
            });
            var types = paths.map(function (path) {
              return entries[path].type;
            });
            var datas = hashs.map(downloadData(swarmUrl));
    
            var files = function files(datas) {
              return datas.map(function (data, i) {
                return {
                  type: types[i],
                  data: data
                };
              });
            };
    
            return Promise.all(datas).then(function (datas) {
              return toMap(paths)(files(datas));
            });
          });
        };
      }; // String -> String -> String -> Promise String
      //   Gets the raw contents of a Swarm hash address.
      //   Returns a promise with the downloaded file path.
    
    
      var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {
        return function (hash) {
          return function (filePath) {
            return files.download(rawUrl(swarmUrl)(hash))(filePath);
          };
        };
      }; // String -> String -> String -> Promise (Map String String)
      //   Gets the entire directory tree in a Swarm address.
      //   Returns a promise mapping paths to file contents.
    
    
      var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {
        return function (hash) {
          return function (dirPath) {
            return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {
              var downloads = [];
    
              for (var route in routingTable) {
                if (route.length > 0) {
                  var filePath = path.join(dirPath, route);
                  downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));
                }
    
                ;
              }
    
              ;
              return Promise.all(downloads).then(function () {
                return dirPath;
              });
            });
          };
        };
      }; // String -> Uint8Array -> Promise String
      //   Uploads raw data to Swarm.
      //   Returns a promise with the uploaded hash.
    
    
      var uploadData = function uploadData(swarmUrl) {
        return function (data) {
          return request("".concat(swarmUrl, "/bzzr:/"), {
            body: typeof data === "string" ? fromString(data) : data,
            method: "POST"
          });
        };
      }; // String -> String -> String -> File -> Promise String
      //   Uploads a file to the Swarm manifest at a given hash, under a specific
      //   route. Returns a promise containing the uploaded hash.
      //   FIXME: for some reasons Swarm-Gateways is sometimes returning
      //   error 404 (bad request), so we retry up to 3 times. Why?
    
    
      var uploadToManifest = function uploadToManifest(swarmUrl) {
        return function (hash) {
          return function (route) {
            return function (file) {
              var attempt = function attempt(n) {
                var slashRoute = route[0] === "/" ? route : "/" + route;
                var url = "".concat(swarmUrl, "/bzz:/").concat(hash).concat(slashRoute);
                var opt = {
                  method: "PUT",
                  headers: {
                    "Content-Type": file.type
                  },
                  body: file.data
                };
                return request(url, opt).then(function (response) {
                  if (response.indexOf("error") !== -1) {
                    throw response;
                  }
    
                  return response;
                }).catch(function (e) {
                  return n > 0 && attempt(n - 1);
                });
              };
    
              return attempt(3);
            };
          };
        };
      }; // String -> {type: String, data: Uint8Array} -> Promise String
    
    
      var uploadFile = function uploadFile(swarmUrl) {
        return function (file) {
          return uploadDirectory(swarmUrl)({
            "": file
          });
        };
      }; // String -> String -> Promise String
    
    
      var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {
        return function (filePath) {
          return fs.readFile(filePath).then(function (data) {
            return uploadFile(swarmUrl)({
              type: mimetype.lookup(filePath),
              data: data
            });
          });
        };
      }; // String -> Map String File -> Promise String
      //   Uploads a directory to Swarm. The directory is
      //   represented as a map of routes and files.
      //   A default path is encoded by having a "" route.
    
    
      var uploadDirectory = function uploadDirectory(swarmUrl) {
        return function (directory) {
          return uploadData(swarmUrl)("{}").then(function (hash) {
            var uploadRoute = function uploadRoute(route) {
              return function (hash) {
                return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);
              };
            };
    
            var uploadToHash = function uploadToHash(hash, route) {
              return hash.then(uploadRoute(route));
            };
    
            return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));
          });
        };
      }; // String -> Promise String
    
    
      var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {
        return function (filePath) {
          return fs.readFile(filePath).then(uploadData(swarmUrl));
        };
      }; // String -> Nullable String -> String -> Promise String
    
    
      var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {
        return function (defaultPath) {
          return function (dirPath) {
            return files.directoryTree(dirPath).then(function (fullPaths) {
              return Promise.all(fullPaths.map(function (path) {
                return fs.readFile(path);
              })).then(function (datas) {
                var paths = fullPaths.map(function (path) {
                  return path.slice(dirPath.length);
                });
                var types = fullPaths.map(function (path) {
                  return mimetype.lookup(path) || "text/plain";
                });
                return toMap(paths)(datas.map(function (data, i) {
                  return {
                    type: types[i],
                    data: data
                  };
                }));
              });
            }).then(function (directory) {
              return merge(defaultPath ? {
                "": directory[defaultPath]
              } : {})(directory);
            }).then(uploadDirectory(swarmUrl));
          };
        };
      }; // String -> UploadInfo -> Promise String
      //   Simplified multi-type upload which calls the correct
      //   one based on the type of the argument given.
    
    
      var _upload = function upload(swarmUrl) {
        return function (arg) {
          // Upload raw data from browser
          if (arg.pick === "data") {
            return pick.data().then(uploadData(swarmUrl)); // Upload a file from browser
          } else if (arg.pick === "file") {
            return pick.file().then(uploadFile(swarmUrl)); // Upload a directory from browser
          } else if (arg.pick === "directory") {
            return pick.directory().then(uploadDirectory(swarmUrl)); // Upload directory/file from disk
          } else if (arg.path) {
            switch (arg.kind) {
              case "data":
                return uploadDataFromDisk(swarmUrl)(arg.path);
    
              case "file":
                return uploadFileFromDisk(swarmUrl)(arg.path);
    
              case "directory":
                return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);
            }
    
            ; // Upload UTF-8 string or raw data (buffer)
          } else if (arg.length || typeof arg === "string") {
            return uploadData(swarmUrl)(arg); // Upload directory with JSON
          } else if (arg instanceof Object) {
            return uploadDirectory(swarmUrl)(arg);
          }
    
          return Promise.reject(new Error("Bad arguments"));
        };
      }; // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)
      //   Simplified multi-type download which calls the correct function based on
      //   the type of the argument given, and on whether the Swwarm address has a
      //   directory or a file.
    
    
      var _download = function download(swarmUrl) {
        return function (hash) {
          return function (path) {
            return isDirectory(swarmUrl)(hash).then(function (isDir) {
              if (isDir) {
                return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);
              } else {
                return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);
              }
            });
          };
        };
      }; // String -> Promise String
      //   Downloads the Swarm binaries into a path. Returns a promise that only
      //   resolves when the exact Swarm file is there, and verified to be correct.
      //   If it was already there to begin with, skips the download.
    
    
      var downloadBinary = function downloadBinary(path, archives) {
        var system = os.platform().replace("win32", "windows") + "-" + (os.arch() === "x64" ? "amd64" : "386");
        var archive = (archives || defaultArchives)[system];
        var archiveUrl = downloadUrl + archive.archive + ".tar.gz";
        var archiveMD5 = archive.archiveMD5;
        var binaryMD5 = archive.binaryMD5;
        return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);
      }; // type SwarmSetup = {
      //   account : String,
      //   password : String,
      //   dataDir : String,
      //   binPath : String,
      //   ensApi : String,
      //   onDownloadProgress : Number ~> (),
      //   archives : [{
      //     archive: String,
      //     binaryMD5: String,
      //     archiveMD5: String
      //   }]
      // }
      // SwarmSetup ~> Promise Process
      //   Starts the Swarm process.
    
    
      var startProcess = function startProcess(swarmSetup) {
        return new Promise(function (resolve, reject) {
          var spawn = child_process.spawn;
    
          var hasString = function hasString(str) {
            return function (buffer) {
              return ('' + buffer).indexOf(str) !== -1;
            };
          };
    
          var account = swarmSetup.account,
              password = swarmSetup.password,
              dataDir = swarmSetup.dataDir,
              ensApi = swarmSetup.ensApi,
              privateKey = swarmSetup.privateKey;
          var STARTUP_TIMEOUT_SECS = 3;
          var WAITING_PASSWORD = 0;
          var STARTING = 1;
          var LISTENING = 2;
          var PASSWORD_PROMPT_HOOK = "Passphrase";
          var LISTENING_HOOK = "Swarm http proxy started";
          var state = WAITING_PASSWORD;
          var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);
    
          var handleProcessOutput = function handleProcessOutput(data) {
            if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {
              setTimeout(function () {
                state = STARTING;
                swarmProcess.stdin.write(password + '\n');
              }, 500);
            } else if (hasString(LISTENING_HOOK)(data)) {
              state = LISTENING;
              clearTimeout(timeout);
              resolve(swarmProcess);
            }
          };
    
          swarmProcess.stdout.on('data', handleProcessOutput);
          swarmProcess.stderr.on('data', handleProcessOutput); //swarmProcess.on('close', () => setTimeout(restart, 2000));
    
          var restart = function restart() {
            return startProcess(swarmSetup).then(resolve).catch(reject);
          };
    
          var error = function error() {
            return reject(new Error("Couldn't start swarm process."));
          };
    
          var timeout = setTimeout(error, 20000);
        });
      }; // Process ~> Promise ()
      //   Stops the Swarm process.
    
    
      var stopProcess = function stopProcess(process) {
        return new Promise(function (resolve, reject) {
          process.stderr.removeAllListeners('data');
          process.stdout.removeAllListeners('data');
          process.stdin.removeAllListeners('error');
          process.removeAllListeners('error');
          process.removeAllListeners('exit');
          process.kill('SIGINT');
          var killTimeout = setTimeout(function () {
            return process.kill('SIGKILL');
          }, 8000);
          process.once('close', function () {
            clearTimeout(killTimeout);
            resolve();
          });
        });
      }; // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()
      //   Receives a Swarm configuration object and a callback function. It then
      //   checks if a local Swarm node is running. If no local Swarm is found, it
      //   downloads the Swarm binaries to the dataDir (if not there), checksums,
      //   starts the Swarm process and calls the callback function with an API
      //   object using the local node. That callback must return a promise which
      //   will resolve when it is done using the API, so that this function can
      //   close the Swarm process properly. Returns a promise that resolves when the
      //   user is done with the API and the Swarm process is closed.
      //   TODO: check if Swarm process is already running (improve `isAvailable`)
    
    
      var local = function local(swarmSetup) {
        return function (useAPI) {
          return _isAvailable("http://localhost:8500").then(function (isAvailable) {
            return isAvailable ? useAPI(at("http://localhost:8500")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {
              return (swarmSetup.onProgress || function () {})(data.length);
            }).then(function () {
              return startProcess(swarmSetup);
            }).then(function (process) {
              return useAPI(at("http://localhost:8500")).then(function () {
                return process;
              });
            }).then(stopProcess);
          });
        };
      }; // String ~> Promise Bool
      //   Returns true if Swarm is available on `url`.
      //   Perfoms a test upload to determine that.
      //   TODO: improve this?
    
    
      var _isAvailable = function isAvailable(swarmUrl) {
        var testFile = "test";
        var testHash = "c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7";
        return uploadData(swarmUrl)(testFile).then(function (hash) {
          return hash === testHash;
        }).catch(function () {
          return false;
        });
      }; // String -> String ~> Promise Bool
      //   Returns a Promise which is true if that Swarm address is a directory.
      //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.
      //   TODO: improve this?
    
    
      var isDirectory = function isDirectory(swarmUrl) {
        return function (hash) {
          return downloadData(swarmUrl)(hash).then(function (data) {
            try {
              return !!JSON.parse(toString(data)).entries;
            } catch (e) {
              return false;
            }
          });
        };
      }; // Uncurries a function; used to allow the f(x,y,z) style on exports.
    
    
      var uncurry = function uncurry(f) {
        return function (a, b, c, d, e) {
          var p; // Hardcoded because efficiency (`arguments` is very slow).
    
          if (typeof a !== "undefined") p = f(a);
          if (typeof b !== "undefined") p = f(b);
          if (typeof c !== "undefined") p = f(c);
          if (typeof d !== "undefined") p = f(d);
          if (typeof e !== "undefined") p = f(e);
          return p;
        };
      }; // () -> Promise Bool
      //   Not sure how to mock Swarm to test it properly. Ideas?
    
    
      var test = function test() {
        return Promise.resolve(true);
      }; // Uint8Array -> String
    
    
      var toString = function toString(uint8Array) {
        return bytes.toString(bytes.fromUint8Array(uint8Array));
      }; // String -> Uint8Array
    
    
      var fromString = function fromString(string) {
        return bytes.toUint8Array(bytes.fromString(string));
      }; // String -> SwarmAPI
      //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.
    
    
      var at = function at(swarmUrl) {
        return {
          download: function download(hash, path) {
            return _download(swarmUrl)(hash)(path);
          },
          downloadData: uncurry(downloadData(swarmUrl)),
          downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),
          downloadDirectory: uncurry(downloadDirectory(swarmUrl)),
          downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),
          downloadEntries: uncurry(downloadEntries(swarmUrl)),
          downloadRoutes: uncurry(downloadRoutes(swarmUrl)),
          isAvailable: function isAvailable() {
            return _isAvailable(swarmUrl);
          },
          upload: function upload(arg) {
            return _upload(swarmUrl)(arg);
          },
          uploadData: uncurry(uploadData(swarmUrl)),
          uploadFile: uncurry(uploadFile(swarmUrl)),
          uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),
          uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),
          uploadDirectory: uncurry(uploadDirectory(swarmUrl)),
          uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),
          uploadToManifest: uncurry(uploadToManifest(swarmUrl)),
          pick: pick,
          hash: hash,
          fromString: fromString,
          toString: toString
        };
      };
    
      return {
        at: at,
        local: local,
        download: _download,
        downloadBinary: downloadBinary,
        downloadData: downloadData,
        downloadDataToDisk: downloadDataToDisk,
        downloadDirectory: downloadDirectory,
        downloadDirectoryToDisk: downloadDirectoryToDisk,
        downloadEntries: downloadEntries,
        downloadRoutes: downloadRoutes,
        isAvailable: _isAvailable,
        startProcess: startProcess,
        stopProcess: stopProcess,
        upload: _upload,
        uploadData: uploadData,
        uploadDataFromDisk: uploadDataFromDisk,
        uploadFile: uploadFile,
        uploadFileFromDisk: uploadFileFromDisk,
        uploadDirectory: uploadDirectory,
        uploadDirectoryFromDisk: uploadDirectoryFromDisk,
        uploadToManifest: uploadToManifest,
        pick: pick,
        hash: hash,
        fromString: fromString,
        toString: toString
      };
    };
    },{}],292:[function(require,module,exports){
    arguments[4][159][0].apply(exports,arguments)
    },{"dup":159}],293:[function(require,module,exports){
    arguments[4][160][0].apply(exports,arguments)
    },{"./array.js":292,"dup":160}],294:[function(require,module,exports){
    arguments[4][161][0].apply(exports,arguments)
    },{"dup":161}],295:[function(require,module,exports){
    (function (setImmediate,clearImmediate){
    var nextTick = require('process/browser.js').nextTick;
    var apply = Function.prototype.apply;
    var slice = Array.prototype.slice;
    var immediateIds = {};
    var nextImmediateId = 0;
    
    // DOM APIs, for completeness
    
    exports.setTimeout = function() {
      return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
    };
    exports.setInterval = function() {
      return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
    };
    exports.clearTimeout =
    exports.clearInterval = function(timeout) { timeout.close(); };
    
    function Timeout(id, clearFn) {
      this._id = id;
      this._clearFn = clearFn;
    }
    Timeout.prototype.unref = Timeout.prototype.ref = function() {};
    Timeout.prototype.close = function() {
      this._clearFn.call(window, this._id);
    };
    
    // Does not start the time, just sets up the members needed.
    exports.enroll = function(item, msecs) {
      clearTimeout(item._idleTimeoutId);
      item._idleTimeout = msecs;
    };
    
    exports.unenroll = function(item) {
      clearTimeout(item._idleTimeoutId);
      item._idleTimeout = -1;
    };
    
    exports._unrefActive = exports.active = function(item) {
      clearTimeout(item._idleTimeoutId);
    
      var msecs = item._idleTimeout;
      if (msecs >= 0) {
        item._idleTimeoutId = setTimeout(function onTimeout() {
          if (item._onTimeout)
            item._onTimeout();
        }, msecs);
      }
    };
    
    // That's not how node.js implements it but the exposed api is the same.
    exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
      var id = nextImmediateId++;
      var args = arguments.length < 2 ? false : slice.call(arguments, 1);
    
      immediateIds[id] = true;
    
      nextTick(function onNextTick() {
        if (immediateIds[id]) {
          // fn.call() is faster so we optimize for the common use-case
          // @see http://jsperf.com/call-apply-segu
          if (args) {
            fn.apply(null, args);
          } else {
            fn.call(null);
          }
          // Prevent ids from leaking
          exports.clearImmediate(id);
        }
      });
    
      return id;
    };
    
    exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
      delete immediateIds[id];
    };
    }).call(this,require("timers").setImmediate,require("timers").clearImmediate)
    },{"process/browser.js":231,"timers":295}],296:[function(require,module,exports){
    var Buffer = require('buffer').Buffer
    
    module.exports = function (buf) {
        // If the buffer is backed by a Uint8Array, a faster version will work
        if (buf instanceof Uint8Array) {
            // If the buffer isn't a subarray, return the underlying ArrayBuffer
            if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
                return buf.buffer
            } else if (typeof buf.buffer.slice === 'function') {
                // Otherwise we need to get a proper copy
                return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
            }
        }
    
        if (Buffer.isBuffer(buf)) {
            // This is the slow version that will work with any Buffer
            // implementation (even in old browsers)
            var arrayCopy = new Uint8Array(buf.length)
            var len = buf.length
            for (var i = 0; i < len; i++) {
                arrayCopy[i] = buf[i]
            }
            return arrayCopy.buffer
        } else {
            throw new Error('Argument must be a Buffer')
        }
    }
    
    },{"buffer":96}],297:[function(require,module,exports){
    (function (global){
    //     Underscore.js 1.9.1
    //     http://underscorejs.org
    //     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.
    
    (function() {
    
      // Baseline setup
      // --------------
    
      // Establish the root object, `window` (`self`) in the browser, `global`
      // on the server, or `this` in some virtual machines. We use `self`
      // instead of `window` for `WebWorker` support.
      var root = typeof self == 'object' && self.self === self && self ||
                typeof global == 'object' && global.global === global && global ||
                this ||
                {};
    
      // Save the previous value of the `_` variable.
      var previousUnderscore = root._;
    
      // Save bytes in the minified (but not gzipped) version:
      var ArrayProto = Array.prototype, ObjProto = Object.prototype;
      var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;
    
      // Create quick reference variables for speed access to core prototypes.
      var push = ArrayProto.push,
          slice = ArrayProto.slice,
          toString = ObjProto.toString,
          hasOwnProperty = ObjProto.hasOwnProperty;
    
      // All **ECMAScript 5** native function implementations that we hope to use
      // are declared here.
      var nativeIsArray = Array.isArray,
          nativeKeys = Object.keys,
          nativeCreate = Object.create;
    
      // Naked function reference for surrogate-prototype-swapping.
      var Ctor = function(){};
    
      // Create a safe reference to the Underscore object for use below.
      var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
      };
    
      // Export the Underscore object for **Node.js**, with
      // backwards-compatibility for their old module API. If we're in
      // the browser, add `_` as a global object.
      // (`nodeType` is checked to ensure that `module`
      // and `exports` are not HTML elements.)
      if (typeof exports != 'undefined' && !exports.nodeType) {
        if (typeof module != 'undefined' && !module.nodeType && module.exports) {
          exports = module.exports = _;
        }
        exports._ = _;
      } else {
        root._ = _;
      }
    
      // Current version.
      _.VERSION = '1.9.1';
    
      // Internal function that returns an efficient (for current engines) version
      // of the passed-in callback, to be repeatedly applied in other Underscore
      // functions.
      var optimizeCb = function(func, context, argCount) {
        if (context === void 0) return func;
        switch (argCount == null ? 3 : argCount) {
          case 1: return function(value) {
            return func.call(context, value);
          };
          // The 2-argument case is omitted because we’re not using it.
          case 3: return function(value, index, collection) {
            return func.call(context, value, index, collection);
          };
          case 4: return function(accumulator, value, index, collection) {
            return func.call(context, accumulator, value, index, collection);
          };
        }
        return function() {
          return func.apply(context, arguments);
        };
      };
    
      var builtinIteratee;
    
      // An internal function to generate callbacks that can be applied to each
      // element in a collection, returning the desired result — either `identity`,
      // an arbitrary callback, a property matcher, or a property accessor.
      var cb = function(value, context, argCount) {
        if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
        if (value == null) return _.identity;
        if (_.isFunction(value)) return optimizeCb(value, context, argCount);
        if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
        return _.property(value);
      };
    
      // External wrapper for our callback generator. Users may customize
      // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
      // This abstraction hides the internal-only argCount argument.
      _.iteratee = builtinIteratee = function(value, context) {
        return cb(value, context, Infinity);
      };
    
      // Some functions take a variable number of arguments, or a few expected
      // arguments at the beginning and then a variable number of values to operate
      // on. This helper accumulates all remaining arguments past the function’s
      // argument length (or an explicit `startIndex`), into an array that becomes
      // the last argument. Similar to ES6’s "rest parameter".
      var restArguments = function(func, startIndex) {
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function() {
          var length = Math.max(arguments.length - startIndex, 0),
              rest = Array(length),
              index = 0;
          for (; index < length; index++) {
            rest[index] = arguments[index + startIndex];
          }
          switch (startIndex) {
            case 0: return func.call(this, rest);
            case 1: return func.call(this, arguments[0], rest);
            case 2: return func.call(this, arguments[0], arguments[1], rest);
          }
          var args = Array(startIndex + 1);
          for (index = 0; index < startIndex; index++) {
            args[index] = arguments[index];
          }
          args[startIndex] = rest;
          return func.apply(this, args);
        };
      };
    
      // An internal function for creating a new object that inherits from another.
      var baseCreate = function(prototype) {
        if (!_.isObject(prototype)) return {};
        if (nativeCreate) return nativeCreate(prototype);
        Ctor.prototype = prototype;
        var result = new Ctor;
        Ctor.prototype = null;
        return result;
      };
    
      var shallowProperty = function(key) {
        return function(obj) {
          return obj == null ? void 0 : obj[key];
        };
      };
    
      var has = function(obj, path) {
        return obj != null && hasOwnProperty.call(obj, path);
      }
    
      var deepGet = function(obj, path) {
        var length = path.length;
        for (var i = 0; i < length; i++) {
          if (obj == null) return void 0;
          obj = obj[path[i]];
        }
        return length ? obj : void 0;
      };
    
      // Helper for collection methods to determine whether a collection
      // should be iterated as an array or as an object.
      // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
      // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
      var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
      var getLength = shallowProperty('length');
      var isArrayLike = function(collection) {
        var length = getLength(collection);
        return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
      };
    
      // Collection Functions
      // --------------------
    
      // The cornerstone, an `each` implementation, aka `forEach`.
      // Handles raw objects in addition to array-likes. Treats all
      // sparse array-likes as if they were dense.
      _.each = _.forEach = function(obj, iteratee, context) {
        iteratee = optimizeCb(iteratee, context);
        var i, length;
        if (isArrayLike(obj)) {
          for (i = 0, length = obj.length; i < length; i++) {
            iteratee(obj[i], i, obj);
          }
        } else {
          var keys = _.keys(obj);
          for (i = 0, length = keys.length; i < length; i++) {
            iteratee(obj[keys[i]], keys[i], obj);
          }
        }
        return obj;
      };
    
      // Return the results of applying the iteratee to each element.
      _.map = _.collect = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length,
            results = Array(length);
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
      };
    
      // Create a reducing function iterating left or right.
      var createReduce = function(dir) {
        // Wrap code that reassigns argument variables in a separate function than
        // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
        var reducer = function(obj, iteratee, memo, initial) {
          var keys = !isArrayLike(obj) && _.keys(obj),
              length = (keys || obj).length,
              index = dir > 0 ? 0 : length - 1;
          if (!initial) {
            memo = obj[keys ? keys[index] : index];
            index += dir;
          }
          for (; index >= 0 && index < length; index += dir) {
            var currentKey = keys ? keys[index] : index;
            memo = iteratee(memo, obj[currentKey], currentKey, obj);
          }
          return memo;
        };
    
        return function(obj, iteratee, memo, context) {
          var initial = arguments.length >= 3;
          return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
        };
      };
    
      // **Reduce** builds up a single result from a list of values, aka `inject`,
      // or `foldl`.
      _.reduce = _.foldl = _.inject = createReduce(1);
    
      // The right-associative version of reduce, also known as `foldr`.
      _.reduceRight = _.foldr = createReduce(-1);
    
      // Return the first value which passes a truth test. Aliased as `detect`.
      _.find = _.detect = function(obj, predicate, context) {
        var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
        var key = keyFinder(obj, predicate, context);
        if (key !== void 0 && key !== -1) return obj[key];
      };
    
      // Return all the elements that pass a truth test.
      // Aliased as `select`.
      _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        predicate = cb(predicate, context);
        _.each(obj, function(value, index, list) {
          if (predicate(value, index, list)) results.push(value);
        });
        return results;
      };
    
      // Return all the elements for which a truth test fails.
      _.reject = function(obj, predicate, context) {
        return _.filter(obj, _.negate(cb(predicate)), context);
      };
    
      // Determine whether all of the elements match a truth test.
      // Aliased as `all`.
      _.every = _.all = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          if (!predicate(obj[currentKey], currentKey, obj)) return false;
        }
        return true;
      };
    
      // Determine if at least one element in the object matches a truth test.
      // Aliased as `any`.
      _.some = _.any = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          if (predicate(obj[currentKey], currentKey, obj)) return true;
        }
        return false;
      };
    
      // Determine if the array or object contains a given item (using `===`).
      // Aliased as `includes` and `include`.
      _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        if (typeof fromIndex != 'number' || guard) fromIndex = 0;
        return _.indexOf(obj, item, fromIndex) >= 0;
      };
    
      // Invoke a method (with arguments) on every item in a collection.
      _.invoke = restArguments(function(obj, path, args) {
        var contextPath, func;
        if (_.isFunction(path)) {
          func = path;
        } else if (_.isArray(path)) {
          contextPath = path.slice(0, -1);
          path = path[path.length - 1];
        }
        return _.map(obj, function(context) {
          var method = func;
          if (!method) {
            if (contextPath && contextPath.length) {
              context = deepGet(context, contextPath);
            }
            if (context == null) return void 0;
            method = context[path];
          }
          return method == null ? method : method.apply(context, args);
        });
      });
    
      // Convenience version of a common use case of `map`: fetching a property.
      _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
      };
    
      // Convenience version of a common use case of `filter`: selecting only objects
      // containing specific `key:value` pairs.
      _.where = function(obj, attrs) {
        return _.filter(obj, _.matcher(attrs));
      };
    
      // Convenience version of a common use case of `find`: getting the first object
      // containing specific `key:value` pairs.
      _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matcher(attrs));
      };
    
      // Return the maximum element (or element-based computation).
      _.max = function(obj, iteratee, context) {
        var result = -Infinity, lastComputed = -Infinity,
            value, computed;
        if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
          obj = isArrayLike(obj) ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value != null && value > result) {
              result = value;
            }
          }
        } else {
          iteratee = cb(iteratee, context);
          _.each(obj, function(v, index, list) {
            computed = iteratee(v, index, list);
            if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
              result = v;
              lastComputed = computed;
            }
          });
        }
        return result;
      };
    
      // Return the minimum element (or element-based computation).
      _.min = function(obj, iteratee, context) {
        var result = Infinity, lastComputed = Infinity,
            value, computed;
        if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
          obj = isArrayLike(obj) ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value != null && value < result) {
              result = value;
            }
          }
        } else {
          iteratee = cb(iteratee, context);
          _.each(obj, function(v, index, list) {
            computed = iteratee(v, index, list);
            if (computed < lastComputed || computed === Infinity && result === Infinity) {
              result = v;
              lastComputed = computed;
            }
          });
        }
        return result;
      };
    
      // Shuffle a collection.
      _.shuffle = function(obj) {
        return _.sample(obj, Infinity);
      };
    
      // Sample **n** random values from a collection using the modern version of the
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
      // If **n** is not specified, returns a single random element.
      // The internal `guard` argument allows it to work with `map`.
      _.sample = function(obj, n, guard) {
        if (n == null || guard) {
          if (!isArrayLike(obj)) obj = _.values(obj);
          return obj[_.random(obj.length - 1)];
        }
        var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
        var length = getLength(sample);
        n = Math.max(Math.min(n, length), 0);
        var last = length - 1;
        for (var index = 0; index < n; index++) {
          var rand = _.random(index, last);
          var temp = sample[index];
          sample[index] = sample[rand];
          sample[rand] = temp;
        }
        return sample.slice(0, n);
      };
    
      // Sort the object's values by a criterion produced by an iteratee.
      _.sortBy = function(obj, iteratee, context) {
        var index = 0;
        iteratee = cb(iteratee, context);
        return _.pluck(_.map(obj, function(value, key, list) {
          return {
            value: value,
            index: index++,
            criteria: iteratee(value, key, list)
          };
        }).sort(function(left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0) return 1;
            if (a < b || b === void 0) return -1;
          }
          return left.index - right.index;
        }), 'value');
      };
    
      // An internal function used for aggregate "group by" operations.
      var group = function(behavior, partition) {
        return function(obj, iteratee, context) {
          var result = partition ? [[], []] : {};
          iteratee = cb(iteratee, context);
          _.each(obj, function(value, index) {
            var key = iteratee(value, index, obj);
            behavior(result, value, key);
          });
          return result;
        };
      };
    
      // Groups the object's values by a criterion. Pass either a string attribute
      // to group by, or a function that returns the criterion.
      _.groupBy = group(function(result, value, key) {
        if (has(result, key)) result[key].push(value); else result[key] = [value];
      });
    
      // Indexes the object's values by a criterion, similar to `groupBy`, but for
      // when you know that your index values will be unique.
      _.indexBy = group(function(result, value, key) {
        result[key] = value;
      });
    
      // Counts instances of an object that group by a certain criterion. Pass
      // either a string attribute to count by, or a function that returns the
      // criterion.
      _.countBy = group(function(result, value, key) {
        if (has(result, key)) result[key]++; else result[key] = 1;
      });
    
      var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
      // Safely create a real, live array from anything iterable.
      _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (_.isString(obj)) {
          // Keep surrogate pair characters together
          return obj.match(reStrSymbol);
        }
        if (isArrayLike(obj)) return _.map(obj, _.identity);
        return _.values(obj);
      };
    
      // Return the number of elements in an object.
      _.size = function(obj) {
        if (obj == null) return 0;
        return isArrayLike(obj) ? obj.length : _.keys(obj).length;
      };
    
      // Split a collection into two arrays: one whose elements all satisfy the given
      // predicate, and one whose elements all do not satisfy the predicate.
      _.partition = group(function(result, value, pass) {
        result[pass ? 0 : 1].push(value);
      }, true);
    
      // Array Functions
      // ---------------
    
      // Get the first element of an array. Passing **n** will return the first N
      // values in the array. Aliased as `head` and `take`. The **guard** check
      // allows it to work with `_.map`.
      _.first = _.head = _.take = function(array, n, guard) {
        if (array == null || array.length < 1) return n == null ? void 0 : [];
        if (n == null || guard) return array[0];
        return _.initial(array, array.length - n);
      };
    
      // Returns everything but the last entry of the array. Especially useful on
      // the arguments object. Passing **n** will return all the values in
      // the array, excluding the last N.
      _.initial = function(array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
      };
    
      // Get the last element of an array. Passing **n** will return the last N
      // values in the array.
      _.last = function(array, n, guard) {
        if (array == null || array.length < 1) return n == null ? void 0 : [];
        if (n == null || guard) return array[array.length - 1];
        return _.rest(array, Math.max(0, array.length - n));
      };
    
      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
      // Especially useful on the arguments object. Passing an **n** will return
      // the rest N values in the array.
      _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };
    
      // Trim out all falsy values from an array.
      _.compact = function(array) {
        return _.filter(array, Boolean);
      };
    
      // Internal implementation of a recursive `flatten` function.
      var flatten = function(input, shallow, strict, output) {
        output = output || [];
        var idx = output.length;
        for (var i = 0, length = getLength(input); i < length; i++) {
          var value = input[i];
          if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
            // Flatten current level of array or arguments object.
            if (shallow) {
              var j = 0, len = value.length;
              while (j < len) output[idx++] = value[j++];
            } else {
              flatten(value, shallow, strict, output);
              idx = output.length;
            }
          } else if (!strict) {
            output[idx++] = value;
          }
        }
        return output;
      };
    
      // Flatten out an array, either recursively (by default), or just one level.
      _.flatten = function(array, shallow) {
        return flatten(array, shallow, false);
      };
    
      // Return a version of the array that does not contain the specified value(s).
      _.without = restArguments(function(array, otherArrays) {
        return _.difference(array, otherArrays);
      });
    
      // Produce a duplicate-free version of the array. If the array has already
      // been sorted, you have the option of using a faster algorithm.
      // The faster algorithm will not work with an iteratee if the iteratee
      // is not a one-to-one function, so providing an iteratee will disable
      // the faster algorithm.
      // Aliased as `unique`.
      _.uniq = _.unique = function(array, isSorted, iteratee, context) {
        if (!_.isBoolean(isSorted)) {
          context = iteratee;
          iteratee = isSorted;
          isSorted = false;
        }
        if (iteratee != null) iteratee = cb(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = getLength(array); i < length; i++) {
          var value = array[i],
              computed = iteratee ? iteratee(value, i, array) : value;
          if (isSorted && !iteratee) {
            if (!i || seen !== computed) result.push(value);
            seen = computed;
          } else if (iteratee) {
            if (!_.contains(seen, computed)) {
              seen.push(computed);
              result.push(value);
            }
          } else if (!_.contains(result, value)) {
            result.push(value);
          }
        }
        return result;
      };
    
      // Produce an array that contains the union: each distinct element from all of
      // the passed-in arrays.
      _.union = restArguments(function(arrays) {
        return _.uniq(flatten(arrays, true, true));
      });
    
      // Produce an array that contains every item shared between all the
      // passed-in arrays.
      _.intersection = function(array) {
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = getLength(array); i < length; i++) {
          var item = array[i];
          if (_.contains(result, item)) continue;
          var j;
          for (j = 1; j < argsLength; j++) {
            if (!_.contains(arguments[j], item)) break;
          }
          if (j === argsLength) result.push(item);
        }
        return result;
      };
    
      // Take the difference between one array and a number of other arrays.
      // Only the elements present in just the first array will remain.
      _.difference = restArguments(function(array, rest) {
        rest = flatten(rest, true, true);
        return _.filter(array, function(value){
          return !_.contains(rest, value);
        });
      });
    
      // Complement of _.zip. Unzip accepts an array of arrays and groups
      // each array's elements on shared indices.
      _.unzip = function(array) {
        var length = array && _.max(array, getLength).length || 0;
        var result = Array(length);
    
        for (var index = 0; index < length; index++) {
          result[index] = _.pluck(array, index);
        }
        return result;
      };
    
      // Zip together multiple lists into a single array -- elements that share
      // an index go together.
      _.zip = restArguments(_.unzip);
    
      // Converts lists into objects. Pass either a single array of `[key, value]`
      // pairs, or two parallel arrays of the same length -- one of keys, and one of
      // the corresponding values. Passing by pairs is the reverse of _.pairs.
      _.object = function(list, values) {
        var result = {};
        for (var i = 0, length = getLength(list); i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };
    
      // Generator function to create the findIndex and findLastIndex functions.
      var createPredicateIndexFinder = function(dir) {
        return function(array, predicate, context) {
          predicate = cb(predicate, context);
          var length = getLength(array);
          var index = dir > 0 ? 0 : length - 1;
          for (; index >= 0 && index < length; index += dir) {
            if (predicate(array[index], index, array)) return index;
          }
          return -1;
        };
      };
    
      // Returns the first index on an array-like that passes a predicate test.
      _.findIndex = createPredicateIndexFinder(1);
      _.findLastIndex = createPredicateIndexFinder(-1);
    
      // Use a comparator function to figure out the smallest index at which
      // an object should be inserted so as to maintain order. Uses binary search.
      _.sortedIndex = function(array, obj, iteratee, context) {
        iteratee = cb(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0, high = getLength(array);
        while (low < high) {
          var mid = Math.floor((low + high) / 2);
          if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
        }
        return low;
      };
    
      // Generator function to create the indexOf and lastIndexOf functions.
      var createIndexFinder = function(dir, predicateFind, sortedIndex) {
        return function(array, item, idx) {
          var i = 0, length = getLength(array);
          if (typeof idx == 'number') {
            if (dir > 0) {
              i = idx >= 0 ? idx : Math.max(idx + length, i);
            } else {
              length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
            }
          } else if (sortedIndex && idx && length) {
            idx = sortedIndex(array, item);
            return array[idx] === item ? idx : -1;
          }
          if (item !== item) {
            idx = predicateFind(slice.call(array, i, length), _.isNaN);
            return idx >= 0 ? idx + i : -1;
          }
          for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
            if (array[idx] === item) return idx;
          }
          return -1;
        };
      };
    
      // Return the position of the first occurrence of an item in an array,
      // or -1 if the item is not included in the array.
      // If the array is large and already in sort order, pass `true`
      // for **isSorted** to use binary search.
      _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
      _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
    
      // Generate an integer Array containing an arithmetic progression. A port of
      // the native Python `range()` function. See
      // [the Python documentation](http://docs.python.org/library/functions.html#range).
      _.range = function(start, stop, step) {
        if (stop == null) {
          stop = start || 0;
          start = 0;
        }
        if (!step) {
          step = stop < start ? -1 : 1;
        }
    
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);
    
        for (var idx = 0; idx < length; idx++, start += step) {
          range[idx] = start;
        }
    
        return range;
      };
    
      // Chunk a single array into multiple arrays, each containing `count` or fewer
      // items.
      _.chunk = function(array, count) {
        if (count == null || count < 1) return [];
        var result = [];
        var i = 0, length = array.length;
        while (i < length) {
          result.push(slice.call(array, i, i += count));
        }
        return result;
      };
    
      // Function (ahem) Functions
      // ------------------
    
      // Determines whether to execute a function as a constructor
      // or a normal function with the provided arguments.
      var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
        if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
        var self = baseCreate(sourceFunc.prototype);
        var result = sourceFunc.apply(self, args);
        if (_.isObject(result)) return result;
        return self;
      };
    
      // Create a function bound to a given object (assigning `this`, and arguments,
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
      // available.
      _.bind = restArguments(function(func, context, args) {
        if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
        var bound = restArguments(function(callArgs) {
          return executeBound(func, bound, context, this, args.concat(callArgs));
        });
        return bound;
      });
    
      // Partially apply a function by creating a version that has had some of its
      // arguments pre-filled, without changing its dynamic `this` context. _ acts
      // as a placeholder by default, allowing any combination of arguments to be
      // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
      _.partial = restArguments(function(func, boundArgs) {
        var placeholder = _.partial.placeholder;
        var bound = function() {
          var position = 0, length = boundArgs.length;
          var args = Array(length);
          for (var i = 0; i < length; i++) {
            args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
          }
          while (position < arguments.length) args.push(arguments[position++]);
          return executeBound(func, bound, this, this, args);
        };
        return bound;
      });
    
      _.partial.placeholder = _;
    
      // Bind a number of an object's methods to that object. Remaining arguments
      // are the method names to be bound. Useful for ensuring that all callbacks
      // defined on an object belong to it.
      _.bindAll = restArguments(function(obj, keys) {
        keys = flatten(keys, false, false);
        var index = keys.length;
        if (index < 1) throw new Error('bindAll must be passed function names');
        while (index--) {
          var key = keys[index];
          obj[key] = _.bind(obj[key], obj);
        }
      });
    
      // Memoize an expensive function by storing its results.
      _.memoize = function(func, hasher) {
        var memoize = function(key) {
          var cache = memoize.cache;
          var address = '' + (hasher ? hasher.apply(this, arguments) : key);
          if (!has(cache, address)) cache[address] = func.apply(this, arguments);
          return cache[address];
        };
        memoize.cache = {};
        return memoize;
      };
    
      // Delays a function for the given number of milliseconds, and then calls
      // it with the arguments supplied.
      _.delay = restArguments(function(func, wait, args) {
        return setTimeout(function() {
          return func.apply(null, args);
        }, wait);
      });
    
      // Defers a function, scheduling it to run after the current call stack has
      // cleared.
      _.defer = _.partial(_.delay, _, 1);
    
      // Returns a function, that, when invoked, will only be triggered at most once
      // during a given window of time. Normally, the throttled function will run
      // as much as it can, without ever going more than once per `wait` duration;
      // but if you'd like to disable the execution on the leading edge, pass
      // `{leading: false}`. To disable execution on the trailing edge, ditto.
      _.throttle = function(func, wait, options) {
        var timeout, context, args, result;
        var previous = 0;
        if (!options) options = {};
    
        var later = function() {
          previous = options.leading === false ? 0 : _.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        };
    
        var throttled = function() {
          var now = _.now();
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > wait) {
            if (timeout) {
              clearTimeout(timeout);
              timeout = null;
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
    
        throttled.cancel = function() {
          clearTimeout(timeout);
          previous = 0;
          timeout = context = args = null;
        };
    
        return throttled;
      };
    
      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      _.debounce = function(func, wait, immediate) {
        var timeout, result;
    
        var later = function(context, args) {
          timeout = null;
          if (args) result = func.apply(context, args);
        };
    
        var debounced = restArguments(function(args) {
          if (timeout) clearTimeout(timeout);
          if (immediate) {
            var callNow = !timeout;
            timeout = setTimeout(later, wait);
            if (callNow) result = func.apply(this, args);
          } else {
            timeout = _.delay(later, wait, this, args);
          }
    
          return result;
        });
    
        debounced.cancel = function() {
          clearTimeout(timeout);
          timeout = null;
        };
    
        return debounced;
      };
    
      // Returns the first function passed as an argument to the second,
      // allowing you to adjust arguments, run code before and after, and
      // conditionally execute the original function.
      _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
      };
    
      // Returns a negated version of the passed-in predicate.
      _.negate = function(predicate) {
        return function() {
          return !predicate.apply(this, arguments);
        };
      };
    
      // Returns a function that is the composition of a list of functions, each
      // consuming the return value of the function that follows.
      _.compose = function() {
        var args = arguments;
        var start = args.length - 1;
        return function() {
          var i = start;
          var result = args[start].apply(this, arguments);
          while (i--) result = args[i].call(this, result);
          return result;
        };
      };
    
      // Returns a function that will only be executed on and after the Nth call.
      _.after = function(times, func) {
        return function() {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };
    
      // Returns a function that will only be executed up to (but not including) the Nth call.
      _.before = function(times, func) {
        var memo;
        return function() {
          if (--times > 0) {
            memo = func.apply(this, arguments);
          }
          if (times <= 1) func = null;
          return memo;
        };
      };
    
      // Returns a function that will be executed at most one time, no matter how
      // often you call it. Useful for lazy initialization.
      _.once = _.partial(_.before, 2);
    
      _.restArguments = restArguments;
    
      // Object Functions
      // ----------------
    
      // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
      var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
      var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
        'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
    
      var collectNonEnumProps = function(obj, keys) {
        var nonEnumIdx = nonEnumerableProps.length;
        var constructor = obj.constructor;
        var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
    
        // Constructor is a special case.
        var prop = 'constructor';
        if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
    
        while (nonEnumIdx--) {
          prop = nonEnumerableProps[nonEnumIdx];
          if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
            keys.push(prop);
          }
        }
      };
    
      // Retrieve the names of an object's own properties.
      // Delegates to **ECMAScript 5**'s native `Object.keys`.
      _.keys = function(obj) {
        if (!_.isObject(obj)) return [];
        if (nativeKeys) return nativeKeys(obj);
        var keys = [];
        for (var key in obj) if (has(obj, key)) keys.push(key);
        // Ahem, IE < 9.
        if (hasEnumBug) collectNonEnumProps(obj, keys);
        return keys;
      };
    
      // Retrieve all the property names of an object.
      _.allKeys = function(obj) {
        if (!_.isObject(obj)) return [];
        var keys = [];
        for (var key in obj) keys.push(key);
        // Ahem, IE < 9.
        if (hasEnumBug) collectNonEnumProps(obj, keys);
        return keys;
      };
    
      // Retrieve the values of an object's properties.
      _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };
    
      // Returns the results of applying the iteratee to each element of the object.
      // In contrast to _.map it returns an object.
      _.mapObject = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = _.keys(obj),
            length = keys.length,
            results = {};
        for (var index = 0; index < length; index++) {
          var currentKey = keys[index];
          results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
      };
    
      // Convert an object into a list of `[key, value]` pairs.
      // The opposite of _.object.
      _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [keys[i], obj[keys[i]]];
        }
        return pairs;
      };
    
      // Invert the keys and values of an object. The values must be serializable.
      _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };
    
      // Return a sorted list of the function names available on the object.
      // Aliased as `methods`.
      _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
      };
    
      // An internal function for creating assigner functions.
      var createAssigner = function(keysFunc, defaults) {
        return function(obj) {
          var length = arguments.length;
          if (defaults) obj = Object(obj);
          if (length < 2 || obj == null) return obj;
          for (var index = 1; index < length; index++) {
            var source = arguments[index],
                keys = keysFunc(source),
                l = keys.length;
            for (var i = 0; i < l; i++) {
              var key = keys[i];
              if (!defaults || obj[key] === void 0) obj[key] = source[key];
            }
          }
          return obj;
        };
      };
    
      // Extend a given object with all the properties in passed-in object(s).
      _.extend = createAssigner(_.allKeys);
    
      // Assigns a given object with all the own properties in the passed-in object(s).
      // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
      _.extendOwn = _.assign = createAssigner(_.keys);
    
      // Returns the first key on an object that passes a predicate test.
      _.findKey = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = _.keys(obj), key;
        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];
          if (predicate(obj[key], key, obj)) return key;
        }
      };
    
      // Internal pick helper function to determine if `obj` has key `key`.
      var keyInObj = function(value, key, obj) {
        return key in obj;
      };
    
      // Return a copy of the object only containing the whitelisted properties.
      _.pick = restArguments(function(obj, keys) {
        var result = {}, iteratee = keys[0];
        if (obj == null) return result;
        if (_.isFunction(iteratee)) {
          if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
          keys = _.allKeys(obj);
        } else {
          iteratee = keyInObj;
          keys = flatten(keys, false, false);
          obj = Object(obj);
        }
        for (var i = 0, length = keys.length; i < length; i++) {
          var key = keys[i];
          var value = obj[key];
          if (iteratee(value, key, obj)) result[key] = value;
        }
        return result;
      });
    
      // Return a copy of the object without the blacklisted properties.
      _.omit = restArguments(function(obj, keys) {
        var iteratee = keys[0], context;
        if (_.isFunction(iteratee)) {
          iteratee = _.negate(iteratee);
          if (keys.length > 1) context = keys[1];
        } else {
          keys = _.map(flatten(keys, false, false), String);
          iteratee = function(value, key) {
            return !_.contains(keys, key);
          };
        }
        return _.pick(obj, iteratee, context);
      });
    
      // Fill in a given object with default properties.
      _.defaults = createAssigner(_.allKeys, true);
    
      // Creates an object that inherits from the given prototype object.
      // If additional properties are provided then they will be added to the
      // created object.
      _.create = function(prototype, props) {
        var result = baseCreate(prototype);
        if (props) _.extendOwn(result, props);
        return result;
      };
    
      // Create a (shallow-cloned) duplicate of an object.
      _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };
    
      // Invokes interceptor with the obj, and then returns obj.
      // The primary purpose of this method is to "tap into" a method chain, in
      // order to perform operations on intermediate results within the chain.
      _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
      };
    
      // Returns whether an object has a given set of `key:value` pairs.
      _.isMatch = function(object, attrs) {
        var keys = _.keys(attrs), length = keys.length;
        if (object == null) return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
          var key = keys[i];
          if (attrs[key] !== obj[key] || !(key in obj)) return false;
        }
        return true;
      };
    
    
      // Internal recursive comparison function for `isEqual`.
      var eq, deepEq;
      eq = function(a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        // `null` or `undefined` only equal to itself (strict comparison).
        if (a == null || b == null) return false;
        // `NaN`s are equivalent, but non-reflexive.
        if (a !== a) return b !== b;
        // Exhaust primitive checks
        var type = typeof a;
        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
        return deepEq(a, b, aStack, bStack);
      };
    
      // Internal recursive comparison function for `isEqual`.
      deepEq = function(a, b, aStack, bStack) {
        // Unwrap any wrapped objects.
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;
        switch (className) {
          // Strings, numbers, regular expressions, dates, and booleans are compared by value.
          case '[object RegExp]':
          // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
          case '[object String]':
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return '' + a === '' + b;
          case '[object Number]':
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN.
            if (+a !== +a) return +b !== +b;
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
          case '[object Date]':
          case '[object Boolean]':
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
          case '[object Symbol]':
            return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
        }
    
        var areArrays = className === '[object Array]';
        if (!areArrays) {
          if (typeof a != 'object' || typeof b != 'object') return false;
    
          // Objects with different constructors are not equivalent, but `Object`s or `Array`s
          // from different frames are.
          var aCtor = a.constructor, bCtor = b.constructor;
          if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                                   _.isFunction(bCtor) && bCtor instanceof bCtor)
                              && ('constructor' in a && 'constructor' in b)) {
            return false;
          }
        }
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    
        // Initializing stack of traversed objects.
        // It's done here since we only need them for objects and arrays comparison.
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] === a) return bStack[length] === b;
        }
    
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
    
        // Recursively compare objects and arrays.
        if (areArrays) {
          // Compare array lengths to determine if a deep comparison is necessary.
          length = a.length;
          if (length !== b.length) return false;
          // Deep compare the contents, ignoring non-numeric properties.
          while (length--) {
            if (!eq(a[length], b[length], aStack, bStack)) return false;
          }
        } else {
          // Deep compare objects.
          var keys = _.keys(a), key;
          length = keys.length;
          // Ensure that both objects contain the same number of properties before comparing deep equality.
          if (_.keys(b).length !== length) return false;
          while (length--) {
            // Deep compare each member
            key = keys[length];
            if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return true;
      };
    
      // Perform a deep comparison to check if two objects are equal.
      _.isEqual = function(a, b) {
        return eq(a, b);
      };
    
      // Is a given array, string, or object empty?
      // An "empty" object has no enumerable own-properties.
      _.isEmpty = function(obj) {
        if (obj == null) return true;
        if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
        return _.keys(obj).length === 0;
      };
    
      // Is a given value a DOM element?
      _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
      };
    
      // Is a given value an array?
      // Delegates to ECMA5's native Array.isArray
      _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) === '[object Array]';
      };
    
      // Is a given variable an object?
      _.isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
      };
    
      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
      _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
        _['is' + name] = function(obj) {
          return toString.call(obj) === '[object ' + name + ']';
        };
      });
    
      // Define a fallback version of the method in browsers (ahem, IE < 9), where
      // there isn't any inspectable "Arguments" type.
      if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
          return has(obj, 'callee');
        };
      }
    
      // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
      // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
      var nodelist = root.document && root.document.childNodes;
      if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
        _.isFunction = function(obj) {
          return typeof obj == 'function' || false;
        };
      }
    
      // Is a given object a finite number?
      _.isFinite = function(obj) {
        return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
      };
    
      // Is the given value `NaN`?
      _.isNaN = function(obj) {
        return _.isNumber(obj) && isNaN(obj);
      };
    
      // Is a given value a boolean?
      _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
      };
    
      // Is a given value equal to null?
      _.isNull = function(obj) {
        return obj === null;
      };
    
      // Is a given variable undefined?
      _.isUndefined = function(obj) {
        return obj === void 0;
      };
    
      // Shortcut function for checking if an object has a given property directly
      // on itself (in other words, not on a prototype).
      _.has = function(obj, path) {
        if (!_.isArray(path)) {
          return has(obj, path);
        }
        var length = path.length;
        for (var i = 0; i < length; i++) {
          var key = path[i];
          if (obj == null || !hasOwnProperty.call(obj, key)) {
            return false;
          }
          obj = obj[key];
        }
        return !!length;
      };
    
      // Utility Functions
      // -----------------
    
      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
      // previous owner. Returns a reference to the Underscore object.
      _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
      };
    
      // Keep the identity function around for default iteratees.
      _.identity = function(value) {
        return value;
      };
    
      // Predicate-generating functions. Often useful outside of Underscore.
      _.constant = function(value) {
        return function() {
          return value;
        };
      };
    
      _.noop = function(){};
    
      // Creates a function that, when passed an object, will traverse that object’s
      // properties down the given `path`, specified as an array of keys or indexes.
      _.property = function(path) {
        if (!_.isArray(path)) {
          return shallowProperty(path);
        }
        return function(obj) {
          return deepGet(obj, path);
        };
      };
    
      // Generates a function for a given object that returns a given property.
      _.propertyOf = function(obj) {
        if (obj == null) {
          return function(){};
        }
        return function(path) {
          return !_.isArray(path) ? obj[path] : deepGet(obj, path);
        };
      };
    
      // Returns a predicate for checking whether an object has a given set of
      // `key:value` pairs.
      _.matcher = _.matches = function(attrs) {
        attrs = _.extendOwn({}, attrs);
        return function(obj) {
          return _.isMatch(obj, attrs);
        };
      };
    
      // Run a function **n** times.
      _.times = function(n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = optimizeCb(iteratee, context, 1);
        for (var i = 0; i < n; i++) accum[i] = iteratee(i);
        return accum;
      };
    
      // Return a random integer between min and max (inclusive).
      _.random = function(min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };
    
      // A (possibly faster) way to get the current timestamp as an integer.
      _.now = Date.now || function() {
        return new Date().getTime();
      };
    
      // List of HTML entities for escaping.
      var escapeMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;'
      };
      var unescapeMap = _.invert(escapeMap);
    
      // Functions for escaping and unescaping strings to/from HTML interpolation.
      var createEscaper = function(map) {
        var escaper = function(match) {
          return map[match];
        };
        // Regexes for identifying a key that needs to be escaped.
        var source = '(?:' + _.keys(map).join('|') + ')';
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, 'g');
        return function(string) {
          string = string == null ? '' : '' + string;
          return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
      };
      _.escape = createEscaper(escapeMap);
      _.unescape = createEscaper(unescapeMap);
    
      // Traverses the children of `obj` along `path`. If a child is a function, it
      // is invoked with its parent as context. Returns the value of the final
      // child, or `fallback` if any child is undefined.
      _.result = function(obj, path, fallback) {
        if (!_.isArray(path)) path = [path];
        var length = path.length;
        if (!length) {
          return _.isFunction(fallback) ? fallback.call(obj) : fallback;
        }
        for (var i = 0; i < length; i++) {
          var prop = obj == null ? void 0 : obj[path[i]];
          if (prop === void 0) {
            prop = fallback;
            i = length; // Ensure we don't continue iterating.
          }
          obj = _.isFunction(prop) ? prop.call(obj) : prop;
        }
        return obj;
      };
    
      // Generate a unique integer id (unique within the entire client session).
      // Useful for temporary DOM ids.
      var idCounter = 0;
      _.uniqueId = function(prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };
    
      // By default, Underscore uses ERB-style template delimiters, change the
      // following template settings to use alternative delimiters.
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };
    
      // When customizing `templateSettings`, if you don't want to define an
      // interpolation, evaluation or escaping regex, we need one that is
      // guaranteed not to match.
      var noMatch = /(.)^/;
    
      // Certain characters need to be escaped so that they can be put into a
      // string literal.
      var escapes = {
        "'": "'",
        '\\': '\\',
        '\r': 'r',
        '\n': 'n',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };
    
      var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
    
      var escapeChar = function(match) {
        return '\\' + escapes[match];
      };
    
      // JavaScript micro-templating, similar to John Resig's implementation.
      // Underscore templating handles arbitrary delimiters, preserves whitespace,
      // and correctly escapes quotes within interpolated code.
      // NB: `oldSettings` only exists for backwards compatibility.
      _.template = function(text, settings, oldSettings) {
        if (!settings && oldSettings) settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);
    
        // Combine delimiters into one regular expression via alternation.
        var matcher = RegExp([
          (settings.escape || noMatch).source,
          (settings.interpolate || noMatch).source,
          (settings.evaluate || noMatch).source
        ].join('|') + '|$', 'g');
    
        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
          index = offset + match.length;
    
          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          } else if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          } else if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
    
          // Adobe VMs need the match returned to produce the correct offset.
          return match;
        });
        source += "';\n";
    
        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
    
        source = "var __t,__p='',__j=Array.prototype.join," +
          "print=function(){__p+=__j.call(arguments,'');};\n" +
          source + 'return __p;\n';
    
        var render;
        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }
    
        var template = function(data) {
          return render.call(this, data, _);
        };
    
        // Provide the compiled source as a convenience for precompilation.
        var argument = settings.variable || 'obj';
        template.source = 'function(' + argument + '){\n' + source + '}';
    
        return template;
      };
    
      // Add a "chain" function. Start chaining a wrapped Underscore object.
      _.chain = function(obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance;
      };
    
      // OOP
      // ---------------
      // If Underscore is called as a function, it returns a wrapped object that
      // can be used OO-style. This wrapper holds altered versions of all the
      // underscore functions. Wrapped objects may be chained.
    
      // Helper function to continue chaining intermediate results.
      var chainResult = function(instance, obj) {
        return instance._chain ? _(obj).chain() : obj;
      };
    
      // Add your own custom functions to the Underscore object.
      _.mixin = function(obj) {
        _.each(_.functions(obj), function(name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function() {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return chainResult(this, func.apply(_, args));
          };
        });
        return _;
      };
    
      // Add all of the Underscore functions to the wrapper object.
      _.mixin(_);
    
      // Add all mutator Array functions to the wrapper.
      _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
          return chainResult(this, obj);
        };
      });
    
      // Add all accessor Array functions to the wrapper.
      _.each(['concat', 'join', 'slice'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          return chainResult(this, method.apply(this._wrapped, arguments));
        };
      });
    
      // Extracts the result from a wrapped and chained object.
      _.prototype.value = function() {
        return this._wrapped;
      };
    
      // Provide unwrapping proxy for some methods used in engine operations
      // such as arithmetic and JSON stringification.
      _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
    
      _.prototype.toString = function() {
        return String(this._wrapped);
      };
    
      // AMD registration happens at the end for compatibility with AMD loaders
      // that may not enforce next-turn semantics on modules. Even though general
      // practice for AMD registration is to be anonymous, underscore registers
      // as a named module because, like jQuery, it is a base library that is
      // popular enough to be bundled in a third party lib, but not be part of
      // an AMD load request. Those cases could generate an error when an
      // anonymous define() is called outside of a loader request.
      if (typeof define == 'function' && define.amd) {
        define('underscore', [], function() {
          return _;
        });
      }
    }());
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}],298:[function(require,module,exports){
    /** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
        typeof define === 'function' && define.amd ? define(['exports'], factory) :
        (factory((global.URI = global.URI || {})));
    }(this, (function (exports) { 'use strict';
    
    function merge() {
        for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
            sets[_key] = arguments[_key];
        }
    
        if (sets.length > 1) {
            sets[0] = sets[0].slice(0, -1);
            var xl = sets.length - 1;
            for (var x = 1; x < xl; ++x) {
                sets[x] = sets[x].slice(1, -1);
            }
            sets[xl] = sets[xl].slice(1);
            return sets.join('');
        } else {
            return sets[0];
        }
    }
    function subexp(str) {
        return "(?:" + str + ")";
    }
    function typeOf(o) {
        return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
    }
    function toUpperCase(str) {
        return str.toUpperCase();
    }
    function toArray(obj) {
        return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
    }
    function assign(target, source) {
        var obj = target;
        if (source) {
            for (var key in source) {
                obj[key] = source[key];
            }
        }
        return obj;
    }
    
    function buildExps(isIRI) {
        var ALPHA$$ = "[A-Za-z]",
            CR$ = "[\\x0D]",
            DIGIT$$ = "[0-9]",
            DQUOTE$$ = "[\\x22]",
            HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
            //case-insensitive
        LF$$ = "[\\x0A]",
            SP$$ = "[\\x20]",
            PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
            //expanded
        GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
            SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
            RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
            UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
            //subset, excludes bidi control characters
        IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
            //subset
        UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
            SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
            USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
            DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$),
            DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
            //relaxed parsing rules
        IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
            H16$ = subexp(HEXDIG$$ + "{1,4}"),
            LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
            IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
            //                           6( h16 ":" ) ls32
        IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
            //                      "::" 5( h16 ":" ) ls32
        IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
            //[               h16 ] "::" 4( h16 ":" ) ls32
        IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
            //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
        IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
            //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
        IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
            //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
        IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
            //[ *4( h16 ":" ) h16 ] "::"              ls32
        IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
            //[ *5( h16 ":" ) h16 ] "::"              h16
        IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
            //[ *6( h16 ":" ) h16 ] "::"
        IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
            ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
            //RFC 6874
        IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$),
            //RFC 6874
        IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$),
            //RFC 6874, with relaxed parsing rules
        IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
            IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"),
            //RFC 6874
        REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
            HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$),
            PORT$ = subexp(DIGIT$$ + "*"),
            AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"),
            PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
            SEGMENT$ = subexp(PCHAR$ + "*"),
            SEGMENT_NZ$ = subexp(PCHAR$ + "+"),
            SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
            PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"),
            PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),
            //simplified
        PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
            //simplified
        PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),
            //simplified
        PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
            PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
            QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"),
            FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"),
            HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
            URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
            RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$),
            RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
            URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$),
            ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"),
            GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
            RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
            ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$",
            SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
            AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
        return {
            NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
            NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
            ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            UNRESERVED: new RegExp(UNRESERVED$$, "g"),
            OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
            PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
            IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
            IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
        };
    }
    var URI_PROTOCOL = buildExps(false);
    
    var IRI_PROTOCOL = buildExps(true);
    
    var slicedToArray = function () {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
    
        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
    
            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"]) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }
    
        return _arr;
      }
    
      return function (arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();
    
    
    
    
    
    
    
    
    
    
    
    
    
    var toConsumableArray = function (arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
    
        return arr2;
      } else {
        return Array.from(arr);
      }
    };
    
    /** Highest positive signed 32-bit float value */
    
    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
    
    /** Bootstring parameters */
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128; // 0x80
    var delimiter = '-'; // '\x2D'
    
    /** Regular expressions */
    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
    
    /** Error messages */
    var errors = {
        'overflow': 'Overflow: input needs wider integers to process',
        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
        'invalid-input': 'Invalid input'
    };
    
    /** Convenience shortcuts */
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;
    
    /*--------------------------------------------------------------------------*/
    
    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error$1(type) {
        throw new RangeError(errors[type]);
    }
    
    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map(array, fn) {
        var result = [];
        var length = array.length;
        while (length--) {
            result[length] = fn(array[length]);
        }
        return result;
    }
    
    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
        var parts = string.split('@');
        var result = '';
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + '@';
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, '\x2E');
        var labels = string.split('.');
        var encoded = map(labels, fn).join('.');
        return result + encoded;
    }
    
    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
            var value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // It's a high surrogate, and there is a next character.
                var extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) {
                    // Low surrogate.
                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                    // It's an unmatched surrogate; only append this code unit, in case the
                    // next code unit is the high surrogate of a surrogate pair.
                    output.push(value);
                    counter--;
                }
            } else {
                output.push(value);
            }
        }
        return output;
    }
    
    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    var ucs2encode = function ucs2encode(array) {
        return String.fromCodePoint.apply(String, toConsumableArray(array));
    };
    
    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    var basicToDigit = function basicToDigit(codePoint) {
        if (codePoint - 0x30 < 0x0A) {
            return codePoint - 0x16;
        }
        if (codePoint - 0x41 < 0x1A) {
            return codePoint - 0x41;
        }
        if (codePoint - 0x61 < 0x1A) {
            return codePoint - 0x61;
        }
        return base;
    };
    
    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    var digitToBasic = function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    
    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    var adapt = function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    
    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    var decode = function decode(input) {
        // Don't use UCS-2.
        var output = [];
        var inputLength = input.length;
        var i = 0;
        var n = initialN;
        var bias = initialBias;
    
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
    
        var basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
            basic = 0;
        }
    
        for (var j = 0; j < basic; ++j) {
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) {
                error$1('not-basic');
            }
            output.push(input.charCodeAt(j));
        }
    
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
    
        for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{
    
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            var oldi = i;
            for (var w = 1, k = base;; /* no condition */k += base) {
    
                if (index >= inputLength) {
                    error$1('invalid-input');
                }
    
                var digit = basicToDigit(input.charCodeAt(index++));
    
                if (digit >= base || digit > floor((maxInt - i) / w)) {
                    error$1('overflow');
                }
    
                i += digit * w;
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
    
                if (digit < t) {
                    break;
                }
    
                var baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) {
                    error$1('overflow');
                }
    
                w *= baseMinusT;
            }
    
            var out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
    
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) {
                error$1('overflow');
            }
    
            n += floor(i / out);
            i %= out;
    
            // Insert `n` at position `i` of the output.
            output.splice(i++, 0, n);
        }
    
        return String.fromCodePoint.apply(String, output);
    };
    
    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    var encode = function encode(input) {
        var output = [];
    
        // Convert the input in UCS-2 to an array of Unicode code points.
        input = ucs2decode(input);
    
        // Cache the length.
        var inputLength = input.length;
    
        // Initialize the state.
        var n = initialN;
        var delta = 0;
        var bias = initialBias;
    
        // Handle the basic code points.
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;
    
        try {
            for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _currentValue2 = _step.value;
    
                if (_currentValue2 < 0x80) {
                    output.push(stringFromCharCode(_currentValue2));
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    
        var basicLength = output.length;
        var handledCPCount = basicLength;
    
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
    
        // Finish the basic string with a delimiter unless it's empty.
        if (basicLength) {
            output.push(delimiter);
        }
    
        // Main encoding loop:
        while (handledCPCount < inputLength) {
    
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            var m = maxInt;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;
    
            try {
                for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var currentValue = _step2.value;
    
                    if (currentValue >= n && currentValue < m) {
                        m = currentValue;
                    }
                }
    
                // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                // but guard against overflow.
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
    
            var handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error$1('overflow');
            }
    
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
    
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;
    
            try {
                for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _currentValue = _step3.value;
    
                    if (_currentValue < n && ++delta > maxInt) {
                        error$1('overflow');
                    }
                    if (_currentValue == n) {
                        // Represent delta as a generalized variable-length integer.
                        var q = delta;
                        for (var k = base;; /* no condition */k += base) {
                            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                            if (q < t) {
                                break;
                            }
                            var qMinusT = q - t;
                            var baseMinusT = base - t;
                            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                            q = floor(qMinusT / baseMinusT);
                        }
    
                        output.push(stringFromCharCode(digitToBasic(q, 0)));
                        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                        delta = 0;
                        ++handledCPCount;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
    
            ++delta;
            ++n;
        }
        return output.join('');
    };
    
    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    var toUnicode = function toUnicode(input) {
        return mapDomain(input, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    };
    
    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    var toASCII = function toASCII(input) {
        return mapDomain(input, function (string) {
            return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
        });
    };
    
    /*--------------------------------------------------------------------------*/
    
    /** Define the public API */
    var punycode = {
        /**
      * A string representing the current Punycode.js version number.
      * @memberOf punycode
      * @type String
      */
        'version': '2.1.0',
        /**
      * An object of methods to convert from JavaScript's internal character
      * representation (UCS-2) to Unicode code points, and back.
      * @see <https://mathiasbynens.be/notes/javascript-encoding>
      * @memberOf punycode
      * @type Object
      */
        'ucs2': {
            'decode': ucs2decode,
            'encode': ucs2encode
        },
        'decode': decode,
        'encode': encode,
        'toASCII': toASCII,
        'toUnicode': toUnicode
    };
    
    /**
     * URI.js
     *
     * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/uri-js
     */
    /**
     * Copyright 2011 Gary Court. All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     *    1. Redistributions of source code must retain the above copyright notice, this list of
     *       conditions and the following disclaimer.
     *
     *    2. Redistributions in binary form must reproduce the above copyright notice, this list
     *       of conditions and the following disclaimer in the documentation and/or other materials
     *       provided with the distribution.
     *
     * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     * The views and conclusions contained in the software and documentation are those of the
     * authors and should not be interpreted as representing official policies, either expressed
     * or implied, of Gary Court.
     */
    var SCHEMES = {};
    function pctEncChar(chr) {
        var c = chr.charCodeAt(0);
        var e = void 0;
        if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
        return e;
    }
    function pctDecChars(str) {
        var newStr = "";
        var i = 0;
        var il = str.length;
        while (i < il) {
            var c = parseInt(str.substr(i + 1, 2), 16);
            if (c < 128) {
                newStr += String.fromCharCode(c);
                i += 3;
            } else if (c >= 194 && c < 224) {
                if (il - i >= 6) {
                    var c2 = parseInt(str.substr(i + 4, 2), 16);
                    newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
                } else {
                    newStr += str.substr(i, 6);
                }
                i += 6;
            } else if (c >= 224) {
                if (il - i >= 9) {
                    var _c = parseInt(str.substr(i + 4, 2), 16);
                    var c3 = parseInt(str.substr(i + 7, 2), 16);
                    newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
                } else {
                    newStr += str.substr(i, 9);
                }
                i += 9;
            } else {
                newStr += str.substr(i, 3);
                i += 3;
            }
        }
        return newStr;
    }
    function _normalizeComponentEncoding(components, protocol) {
        function decodeUnreserved(str) {
            var decStr = pctDecChars(str);
            return !decStr.match(protocol.UNRESERVED) ? str : decStr;
        }
        if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
        if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        return components;
    }
    
    function _stripLeadingZeros(str) {
        return str.replace(/^0*(.*)/, "$1") || "0";
    }
    function _normalizeIPv4(host, protocol) {
        var matches = host.match(protocol.IPV4ADDRESS) || [];
    
        var _matches = slicedToArray(matches, 2),
            address = _matches[1];
    
        if (address) {
            return address.split(".").map(_stripLeadingZeros).join(".");
        } else {
            return host;
        }
    }
    function _normalizeIPv6(host, protocol) {
        var matches = host.match(protocol.IPV6ADDRESS) || [];
    
        var _matches2 = slicedToArray(matches, 3),
            address = _matches2[1],
            zone = _matches2[2];
    
        if (address) {
            var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
                _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
                last = _address$toLowerCase$2[0],
                first = _address$toLowerCase$2[1];
    
            var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
            var lastFields = last.split(":").map(_stripLeadingZeros);
            var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
            var fieldCount = isLastFieldIPv4Address ? 7 : 8;
            var lastFieldsStart = lastFields.length - fieldCount;
            var fields = Array(fieldCount);
            for (var x = 0; x < fieldCount; ++x) {
                fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
            }
            if (isLastFieldIPv4Address) {
                fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
            }
            var allZeroFields = fields.reduce(function (acc, field, index) {
                if (!field || field === "0") {
                    var lastLongest = acc[acc.length - 1];
                    if (lastLongest && lastLongest.index + lastLongest.length === index) {
                        lastLongest.length++;
                    } else {
                        acc.push({ index: index, length: 1 });
                    }
                }
                return acc;
            }, []);
            var longestZeroFields = allZeroFields.sort(function (a, b) {
                return b.length - a.length;
            })[0];
            var newHost = void 0;
            if (longestZeroFields && longestZeroFields.length > 1) {
                var newFirst = fields.slice(0, longestZeroFields.index);
                var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
                newHost = newFirst.join(":") + "::" + newLast.join(":");
            } else {
                newHost = fields.join(":");
            }
            if (zone) {
                newHost += "%" + zone;
            }
            return newHost;
        } else {
            return host;
        }
    }
    var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
    var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
    function parse(uriString) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
        var components = {};
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
        var matches = uriString.match(URI_PARSE);
        if (matches) {
            if (NO_MATCH_IS_UNDEFINED) {
                //store each component
                components.scheme = matches[1];
                components.userinfo = matches[3];
                components.host = matches[4];
                components.port = parseInt(matches[5], 10);
                components.path = matches[6] || "";
                components.query = matches[7];
                components.fragment = matches[8];
                //fix port number
                if (isNaN(components.port)) {
                    components.port = matches[5];
                }
            } else {
                //IE FIX for improper RegExp matching
                //store each component
                components.scheme = matches[1] || undefined;
                components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
                components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
                components.port = parseInt(matches[5], 10);
                components.path = matches[6] || "";
                components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
                components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
                //fix port number
                if (isNaN(components.port)) {
                    components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
                }
            }
            if (components.host) {
                //normalize IP hosts
                components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
            }
            //determine reference type
            if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
                components.reference = "same-document";
            } else if (components.scheme === undefined) {
                components.reference = "relative";
            } else if (components.fragment === undefined) {
                components.reference = "absolute";
            } else {
                components.reference = "uri";
            }
            //check for reference errors
            if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
                components.error = components.error || "URI is not a " + options.reference + " reference.";
            }
            //find scheme handler
            var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
            //check if scheme can't handle IRIs
            if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
                //if host component is a domain name
                if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                    //convert Unicode IDN -> ASCII IDN
                    try {
                        components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                    } catch (e) {
                        components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                    }
                }
                //convert IRI -> URI
                _normalizeComponentEncoding(components, URI_PROTOCOL);
            } else {
                //normalize encodings
                _normalizeComponentEncoding(components, protocol);
            }
            //perform scheme specific parsing
            if (schemeHandler && schemeHandler.parse) {
                schemeHandler.parse(components, options);
            }
        } else {
            components.error = components.error || "URI can not be parsed.";
        }
        return components;
    }
    
    function _recomposeAuthority(components, options) {
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        if (components.userinfo !== undefined) {
            uriTokens.push(components.userinfo);
            uriTokens.push("@");
        }
        if (components.host !== undefined) {
            //normalize IP hosts, add brackets and escape zone separator for IPv6
            uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
                return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
            }));
        }
        if (typeof components.port === "number") {
            uriTokens.push(":");
            uriTokens.push(components.port.toString(10));
        }
        return uriTokens.length ? uriTokens.join("") : undefined;
    }
    
    var RDS1 = /^\.\.?\//;
    var RDS2 = /^\/\.(\/|$)/;
    var RDS3 = /^\/\.\.(\/|$)/;
    var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
    function removeDotSegments(input) {
        var output = [];
        while (input.length) {
            if (input.match(RDS1)) {
                input = input.replace(RDS1, "");
            } else if (input.match(RDS2)) {
                input = input.replace(RDS2, "/");
            } else if (input.match(RDS3)) {
                input = input.replace(RDS3, "/");
                output.pop();
            } else if (input === "." || input === "..") {
                input = "";
            } else {
                var im = input.match(RDS5);
                if (im) {
                    var s = im[0];
                    input = input.slice(s.length);
                    output.push(s);
                } else {
                    throw new Error("Unexpected dot segment condition");
                }
            }
        }
        return output.join("");
    }
    
    function serialize(components) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
        var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        //find scheme handler
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        //perform scheme specific serialization
        if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
        if (components.host) {
            //if host component is an IPv6 address
            if (protocol.IPV6ADDRESS.test(components.host)) {}
            //TODO: normalize IPv6 address as per RFC 5952
    
            //if host component is a domain name
            else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
                    //convert IDN via punycode
                    try {
                        components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
                    } catch (e) {
                        components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                    }
                }
        }
        //normalize encoding
        _normalizeComponentEncoding(components, protocol);
        if (options.reference !== "suffix" && components.scheme) {
            uriTokens.push(components.scheme);
            uriTokens.push(":");
        }
        var authority = _recomposeAuthority(components, options);
        if (authority !== undefined) {
            if (options.reference !== "suffix") {
                uriTokens.push("//");
            }
            uriTokens.push(authority);
            if (components.path && components.path.charAt(0) !== "/") {
                uriTokens.push("/");
            }
        }
        if (components.path !== undefined) {
            var s = components.path;
            if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
                s = removeDotSegments(s);
            }
            if (authority === undefined) {
                s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
            }
            uriTokens.push(s);
        }
        if (components.query !== undefined) {
            uriTokens.push("?");
            uriTokens.push(components.query);
        }
        if (components.fragment !== undefined) {
            uriTokens.push("#");
            uriTokens.push(components.fragment);
        }
        return uriTokens.join(""); //merge tokens into a string
    }
    
    function resolveComponents(base, relative) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var skipNormalization = arguments[3];
    
        var target = {};
        if (!skipNormalization) {
            base = parse(serialize(base, options), options); //normalize base components
            relative = parse(serialize(relative, options), options); //normalize relative components
        }
        options = options || {};
        if (!options.tolerant && relative.scheme) {
            target.scheme = relative.scheme;
            //target.authority = relative.authority;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
        } else {
            if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
                //target.authority = relative.authority;
                target.userinfo = relative.userinfo;
                target.host = relative.host;
                target.port = relative.port;
                target.path = removeDotSegments(relative.path || "");
                target.query = relative.query;
            } else {
                if (!relative.path) {
                    target.path = base.path;
                    if (relative.query !== undefined) {
                        target.query = relative.query;
                    } else {
                        target.query = base.query;
                    }
                } else {
                    if (relative.path.charAt(0) === "/") {
                        target.path = removeDotSegments(relative.path);
                    } else {
                        if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                            target.path = "/" + relative.path;
                        } else if (!base.path) {
                            target.path = relative.path;
                        } else {
                            target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                        }
                        target.path = removeDotSegments(target.path);
                    }
                    target.query = relative.query;
                }
                //target.authority = base.authority;
                target.userinfo = base.userinfo;
                target.host = base.host;
                target.port = base.port;
            }
            target.scheme = base.scheme;
        }
        target.fragment = relative.fragment;
        return target;
    }
    
    function resolve(baseURI, relativeURI, options) {
        var schemelessOptions = assign({ scheme: 'null' }, options);
        return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
    }
    
    function normalize(uri, options) {
        if (typeof uri === "string") {
            uri = serialize(parse(uri, options), options);
        } else if (typeOf(uri) === "object") {
            uri = parse(serialize(uri, options), options);
        }
        return uri;
    }
    
    function equal(uriA, uriB, options) {
        if (typeof uriA === "string") {
            uriA = serialize(parse(uriA, options), options);
        } else if (typeOf(uriA) === "object") {
            uriA = serialize(uriA, options);
        }
        if (typeof uriB === "string") {
            uriB = serialize(parse(uriB, options), options);
        } else if (typeOf(uriB) === "object") {
            uriB = serialize(uriB, options);
        }
        return uriA === uriB;
    }
    
    function escapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
    }
    
    function unescapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
    }
    
    var handler = {
        scheme: "http",
        domainHost: true,
        parse: function parse(components, options) {
            //report missing host
            if (!components.host) {
                components.error = components.error || "HTTP URIs must have a host.";
            }
            return components;
        },
        serialize: function serialize(components, options) {
            //normalize the default port
            if (components.port === (String(components.scheme).toLowerCase() !== "https" ? 80 : 443) || components.port === "") {
                components.port = undefined;
            }
            //normalize the empty path
            if (!components.path) {
                components.path = "/";
            }
            //NOTE: We do not parse query strings for HTTP URIs
            //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
            //and not the HTTP spec.
            return components;
        }
    };
    
    var handler$1 = {
        scheme: "https",
        domainHost: handler.domainHost,
        parse: handler.parse,
        serialize: handler.serialize
    };
    
    var O = {};
    var isIRI = true;
    //RFC 3986
    var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
    var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
    var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
    //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
    //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
    //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
    //const VCHAR$$ = "[\\x21-\\x7E]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
    //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
    //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
    //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
    var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
    var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
    var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
    var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
    var UNRESERVED = new RegExp(UNRESERVED$$, "g");
    var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
    var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
    var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
    var NOT_HFVALUE = NOT_HFNAME;
    function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(UNRESERVED) ? str : decStr;
    }
    var handler$2 = {
        scheme: "mailto",
        parse: function parse$$1(components, options) {
            var mailtoComponents = components;
            var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
            mailtoComponents.path = undefined;
            if (mailtoComponents.query) {
                var unknownHeaders = false;
                var headers = {};
                var hfields = mailtoComponents.query.split("&");
                for (var x = 0, xl = hfields.length; x < xl; ++x) {
                    var hfield = hfields[x].split("=");
                    switch (hfield[0]) {
                        case "to":
                            var toAddrs = hfield[1].split(",");
                            for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                                to.push(toAddrs[_x]);
                            }
                            break;
                        case "subject":
                            mailtoComponents.subject = unescapeComponent(hfield[1], options);
                            break;
                        case "body":
                            mailtoComponents.body = unescapeComponent(hfield[1], options);
                            break;
                        default:
                            unknownHeaders = true;
                            headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                            break;
                    }
                }
                if (unknownHeaders) mailtoComponents.headers = headers;
            }
            mailtoComponents.query = undefined;
            for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
                var addr = to[_x2].split("@");
                addr[0] = unescapeComponent(addr[0]);
                if (!options.unicodeSupport) {
                    //convert Unicode IDN -> ASCII IDN
                    try {
                        addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                    } catch (e) {
                        mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                    }
                } else {
                    addr[1] = unescapeComponent(addr[1], options).toLowerCase();
                }
                to[_x2] = addr.join("@");
            }
            return mailtoComponents;
        },
        serialize: function serialize$$1(mailtoComponents, options) {
            var components = mailtoComponents;
            var to = toArray(mailtoComponents.to);
            if (to) {
                for (var x = 0, xl = to.length; x < xl; ++x) {
                    var toAddr = String(to[x]);
                    var atIdx = toAddr.lastIndexOf("@");
                    var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                    var domain = toAddr.slice(atIdx + 1);
                    //convert IDN via punycode
                    try {
                        domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                    } catch (e) {
                        components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                    }
                    to[x] = localPart + "@" + domain;
                }
                components.path = to.join(",");
            }
            var headers = mailtoComponents.headers = mailtoComponents.headers || {};
            if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
            if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
            var fields = [];
            for (var name in headers) {
                if (headers[name] !== O[name]) {
                    fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
                }
            }
            if (fields.length) {
                components.query = fields.join("&");
            }
            return components;
        }
    };
    
    var URN_PARSE = /^([^\:]+)\:(.*)/;
    //RFC 2141
    var handler$3 = {
        scheme: "urn",
        parse: function parse$$1(components, options) {
            var matches = components.path && components.path.match(URN_PARSE);
            var urnComponents = components;
            if (matches) {
                var scheme = options.scheme || urnComponents.scheme || "urn";
                var nid = matches[1].toLowerCase();
                var nss = matches[2];
                var urnScheme = scheme + ":" + (options.nid || nid);
                var schemeHandler = SCHEMES[urnScheme];
                urnComponents.nid = nid;
                urnComponents.nss = nss;
                urnComponents.path = undefined;
                if (schemeHandler) {
                    urnComponents = schemeHandler.parse(urnComponents, options);
                }
            } else {
                urnComponents.error = urnComponents.error || "URN can not be parsed.";
            }
            return urnComponents;
        },
        serialize: function serialize$$1(urnComponents, options) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = urnComponents.nid;
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            if (schemeHandler) {
                urnComponents = schemeHandler.serialize(urnComponents, options);
            }
            var uriComponents = urnComponents;
            var nss = urnComponents.nss;
            uriComponents.path = (nid || options.nid) + ":" + nss;
            return uriComponents;
        }
    };
    
    var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
    //RFC 4122
    var handler$4 = {
        scheme: "urn:uuid",
        parse: function parse(urnComponents, options) {
            var uuidComponents = urnComponents;
            uuidComponents.uuid = uuidComponents.nss;
            uuidComponents.nss = undefined;
            if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
                uuidComponents.error = uuidComponents.error || "UUID is not valid.";
            }
            return uuidComponents;
        },
        serialize: function serialize(uuidComponents, options) {
            var urnComponents = uuidComponents;
            //normalize UUID
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
            return urnComponents;
        }
    };
    
    SCHEMES[handler.scheme] = handler;
    SCHEMES[handler$1.scheme] = handler$1;
    SCHEMES[handler$2.scheme] = handler$2;
    SCHEMES[handler$3.scheme] = handler$3;
    SCHEMES[handler$4.scheme] = handler$4;
    
    exports.SCHEMES = SCHEMES;
    exports.pctEncChar = pctEncChar;
    exports.pctDecChars = pctDecChars;
    exports.parse = parse;
    exports.removeDotSegments = removeDotSegments;
    exports.serialize = serialize;
    exports.resolveComponents = resolveComponents;
    exports.resolve = resolve;
    exports.normalize = normalize;
    exports.equal = equal;
    exports.escapeComponent = escapeComponent;
    exports.unescapeComponent = unescapeComponent;
    
    Object.defineProperty(exports, '__esModule', { value: true });
    
    })));
    
    
    },{}],299:[function(require,module,exports){
    module.exports = urlSetQuery
    function urlSetQuery (url, query) {
      if (query) {
        // remove optional leading symbols
        query = query.trim().replace(/^(\?|#|&)/, '')
    
        // don't append empty query
        query = query ? ('?' + query) : query
    
        var parts = url.split(/[\?\#]/)
        var start = parts[0]
        if (query && /\:\/\/[^\/]*$/.test(start)) {
          // e.g. http://foo.com -> http://foo.com/
          start = start + '/'
        }
        var match = url.match(/(\#.*)$/)
        url = start + query
        if (match) { // add hash back in
          url = url + match[0]
        }
      }
      return url
    }
    
    },{}],300:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    'use strict';
    
    var punycode = require('punycode');
    var util = require('./util');
    
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    
    exports.Url = Url;
    
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    
    // Reference: RFC 3986, RFC 1808, RFC 2396
    
    // define these here so at least they only have to be
    // compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,
    
        // Special case for a simple path URL
        simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    
        // RFC 2396: characters reserved for delimiting URLs.
        // We actually just auto-escape these.
        delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    
        // RFC 2396: characters not allowed for various reasons.
        unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    
        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
        autoEscape = ['\''].concat(unwise),
        // Characters that are never ever allowed in a hostname.
        // Note that any invalid chars are also handled, but these
        // are the ones that are *expected* to be seen, so we fast-path
        // them.
        nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
        hostEndingChars = ['/', '?', '#'],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
        unsafeProtocol = {
          'javascript': true,
          'javascript:': true
        },
        // protocols that never have a hostname.
        hostlessProtocol = {
          'javascript': true,
          'javascript:': true
        },
        // protocols that always contain a // bit.
        slashedProtocol = {
          'http': true,
          'https': true,
          'ftp': true,
          'gopher': true,
          'file': true,
          'http:': true,
          'https:': true,
          'ftp:': true,
          'gopher:': true,
          'file:': true
        },
        querystring = require('querystring');
    
    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && util.isObject(url) && url instanceof Url) return url;
    
      var u = new Url;
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }
    
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      if (!util.isString(url)) {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }
    
      // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://code.google.com/p/chromium/issues/detail?id=25916
      var queryIndex = url.indexOf('?'),
          splitter =
              (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
          uSplit = url.split(splitter),
          slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url = uSplit.join(splitter);
    
      var rest = url;
    
      // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"
      rest = rest.trim();
    
      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = '';
            this.query = {};
          }
          return this;
        }
      }
    
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
    
      // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
    
      if (!hostlessProtocol[proto] &&
          (slashes || (proto && !slashedProtocol[proto]))) {
    
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
    
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
    
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
    
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        }
    
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
    
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1)
          hostEnd = rest.length;
    
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
    
        // pull out port.
        this.parseHost();
    
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || '';
    
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === '[' &&
            this.hostname[this.hostname.length - 1] === ']';
    
        // validate a little.
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              // we test again with ASCII char only
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = '/' + notHost.join('.') + rest;
                }
                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }
    
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        } else {
          // hostnames are always lower case.
          this.hostname = this.hostname.toLowerCase();
        }
    
        if (!ipv6Hostname) {
          // IDNA Support: Returns a punycoded representation of "domain".
          // It only converts parts of the domain name that
          // have non-ASCII characters, i.e. it doesn't matter if
          // you call it with a domain that already is ASCII-only.
          this.hostname = punycode.toASCII(this.hostname);
        }
    
        var p = this.port ? ':' + this.port : '';
        var h = this.hostname || '';
        this.host = h + p;
        this.href += this.host;
    
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== '/') {
            rest = '/' + rest;
          }
        }
      }
    
      // now rest is set to the post-host stuff.
      // chop off any delim chars.
      if (!unsafeProtocol[lowerProto]) {
    
        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
    
    
      // chop off from the tail first.
      var hash = rest.indexOf('#');
      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf('?');
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = '';
        this.query = {};
      }
      if (rest) this.pathname = rest;
      if (slashedProtocol[lowerProto] &&
          this.hostname && !this.pathname) {
        this.pathname = '/';
      }
    
      //to support http.request
      if (this.pathname || this.search) {
        var p = this.pathname || '';
        var s = this.search || '';
        this.path = p + s;
      }
    
      // finally, reconstruct the href based on what has been validated.
      this.href = this.format();
      return this;
    };
    
    // format a parsed object into a url string
    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (util.isString(obj)) obj = urlParse(obj);
      if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
      return obj.format();
    }
    
    Url.prototype.format = function() {
      var auth = this.auth || '';
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }
    
      var protocol = this.protocol || '',
          pathname = this.pathname || '',
          hash = this.hash || '',
          host = false,
          query = '';
    
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(':') === -1 ?
            this.hostname :
            '[' + this.hostname + ']');
        if (this.port) {
          host += ':' + this.port;
        }
      }
    
      if (this.query &&
          util.isObject(this.query) &&
          Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }
    
      var search = this.search || (query && ('?' + query)) || '';
    
      if (protocol && protocol.substr(-1) !== ':') protocol += ':';
    
      // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.
      if (this.slashes ||
          (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }
    
      if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
      if (search && search.charAt(0) !== '?') search = '?' + search;
    
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');
    
      return protocol + host + pathname + search + hash;
    };
    
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    
    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }
    
    Url.prototype.resolveObject = function(relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
    
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
    
      // hash is always overridden, no matter what.
      // even href="" will remove it.
      result.hash = relative.hash;
    
      // if the relative url is empty, then there's nothing left to do here.
      if (relative.href === '') {
        result.href = result.format();
        return result;
      }
    
      // hrefs like //foo/bar always cut to the protocol.
      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol')
            result[rkey] = relative[rkey];
        }
    
        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] &&
            result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }
    
        result.href = result.format();
        return result;
      }
    
      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
    
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || '').split('/');
          while (relPath.length && !(relative.host = relPath.shift()));
          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
    
      var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
          isRelAbs = (
              relative.host ||
              relative.pathname && relative.pathname.charAt(0) === '/'
          ),
          mustEndAbs = (isRelAbs || isSourceAbs ||
                        (result.host && relative.pathname)),
          removeAllDots = mustEndAbs,
          srcPath = result.pathname && result.pathname.split('/') || [],
          relPath = relative.pathname && relative.pathname.split('/') || [],
          psychotic = result.protocol && !slashedProtocol[result.protocol];
    
      // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.
      if (psychotic) {
        result.hostname = '';
        result.port = null;
        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host;
          else srcPath.unshift(result.host);
        }
        result.host = '';
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host;
            else relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }
    
      if (isRelAbs) {
        // it's absolute.
        result.host = (relative.host || relative.host === '') ?
                      relative.host : result.host;
        result.hostname = (relative.hostname || relative.hostname === '') ?
                          relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
        // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
          var authInHost = result.host && result.host.indexOf('@') > 0 ?
                           result.host.split('@') : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') +
                        (result.search ? result.search : '');
        }
        result.href = result.format();
        return result;
      }
    
      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) {
          result.path = '/' + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
    
      // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (
          (result.host || relative.host || srcPath.length > 1) &&
          (last === '.' || last === '..') || last === '');
    
      // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
    
      // if the path is allowed to go above the root, restore leading ..s
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }
    
      if (mustEndAbs && srcPath[0] !== '' &&
          (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }
    
      if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
        srcPath.push('');
      }
    
      var isAbsolute = srcPath[0] === '' ||
          (srcPath[0] && srcPath[0].charAt(0) === '/');
    
      // put the host back
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' :
                                        srcPath.length ? srcPath.shift() : '';
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf('@') > 0 ?
                         result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
    
      mustEndAbs = mustEndAbs || (result.host && srcPath.length);
    
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }
    
      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      }
    
      //to support request.http
      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
                      (result.search ? result.search : '');
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) this.hostname = host;
    };
    
    },{"./util":301,"punycode":238,"querystring":242}],301:[function(require,module,exports){
    'use strict';
    
    module.exports = {
      isString: function(arg) {
        return typeof(arg) === 'string';
      },
      isObject: function(arg) {
        return typeof(arg) === 'object' && arg !== null;
      },
      isNull: function(arg) {
        return arg === null;
      },
      isNullOrUndefined: function(arg) {
        return arg == null;
      }
    };
    
    },{}],302:[function(require,module,exports){
    /*! https://mths.be/utf8js v3.0.0 by @mathias */
    ;(function(root) {
    
        var stringFromCharCode = String.fromCharCode;
    
        // Taken from https://mths.be/punycode
        function ucs2decode(string) {
            var output = [];
            var counter = 0;
            var length = string.length;
            var value;
            var extra;
            while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                    // high surrogate, and there is a next character
                    extra = string.charCodeAt(counter++);
                    if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                    } else {
                        // unmatched surrogate; only append this code unit, in case the next
                        // code unit is the high surrogate of a surrogate pair
                        output.push(value);
                        counter--;
                    }
                } else {
                    output.push(value);
                }
            }
            return output;
        }
    
        // Taken from https://mths.be/punycode
        function ucs2encode(array) {
            var length = array.length;
            var index = -1;
            var value;
            var output = '';
            while (++index < length) {
                value = array[index];
                if (value > 0xFFFF) {
                    value -= 0x10000;
                    output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                    value = 0xDC00 | value & 0x3FF;
                }
                output += stringFromCharCode(value);
            }
            return output;
        }
    
        function checkScalarValue(codePoint) {
            if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
                throw Error(
                    'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
                    ' is not a scalar value'
                );
            }
        }
        /*--------------------------------------------------------------------------*/
    
        function createByte(codePoint, shift) {
            return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
        }
    
        function encodeCodePoint(codePoint) {
            if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
                return stringFromCharCode(codePoint);
            }
            var symbol = '';
            if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
                symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
            }
            else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
                checkScalarValue(codePoint);
                symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
                symbol += createByte(codePoint, 6);
            }
            else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
                symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
                symbol += createByte(codePoint, 12);
                symbol += createByte(codePoint, 6);
            }
            symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
            return symbol;
        }
    
        function utf8encode(string) {
            var codePoints = ucs2decode(string);
            var length = codePoints.length;
            var index = -1;
            var codePoint;
            var byteString = '';
            while (++index < length) {
                codePoint = codePoints[index];
                byteString += encodeCodePoint(codePoint);
            }
            return byteString;
        }
    
        /*--------------------------------------------------------------------------*/
    
        function readContinuationByte() {
            if (byteIndex >= byteCount) {
                throw Error('Invalid byte index');
            }
    
            var continuationByte = byteArray[byteIndex] & 0xFF;
            byteIndex++;
    
            if ((continuationByte & 0xC0) == 0x80) {
                return continuationByte & 0x3F;
            }
    
            // If we end up here, it’s not a continuation byte
            throw Error('Invalid continuation byte');
        }
    
        function decodeSymbol() {
            var byte1;
            var byte2;
            var byte3;
            var byte4;
            var codePoint;
    
            if (byteIndex > byteCount) {
                throw Error('Invalid byte index');
            }
    
            if (byteIndex == byteCount) {
                return false;
            }
    
            // Read first byte
            byte1 = byteArray[byteIndex] & 0xFF;
            byteIndex++;
    
            // 1-byte sequence (no continuation bytes)
            if ((byte1 & 0x80) == 0) {
                return byte1;
            }
    
            // 2-byte sequence
            if ((byte1 & 0xE0) == 0xC0) {
                byte2 = readContinuationByte();
                codePoint = ((byte1 & 0x1F) << 6) | byte2;
                if (codePoint >= 0x80) {
                    return codePoint;
                } else {
                    throw Error('Invalid continuation byte');
                }
            }
    
            // 3-byte sequence (may include unpaired surrogates)
            if ((byte1 & 0xF0) == 0xE0) {
                byte2 = readContinuationByte();
                byte3 = readContinuationByte();
                codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
                if (codePoint >= 0x0800) {
                    checkScalarValue(codePoint);
                    return codePoint;
                } else {
                    throw Error('Invalid continuation byte');
                }
            }
    
            // 4-byte sequence
            if ((byte1 & 0xF8) == 0xF0) {
                byte2 = readContinuationByte();
                byte3 = readContinuationByte();
                byte4 = readContinuationByte();
                codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
                    (byte3 << 0x06) | byte4;
                if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
                    return codePoint;
                }
            }
    
            throw Error('Invalid UTF-8 detected');
        }
    
        var byteArray;
        var byteCount;
        var byteIndex;
        function utf8decode(byteString) {
            byteArray = ucs2decode(byteString);
            byteCount = byteArray.length;
            byteIndex = 0;
            var codePoints = [];
            var tmp;
            while ((tmp = decodeSymbol()) !== false) {
                codePoints.push(tmp);
            }
            return ucs2encode(codePoints);
        }
    
        /*--------------------------------------------------------------------------*/
    
        root.version = '3.0.0';
        root.encode = utf8encode;
        root.decode = utf8decode;
    
    }(typeof exports === 'undefined' ? this.utf8 = {} : exports));
    
    },{}],303:[function(require,module,exports){
    (function (global){
    
    /**
     * Module exports.
     */
    
    module.exports = deprecate;
    
    /**
     * Mark that a method should not be used.
     * Returns a modified function which warns once by default.
     *
     * If `localStorage.noDeprecation = true` is set, then it is a no-op.
     *
     * If `localStorage.throwDeprecation = true` is set, then deprecated functions
     * will throw an Error when invoked.
     *
     * If `localStorage.traceDeprecation = true` is set, then deprecated functions
     * will invoke `console.trace()` instead of `console.error()`.
     *
     * @param {Function} fn - the function to deprecate
     * @param {String} msg - the string to print to the console when `fn` is invoked
     * @returns {Function} a new "deprecated" version of `fn`
     * @api public
     */
    
    function deprecate (fn, msg) {
      if (config('noDeprecation')) {
        return fn;
      }
    
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config('throwDeprecation')) {
            throw new Error(msg);
          } else if (config('traceDeprecation')) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
    
      return deprecated;
    }
    
    /**
     * Checks `localStorage` for boolean values for the given `name`.
     *
     * @param {String} name
     * @returns {Boolean}
     * @api private
     */
    
    function config (name) {
      // accessing global.localStorage can trigger a DOMException in sandboxed iframes
      try {
        if (!global.localStorage) return false;
      } catch (_) {
        return false;
      }
      var val = global.localStorage[name];
      if (null == val) return false;
      return String(val).toLowerCase() === 'true';
    }
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}],304:[function(require,module,exports){
    var v1 = require('./v1');
    var v4 = require('./v4');
    
    var uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;
    
    module.exports = uuid;
    
    },{"./v1":307,"./v4":308}],305:[function(require,module,exports){
    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 0x100).toString(16).substr(1);
    }
    
    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
      return ([bth[buf[i++]], bth[buf[i++]], 
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]]]).join('');
    }
    
    module.exports = bytesToUuid;
    
    },{}],306:[function(require,module,exports){
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection
    
    // getRandomValues needs to be invoked in a context where "this" is a Crypto
    // implementation. Also, find the complete implementation of crypto on IE11.
    var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                          (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));
    
    if (getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
    
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);
    
      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }
    
        return rnds;
      };
    }
    
    },{}],307:[function(require,module,exports){
    var rng = require('./lib/rng');
    var bytesToUuid = require('./lib/bytesToUuid');
    
    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html
    
    var _nodeId;
    var _clockseq;
    
    // Previous uuid creation time
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    
    // See https://github.com/broofa/node-uuid for API details
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];
    
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
    
      // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189
      if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
          ];
        }
        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      }
    
      // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
      var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
    
      // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock
      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    
      // Time since last uuid creation (in msecs)
      var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;
    
      // Per 4.2.1.2, Bump clockseq on clock regression
      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      }
    
      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      }
    
      // Per 4.2.1.2 Throw error if too many uuids are requested
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }
    
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
    
      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
      msecs += 12219292800000;
    
      // `time_low`
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;
    
      // `time_mid`
      var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;
    
      // `time_high_and_version`
      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
      b[i++] = tmh >>> 16 & 0xff;
    
      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
      b[i++] = clockseq >>> 8 | 0x80;
    
      // `clock_seq_low`
      b[i++] = clockseq & 0xff;
    
      // `node`
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
    
      return buf ? buf : bytesToUuid(b);
    }
    
    module.exports = v1;
    
    },{"./lib/bytesToUuid":305,"./lib/rng":306}],308:[function(require,module,exports){
    var rng = require('./lib/rng');
    var bytesToUuid = require('./lib/bytesToUuid');
    
    function v4(options, buf, offset) {
      var i = buf && offset || 0;
    
      if (typeof(options) == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};
    
      var rnds = options.random || (options.rng || rng)();
    
      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;
    
      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
    
      return buf || bytesToUuid(rnds);
    }
    
    module.exports = v4;
    
    },{"./lib/bytesToUuid":305,"./lib/rng":306}],309:[function(require,module,exports){
    var indexOf = require('indexof');
    
    var Object_keys = function (obj) {
        if (Object.keys) return Object.keys(obj)
        else {
            var res = [];
            for (var key in obj) res.push(key)
            return res;
        }
    };
    
    var forEach = function (xs, fn) {
        if (xs.forEach) return xs.forEach(fn)
        else for (var i = 0; i < xs.length; i++) {
            fn(xs[i], i, xs);
        }
    };
    
    var defineProp = (function() {
        try {
            Object.defineProperty({}, '_', {});
            return function(obj, name, value) {
                Object.defineProperty(obj, name, {
                    writable: true,
                    enumerable: false,
                    configurable: true,
                    value: value
                })
            };
        } catch(e) {
            return function(obj, name, value) {
                obj[name] = value;
            };
        }
    }());
    
    var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
    'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
    'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
    'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
    'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];
    
    function Context() {}
    Context.prototype = {};
    
    var Script = exports.Script = function NodeScript (code) {
        if (!(this instanceof Script)) return new Script(code);
        this.code = code;
    };
    
    Script.prototype.runInContext = function (context) {
        if (!(context instanceof Context)) {
            throw new TypeError("needs a 'context' argument.");
        }
        
        var iframe = document.createElement('iframe');
        if (!iframe.style) iframe.style = {};
        iframe.style.display = 'none';
        
        document.body.appendChild(iframe);
        
        var win = iframe.contentWindow;
        var wEval = win.eval, wExecScript = win.execScript;
    
        if (!wEval && wExecScript) {
            // win.eval() magically appears when this is called in IE:
            wExecScript.call(win, 'null');
            wEval = win.eval;
        }
        
        forEach(Object_keys(context), function (key) {
            win[key] = context[key];
        });
        forEach(globals, function (key) {
            if (context[key]) {
                win[key] = context[key];
            }
        });
        
        var winKeys = Object_keys(win);
    
        var res = wEval.call(win, this.code);
        
        forEach(Object_keys(win), function (key) {
            // Avoid copying circular objects like `top` and `window` by only
            // updating existing context properties or new properties in the `win`
            // that was only introduced after the eval.
            if (key in context || indexOf(winKeys, key) === -1) {
                context[key] = win[key];
            }
        });
    
        forEach(globals, function (key) {
            if (!(key in context)) {
                defineProp(context, key, win[key]);
            }
        });
        
        document.body.removeChild(iframe);
        
        return res;
    };
    
    Script.prototype.runInThisContext = function () {
        return eval(this.code); // maybe...
    };
    
    Script.prototype.runInNewContext = function (context) {
        var ctx = Script.createContext(context);
        var res = this.runInContext(ctx);
    
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    
        return res;
    };
    
    forEach(Object_keys(Script.prototype), function (name) {
        exports[name] = Script[name] = function (code) {
            var s = Script(code);
            return s[name].apply(s, [].slice.call(arguments, 1));
        };
    });
    
    exports.createScript = function (code) {
        return exports.Script(code);
    };
    
    exports.createContext = Script.createContext = function (context) {
        var copy = new Context();
        if(typeof context === 'object') {
            forEach(Object_keys(context), function (key) {
                copy[key] = context[key];
            });
        }
        return copy;
    };
    
    },{"indexof":198}],310:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var _ = require('underscore');
    var swarm = require("swarm-js");
    
    
    var Bzz = function Bzz(provider) {
    
        this.givenProvider = Bzz.givenProvider;
    
        if (provider && provider._requestManager) {
            provider = provider.currentProvider;
        }
    
        // only allow file picker when in browser
        if(typeof document !== 'undefined') {
            this.pick = swarm.pick;
        }
    
        this.setProvider(provider);
    };
    
    // set default ethereum provider
    /* jshint ignore:start */
    Bzz.givenProvider = null;
    if(typeof ethereumProvider !== 'undefined' && ethereumProvider.bzz) {
        Bzz.givenProvider = ethereumProvider.bzz;
    }
    /* jshint ignore:end */
    
    Bzz.prototype.setProvider = function(provider) {
        // is ethereum provider
        if(_.isObject(provider) && _.isString(provider.bzz)) {
            provider = provider.bzz;
        // is no string, set default
        }
        // else if(!_.isString(provider)) {
        //      provider = 'http://swarm-gateways.net'; // default to gateway
        // }
    
    
        if(_.isString(provider)) {
            this.currentProvider = provider;
        } else {
            this.currentProvider = null;
    
            var noProviderError = new Error('No provider set, please set one using bzz.setProvider().');
    
            this.download = this.upload = this.isAvailable = function(){
                throw noProviderError;
            };
    
            return false;
        }
    
        // add functions
        this.download = swarm.at(provider).download;
        this.upload = swarm.at(provider).upload;
        this.isAvailable = swarm.at(provider).isAvailable;
    
        return true;
    };
    
    
    module.exports = Bzz;
    
    
    },{"swarm-js":288,"underscore":297}],311:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file errors.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @author Marek Kotewicz <marek@parity.io>
     * @date 2017
     */
    
    "use strict";
    
    module.exports = {
        ErrorResponse: function (result) {
            var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);
            return new Error('Returned error: ' + message);
        },
        InvalidNumberOfParams: function (got, expected, method) {
            return new Error('Invalid number of parameters for "'+ method +'". Got '+ got +' expected '+ expected +'!');
        },
        InvalidConnection: function (host){
            return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');
        },
        InvalidProvider: function () {
            return new Error('Provider not set or invalid');
        },
        InvalidResponse: function (result){
            var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
            return new Error(message);
        },
        ConnectionTimeout: function (ms){
            return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
        }
    };
    
    },{}],312:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file formatters.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @author Marek Kotewicz <marek@parity.io>
     * @date 2017
     */
    
    "use strict";
    
    
    var _ = require('underscore');
    var utils = require('web3-utils');
    var Iban = require('web3-eth-iban');
    
    /**
     * Should the format output to a big number
     *
     * @method outputBigNumberFormatter
     * @param {String|Number|BigNumber} number
     * @returns {BigNumber} object
     */
    var outputBigNumberFormatter = function (number) {
        return utils.toBN(number).toString(10);
    };
    
    var isPredefinedBlockNumber = function (blockNumber) {
        return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
    };
    
    var inputDefaultBlockNumberFormatter = function (blockNumber) {
        if (this && (blockNumber === undefined || blockNumber === null)) {
            return this.defaultBlock;
        }
        if (blockNumber === 'genesis' || blockNumber === 'earliest') {
            return '0x0';
        }
        return inputBlockNumberFormatter(blockNumber);
    };
    
    var inputBlockNumberFormatter = function (blockNumber) {
        if (blockNumber === undefined) {
            return undefined;
        } else if (isPredefinedBlockNumber(blockNumber)) {
            return blockNumber;
        }
        return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);
    };
    
    /**
     * Formats the input of a transaction and converts all values to HEX
     *
     * @method _txInputFormatter
     * @param {Object} transaction options
     * @returns object
     */
    var _txInputFormatter = function (options){
    
        if (options.to) { // it might be contract creation
            options.to = inputAddressFormatter(options.to);
        }
    
        if (options.data && options.input) {
            throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
        }
    
        if (!options.data && options.input) {
            options.data = options.input;
            delete options.input;
        }
    
        if(options.data && !utils.isHex(options.data)) {
            throw new Error('The data field must be HEX encoded data.');
        }
    
        // allow both
        if (options.gas || options.gasLimit) {
            options.gas = options.gas || options.gasLimit;
        }
    
        ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
            return options[key] !== undefined;
        }).forEach(function(key){
            options[key] = utils.numberToHex(options[key]);
        });
    
        return options;
    };
    
    /**
     * Formats the input of a transaction and converts all values to HEX
     *
     * @method inputCallFormatter
     * @param {Object} transaction options
     * @returns object
    */
    var inputCallFormatter = function (options){
    
        options = _txInputFormatter(options);
    
        var from = options.from || (this ? this.defaultAccount : null);
    
        if (from) {
            options.from = inputAddressFormatter(from);
        }
    
    
        return options;
    };
    
    /**
     * Formats the input of a transaction and converts all values to HEX
     *
     * @method inputTransactionFormatter
     * @param {Object} options
     * @returns object
    */
    var inputTransactionFormatter = function (options) {
    
        options = _txInputFormatter(options);
    
        // check from, only if not number, or object
        if (!_.isNumber(options.from) && !_.isObject(options.from)) {
            options.from = options.from || (this ? this.defaultAccount : null);
    
            if (!options.from && !_.isNumber(options.from)) {
                throw new Error('The send transactions "from" field must be defined!');
            }
    
            options.from = inputAddressFormatter(options.from);
        }
    
        return options;
    };
    
    /**
     * Hex encodes the data passed to eth_sign and personal_sign
     *
     * @method inputSignFormatter
     * @param {String} data
     * @returns {String}
     */
    var inputSignFormatter = function (data) {
        return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);
    };
    
    /**
     * Formats the output of a transaction to its proper values
     *
     * @method outputTransactionFormatter
     * @param {Object} tx
     * @returns {Object}
    */
    var outputTransactionFormatter = function (tx){
        if(tx.blockNumber !== null)
            tx.blockNumber = utils.hexToNumber(tx.blockNumber);
        if(tx.transactionIndex !== null)
            tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);
        tx.nonce = utils.hexToNumber(tx.nonce);
        tx.gas = utils.hexToNumber(tx.gas);
        tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);
        tx.value = outputBigNumberFormatter(tx.value);
    
        if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation
            tx.to = utils.toChecksumAddress(tx.to);
        } else {
            tx.to = null; // set to `null` if invalid address
        }
    
        if(tx.from) {
            tx.from = utils.toChecksumAddress(tx.from);
        }
    
        return tx;
    };
    
    /**
     * Formats the output of a transaction receipt to its proper values
     *
     * @method outputTransactionReceiptFormatter
     * @param {Object} receipt
     * @returns {Object}
    */
    var outputTransactionReceiptFormatter = function (receipt){
        if(typeof receipt !== 'object') {
            throw new Error('Received receipt is invalid: '+ receipt);
        }
    
        if(receipt.blockNumber !== null)
            receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);
        if(receipt.transactionIndex !== null)
            receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);
        receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);
        receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);
    
        if(_.isArray(receipt.logs)) {
            receipt.logs = receipt.logs.map(outputLogFormatter);
        }
    
        if(receipt.contractAddress) {
            receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);
        }
    
        if(typeof receipt.status !== 'undefined') {
            receipt.status = Boolean(parseInt(receipt.status));
        }
    
        return receipt;
    };
    
    /**
     * Formats the output of a block to its proper values
     *
     * @method outputBlockFormatter
     * @param {Object} block
     * @returns {Object}
    */
    var outputBlockFormatter = function(block) {
    
        // transform to number
        block.gasLimit = utils.hexToNumber(block.gasLimit);
        block.gasUsed = utils.hexToNumber(block.gasUsed);
        block.size = utils.hexToNumber(block.size);
        block.timestamp = utils.hexToNumber(block.timestamp);
        if (block.number !== null)
            block.number = utils.hexToNumber(block.number);
    
        if(block.difficulty)
            block.difficulty = outputBigNumberFormatter(block.difficulty);
        if(block.totalDifficulty)
            block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);
    
        if (_.isArray(block.transactions)) {
            block.transactions.forEach(function(item){
                if(!_.isString(item))
                    return outputTransactionFormatter(item);
            });
        }
    
        if (block.miner)
            block.miner = utils.toChecksumAddress(block.miner);
    
        return block;
    };
    
    /**
     * Formats the input of a log
     *
     * @method inputLogFormatter
     * @param {Object} log object
     * @returns {Object} log
    */
    var inputLogFormatter = function(options) {
        var toTopic = function(value){
    
            if(value === null || typeof value === 'undefined')
                return null;
    
            value = String(value);
    
            if(value.indexOf('0x') === 0)
                return value;
            else
                return utils.fromUtf8(value);
        };
    
        if (options.fromBlock)
            options.fromBlock = inputBlockNumberFormatter(options.fromBlock);
    
        if (options.toBlock)
            options.toBlock = inputBlockNumberFormatter(options.toBlock);
    
    
        // make sure topics, get converted to hex
        options.topics = options.topics || [];
        options.topics = options.topics.map(function(topic){
            return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
        });
    
        toTopic = null;
    
        if (options.address) {
            options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {
                return inputAddressFormatter(addr);
            }) : inputAddressFormatter(options.address);
        }
    
        return options;
    };
    
    /**
     * Formats the output of a log
     *
     * @method outputLogFormatter
     * @param {Object} log object
     * @returns {Object} log
    */
    var outputLogFormatter = function(log) {
    
        // generate a custom log id
        if(typeof log.blockHash === 'string' &&
           typeof log.transactionHash === 'string' &&
           typeof log.logIndex === 'string') {
            var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));
            log.id = 'log_'+ shaId.replace('0x','').substr(0,8);
        } else if(!log.id) {
            log.id = null;
        }
    
        if (log.blockNumber !== null)
            log.blockNumber = utils.hexToNumber(log.blockNumber);
        if (log.transactionIndex !== null)
            log.transactionIndex = utils.hexToNumber(log.transactionIndex);
        if (log.logIndex !== null)
            log.logIndex = utils.hexToNumber(log.logIndex);
    
        if (log.address) {
            log.address = utils.toChecksumAddress(log.address);
        }
    
        return log;
    };
    
    /**
     * Formats the input of a whisper post and converts all values to HEX
     *
     * @method inputPostFormatter
     * @param {Object} transaction object
     * @returns {Object}
    */
    var inputPostFormatter = function(post) {
    
        // post.payload = utils.toHex(post.payload);
    
        if (post.ttl)
            post.ttl = utils.numberToHex(post.ttl);
        if (post.workToProve)
            post.workToProve = utils.numberToHex(post.workToProve);
        if (post.priority)
            post.priority = utils.numberToHex(post.priority);
    
        // fallback
        if (!_.isArray(post.topics)) {
            post.topics = post.topics ? [post.topics] : [];
        }
    
        // format the following options
        post.topics = post.topics.map(function(topic){
            // convert only if not hex
            return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);
        });
    
        return post;
    };
    
    /**
     * Formats the output of a received post message
     *
     * @method outputPostFormatter
     * @param {Object}
     * @returns {Object}
     */
    var outputPostFormatter = function(post){
    
        post.expiry = utils.hexToNumber(post.expiry);
        post.sent = utils.hexToNumber(post.sent);
        post.ttl = utils.hexToNumber(post.ttl);
        post.workProved = utils.hexToNumber(post.workProved);
        // post.payloadRaw = post.payload;
        // post.payload = utils.hexToAscii(post.payload);
    
        // if (utils.isJson(post.payload)) {
        //     post.payload = JSON.parse(post.payload);
        // }
    
        // format the following options
        if (!post.topics) {
            post.topics = [];
        }
        post.topics = post.topics.map(function(topic){
            return utils.toUtf8(topic);
        });
    
        return post;
    };
    
    var inputAddressFormatter = function (address) {
        var iban = new Iban(address);
        if (iban.isValid() && iban.isDirect()) {
            return iban.toAddress().toLowerCase();
        } else if (utils.isAddress(address)) {
            return '0x' + address.toLowerCase().replace('0x','');
        }
        throw new Error('Provided address "'+ address +'" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\'t be converted.');
    };
    
    
    var outputSyncingFormatter = function(result) {
    
        result.startingBlock = utils.hexToNumber(result.startingBlock);
        result.currentBlock = utils.hexToNumber(result.currentBlock);
        result.highestBlock = utils.hexToNumber(result.highestBlock);
        if (result.knownStates) {
            result.knownStates = utils.hexToNumber(result.knownStates);
            result.pulledStates = utils.hexToNumber(result.pulledStates);
        }
    
        return result;
    };
    
    module.exports = {
        inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
        inputBlockNumberFormatter: inputBlockNumberFormatter,
        inputCallFormatter: inputCallFormatter,
        inputTransactionFormatter: inputTransactionFormatter,
        inputAddressFormatter: inputAddressFormatter,
        inputPostFormatter: inputPostFormatter,
        inputLogFormatter: inputLogFormatter,
        inputSignFormatter: inputSignFormatter,
        outputBigNumberFormatter: outputBigNumberFormatter,
        outputTransactionFormatter: outputTransactionFormatter,
        outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
        outputBlockFormatter: outputBlockFormatter,
        outputLogFormatter: outputLogFormatter,
        outputPostFormatter: outputPostFormatter,
        outputSyncingFormatter: outputSyncingFormatter
    };
    
    
    },{"underscore":297,"web3-eth-iban":346,"web3-utils":355}],313:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var errors = require('./errors');
    var formatters = require('./formatters');
    
    module.exports = {
        errors: errors,
        formatters: formatters
    };
    
    
    },{"./errors":311,"./formatters":312}],314:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @author Marek Kotewicz <marek@parity.io>
     * @date 2017
     */
    
    "use strict";
    
    var _ = require('underscore');
    var errors = require('web3-core-helpers').errors;
    var formatters = require('web3-core-helpers').formatters;
    var utils = require('web3-utils');
    var promiEvent = require('web3-core-promievent');
    var Subscriptions = require('web3-core-subscriptions').subscriptions;
    
    var TIMEOUTBLOCK = 50;
    var POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK
    var CONFIRMATIONBLOCKS = 24;
    
    var Method = function Method(options) {
    
        if(!options.call || !options.name) {
            throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
        }
    
        this.name = options.name;
        this.call = options.call;
        this.params = options.params || 0;
        this.inputFormatter = options.inputFormatter;
        this.outputFormatter = options.outputFormatter;
        this.transformPayload = options.transformPayload;
        this.extraFormatters = options.extraFormatters;
    
        this.requestManager = options.requestManager;
    
        // reference to eth.accounts
        this.accounts = options.accounts;
    
        this.defaultBlock = options.defaultBlock || 'latest';
        this.defaultAccount = options.defaultAccount || null;
    };
    
    Method.prototype.setRequestManager = function (requestManager, accounts) {
        this.requestManager = requestManager;
    
        // reference to eth.accounts
        if (accounts) {
            this.accounts = accounts;
        }
    
    };
    
    Method.prototype.createFunction = function (requestManager, accounts) {
        var func = this.buildCall();
        func.call = this.call;
    
        this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);
    
        return func;
    };
    
    Method.prototype.attachToObject = function (obj) {
        var func = this.buildCall();
        func.call = this.call;
        var name = this.name.split('.');
        if (name.length > 1) {
            obj[name[0]] = obj[name[0]] || {};
            obj[name[0]][name[1]] = func;
        } else {
            obj[name[0]] = func;
        }
    };
    
    /**
     * Should be used to determine name of the jsonrpc method based on arguments
     *
     * @method getCall
     * @param {Array} arguments
     * @return {String} name of jsonrpc method
     */
    Method.prototype.getCall = function (args) {
        return _.isFunction(this.call) ? this.call(args) : this.call;
    };
    
    /**
     * Should be used to extract callback from array of arguments. Modifies input param
     *
     * @method extractCallback
     * @param {Array} arguments
     * @return {Function|Null} callback, if exists
     */
    Method.prototype.extractCallback = function (args) {
        if (_.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
        }
    };
    
    /**
     * Should be called to check if the number of arguments is correct
     *
     * @method validateArgs
     * @param {Array} arguments
     * @throws {Error} if it is not
     */
    Method.prototype.validateArgs = function (args) {
        if (args.length !== this.params) {
            throw errors.InvalidNumberOfParams(args.length, this.params, this.name);
        }
    };
    
    /**
     * Should be called to format input args of method
     *
     * @method formatInput
     * @param {Array}
     * @return {Array}
     */
    Method.prototype.formatInput = function (args) {
        var _this = this;
    
        if (!this.inputFormatter) {
            return args;
        }
    
        return this.inputFormatter.map(function (formatter, index) {
            // bind this for defaultBlock, and defaultAccount
            return formatter ? formatter.call(_this, args[index]) : args[index];
        });
    };
    
    /**
     * Should be called to format output(result) of method
     *
     * @method formatOutput
     * @param {Object}
     * @return {Object}
     */
    Method.prototype.formatOutput = function (result) {
        var _this = this;
    
        if(_.isArray(result)) {
            return result.map(function(res){
                return _this.outputFormatter && res ? _this.outputFormatter(res) : res;
            });
        } else {
            return this.outputFormatter && result ? this.outputFormatter(result) : result;
        }
    };
    
    /**
     * Should create payload from given input args
     *
     * @method toPayload
     * @param {Array} args
     * @return {Object}
     */
    Method.prototype.toPayload = function (args) {
        var call = this.getCall(args);
        var callback = this.extractCallback(args);
        var params = this.formatInput(args);
        this.validateArgs(params);
    
        var payload = {
            method: call,
            params: params,
            callback: callback
        };
    
        if (this.transformPayload) {
            payload = this.transformPayload(payload);
        }
    
        return payload;
    };
    
    
    Method.prototype._confirmTransaction = function (defer, result, payload) {
        var method = this,
            promiseResolved = false,
            canUnsubscribe = true,
            timeoutCount = 0,
            confirmationCount = 0,
            intervalId = null,
            receiptJSON = '',
            gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,
            isContractDeployment = _.isObject(payload.params[0]) &&
                payload.params[0].data &&
                payload.params[0].from &&
                !payload.params[0].to;
    
        // add custom send Methods
        var _ethereumCalls = [
            new Method({
                name: 'getTransactionReceipt',
                call: 'eth_getTransactionReceipt',
                params: 1,
                inputFormatter: [null],
                outputFormatter: formatters.outputTransactionReceiptFormatter
            }),
            new Method({
                name: 'getCode',
                call: 'eth_getCode',
                params: 2,
                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
            }),
            new Subscriptions({
                name: 'subscribe',
                type: 'eth',
                subscriptions: {
                    'newBlockHeaders': {
                        subscriptionName: 'newHeads', // replace subscription with this name
                        params: 0,
                        outputFormatter: formatters.outputBlockFormatter
                    }
                }
            })
        ];
        // attach methods to this._ethereumCall
        var _ethereumCall = {};
        _.each(_ethereumCalls, function (mthd) {
            mthd.attachToObject(_ethereumCall);
            mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()
        });
    
    
        // fire "receipt" and confirmation events and resolve after
        var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {
            if (!err) {
                // create fake unsubscribe
                if (!sub) {
                    sub = {
                        unsubscribe: function () {
                            clearInterval(intervalId);
                        }
                    };
                }
                // if we have a valid receipt we don't need to send a request
                return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))
                // catch error from requesting receipt
                .catch(function (err) {
                    sub.unsubscribe();
                    promiseResolved = true;
                    utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);
                })
                // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false
                .then(function(receipt) {
                    if (!receipt || !receipt.blockHash) {
                        throw new Error('Receipt missing or blockHash null');
                    }
    
                    // apply extra formatters
                    if (method.extraFormatters && method.extraFormatters.receiptFormatter) {
                        receipt = method.extraFormatters.receiptFormatter(receipt);
                    }
    
                    // check if confirmation listener exists
                    if (defer.eventEmitter.listeners('confirmation').length > 0) {
    
                        // If there was an immediately retrieved receipt, it's already
                        // been confirmed by the direct call to checkConfirmation needed
                        // for parity instant-seal
                        if (existingReceipt === undefined || confirmationCount !== 0){
                            defer.eventEmitter.emit('confirmation', confirmationCount, receipt);
                        }
    
                        canUnsubscribe = false;
                        confirmationCount++;
    
                        if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0
                            sub.unsubscribe();
                            defer.eventEmitter.removeAllListeners();
                        }
                    }
    
                    return receipt;
                })
                // CHECK for CONTRACT DEPLOYMENT
                .then(function(receipt) {
    
                    if (isContractDeployment && !promiseResolved) {
    
                        if (!receipt.contractAddress) {
    
                            if (canUnsubscribe) {
                                sub.unsubscribe();
                                promiseResolved = true;
                            }
    
                            utils._fireError(new Error('The transaction receipt didn\'t contain a contract address.'), defer.eventEmitter, defer.reject);
                            return;
                        }
    
                        _ethereumCall.getCode(receipt.contractAddress, function (e, code) {
    
                            if (!code) {
                                return;
                            }
    
    
                            if (code.length > 2) {
                                defer.eventEmitter.emit('receipt', receipt);
    
                                // if contract, return instance instead of receipt
                                if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {
                                    defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));
                                } else {
                                    defer.resolve(receipt);
                                }
    
                                // need to remove listeners, as they aren't removed automatically when succesfull
                                if (canUnsubscribe) {
                                    defer.eventEmitter.removeAllListeners();
                                }
    
                            } else {
                                utils._fireError(new Error('The contract code couldn\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);
                            }
    
                            if (canUnsubscribe) {
                                sub.unsubscribe();
                            }
                            promiseResolved = true;
                        });
                    }
    
                    return receipt;
                })
                // CHECK for normal tx check for receipt only
                .then(function(receipt) {
    
                    if (!isContractDeployment && !promiseResolved) {
    
                        if(!receipt.outOfGas &&
                            (!gasProvided || gasProvided !== receipt.gasUsed) &&
                            (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {
                            defer.eventEmitter.emit('receipt', receipt);
                            defer.resolve(receipt);
    
                            // need to remove listeners, as they aren't removed automatically when succesfull
                            if (canUnsubscribe) {
                                defer.eventEmitter.removeAllListeners();
                            }
    
                        } else {
                            receiptJSON = JSON.stringify(receipt, null, 2);
                            if (receipt.status === false || receipt.status === '0x0') {
                                utils._fireError(new Error("Transaction has been reverted by the EVM:\n" + receiptJSON),
                                    defer.eventEmitter, defer.reject);
                            } else {
                                utils._fireError(
                                    new Error("Transaction ran out of gas. Please provide more gas:\n" + receiptJSON),
                                    defer.eventEmitter, defer.reject);
                            }
                        }
    
                        if (canUnsubscribe) {
                            sub.unsubscribe();
                        }
                        promiseResolved = true;
                    }
    
                })
                // time out the transaction if not mined after 50 blocks
                .catch(function () {
                    timeoutCount++;
    
                    // check to see if we are http polling
                    if(!!isPolling) {
                        // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second
                        if (timeoutCount - 1 >= POLLINGTIMEOUT) {
                            sub.unsubscribe();
                            promiseResolved = true;
                            utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                        }
                    } else {
                        if (timeoutCount - 1 >= TIMEOUTBLOCK) {
                            sub.unsubscribe();
                            promiseResolved = true;
                            utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                        }
                    }
                });
    
    
            } else {
                sub.unsubscribe();
                promiseResolved = true;
                utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);
            }
        };
    
        // start watching for confirmation depending on the support features of the provider
        var startWatching = function(existingReceipt) {
            // if provider allows PUB/SUB
            if (_.isFunction(this.requestManager.provider.on)) {
                _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));
            } else {
                intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);
            }
        }.bind(this);
    
    
        // first check if we already have a confirmed transaction
        _ethereumCall.getTransactionReceipt(result)
        .then(function(receipt) {
            if (receipt && receipt.blockHash) {
                if (defer.eventEmitter.listeners('confirmation').length > 0) {
                    // We must keep on watching for new Blocks, if a confirmation listener is present
                    startWatching(receipt);
                }
                checkConfirmation(receipt, false);
    
            } else if (!promiseResolved) {
                startWatching();
            }
        })
        .catch(function(){
            if (!promiseResolved) startWatching();
        });
    
    };
    
    
    var getWallet = function(from, accounts) {
        var wallet = null;
    
        // is index given
        if (_.isNumber(from)) {
            wallet = accounts.wallet[from];
    
            // is account given
        } else if (_.isObject(from) && from.address && from.privateKey) {
            wallet = from;
    
            // search in wallet for address
        } else {
            wallet = accounts.wallet[from.toLowerCase()];
        }
    
        return wallet;
    };
    
    Method.prototype.buildCall = function() {
        var method = this,
            isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'
    
        // actual send function
        var send = function () {
            var defer = promiEvent(!isSendTx),
                payload = method.toPayload(Array.prototype.slice.call(arguments));
    
    
            // CALLBACK function
            var sendTxCallback = function (err, result) {
                try {
                    result = method.formatOutput(result);
                } catch(e) {
                    err = e;
                }
    
                if (result instanceof Error) {
                    err = result;
                }
    
                if (!err) {
                    if (payload.callback) {
                        payload.callback(null, result);
                    }
                } else {
                    if(err.error) {
                        err = err.error;
                    }
    
                    return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);
                }
    
                // return PROMISE
                if (!isSendTx) {
    
                    if (!err) {
                        defer.resolve(result);
    
                    }
    
                    // return PROMIEVENT
                } else {
                    defer.eventEmitter.emit('transactionHash', result);
    
                    method._confirmTransaction(defer, result, payload);
                }
    
            };
    
            // SENDS the SIGNED SIGNATURE
            var sendSignedTx = function(sign){
    
                var signedPayload = _.extend({}, payload, {
                    method: 'eth_sendRawTransaction',
                    params: [sign.rawTransaction]
                });
    
                method.requestManager.send(signedPayload, sendTxCallback);
            };
    
    
            var sendRequest = function(payload, method) {
    
                if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {
                    var wallet;
    
                    // ETH_SENDTRANSACTION
                    if (payload.method === 'eth_sendTransaction') {
                        var tx = payload.params[0];
                        wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);
    
    
                        // If wallet was found, sign tx, and send using sendRawTransaction
                        if (wallet && wallet.privateKey) {
                            return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);
                        }
    
                        // ETH_SIGN
                    } else if (payload.method === 'eth_sign') {
                        var data = payload.params[1];
                        wallet = getWallet(payload.params[0], method.accounts);
    
                        // If wallet was found, sign tx, and send using sendRawTransaction
                        if (wallet && wallet.privateKey) {
                            var sign = method.accounts.sign(data, wallet.privateKey);
    
                            if (payload.callback) {
                                payload.callback(null, sign.signature);
                            }
    
                            defer.resolve(sign.signature);
                            return;
                        }
    
    
                    }
                }
    
                return method.requestManager.send(payload, sendTxCallback);
            };
    
            // Send the actual transaction
            if(isSendTx && _.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {
    
                var getGasPrice = (new Method({
                    name: 'getGasPrice',
                    call: 'eth_gasPrice',
                    params: 0
                })).createFunction(method.requestManager);
    
                getGasPrice(function (err, gasPrice) {
    
                    if (gasPrice) {
                        payload.params[0].gasPrice = gasPrice;
                    }
                    sendRequest(payload, method);
                });
    
            } else {
                sendRequest(payload, method);
            }
    
    
            return defer.eventEmitter;
        };
    
        // necessary to attach things to the method
        send.method = method;
        // necessary for batch requests
        send.request = this.request.bind(this);
        return send;
    };
    
    /**
     * Should be called to create the pure JSONRPC request which can be used in a batch request
     *
     * @method request
     * @return {Object} jsonrpc request
     */
    Method.prototype.request = function () {
        var payload = this.toPayload(Array.prototype.slice.call(arguments));
        payload.format = this.formatOutput.bind(this);
        return payload;
    };
    
    module.exports = Method;
    
    },{"underscore":297,"web3-core-helpers":313,"web3-core-promievent":315,"web3-core-subscriptions":320,"web3-utils":355}],315:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2016
     */
    
    "use strict";
    
    var EventEmitter = require('eventemitter3');
    var Promise = require("any-promise");
    
    /**
     * This function generates a defer promise and adds eventEmitter functionality to it
     *
     * @method eventifiedPromise
     */
    var PromiEvent = function PromiEvent(justPromise) {
        var resolve, reject,
            eventEmitter = new Promise(function() {
                resolve = arguments[0];
                reject = arguments[1];
            });
    
        if(justPromise) {
            return {
                resolve: resolve,
                reject: reject,
                eventEmitter: eventEmitter
            };
        }
    
        // get eventEmitter
        var emitter = new EventEmitter();
    
        // add eventEmitter to the promise
        eventEmitter._events = emitter._events;
        eventEmitter.emit = emitter.emit;
        eventEmitter.on = emitter.on;
        eventEmitter.once = emitter.once;
        eventEmitter.off = emitter.off;
        eventEmitter.listeners = emitter.listeners;
        eventEmitter.addListener = emitter.addListener;
        eventEmitter.removeListener = emitter.removeListener;
        eventEmitter.removeAllListeners = emitter.removeAllListeners;
    
        return {
            resolve: resolve,
            reject: reject,
            eventEmitter: eventEmitter
        };
    };
    
    PromiEvent.resolve = function(value) {
        var promise = PromiEvent(true);
        promise.resolve(value);
        return promise.eventEmitter;
    };
    
    module.exports = PromiEvent;
    
    },{"any-promise":42,"eventemitter3":171}],316:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file batch.js
     * @author Marek Kotewicz <marek@ethdev.com>
     * @date 2015
     */
    
    "use strict";
    
    var Jsonrpc = require('./jsonrpc');
    var errors = require('web3-core-helpers').errors;
    
    var Batch = function (requestManager) {
        this.requestManager = requestManager;
        this.requests = [];
    };
    
    /**
     * Should be called to add create new request to batch request
     *
     * @method add
     * @param {Object} jsonrpc requet object
     */
    Batch.prototype.add = function (request) {
        this.requests.push(request);
    };
    
    /**
     * Should be called to execute batch request
     *
     * @method execute
     */
    Batch.prototype.execute = function () {
        var requests = this.requests;
        this.requestManager.sendBatch(requests, function (err, results) {
            results = results || [];
            requests.map(function (request, index) {
                return results[index] || {};
            }).forEach(function (result, index) {
                if (requests[index].callback) {
                    if (result && result.error) {
                        return requests[index].callback(errors.ErrorResponse(result));
                    }
    
                    if (!Jsonrpc.isValidResponse(result)) {
                        return requests[index].callback(errors.InvalidResponse(result));
                    }
    
                    try {
                        requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);
                    } catch (err) {
                        requests[index].callback(err);
                    }
                }
            });
        });
    };
    
    module.exports = Batch;
    
    
    },{"./jsonrpc":319,"web3-core-helpers":313}],317:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file givenProvider.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var givenProvider = null;
    
    // ADD GIVEN PROVIDER
    /* jshint ignore:start */
    var global;
    try {
      global = Function('return this')();
    } catch (e) {
      global = window;
    }
    
    // EthereumProvider
    if(typeof global.ethereumProvider !== 'undefined') {
        givenProvider = global.ethereumProvider;
    
    // Legacy web3.currentProvider
    } else if(typeof global.web3 !== 'undefined' && global.web3.currentProvider) {
    
        if(global.web3.currentProvider.sendAsync) {
            global.web3.currentProvider.send = global.web3.currentProvider.sendAsync;
            delete global.web3.currentProvider.sendAsync;
        }
    
        // if connection is 'ipcProviderWrapper', add subscription support
        if(!global.web3.currentProvider.on &&
            global.web3.currentProvider.connection &&
            global.web3.currentProvider.connection.constructor.name === 'ipcProviderWrapper') {
    
            global.web3.currentProvider.on = function (type, callback) {
    
                if(typeof callback !== 'function')
                    throw new Error('The second parameter callback must be a function.');
    
                switch(type){
                    case 'data':
                        this.connection.on('data', function(data) {
                            var result = '';
    
                            data = data.toString();
    
                            try {
                                result = JSON.parse(data);
                            } catch(e) {
                                return callback(new Error('Couldn\'t parse response data'+ data));
                            }
    
                            // notification
                            if(!result.id && result.method.indexOf('_subscription') !== -1) {
                                callback(null, result);
                            }
    
                        });
                        break;
    
                    default:
                        this.connection.on(type, callback);
                        break;
                }
            };
        }
    
        givenProvider = global.web3.currentProvider;
    }
    /* jshint ignore:end */
    
    
    module.exports = givenProvider;
    
    },{}],318:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    
    var _ = require('underscore');
    var errors = require('web3-core-helpers').errors;
    var Jsonrpc = require('./jsonrpc.js');
    var BatchManager = require('./batch.js');
    var givenProvider = require('./givenProvider.js');
    
    
    
        /**
     * It's responsible for passing messages to providers
     * It's also responsible for polling the ethereum node for incoming messages
     * Default poll timeout is 1 second
     * Singleton
     */
    var RequestManager = function RequestManager(provider) {
        this.provider = null;
        this.providers = RequestManager.providers;
    
        this.setProvider(provider);
        this.subscriptions = {};
    };
    
    
    
    RequestManager.givenProvider = givenProvider;
    
    RequestManager.providers = {
        WebsocketProvider: require('web3-providers-ws'),
        HttpProvider: require('web3-providers-http'),
        IpcProvider: require('web3-providers-ipc')
    };
    
    
    
    /**
     * Should be used to set provider of request manager
     *
     * @method setProvider
     * @param {Object} p
     */
    RequestManager.prototype.setProvider = function (p, net) {
        var _this = this;
    
        // autodetect provider
        if(p && typeof p === 'string' && this.providers) {
    
            // HTTP
            if(/^http(s)?:\/\//i.test(p)) {
                p = new this.providers.HttpProvider(p);
    
                // WS
            } else if(/^ws(s)?:\/\//i.test(p)) {
                p = new this.providers.WebsocketProvider(p);
    
                // IPC
            } else if(p && typeof net === 'object'  && typeof net.connect === 'function') {
                p = new this.providers.IpcProvider(p, net);
    
            } else if(p) {
                throw new Error('Can\'t autodetect provider for "'+ p +'"');
            }
        }
    
        // reset the old one before changing, if still connected
        if(this.provider && this.provider.connected)
            this.clearSubscriptions();
    
    
        this.provider = p || null;
    
        // listen to incoming notifications
        if(this.provider && this.provider.on) {
            this.provider.on('data', function requestManagerNotification(result, deprecatedResult){
                result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler
    
                // check for result.method, to prevent old providers errors to pass as result
                if(result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {
                    _this.subscriptions[result.params.subscription].callback(null, result.params.result);
                }
            });
            // TODO add error, end, timeout, connect??
            // this.provider.on('error', function requestManagerNotification(result){
            //     Object.keys(_this.subscriptions).forEach(function(id){
            //         if(_this.subscriptions[id].callback)
            //             _this.subscriptions[id].callback(err);
            //     });
            // }
        }
    };
    
    
    /**
     * Should be used to asynchronously send request
     *
     * @method sendAsync
     * @param {Object} data
     * @param {Function} callback
     */
    RequestManager.prototype.send = function (data, callback) {
        callback = callback || function(){};
    
        if (!this.provider) {
            return callback(errors.InvalidProvider());
        }
    
        var payload = Jsonrpc.toPayload(data.method, data.params);
        this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {
            if(result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id "'+ result.id +'" (expected: "'+ payload.id +'") in '+ JSON.stringify(payload)));
    
            if (err) {
                return callback(err);
            }
    
            if (result && result.error) {
                return callback(errors.ErrorResponse(result));
            }
    
            if (!Jsonrpc.isValidResponse(result)) {
                return callback(errors.InvalidResponse(result));
            }
    
            callback(null, result.result);
        });
    };
    
    /**
     * Should be called to asynchronously send batch request
     *
     * @method sendBatch
     * @param {Array} batch data
     * @param {Function} callback
     */
    RequestManager.prototype.sendBatch = function (data, callback) {
        if (!this.provider) {
            return callback(errors.InvalidProvider());
        }
    
        var payload = Jsonrpc.toBatchPayload(data);
        this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {
            if (err) {
                return callback(err);
            }
    
            if (!_.isArray(results)) {
                return callback(errors.InvalidResponse(results));
            }
    
            callback(null, results);
        });
    };
    
    
    /**
     * Waits for notifications
     *
     * @method addSubscription
     * @param {String} id           the subscription id
     * @param {String} name         the subscription name
     * @param {String} type         the subscription namespace (eth, personal, etc)
     * @param {Function} callback   the callback to call for incoming notifications
     */
    RequestManager.prototype.addSubscription = function (id, name, type, callback) {
        if(this.provider.on) {
            this.subscriptions[id] = {
                callback: callback,
                type: type,
                name: name
            };
    
        } else {
            throw new Error('The provider doesn\'t support subscriptions: '+ this.provider.constructor.name);
        }
    };
    
    /**
     * Waits for notifications
     *
     * @method removeSubscription
     * @param {String} id           the subscription id
     * @param {Function} callback   fired once the subscription is removed
     */
    RequestManager.prototype.removeSubscription = function (id, callback) {
        var _this = this;
    
        if(this.subscriptions[id]) {
    
            this.send({
                method: this.subscriptions[id].type + '_unsubscribe',
                params: [id]
            }, callback);
    
            // remove subscription
            delete _this.subscriptions[id];
        }
    };
    
    /**
     * Should be called to reset the subscriptions
     *
     * @method reset
     */
    RequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {
        var _this = this;
    
    
        // uninstall all subscriptions
        Object.keys(this.subscriptions).forEach(function(id){
            if(!keepIsSyncing || _this.subscriptions[id].name !== 'syncing')
                _this.removeSubscription(id);
        });
    
    
        //  reset notification callbacks etc.
        if(this.provider.reset)
            this.provider.reset();
    };
    
    module.exports = {
        Manager: RequestManager,
        BatchManager: BatchManager
    };
    
    },{"./batch.js":316,"./givenProvider.js":317,"./jsonrpc.js":319,"underscore":297,"web3-core-helpers":313,"web3-providers-http":351,"web3-providers-ipc":352,"web3-providers-ws":353}],319:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /** @file jsonrpc.js
     * @authors:
     *   Fabian Vogelsteller <fabian@ethereum.org>
     *   Marek Kotewicz <marek@ethdev.com>
     *   Aaron Kumavis <aaron@kumavis.me>
     * @date 2015
     */
    
    "use strict";
    
    // Initialize Jsonrpc as a simple object with utility functions.
    var Jsonrpc = {
        messageId: 0
    };
    
    /**
     * Should be called to valid json create payload object
     *
     * @method toPayload
     * @param {Function} method of jsonrpc call, required
     * @param {Array} params, an array of method params, optional
     * @returns {Object} valid jsonrpc payload object
     */
    Jsonrpc.toPayload = function (method, params) {
        if (!method) {
            throw new Error('JSONRPC method should be specified for params: "'+ JSON.stringify(params) +'"!');
        }
    
        // advance message ID
        Jsonrpc.messageId++;
    
        return {
            jsonrpc: '2.0',
            id: Jsonrpc.messageId,
            method: method,
            params: params || []
        };
    };
    
    /**
     * Should be called to check if jsonrpc response is valid
     *
     * @method isValidResponse
     * @param {Object}
     * @returns {Boolean} true if response is valid, otherwise false
     */
    Jsonrpc.isValidResponse = function (response) {
        return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);
    
        function validateSingleMessage(message){
          return !!message &&
            !message.error &&
            message.jsonrpc === '2.0' &&
            (typeof message.id === 'number' || typeof message.id === 'string') &&
            message.result !== undefined; // only undefined is not valid json object
        }
    };
    
    /**
     * Should be called to create batch payload object
     *
     * @method toBatchPayload
     * @param {Array} messages, an array of objects with method (required) and params (optional) fields
     * @returns {Array} batch payload
     */
    Jsonrpc.toBatchPayload = function (messages) {
        return messages.map(function (message) {
            return Jsonrpc.toPayload(message.method, message.params);
        });
    };
    
    module.exports = Jsonrpc;
    
    
    },{}],320:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var Subscription = require('./subscription.js');
    
    
    var Subscriptions = function Subscriptions(options) {
        this.name = options.name;
        this.type = options.type;
        this.subscriptions = options.subscriptions || {};
        this.requestManager = null;
    };
    
    
    Subscriptions.prototype.setRequestManager = function (rm) {
        this.requestManager = rm;
    };
    
    
    Subscriptions.prototype.attachToObject = function (obj) {
        var func = this.buildCall();
        var name = this.name.split('.');
        if (name.length > 1) {
            obj[name[0]] = obj[name[0]] || {};
            obj[name[0]][name[1]] = func;
        } else {
            obj[name[0]] = func;
        }
    };
    
    
    Subscriptions.prototype.buildCall = function() {
        var _this = this;
    
        return function(){
            if(!_this.subscriptions[arguments[0]]) {
                console.warn('Subscription '+ JSON.stringify(arguments[0]) +' doesn\'t exist. Subscribing anyway.');
            }
    
            var subscription = new Subscription({
                subscription: _this.subscriptions[arguments[0]],
                requestManager: _this.requestManager,
                type: _this.type
            });
    
            return subscription.subscribe.apply(subscription, arguments);
        };
    };
    
    
    module.exports = {
        subscriptions: Subscriptions,
        subscription: Subscription
    };
    
    },{"./subscription.js":321}],321:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file subscription.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var _ = require('underscore');
    var errors = require('web3-core-helpers').errors;
    var EventEmitter = require('eventemitter3');
    
    function Subscription(options) {
        EventEmitter.call(this);
    
        this.id = null;
        this.callback = _.identity;
        this.arguments = null;
        this._reconnectIntervalId = null;
    
        this.options = {
            subscription: options.subscription,
            type: options.type,
            requestManager: options.requestManager
        };
    }
    
    // INHERIT
    Subscription.prototype = Object.create(EventEmitter.prototype);
    Subscription.prototype.constructor = Subscription;
    
    
    /**
     * Should be used to extract callback from array of arguments. Modifies input param
     *
     * @method extractCallback
     * @param {Array} arguments
     * @return {Function|Null} callback, if exists
     */
    
    Subscription.prototype._extractCallback = function (args) {
        if (_.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
        }
    };
    
    /**
     * Should be called to check if the number of arguments is correct
     *
     * @method validateArgs
     * @param {Array} arguments
     * @throws {Error} if it is not
     */
    
    Subscription.prototype._validateArgs = function (args) {
        var subscription = this.options.subscription;
    
        if(!subscription)
            subscription = {};
    
        if(!subscription.params)
            subscription.params = 0;
    
        if (args.length !== subscription.params) {
            throw errors.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);
        }
    };
    
    /**
     * Should be called to format input args of method
     *
     * @method formatInput
     * @param {Array}
     * @return {Array}
     */
    
    Subscription.prototype._formatInput = function (args) {
        var subscription = this.options.subscription;
    
        if (!subscription) {
            return args;
        }
    
        if (!subscription.inputFormatter) {
            return args;
        }
    
        var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {
            return formatter ? formatter(args[index]) : args[index];
        });
    
        return formattedArgs;
    };
    
    /**
     * Should be called to format output(result) of method
     *
     * @method formatOutput
     * @param {Object}
     * @return {Object}
     */
    
    Subscription.prototype._formatOutput = function (result) {
        var subscription = this.options.subscription;
    
        return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;
    };
    
    /**
     * Should create payload from given input args
     *
     * @method toPayload
     * @param {Array} args
     * @return {Object}
     */
    Subscription.prototype._toPayload = function (args) {
        var params = [];
        this.callback = this._extractCallback(args) || _.identity;
    
        if (!this.subscriptionMethod) {
            this.subscriptionMethod = args.shift();
    
            // replace subscription with given name
            if (this.options.subscription.subscriptionName) {
                this.subscriptionMethod = this.options.subscription.subscriptionName;
            }
        }
    
        if (!this.arguments) {
            this.arguments = this._formatInput(args);
            this._validateArgs(this.arguments);
            args = []; // make empty after validation
    
        }
    
        // re-add subscriptionName
        params.push(this.subscriptionMethod);
        params = params.concat(this.arguments);
    
    
        if (args.length) {
            throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');
        }
    
        return {
            method: this.options.type + '_subscribe',
            params: params
        };
    };
    
    /**
     * Unsubscribes and clears callbacks
     *
     * @method unsubscribe
     * @return {Object}
     */
    Subscription.prototype.unsubscribe = function(callback) {
        this.options.requestManager.removeSubscription(this.id, callback);
        this.id = null;
        this.removeAllListeners();
        clearInterval(this._reconnectIntervalId);
    };
    
    /**
     * Subscribes and watches for changes
     *
     * @method subscribe
     * @param {String} subscription the subscription
     * @param {Object} options the options object with address topics and fromBlock
     * @return {Object}
     */
    Subscription.prototype.subscribe = function() {
        var _this = this;
        var args = Array.prototype.slice.call(arguments);
        var payload = this._toPayload(args);
    
        if(!payload) {
            return this;
        }
    
        if(!this.options.requestManager.provider) {
            var err1 = new Error('No provider set.');
            this.callback(err1, null, this);
            this.emit('error', err1);
            return this;
        }
    
        // throw error, if provider doesnt support subscriptions
        if(!this.options.requestManager.provider.on) {
            var err2 = new Error('The current provider doesn\'t support subscriptions: '+ this.options.requestManager.provider.constructor.name);
            this.callback(err2, null, this);
            this.emit('error', err2);
            return this;
        }
    
        // if id is there unsubscribe first
        if (this.id) {
            this.unsubscribe();
        }
    
        // store the params in the options object
        this.options.params = payload.params[1];
    
        // get past logs, if fromBlock is available
        if(payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {
            // send the subscription request
            this.options.requestManager.send({
                method: 'eth_getLogs',
                params: [payload.params[1]]
            }, function (err, logs) {
                if(!err) {
                    logs.forEach(function(log){
                        var output = _this._formatOutput(log);
                        _this.callback(null, output, _this);
                        _this.emit('data', output);
                    });
    
                    // TODO subscribe here? after the past logs?
    
                } else {
                    _this.callback(err, null, _this);
                    _this.emit('error', err);
                }
            });
        }
    
        // create subscription
        // TODO move to separate function? so that past logs can go first?
    
        if(typeof payload.params[1] === 'object')
            delete payload.params[1].fromBlock;
    
        this.options.requestManager.send(payload, function (err, result) {
            if(!err && result) {
                _this.id = result;
    
                // call callback on notifications
                _this.options.requestManager.addSubscription(_this.id, payload.params[0] , _this.options.type, function(err, result) {
    
                    if (!err) {
                        if (!_.isArray(result)) {
                            result = [result];
                        }
    
                        result.forEach(function(resultItem) {
                            var output = _this._formatOutput(resultItem);
    
                            if (_.isFunction(_this.options.subscription.subscriptionHandler)) {
                                return _this.options.subscription.subscriptionHandler.call(_this, output);
                            } else {
                                _this.emit('data', output);
                            }
    
                            // call the callback, last so that unsubscribe there won't affect the emit above
                            _this.callback(null, output, _this);
                        });
                    } else {
                        // unsubscribe, but keep listeners
                        _this.options.requestManager.removeSubscription(_this.id);
    
                        // re-subscribe, if connection fails
                        if(_this.options.requestManager.provider.once) {
                            _this._reconnectIntervalId = setInterval(function () {
                                // TODO check if that makes sense!
                                if (_this.options.requestManager.provider.reconnect) {
                                    _this.options.requestManager.provider.reconnect();
                                }
                            }, 500);
    
                            _this.options.requestManager.provider.once('connect', function () {
                                clearInterval(_this._reconnectIntervalId);
                                _this.subscribe(_this.callback);
                            });
                        }
                        _this.emit('error', err);
    
                         // call the callback, last so that unsubscribe there won't affect the emit above
                        _this.callback(err, null, _this);
                    }
                });
            } else {
              _this.callback(err, null, _this);
              _this.emit('error', err);
            }
        });
    
        // return an object to cancel the subscription
        return this;
    };
    
    module.exports = Subscription;
    
    },{"eventemitter3":171,"underscore":297,"web3-core-helpers":313}],322:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file extend.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    
    var formatters = require('web3-core-helpers').formatters;
    var Method = require('web3-core-method');
    var utils = require('web3-utils');
    
    
    var extend = function (pckg) {
        /* jshint maxcomplexity:5 */
        var ex = function (extension) {
    
            var extendedObject;
            if (extension.property) {
                if (!pckg[extension.property]) {
                    pckg[extension.property] = {};
                }
                extendedObject = pckg[extension.property];
            } else {
                extendedObject = pckg;
            }
    
            if (extension.methods) {
                extension.methods.forEach(function (method) {
                    if(!(method instanceof Method)) {
                        method = new Method(method);
                    }
    
                    method.attachToObject(extendedObject);
                    method.setRequestManager(pckg._requestManager);
                });
            }
    
            return pckg;
        };
    
        ex.formatters = formatters;
        ex.utils = utils;
        ex.Method = Method;
    
        return ex;
    };
    
    
    
    module.exports = extend;
    
    
    },{"web3-core-helpers":313,"web3-core-method":314,"web3-utils":355}],323:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    
    var requestManager = require('web3-core-requestmanager');
    var extend = require('./extend.js');
    
    module.exports = {
        packageInit: function (pkg, args) {
            args = Array.prototype.slice.call(args);
    
            if (!pkg) {
                throw new Error('You need to instantiate using the "new" keyword.');
            }
    
    
            // make property of pkg._provider, which can properly set providers
            Object.defineProperty(pkg, 'currentProvider', {
                get: function () {
                    return pkg._provider;
                },
                set: function (value) {
                    return pkg.setProvider(value);
                },
                enumerable: true,
                configurable: true
            });
    
            // inherit from web3 umbrella package
            if (args[0] && args[0]._requestManager) {
                pkg._requestManager = new requestManager.Manager(args[0].currentProvider);
    
            // set requestmanager on package
            } else {
                pkg._requestManager = new requestManager.Manager();
                pkg._requestManager.setProvider(args[0], args[1]);
            }
    
            // add givenProvider
            pkg.givenProvider = requestManager.Manager.givenProvider;
            pkg.providers = requestManager.Manager.providers;
    
             pkg._provider =  pkg._requestManager.provider;
    
            // add SETPROVIDER function (don't overwrite if already existing)
            if (!pkg.setProvider) {
                pkg.setProvider = function (provider, net) {
                    pkg._requestManager.setProvider(provider, net);
                    pkg._provider = pkg._requestManager.provider;
                    return true;
                };
            }
    
            // attach batch request creation
            pkg.BatchRequest = requestManager.BatchManager.bind(null, pkg._requestManager);
    
            // attach extend function
            pkg.extend = extend(pkg);
        },
        addProviders: function (pkg) {
            pkg.givenProvider = requestManager.Manager.givenProvider;
            pkg.providers = requestManager.Manager.providers;
        }
    };
    
    
    },{"./extend.js":322,"web3-core-requestmanager":318}],324:[function(require,module,exports){
    'use strict';
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
    var address_1 = require("./address");
    var bignumber_1 = require("./bignumber");
    var bytes_1 = require("./bytes");
    var utf8_1 = require("./utf8");
    var properties_1 = require("./properties");
    var errors = __importStar(require("./errors"));
    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    exports.defaultCoerceFunc = function (type, value) {
        var match = type.match(paramTypeNumber);
        if (match && parseInt(match[2]) <= 48) {
            return value.toNumber();
        }
        return value;
    };
    ///////////////////////////////////
    // Parsing for Solidity Signatures
    var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
    function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
            type = 'uint256' + type.substring(4);
        }
        else if (type.match(/^int($|[^1-9])/)) {
            type = 'int256' + type.substring(3);
        }
        return type;
    }
    function parseParam(param, allowIndexed) {
        function throwError(i) {
            throw new Error('unexpected character "' + param[i] + '" at position ' + i + ' in "' + param + '"');
        }
        var parent = { type: '', name: '', state: { allowType: true } };
        var node = parent;
        for (var i = 0; i < param.length; i++) {
            var c = param[i];
            switch (c) {
                case '(':
                    if (!node.state.allowParams) {
                        throwError(i);
                    }
                    node.state.allowType = false;
                    node.type = verifyType(node.type);
                    node.components = [{ type: '', name: '', parent: node, state: { allowType: true } }];
                    node = node.components[0];
                    break;
                case ')':
                    delete node.state;
                    if (allowIndexed && node.name === 'indexed') {
                        node.indexed = true;
                        node.name = '';
                    }
                    node.type = verifyType(node.type);
                    var child = node;
                    node = node.parent;
                    if (!node) {
                        throwError(i);
                    }
                    delete child.parent;
                    node.state.allowParams = false;
                    node.state.allowName = true;
                    node.state.allowArray = true;
                    break;
                case ',':
                    delete node.state;
                    if (allowIndexed && node.name === 'indexed') {
                        node.indexed = true;
                        node.name = '';
                    }
                    node.type = verifyType(node.type);
                    var sibling = { type: '', name: '', parent: node.parent, state: { allowType: true } };
                    node.parent.components.push(sibling);
                    delete node.parent;
                    node = sibling;
                    break;
                // Hit a space...
                case ' ':
                    // If reading type, the type is done and may read a param or name
                    if (node.state.allowType) {
                        if (node.type !== '') {
                            node.type = verifyType(node.type);
                            delete node.state.allowType;
                            node.state.allowName = true;
                            node.state.allowParams = true;
                        }
                    }
                    // If reading name, the name is done
                    if (node.state.allowName) {
                        if (node.name !== '') {
                            if (allowIndexed && node.name === 'indexed') {
                                node.indexed = true;
                                node.name = '';
                            }
                            else {
                                node.state.allowName = false;
                            }
                        }
                    }
                    break;
                case '[':
                    if (!node.state.allowArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.allowArray = false;
                    node.state.allowName = false;
                    node.state.readArray = true;
                    break;
                case ']':
                    if (!node.state.readArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.readArray = false;
                    node.state.allowArray = true;
                    node.state.allowName = true;
                    break;
                default:
                    if (node.state.allowType) {
                        node.type += c;
                        node.state.allowParams = true;
                        node.state.allowArray = true;
                    }
                    else if (node.state.allowName) {
                        node.name += c;
                        delete node.state.allowArray;
                    }
                    else if (node.state.readArray) {
                        node.type += c;
                    }
                    else {
                        throwError(i);
                    }
            }
        }
        if (node.parent) {
            throw new Error("unexpected eof");
        }
        delete parent.state;
        if (allowIndexed && node.name === 'indexed') {
            node.indexed = true;
            node.name = '';
        }
        parent.type = verifyType(parent.type);
        return parent;
    }
    // @TODO: Better return type
    function parseSignatureEvent(fragment) {
        var abi = {
            anonymous: false,
            inputs: [],
            name: '',
            type: 'event'
        };
        var match = fragment.match(regexParen);
        if (!match) {
            throw new Error('invalid event: ' + fragment);
        }
        abi.name = match[1].trim();
        splitNesting(match[2]).forEach(function (param) {
            param = parseParam(param, true);
            param.indexed = !!param.indexed;
            abi.inputs.push(param);
        });
        match[3].split(' ').forEach(function (modifier) {
            switch (modifier) {
                case 'anonymous':
                    abi.anonymous = true;
                    break;
                case '':
                    break;
                default:
                    console.log('unknown modifier: ' + modifier);
            }
        });
        if (abi.name && !abi.name.match(regexIdentifier)) {
            throw new Error('invalid identifier: "' + abi.name + '"');
        }
        return abi;
    }
    function parseSignatureFunction(fragment) {
        var abi = {
            constant: false,
            inputs: [],
            name: '',
            outputs: [],
            payable: false,
            stateMutability: null,
            type: 'function'
        };
        var comps = fragment.split(' returns ');
        var left = comps[0].match(regexParen);
        if (!left) {
            throw new Error('invalid signature');
        }
        abi.name = left[1].trim();
        if (!abi.name.match(regexIdentifier)) {
            throw new Error('invalid identifier: "' + left[1] + '"');
        }
        splitNesting(left[2]).forEach(function (param) {
            abi.inputs.push(parseParam(param));
        });
        left[3].split(' ').forEach(function (modifier) {
            switch (modifier) {
                case 'constant':
                    abi.constant = true;
                    break;
                case 'payable':
                    abi.payable = true;
                    break;
                case 'pure':
                    abi.constant = true;
                    abi.stateMutability = 'pure';
                    break;
                case 'view':
                    abi.constant = true;
                    abi.stateMutability = 'view';
                    break;
                case '':
                    break;
                default:
                    console.log('unknown modifier: ' + modifier);
            }
        });
        // We have outputs
        if (comps.length > 1) {
            var right = comps[1].match(regexParen);
            if (right[1].trim() != '' || right[3].trim() != '') {
                throw new Error('unexpected tokens');
            }
            splitNesting(right[2]).forEach(function (param) {
                abi.outputs.push(parseParam(param));
            });
        }
        return abi;
    }
    function parseParamType(type) {
        return parseParam(type, true);
    }
    exports.parseParamType = parseParamType;
    // @TODO: Allow a second boolean to expose names
    function formatParamType(paramType) {
        return getParamCoder(exports.defaultCoerceFunc, paramType).type;
    }
    exports.formatParamType = formatParamType;
    // @TODO: Allow a second boolean to expose names and modifiers
    function formatSignature(fragment) {
        return fragment.name + '(' + fragment.inputs.map(function (i) { return formatParamType(i); }).join(',') + ')';
    }
    exports.formatSignature = formatSignature;
    function parseSignature(fragment) {
        if (typeof (fragment) === 'string') {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            fragment = fragment.replace(/\(/g, ' (').replace(/\)/g, ') ').replace(/\s+/g, ' ');
            fragment = fragment.trim();
            if (fragment.substring(0, 6) === 'event ') {
                return parseSignatureEvent(fragment.substring(6).trim());
            }
            else {
                if (fragment.substring(0, 9) === 'function ') {
                    fragment = fragment.substring(9);
                }
                return parseSignatureFunction(fragment.trim());
            }
        }
        throw new Error('unknown signature');
    }
    exports.parseSignature = parseSignature;
    var Coder = /** @class */ (function () {
        function Coder(coerceFunc, name, type, localName, dynamic) {
            this.coerceFunc = coerceFunc;
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        return Coder;
    }());
    // Clones the functionality of an existing Coder, but without a localName
    var CoderAnonymous = /** @class */ (function (_super) {
        __extends(CoderAnonymous, _super);
        function CoderAnonymous(coder) {
            var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;
            properties_1.defineReadOnly(_this, 'coder', coder);
            return _this;
        }
        CoderAnonymous.prototype.encode = function (value) { return this.coder.encode(value); };
        CoderAnonymous.prototype.decode = function (data, offset) { return this.coder.decode(data, offset); };
        return CoderAnonymous;
    }(Coder));
    var CoderNull = /** @class */ (function (_super) {
        __extends(CoderNull, _super);
        function CoderNull(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'null', '', localName, false) || this;
        }
        CoderNull.prototype.encode = function (value) {
            return bytes_1.arrayify([]);
        };
        CoderNull.prototype.decode = function (data, offset) {
            if (offset > data.length) {
                throw new Error('invalid null');
            }
            return {
                consumed: 0,
                value: this.coerceFunc('null', undefined)
            };
        };
        return CoderNull;
    }(Coder));
    var CoderNumber = /** @class */ (function (_super) {
        __extends(CoderNumber, _super);
        function CoderNumber(coerceFunc, size, signed, localName) {
            var _this = this;
            var name = ((signed ? 'int' : 'uint') + (size * 8));
            _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
            _this.size = size;
            _this.signed = signed;
            return _this;
        }
        CoderNumber.prototype.encode = function (value) {
            try {
                var v = bignumber_1.bigNumberify(value);
                v = v.toTwos(this.size * 8).maskn(this.size * 8);
                //value = value.toTwos(size * 8).maskn(size * 8);
                if (this.signed) {
                    v = v.fromTwos(this.size * 8).toTwos(256);
                }
                return bytes_1.padZeros(bytes_1.arrayify(v), 32);
            }
            catch (error) {
                errors.throwError('invalid number value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: this.name,
                    value: value
                });
            }
            return null;
        };
        CoderNumber.prototype.decode = function (data, offset) {
            if (data.length < offset + 32) {
                errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: this.name,
                    value: bytes_1.hexlify(data.slice(offset, offset + 32))
                });
            }
            var junkLength = 32 - this.size;
            var value = bignumber_1.bigNumberify(data.slice(offset + junkLength, offset + 32));
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            else {
                value = value.maskn(this.size * 8);
            }
            return {
                consumed: 32,
                value: this.coerceFunc(this.name, value),
            };
        };
        return CoderNumber;
    }(Coder));
    var uint256Coder = new CoderNumber(function (type, value) { return value; }, 32, false, 'none');
    var CoderBoolean = /** @class */ (function (_super) {
        __extends(CoderBoolean, _super);
        function CoderBoolean(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;
        }
        CoderBoolean.prototype.encode = function (value) {
            return uint256Coder.encode(!!value ? 1 : 0);
        };
        CoderBoolean.prototype.decode = function (data, offset) {
            try {
                var result = uint256Coder.decode(data, offset);
            }
            catch (error) {
                if (error.reason === 'insufficient data for uint256 type') {
                    errors.throwError('insufficient data for boolean type', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'boolean',
                        value: error.value
                    });
                }
                throw error;
            }
            return {
                consumed: result.consumed,
                value: this.coerceFunc('bool', !result.value.isZero())
            };
        };
        return CoderBoolean;
    }(Coder));
    var CoderFixedBytes = /** @class */ (function (_super) {
        __extends(CoderFixedBytes, _super);
        function CoderFixedBytes(coerceFunc, length, localName) {
            var _this = this;
            var name = ('bytes' + length);
            _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
            _this.length = length;
            return _this;
        }
        CoderFixedBytes.prototype.encode = function (value) {
            var result = new Uint8Array(32);
            try {
                var data = bytes_1.arrayify(value);
                if (data.length > 32) {
                    throw new Error();
                }
                result.set(data);
            }
            catch (error) {
                errors.throwError('invalid ' + this.name + ' value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: this.name,
                    value: (error.value || value)
                });
            }
            return result;
        };
        CoderFixedBytes.prototype.decode = function (data, offset) {
            if (data.length < offset + 32) {
                errors.throwError('insufficient data for ' + name + ' type', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: this.name,
                    value: bytes_1.hexlify(data.slice(offset, offset + 32))
                });
            }
            return {
                consumed: 32,
                value: this.coerceFunc(this.name, bytes_1.hexlify(data.slice(offset, offset + this.length)))
            };
        };
        return CoderFixedBytes;
    }(Coder));
    var CoderAddress = /** @class */ (function (_super) {
        __extends(CoderAddress, _super);
        function CoderAddress(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;
        }
        CoderAddress.prototype.encode = function (value) {
            var result = new Uint8Array(32);
            try {
                result.set(bytes_1.arrayify(address_1.getAddress(value)), 12);
            }
            catch (error) {
                errors.throwError('invalid address', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'address',
                    value: value
                });
            }
            return result;
        };
        CoderAddress.prototype.decode = function (data, offset) {
            if (data.length < offset + 32) {
                errors.throwError('insufficuent data for address type', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'address',
                    value: bytes_1.hexlify(data.slice(offset, offset + 32))
                });
            }
            return {
                consumed: 32,
                value: this.coerceFunc('address', address_1.getAddress(bytes_1.hexlify(data.slice(offset + 12, offset + 32))))
            };
        };
        return CoderAddress;
    }(Coder));
    function _encodeDynamicBytes(value) {
        var dataLength = 32 * Math.ceil(value.length / 32);
        var padding = new Uint8Array(dataLength - value.length);
        return bytes_1.concat([
            uint256Coder.encode(value.length),
            value,
            padding
        ]);
    }
    function _decodeDynamicBytes(data, offset, localName) {
        if (data.length < offset + 32) {
            errors.throwError('insufficient data for dynamicBytes length', errors.INVALID_ARGUMENT, {
                arg: localName,
                coderType: 'dynamicBytes',
                value: bytes_1.hexlify(data.slice(offset, offset + 32))
            });
        }
        var length = uint256Coder.decode(data, offset).value;
        try {
            length = length.toNumber();
        }
        catch (error) {
            errors.throwError('dynamic bytes count too large', errors.INVALID_ARGUMENT, {
                arg: localName,
                coderType: 'dynamicBytes',
                value: length.toString()
            });
        }
        if (data.length < offset + 32 + length) {
            errors.throwError('insufficient data for dynamicBytes type', errors.INVALID_ARGUMENT, {
                arg: localName,
                coderType: 'dynamicBytes',
                value: bytes_1.hexlify(data.slice(offset, offset + 32 + length))
            });
        }
        return {
            consumed: 32 + 32 * Math.ceil(length / 32),
            value: data.slice(offset + 32, offset + 32 + length),
        };
    }
    var CoderDynamicBytes = /** @class */ (function (_super) {
        __extends(CoderDynamicBytes, _super);
        function CoderDynamicBytes(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;
        }
        CoderDynamicBytes.prototype.encode = function (value) {
            try {
                return _encodeDynamicBytes(bytes_1.arrayify(value));
            }
            catch (error) {
                errors.throwError('invalid bytes value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'bytes',
                    value: error.value
                });
            }
            return null;
        };
        CoderDynamicBytes.prototype.decode = function (data, offset) {
            var result = _decodeDynamicBytes(data, offset, this.localName);
            result.value = this.coerceFunc('bytes', bytes_1.hexlify(result.value));
            return result;
        };
        return CoderDynamicBytes;
    }(Coder));
    var CoderString = /** @class */ (function (_super) {
        __extends(CoderString, _super);
        function CoderString(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;
        }
        CoderString.prototype.encode = function (value) {
            if (typeof (value) !== 'string') {
                errors.throwError('invalid string value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'string',
                    value: value
                });
            }
            return _encodeDynamicBytes(utf8_1.toUtf8Bytes(value));
        };
        CoderString.prototype.decode = function (data, offset) {
            var result = _decodeDynamicBytes(data, offset, this.localName);
            result.value = this.coerceFunc('string', utf8_1.toUtf8String(result.value));
            return result;
        };
        return CoderString;
    }(Coder));
    function alignSize(size) {
        return 32 * Math.ceil(size / 32);
    }
    function pack(coders, values) {
        if (Array.isArray(values)) {
            // do nothing
        }
        else if (values && typeof (values) === 'object') {
            var arrayValues = [];
            coders.forEach(function (coder) {
                arrayValues.push(values[coder.localName]);
            });
            values = arrayValues;
        }
        else {
            errors.throwError('invalid tuple value', errors.INVALID_ARGUMENT, {
                coderType: 'tuple',
                value: values
            });
        }
        if (coders.length !== values.length) {
            errors.throwError('types/value length mismatch', errors.INVALID_ARGUMENT, {
                coderType: 'tuple',
                value: values
            });
        }
        var parts = [];
        coders.forEach(function (coder, index) {
            parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
        });
        var staticSize = 0, dynamicSize = 0;
        parts.forEach(function (part) {
            if (part.dynamic) {
                staticSize += 32;
                dynamicSize += alignSize(part.value.length);
            }
            else {
                staticSize += alignSize(part.value.length);
            }
        });
        var offset = 0, dynamicOffset = staticSize;
        var data = new Uint8Array(staticSize + dynamicSize);
        parts.forEach(function (part) {
            if (part.dynamic) {
                //uint256Coder.encode(dynamicOffset).copy(data, offset);
                data.set(uint256Coder.encode(dynamicOffset), offset);
                offset += 32;
                //part.value.copy(data, dynamicOffset);  @TODO
                data.set(part.value, dynamicOffset);
                dynamicOffset += alignSize(part.value.length);
            }
            else {
                //part.value.copy(data, offset);  @TODO
                data.set(part.value, offset);
                offset += alignSize(part.value.length);
            }
        });
        return data;
    }
    function unpack(coders, data, offset) {
        var baseOffset = offset;
        var consumed = 0;
        var value = [];
        coders.forEach(function (coder) {
            if (coder.dynamic) {
                var dynamicOffset = uint256Coder.decode(data, offset);
                var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());
                // The dynamic part is leap-frogged somewhere else; doesn't count towards size
                result.consumed = dynamicOffset.consumed;
            }
            else {
                var result = coder.decode(data, offset);
            }
            if (result.value != undefined) {
                value.push(result.value);
            }
            offset += result.consumed;
            consumed += result.consumed;
        });
        coders.forEach(function (coder, index) {
            var name = coder.localName;
            if (!name) {
                return;
            }
            if (name === 'length') {
                name = '_length';
            }
            if (value[name] != null) {
                return;
            }
            value[name] = value[index];
        });
        return {
            value: value,
            consumed: consumed
        };
    }
    var CoderArray = /** @class */ (function (_super) {
        __extends(CoderArray, _super);
        function CoderArray(coerceFunc, coder, length, localName) {
            var _this = this;
            var type = (coder.type + '[' + (length >= 0 ? length : '') + ']');
            var dynamic = (length === -1 || coder.dynamic);
            _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;
            _this.coder = coder;
            _this.length = length;
            return _this;
        }
        CoderArray.prototype.encode = function (value) {
            if (!Array.isArray(value)) {
                errors.throwError('expected array value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'array',
                    value: value
                });
            }
            var count = this.length;
            var result = new Uint8Array(0);
            if (count === -1) {
                count = value.length;
                result = uint256Coder.encode(count);
            }
            errors.checkArgumentCount(count, value.length, 'in coder array' + (this.localName ? (" " + this.localName) : ""));
            var coders = [];
            for (var i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return bytes_1.concat([result, pack(coders, value)]);
        };
        CoderArray.prototype.decode = function (data, offset) {
            // @TODO:
            //if (data.length < offset + length * 32) { throw new Error('invalid array'); }
            var consumed = 0;
            var count = this.length;
            if (count === -1) {
                try {
                    var decodedLength = uint256Coder.decode(data, offset);
                }
                catch (error) {
                    errors.throwError('insufficient data for dynamic array length', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'array',
                        value: error.value
                    });
                }
                try {
                    count = decodedLength.value.toNumber();
                }
                catch (error) {
                    errors.throwError('array count too large', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'array',
                        value: decodedLength.value.toString()
                    });
                }
                consumed += decodedLength.consumed;
                offset += decodedLength.consumed;
            }
            var coders = [];
            for (var i = 0; i < count; i++) {
                coders.push(new CoderAnonymous(this.coder));
            }
            var result = unpack(coders, data, offset);
            result.consumed += consumed;
            result.value = this.coerceFunc(this.type, result.value);
            return result;
        };
        return CoderArray;
    }(Coder));
    var CoderTuple = /** @class */ (function (_super) {
        __extends(CoderTuple, _super);
        function CoderTuple(coerceFunc, coders, localName) {
            var _this = this;
            var dynamic = false;
            var types = [];
            coders.forEach(function (coder) {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            var type = ('tuple(' + types.join(',') + ')');
            _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;
            _this.coders = coders;
            return _this;
        }
        CoderTuple.prototype.encode = function (value) {
            return pack(this.coders, value);
        };
        CoderTuple.prototype.decode = function (data, offset) {
            var result = unpack(this.coders, data, offset);
            result.value = this.coerceFunc(this.type, result.value);
            return result;
        };
        return CoderTuple;
    }(Coder));
    /*
    function getTypes(coders) {
        var type = coderTuple(coders).type;
        return type.substring(6, type.length - 1);
    }
    */
    function splitNesting(value) {
        var result = [];
        var accum = '';
        var depth = 0;
        for (var offset = 0; offset < value.length; offset++) {
            var c = value[offset];
            if (c === ',' && depth === 0) {
                result.push(accum);
                accum = '';
            }
            else {
                accum += c;
                if (c === '(') {
                    depth++;
                }
                else if (c === ')') {
                    depth--;
                    if (depth === -1) {
                        throw new Error('unbalanced parenthsis');
                    }
                }
            }
        }
        result.push(accum);
        return result;
    }
    // @TODO: Is there a way to return "class"?
    var paramTypeSimple = {
        address: CoderAddress,
        bool: CoderBoolean,
        string: CoderString,
        bytes: CoderDynamicBytes,
    };
    function getTupleParamCoder(coerceFunc, components, localName) {
        if (!components) {
            components = [];
        }
        var coders = [];
        components.forEach(function (component) {
            coders.push(getParamCoder(coerceFunc, component));
        });
        return new CoderTuple(coerceFunc, coders, localName);
    }
    function getParamCoder(coerceFunc, param) {
        var coder = paramTypeSimple[param.type];
        if (coder) {
            return new coder(coerceFunc, param.name);
        }
        var match = param.type.match(paramTypeNumber);
        if (match) {
            var size = parseInt(match[2] || "256");
            if (size === 0 || size > 256 || (size % 8) !== 0) {
                errors.throwError('invalid ' + match[1] + ' bit length', errors.INVALID_ARGUMENT, {
                    arg: 'param',
                    value: param
                });
            }
            return new CoderNumber(coerceFunc, size / 8, (match[1] === 'int'), param.name);
        }
        var match = param.type.match(paramTypeBytes);
        if (match) {
            var size = parseInt(match[1]);
            if (size === 0 || size > 32) {
                errors.throwError('invalid bytes length', errors.INVALID_ARGUMENT, {
                    arg: 'param',
                    value: param
                });
            }
            return new CoderFixedBytes(coerceFunc, size, param.name);
        }
        var match = param.type.match(paramTypeArray);
        if (match) {
            var size = parseInt(match[2] || "-1");
            param = properties_1.jsonCopy(param);
            param.type = match[1];
            return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);
        }
        if (param.type.substring(0, 5) === 'tuple') {
            return getTupleParamCoder(coerceFunc, param.components, param.name);
        }
        if (param.type === '') {
            return new CoderNull(coerceFunc, param.name);
        }
        errors.throwError('invalid type', errors.INVALID_ARGUMENT, {
            arg: 'type',
            value: param.type
        });
        return null;
    }
    var AbiCoder = /** @class */ (function () {
        function AbiCoder(coerceFunc) {
            errors.checkNew(this, AbiCoder);
            if (!coerceFunc) {
                coerceFunc = exports.defaultCoerceFunc;
            }
            properties_1.defineReadOnly(this, 'coerceFunc', coerceFunc);
        }
        AbiCoder.prototype.encode = function (types, values) {
            if (types.length !== values.length) {
                errors.throwError('types/values length mismatch', errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            var coders = [];
            types.forEach(function (type) {
                // Convert types to type objects
                //   - "uint foo" => { type: "uint", name: "foo" }
                //   - "tuple(uint, uint)" => { type: "tuple", components: [ { type: "uint" }, { type: "uint" }, ] }
                var typeObject = null;
                if (typeof (type) === 'string') {
                    typeObject = parseParam(type);
                }
                else {
                    typeObject = type;
                }
                coders.push(getParamCoder(this.coerceFunc, typeObject));
            }, this);
            return bytes_1.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));
        };
        AbiCoder.prototype.decode = function (types, data) {
            var coders = [];
            types.forEach(function (type) {
                // See encode for details
                var typeObject = null;
                if (typeof (type) === 'string') {
                    typeObject = parseParam(type);
                }
                else {
                    typeObject = properties_1.jsonCopy(type);
                }
                coders.push(getParamCoder(this.coerceFunc, typeObject));
            }, this);
            return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes_1.arrayify(data), 0).value;
        };
        return AbiCoder;
    }());
    exports.AbiCoder = AbiCoder;
    exports.defaultAbiCoder = new AbiCoder();
    
    },{"./address":325,"./bignumber":326,"./bytes":327,"./errors":328,"./properties":330,"./utf8":333}],325:[function(require,module,exports){
    'use strict';
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    // We use this for base 36 maths
    var bn_js_1 = __importDefault(require("bn.js"));
    var bytes_1 = require("./bytes");
    var keccak256_1 = require("./keccak256");
    var rlp_1 = require("./rlp");
    var errors = require("./errors");
    function getChecksumAddress(address) {
        if (typeof (address) !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
            errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
        }
        address = address.toLowerCase();
        var chars = address.substring(2).split('');
        var hashed = new Uint8Array(40);
        for (var i_1 = 0; i_1 < 40; i_1++) {
            hashed[i_1] = chars[i_1].charCodeAt(0);
        }
        hashed = bytes_1.arrayify(keccak256_1.keccak256(hashed));
        for (var i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return '0x' + chars.join('');
    }
    // Shims for environments that are missing some required constants and functions
    var MAX_SAFE_INTEGER = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    var ibanLookup = {};
    for (var i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (var i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + '00';
        var expanded = '';
        address.split('').forEach(function (c) {
            expanded += ibanLookup[c];
        });
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            var block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        var checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = '0' + checksum;
        }
        return checksum;
    }
    ;
    function getAddress(address) {
        var result = null;
        if (typeof (address) !== 'string') {
            errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== '0x') {
                address = '0x' + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                errors.throwError('bad address checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                errors.throwError('bad icap checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
            }
            result = (new bn_js_1.default.BN(address.substring(4), 36)).toString(16);
            while (result.length < 40) {
                result = '0' + result;
            }
            result = getChecksumAddress('0x' + result);
        }
        else {
            errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
        }
        return result;
    }
    exports.getAddress = getAddress;
    function getIcapAddress(address) {
        var base36 = (new bn_js_1.default.BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();
        while (base36.length < 30) {
            base36 = '0' + base36;
        }
        return 'XE' + ibanChecksum('XE00' + base36) + base36;
    }
    exports.getIcapAddress = getIcapAddress;
    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    function getContractAddress(transaction) {
        if (!transaction.from) {
            throw new Error('missing from address');
        }
        var nonce = transaction.nonce;
        return getAddress('0x' + keccak256_1.keccak256(rlp_1.encode([
            getAddress(transaction.from),
            bytes_1.stripZeros(bytes_1.hexlify(nonce))
        ])).substring(26));
    }
    exports.getContractAddress = getContractAddress;
    
    },{"./bytes":327,"./errors":328,"./keccak256":329,"./rlp":331,"bn.js":61}],326:[function(require,module,exports){
    'use strict';
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     *  BigNumber
     *
     *  A wrapper around the BN.js object. We use the BN.js library
     *  because it is used by elliptic, so it is required regardles.
     *
     */
    var bn_js_1 = __importDefault(require("bn.js"));
    var bytes_1 = require("./bytes");
    var properties_1 = require("./properties");
    var types_1 = require("./types");
    var errors = __importStar(require("./errors"));
    var BN_1 = new bn_js_1.default.BN(-1);
    function toHex(bn) {
        var value = bn.toString(16);
        if (value[0] === '-') {
            if ((value.length % 2) === 0) {
                return '-0x0' + value.substring(1);
            }
            return "-0x" + value.substring(1);
        }
        if ((value.length % 2) === 1) {
            return '0x0' + value;
        }
        return '0x' + value;
    }
    function toBN(value) {
        return bigNumberify(value)._bn;
    }
    function toBigNumber(bn) {
        return new BigNumber(toHex(bn));
    }
    var BigNumber = /** @class */ (function (_super) {
        __extends(BigNumber, _super);
        function BigNumber(value) {
            var _this = _super.call(this) || this;
            errors.checkNew(_this, BigNumber);
            if (typeof (value) === 'string') {
                if (bytes_1.isHexString(value)) {
                    if (value == '0x') {
                        value = '0x0';
                    }
                    properties_1.defineReadOnly(_this, '_hex', value);
                }
                else if (value[0] === '-' && bytes_1.isHexString(value.substring(1))) {
                    properties_1.defineReadOnly(_this, '_hex', value);
                }
                else if (value.match(/^-?[0-9]*$/)) {
                    if (value == '') {
                        value = '0';
                    }
                    properties_1.defineReadOnly(_this, '_hex', toHex(new bn_js_1.default.BN(value)));
                }
                else {
                    errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
                }
            }
            else if (typeof (value) === 'number') {
                if (parseInt(String(value)) !== value) {
                    errors.throwError('underflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'underflow', value: value, outputValue: parseInt(String(value)) });
                }
                try {
                    properties_1.defineReadOnly(_this, '_hex', toHex(new bn_js_1.default.BN(value)));
                }
                catch (error) {
                    errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
                }
            }
            else if (value instanceof BigNumber) {
                properties_1.defineReadOnly(_this, '_hex', value._hex);
            }
            else if (value.toHexString) {
                properties_1.defineReadOnly(_this, '_hex', toHex(toBN(value.toHexString())));
            }
            else if (bytes_1.isArrayish(value)) {
                properties_1.defineReadOnly(_this, '_hex', toHex(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));
            }
            else {
                errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            return _this;
        }
        Object.defineProperty(BigNumber.prototype, "_bn", {
            get: function () {
                if (this._hex[0] === '-') {
                    return (new bn_js_1.default.BN(this._hex.substring(3), 16)).mul(BN_1);
                }
                return new bn_js_1.default.BN(this._hex.substring(2), 16);
            },
            enumerable: true,
            configurable: true
        });
        BigNumber.prototype.fromTwos = function (value) {
            return toBigNumber(this._bn.fromTwos(value));
        };
        BigNumber.prototype.toTwos = function (value) {
            return toBigNumber(this._bn.toTwos(value));
        };
        BigNumber.prototype.add = function (other) {
            return toBigNumber(this._bn.add(toBN(other)));
        };
        BigNumber.prototype.sub = function (other) {
            return toBigNumber(this._bn.sub(toBN(other)));
        };
        BigNumber.prototype.div = function (other) {
            var o = bigNumberify(other);
            if (o.isZero()) {
                errors.throwError('division by zero', errors.NUMERIC_FAULT, { operation: 'divide', fault: 'division by zero' });
            }
            return toBigNumber(this._bn.div(toBN(other)));
        };
        BigNumber.prototype.mul = function (other) {
            return toBigNumber(this._bn.mul(toBN(other)));
        };
        BigNumber.prototype.mod = function (other) {
            return toBigNumber(this._bn.mod(toBN(other)));
        };
        BigNumber.prototype.pow = function (other) {
            return toBigNumber(this._bn.pow(toBN(other)));
        };
        BigNumber.prototype.maskn = function (value) {
            return toBigNumber(this._bn.maskn(value));
        };
        BigNumber.prototype.eq = function (other) {
            return this._bn.eq(toBN(other));
        };
        BigNumber.prototype.lt = function (other) {
            return this._bn.lt(toBN(other));
        };
        BigNumber.prototype.lte = function (other) {
            return this._bn.lte(toBN(other));
        };
        BigNumber.prototype.gt = function (other) {
            return this._bn.gt(toBN(other));
        };
        BigNumber.prototype.gte = function (other) {
            return this._bn.gte(toBN(other));
        };
        BigNumber.prototype.isZero = function () {
            return this._bn.isZero();
        };
        BigNumber.prototype.toNumber = function () {
            try {
                return this._bn.toNumber();
            }
            catch (error) {
                errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
            }
            return null;
        };
        BigNumber.prototype.toString = function () {
            return this._bn.toString(10);
        };
        BigNumber.prototype.toHexString = function () {
            return this._hex;
        };
        return BigNumber;
    }(types_1.BigNumber));
    function bigNumberify(value) {
        if (value instanceof BigNumber) {
            return value;
        }
        return new BigNumber(value);
    }
    exports.bigNumberify = bigNumberify;
    exports.ConstantNegativeOne = bigNumberify(-1);
    exports.ConstantZero = bigNumberify(0);
    exports.ConstantOne = bigNumberify(1);
    exports.ConstantTwo = bigNumberify(2);
    exports.ConstantWeiPerEther = bigNumberify('1000000000000000000');
    
    },{"./bytes":327,"./errors":328,"./properties":330,"./types":332,"bn.js":61}],327:[function(require,module,exports){
    "use strict";
    /**
     *  Conversion Utilities
     *
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    var types_1 = require("./types");
    var errors = require("./errors");
    exports.AddressZero = '0x0000000000000000000000000000000000000000';
    exports.HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';
    function isBigNumber(value) {
        return (value instanceof types_1.BigNumber);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            var args = Array.prototype.slice.call(arguments);
            return new Uint8Array(Array.prototype.slice.apply(array, args));
        };
        return array;
    }
    function isArrayish(value) {
        if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {
            return false;
        }
        for (var i = 0; i < value.length; i++) {
            var v = value[i];
            if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
                return false;
            }
        }
        return true;
    }
    exports.isArrayish = isArrayish;
    function arrayify(value) {
        if (value == null) {
            errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        if (isBigNumber(value)) {
            value = value.toHexString();
        }
        if (typeof (value) === 'string') {
            var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
            if (!match) {
                errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            if (match[1] !== '0x') {
                errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            value = value.substring(2);
            if (value.length % 2) {
                value = '0' + value;
            }
            var result = [];
            for (var i = 0; i < value.length; i += 2) {
                result.push(parseInt(value.substr(i, 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        else if (typeof (value) === 'string') {
        }
        if (isArrayish(value)) {
            return addSlice(new Uint8Array(value));
        }
        errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });
        return null;
    }
    exports.arrayify = arrayify;
    function concat(objects) {
        var arrays = [];
        var length = 0;
        for (var i = 0; i < objects.length; i++) {
            var object = arrayify(objects[i]);
            arrays.push(object);
            length += object.length;
        }
        var result = new Uint8Array(length);
        var offset = 0;
        for (var i = 0; i < arrays.length; i++) {
            result.set(arrays[i], offset);
            offset += arrays[i].length;
        }
        return addSlice(result);
    }
    exports.concat = concat;
    function stripZeros(value) {
        var result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        var start = 0;
        while (result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    exports.stripZeros = stripZeros;
    function padZeros(value, length) {
        value = arrayify(value);
        if (length < value.length) {
            throw new Error('cannot pad');
        }
        var result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    exports.padZeros = padZeros;
    function isHexString(value, length) {
        if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    exports.isHexString = isHexString;
    var HexCharacters = '0123456789abcdef';
    function hexlify(value) {
        if (isBigNumber(value)) {
            return value.toHexString();
        }
        if (typeof (value) === 'number') {
            if (value < 0) {
                errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            var hex = '';
            while (value) {
                hex = HexCharacters[value & 0x0f] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = '0' + hex;
                }
                return '0x' + hex;
            }
            return '0x00';
        }
        if (typeof (value) === 'string') {
            var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
            if (!match) {
                errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            if (match[1] !== '0x') {
                errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
            if (value.length % 2) {
                value = '0x0' + value.substring(2);
            }
            return value;
        }
        if (isArrayish(value)) {
            var result = [];
            for (var i = 0; i < value.length; i++) {
                var v = value[i];
                result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);
            }
            return '0x' + result.join('');
        }
        errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });
        return 'never';
    }
    exports.hexlify = hexlify;
    function hexDataLength(data) {
        if (!isHexString(data) || (data.length % 2) !== 0) {
            return null;
        }
        return (data.length - 2) / 2;
    }
    exports.hexDataLength = hexDataLength;
    function hexDataSlice(data, offset, length) {
        if (!isHexString(data)) {
            errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
        }
        if ((data.length % 2) !== 0) {
            errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
        }
        offset = 2 + 2 * offset;
        if (length != null) {
            return '0x' + data.substring(offset, offset + 2 * length);
        }
        return '0x' + data.substring(offset);
    }
    exports.hexDataSlice = hexDataSlice;
    function hexStripZeros(value) {
        if (!isHexString(value)) {
            errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        while (value.length > 3 && value.substring(0, 3) === '0x0') {
            value = '0x' + value.substring(3);
        }
        return value;
    }
    exports.hexStripZeros = hexStripZeros;
    function hexZeroPad(value, length) {
        if (!isHexString(value)) {
            errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        while (value.length < 2 * length + 2) {
            value = '0x0' + value.substring(2);
        }
        return value;
    }
    exports.hexZeroPad = hexZeroPad;
    function isSignature(value) {
        return (value && value.r != null && value.s != null);
    }
    function splitSignature(signature) {
        var v = 0;
        var r = '0x', s = '0x';
        if (isSignature(signature)) {
            if (signature.v == null && signature.recoveryParam == null) {
                errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });
            }
            r = hexZeroPad(signature.r, 32);
            s = hexZeroPad(signature.s, 32);
            v = signature.v;
            if (typeof (v) === 'string') {
                v = parseInt(v, 16);
            }
            var recoveryParam = signature.recoveryParam;
            if (recoveryParam == null && signature.v != null) {
                recoveryParam = 1 - (v % 2);
            }
            v = 27 + recoveryParam;
        }
        else {
            var bytes = arrayify(signature);
            if (bytes.length !== 65) {
                throw new Error('invalid signature');
            }
            r = hexlify(bytes.slice(0, 32));
            s = hexlify(bytes.slice(32, 64));
            v = bytes[64];
            if (v !== 27 && v !== 28) {
                v = 27 + (v % 2);
            }
        }
        return {
            r: r,
            s: s,
            recoveryParam: (v - 27),
            v: v
        };
    }
    exports.splitSignature = splitSignature;
    function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat([
            signature.r,
            signature.s,
            (signature.recoveryParam ? '0x1c' : '0x1b')
        ]));
    }
    exports.joinSignature = joinSignature;
    
    },{"./errors":328,"./types":332}],328:[function(require,module,exports){
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    // Unknown Error
    exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';
    // Not implemented
    exports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
    // Missing new operator to an object
    //  - name: The name of the class
    exports.MISSING_NEW = 'MISSING_NEW';
    // Call exception
    //  - transaction: the transaction
    //  - address?: the contract address
    //  - args?: The arguments passed into the function
    //  - method?: The Solidity method signature
    //  - errorSignature?: The EIP848 error signature
    //  - errorArgs?: The EIP848 error parameters
    //  - reason: The reason (only for EIP848 "Error(string)")
    exports.CALL_EXCEPTION = 'CALL_EXCEPTION';
    // Response from a server was invalid
    //   - response: The body of the response
    //'BAD_RESPONSE',
    // Invalid argument (e.g. value is incompatible with type) to a function:
    //   - arg: The argument name that was invalid
    //   - value: The value of the argument
    exports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';
    // Missing argument to a function:
    //   - count: The number of arguments received
    //   - expectedCount: The number of arguments expected
    exports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';
    // Too many arguments
    //   - count: The number of arguments received
    //   - expectedCount: The number of arguments expected
    exports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';
    // Numeric Fault
    //   - operation: the operation being executed
    //   - fault: the reason this faulted
    exports.NUMERIC_FAULT = 'NUMERIC_FAULT';
    // Unsupported operation
    //   - operation
    exports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';
    var _permanentCensorErrors = false;
    var _censorErrors = false;
    // @TODO: Enum
    function throwError(message, code, params) {
        if (_censorErrors) {
            throw new Error('unknown error');
        }
        if (!code) {
            code = exports.UNKNOWN_ERROR;
        }
        if (!params) {
            params = {};
        }
        var messageDetails = [];
        Object.keys(params).forEach(function (key) {
            try {
                messageDetails.push(key + '=' + JSON.stringify(params[key]));
            }
            catch (error) {
                messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));
            }
        });
        var reason = message;
        if (messageDetails.length) {
            message += ' (' + messageDetails.join(', ') + ')';
        }
        // @TODO: Any??
        var error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function (key) {
            error[key] = params[key];
        });
        throw error;
    }
    exports.throwError = throwError;
    function checkNew(self, kind) {
        if (!(self instanceof kind)) {
            throwError('missing new', exports.MISSING_NEW, { name: kind.name });
        }
    }
    exports.checkNew = checkNew;
    function checkArgumentCount(count, expectedCount, suffix) {
        if (!suffix) {
            suffix = '';
        }
        if (count < expectedCount) {
            throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });
        }
        if (count > expectedCount) {
            throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });
        }
    }
    exports.checkArgumentCount = checkArgumentCount;
    function setCensorship(censorship, permanent) {
        if (_permanentCensorErrors) {
            throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCersorship' });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
    }
    exports.setCensorship = setCensorship;
    
    },{}],329:[function(require,module,exports){
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    var sha3 = require("js-sha3");
    var bytes_1 = require("./bytes");
    function keccak256(data) {
        return '0x' + sha3.keccak_256(bytes_1.arrayify(data));
    }
    exports.keccak256 = keccak256;
    
    },{"./bytes":327,"js-sha3":205}],330:[function(require,module,exports){
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    exports.defineReadOnly = defineReadOnly;
    function defineFrozen(object, name, value) {
        var frozen = JSON.stringify(value);
        Object.defineProperty(object, name, {
            enumerable: true,
            get: function () { return JSON.parse(frozen); }
        });
    }
    exports.defineFrozen = defineFrozen;
    function resolveProperties(object) {
        var result = {};
        var promises = [];
        Object.keys(object).forEach(function (key) {
            var value = object[key];
            if (value instanceof Promise) {
                promises.push(value.then(function (value) {
                    result[key] = value;
                    return null;
                }));
            }
            else {
                result[key] = value;
            }
        });
        return Promise.all(promises).then(function () {
            return result;
        });
    }
    exports.resolveProperties = resolveProperties;
    function shallowCopy(object) {
        var result = {};
        for (var key in object) {
            result[key] = object[key];
        }
        return result;
    }
    exports.shallowCopy = shallowCopy;
    function jsonCopy(object) {
        return JSON.parse(JSON.stringify(object));
    }
    exports.jsonCopy = jsonCopy;
    
    },{}],331:[function(require,module,exports){
    "use strict";
    //See: https://github.com/ethereum/wiki/wiki/RLP
    Object.defineProperty(exports, "__esModule", { value: true });
    var bytes_1 = require("./bytes");
    function arrayifyInteger(value) {
        var result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function unarrayifyInteger(data, offset, length) {
        var result = 0;
        for (var i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            var payload = [];
            object.forEach(function (child) {
                payload = payload.concat(_encode(child));
            });
            if (payload.length <= 55) {
                payload.unshift(0xc0 + payload.length);
                return payload;
            }
            var length = arrayifyInteger(payload.length);
            length.unshift(0xf7 + length.length);
            return length.concat(payload);
        }
        var data = Array.prototype.slice.call(bytes_1.arrayify(object));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        var length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    function encode(object) {
        return bytes_1.hexlify(_encode(object));
    }
    exports.encode = encode;
    function _decodeChildren(data, offset, childOffset, length) {
        var result = [];
        while (childOffset < offset + 1 + length) {
            var decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
                throw new Error('invalid rlp');
            }
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode(data, offset) {
        if (data.length === 0) {
            throw new Error('invalid rlp data');
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            var lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
                throw new Error('too short');
            }
            var length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                throw new Error('to short');
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        }
        else if (data[offset] >= 0xc0) {
            var length = data[offset] - 0xc0;
            if (offset + 1 + length > data.length) {
                throw new Error('invalid rlp data');
            }
            return _decodeChildren(data, offset, offset + 1, length);
        }
        else if (data[offset] >= 0xb8) {
            var lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
                throw new Error('invalid rlp data');
            }
            var length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                throw new Error('invalid rlp data');
            }
            var result = bytes_1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
            return { consumed: (1 + lengthLength + length), result: result };
        }
        else if (data[offset] >= 0x80) {
            var length = data[offset] - 0x80;
            if (offset + 1 + length > data.length) {
                throw new Error('invlaid rlp data');
            }
            var result = bytes_1.hexlify(data.slice(offset + 1, offset + 1 + length));
            return { consumed: (1 + length), result: result };
        }
        return { consumed: 1, result: bytes_1.hexlify(data[offset]) };
    }
    function decode(data) {
        var bytes = bytes_1.arrayify(data);
        var decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
            throw new Error('invalid rlp data');
        }
        return decoded.result;
    }
    exports.decode = decode;
    
    },{"./bytes":327}],332:[function(require,module,exports){
    "use strict";
    ///////////////////////////////
    // Bytes
    Object.defineProperty(exports, "__esModule", { value: true });
    ///////////////////////////////
    // BigNumber
    var BigNumber = /** @class */ (function () {
        function BigNumber() {
        }
        return BigNumber;
    }());
    exports.BigNumber = BigNumber;
    ;
    ;
    ;
    ///////////////////////////////
    // Interface
    var Indexed = /** @class */ (function () {
        function Indexed() {
        }
        return Indexed;
    }());
    exports.Indexed = Indexed;
    /**
     *  Provider
     *
     *  Note: We use an abstract class so we can use instanceof to determine if an
     *        object is a Provider.
     */
    var MinimalProvider = /** @class */ (function () {
        function MinimalProvider() {
        }
        return MinimalProvider;
    }());
    exports.MinimalProvider = MinimalProvider;
    /**
     *  Signer
     *
     *  Note: We use an abstract class so we can use instanceof to determine if an
     *        object is a Signer.
     */
    var Signer = /** @class */ (function () {
        function Signer() {
        }
        return Signer;
    }());
    exports.Signer = Signer;
    ///////////////////////////////
    // HDNode
    var HDNode = /** @class */ (function () {
        function HDNode() {
        }
        return HDNode;
    }());
    exports.HDNode = HDNode;
    
    },{}],333:[function(require,module,exports){
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    var bytes_1 = require("./bytes");
    var UnicodeNormalizationForm;
    (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
    ;
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUtf8Bytes(str, form) {
        if (form === void 0) { form = UnicodeNormalizationForm.current; }
        if (form != UnicodeNormalizationForm.current) {
            str = str.normalize(form);
        }
        var result = [];
        var offset = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                result[offset++] = c;
            }
            else if (c < 2048) {
                result[offset++] = (c >> 6) | 192;
                result[offset++] = (c & 63) | 128;
            }
            else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length && ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
                result[offset++] = (c >> 18) | 240;
                result[offset++] = ((c >> 12) & 63) | 128;
                result[offset++] = ((c >> 6) & 63) | 128;
                result[offset++] = (c & 63) | 128;
            }
            else {
                result[offset++] = (c >> 12) | 224;
                result[offset++] = ((c >> 6) & 63) | 128;
                result[offset++] = (c & 63) | 128;
            }
        }
        return bytes_1.arrayify(result);
    }
    exports.toUtf8Bytes = toUtf8Bytes;
    ;
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function toUtf8String(bytes) {
        bytes = bytes_1.arrayify(bytes);
        var result = '';
        var i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            var c = bytes[i++];
            if (c >> 7 == 0) {
                // 0xxx xxxx
                result += String.fromCharCode(c);
                continue;
            }
            // Invalid starting byte
            if (c >> 6 == 0x02) {
                continue;
            }
            // Multibyte; how many bytes left for thus character?
            var extraLength = null;
            if (c >> 5 == 0x06) {
                extraLength = 1;
            }
            else if (c >> 4 == 0x0e) {
                extraLength = 2;
            }
            else if (c >> 3 == 0x1e) {
                extraLength = 3;
            }
            else if (c >> 2 == 0x3e) {
                extraLength = 4;
            }
            else if (c >> 1 == 0x7e) {
                extraLength = 5;
            }
            else {
                continue;
            }
            // Do we have enough bytes in our data?
            if (i + extraLength > bytes.length) {
                // If there is an invalid unprocessed byte, try to continue
                for (; i < bytes.length; i++) {
                    if (bytes[i] >> 6 != 0x02) {
                        break;
                    }
                }
                if (i != bytes.length)
                    continue;
                // All leftover bytes are valid.
                return result;
            }
            // Remove the UTF-8 prefix from the char (res)
            var res = c & ((1 << (8 - extraLength - 1)) - 1);
            var count;
            for (count = 0; count < extraLength; count++) {
                var nextChar = bytes[i++];
                // Is the char valid multibyte part?
                if (nextChar >> 6 != 0x02) {
                    break;
                }
                ;
                res = (res << 6) | (nextChar & 0x3f);
            }
            if (count != extraLength) {
                i--;
                continue;
            }
            if (res <= 0xffff) {
                result += String.fromCharCode(res);
                continue;
            }
            res -= 0x10000;
            result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);
        }
        return result;
    }
    exports.toUtf8String = toUtf8String;
    
    },{"./bytes":327}],334:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file index.js
     * @author Marek Kotewicz <marek@parity.io>
     * @author Fabian Vogelsteller <fabian@frozeman.de>
     * @date 2018
     */
    
    var _ = require('underscore');
    var utils = require('web3-utils');
    
    var EthersAbi = require('ethers/utils/abi-coder').AbiCoder;
    var ethersAbiCoder = new EthersAbi(function (type, value) {
        if (type.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== 'BN')) {
            return value.toString();
        }
        return value;
    });
    
    // result method
    function Result() {
    }
    
    /**
     * ABICoder prototype should be used to encode/decode solidity params of any type
     */
    var ABICoder = function () {
    };
    
    /**
     * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
     *
     * @method encodeFunctionSignature
     * @param {String|Object} functionName
     * @return {String} encoded function name
     */
    ABICoder.prototype.encodeFunctionSignature = function (functionName) {
        if (_.isObject(functionName)) {
            functionName = utils._jsonInterfaceMethodToString(functionName);
        }
    
        return utils.sha3(functionName).slice(0, 10);
    };
    
    /**
     * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
     *
     * @method encodeEventSignature
     * @param {String|Object} functionName
     * @return {String} encoded function name
     */
    ABICoder.prototype.encodeEventSignature = function (functionName) {
        if (_.isObject(functionName)) {
            functionName = utils._jsonInterfaceMethodToString(functionName);
        }
    
        return utils.sha3(functionName);
    };
    
    /**
     * Should be used to encode plain param
     *
     * @method encodeParameter
     * @param {String} type
     * @param {Object} param
     * @return {String} encoded plain param
     */
    ABICoder.prototype.encodeParameter = function (type, param) {
        return this.encodeParameters([type], [param]);
    };
    
    /**
     * Should be used to encode list of params
     *
     * @method encodeParameters
     * @param {Array} types
     * @param {Array} params
     * @return {String} encoded list of params
     */
    ABICoder.prototype.encodeParameters = function (types, params) {
        return ethersAbiCoder.encode(this.mapTypes(types), params);
    };
    
    /**
     * Map types if simplified format is used
     *
     * @method mapTypes
     * @param {Array} types
     * @return {Array}
     */
    ABICoder.prototype.mapTypes = function (types) {
        var self = this;
        var mappedTypes = [];
        types.forEach(function (type) {
            if (self.isSimplifiedStructFormat(type)) {
                var structName = Object.keys(type)[0];
                mappedTypes.push(
                    Object.assign(
                        self.mapStructNameAndType(structName),
                        {
                            components: self.mapStructToCoderFormat(type[structName])
                        }
                    )
                );
    
                return;
            }
    
            mappedTypes.push(type);
        });
    
        return mappedTypes;
    };
    
    /**
     * Check if type is simplified struct format
     *
     * @method isSimplifiedStructFormat
     * @param {string | Object} type
     * @returns {boolean}
     */
    ABICoder.prototype.isSimplifiedStructFormat = function (type) {
        return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';
    };
    
    /**
     * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
     *
     * @method mapStructNameAndType
     * @param {string} structName
     * @return {{type: string, name: *}}
     */
    ABICoder.prototype.mapStructNameAndType = function (structName) {
        var type = 'tuple';
    
        if (structName.indexOf('[]') > -1) {
            type = 'tuple[]';
            structName = structName.slice(0, -2);
        }
    
        return {type: type, name: structName};
    };
    
    /**
     * Maps the simplified format in to the expected format of the ABICoder
     *
     * @method mapStructToCoderFormat
     * @param {Object} struct
     * @return {Array}
     */
    ABICoder.prototype.mapStructToCoderFormat = function (struct) {
        var self = this;
        var components = [];
        Object.keys(struct).forEach(function (key) {
            if (typeof struct[key] === 'object') {
                components.push(
                    Object.assign(
                        self.mapStructNameAndType(key),
                        {
                            components: self.mapStructToCoderFormat(struct[key])
                        }
                    )
                );
    
                return;
            }
    
            components.push({
                name: key,
                type: struct[key]
            });
        });
    
        return components;
    };
    
    /**
     * Encodes a function call from its json interface and parameters.
     *
     * @method encodeFunctionCall
     * @param {Array} jsonInterface
     * @param {Array} params
     * @return {String} The encoded ABI for this function call
     */
    ABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {
        return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');
    };
    
    /**
     * Should be used to decode bytes to plain param
     *
     * @method decodeParameter
     * @param {String} type
     * @param {String} bytes
     * @return {Object} plain param
     */
    ABICoder.prototype.decodeParameter = function (type, bytes) {
        return this.decodeParameters([type], bytes)[0];
    };
    
    /**
     * Should be used to decode list of params
     *
     * @method decodeParameter
     * @param {Array} outputs
     * @param {String} bytes
     * @return {Array} array of plain params
     */
    ABICoder.prototype.decodeParameters = function (outputs, bytes) {
        if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {
            throw new Error('Returned values aren\'t valid, did it run Out of Gas?');
        }
    
        var res = ethersAbiCoder.decode(this.mapTypes(outputs), '0x' + bytes.replace(/0x/i, ''));
        var returnValue = new Result();
        returnValue.__length__ = 0;
    
        outputs.forEach(function (output, i) {
            var decodedValue = res[returnValue.__length__];
            decodedValue = (decodedValue === '0x') ? null : decodedValue;
    
            returnValue[i] = decodedValue;
    
            if (_.isObject(output) && output.name) {
                returnValue[output.name] = decodedValue;
            }
    
            returnValue.__length__++;
        });
    
        return returnValue;
    };
    
    /**
     * Decodes events non- and indexed parameters.
     *
     * @method decodeLog
     * @param {Object} inputs
     * @param {String} data
     * @param {Array} topics
     * @return {Array} array of plain params
     */
    ABICoder.prototype.decodeLog = function (inputs, data, topics) {
        var _this = this;
        topics = _.isArray(topics) ? topics : [topics];
    
        data = data || '';
    
        var notIndexedInputs = [];
        var indexedParams = [];
        var topicCount = 0;
    
        // TODO check for anonymous logs?
    
        inputs.forEach(function (input, i) {
            if (input.indexed) {
                indexedParams[i] = (['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {
                    return input.type.indexOf(staticType) !== -1;
                })) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];
                topicCount++;
            } else {
                notIndexedInputs[i] = input;
            }
        });
    
    
        var nonIndexedData = data;
        var notIndexedParams = (nonIndexedData) ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];
    
        var returnValue = new Result();
        returnValue.__length__ = 0;
    
    
        inputs.forEach(function (res, i) {
            returnValue[i] = (res.type === 'string') ? '' : null;
    
            if (typeof notIndexedParams[i] !== 'undefined') {
                returnValue[i] = notIndexedParams[i];
            }
            if (typeof indexedParams[i] !== 'undefined') {
                returnValue[i] = indexedParams[i];
            }
    
            if (res.name) {
                returnValue[res.name] = returnValue[i];
            }
    
            returnValue.__length__++;
        });
    
        return returnValue;
    };
    
    var coder = new ABICoder();
    
    module.exports = coder;
    
    },{"ethers/utils/abi-coder":324,"underscore":297,"web3-utils":355}],335:[function(require,module,exports){
    (function (process){
    exports = module.exports = SemVer
    
    var debug
    /* istanbul ignore next */
    if (typeof process === 'object' &&
        process.env &&
        process.env.NODE_DEBUG &&
        /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function () {
        var args = Array.prototype.slice.call(arguments, 0)
        args.unshift('SEMVER')
        console.log.apply(console, args)
      }
    } else {
      debug = function () {}
    }
    
    // Note: this is the semver.org version of the spec that it implements
    // Not necessarily the package version of this code.
    exports.SEMVER_SPEC_VERSION = '2.0.0'
    
    var MAX_LENGTH = 256
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
      /* istanbul ignore next */ 9007199254740991
    
    // Max safe segment length for coercion.
    var MAX_SAFE_COMPONENT_LENGTH = 16
    
    // The actual regexps go on exports.re
    var re = exports.re = []
    var src = exports.src = []
    var R = 0
    
    // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.
    
    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.
    
    var NUMERICIDENTIFIER = R++
    src[NUMERICIDENTIFIER] = '0|[1-9]\\d*'
    var NUMERICIDENTIFIERLOOSE = R++
    src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'
    
    // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.
    
    var NONNUMERICIDENTIFIER = R++
    src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'
    
    // ## Main Version
    // Three dot-separated numeric identifiers.
    
    var MAINVERSION = R++
    src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                       '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                       '(' + src[NUMERICIDENTIFIER] + ')'
    
    var MAINVERSIONLOOSE = R++
    src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                            '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                            '(' + src[NUMERICIDENTIFIERLOOSE] + ')'
    
    // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.
    
    var PRERELEASEIDENTIFIER = R++
    src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                                '|' + src[NONNUMERICIDENTIFIER] + ')'
    
    var PRERELEASEIDENTIFIERLOOSE = R++
    src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                     '|' + src[NONNUMERICIDENTIFIER] + ')'
    
    // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.
    
    var PRERELEASE = R++
    src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                      '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))'
    
    var PRERELEASELOOSE = R++
    src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                           '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'
    
    // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.
    
    var BUILDIDENTIFIER = R++
    src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'
    
    // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.
    
    var BUILD = R++
    src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
                 '(?:\\.' + src[BUILDIDENTIFIER] + ')*))'
    
    // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.
    
    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.
    
    var FULL = R++
    var FULLPLAIN = 'v?' + src[MAINVERSION] +
                    src[PRERELEASE] + '?' +
                    src[BUILD] + '?'
    
    src[FULL] = '^' + FULLPLAIN + '$'
    
    // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.
    var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                     src[PRERELEASELOOSE] + '?' +
                     src[BUILD] + '?'
    
    var LOOSE = R++
    src[LOOSE] = '^' + LOOSEPLAIN + '$'
    
    var GTLT = R++
    src[GTLT] = '((?:<|>)?=?)'
    
    // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.
    var XRANGEIDENTIFIERLOOSE = R++
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*'
    var XRANGEIDENTIFIER = R++
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*'
    
    var XRANGEPLAIN = R++
    src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                       '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                       '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                       '(?:' + src[PRERELEASE] + ')?' +
                       src[BUILD] + '?' +
                       ')?)?'
    
    var XRANGEPLAINLOOSE = R++
    src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                            '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                            '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                            '(?:' + src[PRERELEASELOOSE] + ')?' +
                            src[BUILD] + '?' +
                            ')?)?'
    
    var XRANGE = R++
    src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$'
    var XRANGELOOSE = R++
    src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$'
    
    // Coercion.
    // Extract anything that could conceivably be a part of a valid semver
    var COERCE = R++
    src[COERCE] = '(^|[^\\d])' +
                  '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
                  '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
                  '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
                  '(?:$|[^\\d])'
    var COERCERTL = R++
    re[COERCERTL] = new RegExp(src[COERCE], 'g')
    
    // Tilde ranges.
    // Meaning is "reasonably at or greater than"
    var LONETILDE = R++
    src[LONETILDE] = '(?:~>?)'
    
    var TILDETRIM = R++
    src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+'
    re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g')
    var tildeTrimReplace = '$1~'
    
    var TILDE = R++
    src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$'
    var TILDELOOSE = R++
    src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'
    
    // Caret ranges.
    // Meaning is "at least and backwards compatible with"
    var LONECARET = R++
    src[LONECARET] = '(?:\\^)'
    
    var CARETTRIM = R++
    src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+'
    re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g')
    var caretTrimReplace = '$1^'
    
    var CARET = R++
    src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$'
    var CARETLOOSE = R++
    src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'
    
    // A simple gt/lt/eq thing, or just "" to indicate "any version"
    var COMPARATORLOOSE = R++
    src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$'
    var COMPARATOR = R++
    src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$'
    
    // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`
    var COMPARATORTRIM = R++
    src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                          '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'
    
    // this one has to use the /g flag
    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g')
    var comparatorTrimReplace = '$1$2$3'
    
    // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.
    var HYPHENRANGE = R++
    src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                       '\\s+-\\s+' +
                       '(' + src[XRANGEPLAIN] + ')' +
                       '\\s*$'
    
    var HYPHENRANGELOOSE = R++
    src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                            '\\s+-\\s+' +
                            '(' + src[XRANGEPLAINLOOSE] + ')' +
                            '\\s*$'
    
    // Star ranges basically just allow anything at all.
    var STAR = R++
    src[STAR] = '(<|>)?=?\\s*\\*'
    
    // Compile to actual regexp objects.
    // All are flag-free, unless they were created above with a flag.
    for (var i = 0; i < R; i++) {
      debug(i, src[i])
      if (!re[i]) {
        re[i] = new RegExp(src[i])
      }
    }
    
    exports.parse = parse
    function parse (version, options) {
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        }
      }
    
      if (version instanceof SemVer) {
        return version
      }
    
      if (typeof version !== 'string') {
        return null
      }
    
      if (version.length > MAX_LENGTH) {
        return null
      }
    
      var r = options.loose ? re[LOOSE] : re[FULL]
      if (!r.test(version)) {
        return null
      }
    
      try {
        return new SemVer(version, options)
      } catch (er) {
        return null
      }
    }
    
    exports.valid = valid
    function valid (version, options) {
      var v = parse(version, options)
      return v ? v.version : null
    }
    
    exports.clean = clean
    function clean (version, options) {
      var s = parse(version.trim().replace(/^[=v]+/, ''), options)
      return s ? s.version : null
    }
    
    exports.SemVer = SemVer
    
    function SemVer (version, options) {
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        }
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version
        } else {
          version = version.version
        }
      } else if (typeof version !== 'string') {
        throw new TypeError('Invalid Version: ' + version)
      }
    
      if (version.length > MAX_LENGTH) {
        throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
      }
    
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options)
      }
    
      debug('SemVer', version, options)
      this.options = options
      this.loose = !!options.loose
    
      var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL])
    
      if (!m) {
        throw new TypeError('Invalid Version: ' + version)
      }
    
      this.raw = version
    
      // these are actually numbers
      this.major = +m[1]
      this.minor = +m[2]
      this.patch = +m[3]
    
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError('Invalid major version')
      }
    
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError('Invalid minor version')
      }
    
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError('Invalid patch version')
      }
    
      // numberify any prerelease numeric ids
      if (!m[4]) {
        this.prerelease = []
      } else {
        this.prerelease = m[4].split('.').map(function (id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num
            }
          }
          return id
        })
      }
    
      this.build = m[5] ? m[5].split('.') : []
      this.format()
    }
    
    SemVer.prototype.format = function () {
      this.version = this.major + '.' + this.minor + '.' + this.patch
      if (this.prerelease.length) {
        this.version += '-' + this.prerelease.join('.')
      }
      return this.version
    }
    
    SemVer.prototype.toString = function () {
      return this.version
    }
    
    SemVer.prototype.compare = function (other) {
      debug('SemVer.compare', this.version, this.options, other)
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }
    
      return this.compareMain(other) || this.comparePre(other)
    }
    
    SemVer.prototype.compareMain = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }
    
      return compareIdentifiers(this.major, other.major) ||
             compareIdentifiers(this.minor, other.minor) ||
             compareIdentifiers(this.patch, other.patch)
    }
    
    SemVer.prototype.comparePre = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }
    
      // NOT having a prerelease is > having one
      if (this.prerelease.length && !other.prerelease.length) {
        return -1
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0
      }
    
      var i = 0
      do {
        var a = this.prerelease[i]
        var b = other.prerelease[i]
        debug('prerelease compare', i, a, b)
        if (a === undefined && b === undefined) {
          return 0
        } else if (b === undefined) {
          return 1
        } else if (a === undefined) {
          return -1
        } else if (a === b) {
          continue
        } else {
          return compareIdentifiers(a, b)
        }
      } while (++i)
    }
    
    SemVer.prototype.compareBuild = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }
    
      var i = 0
      do {
        var a = this.build[i]
        var b = other.build[i]
        debug('prerelease compare', i, a, b)
        if (a === undefined && b === undefined) {
          return 0
        } else if (b === undefined) {
          return 1
        } else if (a === undefined) {
          return -1
        } else if (a === b) {
          continue
        } else {
          return compareIdentifiers(a, b)
        }
      } while (++i)
    }
    
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    SemVer.prototype.inc = function (release, identifier) {
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0
          this.patch = 0
          this.minor = 0
          this.major++
          this.inc('pre', identifier)
          break
        case 'preminor':
          this.prerelease.length = 0
          this.patch = 0
          this.minor++
          this.inc('pre', identifier)
          break
        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0
          this.inc('patch', identifier)
          this.inc('pre', identifier)
          break
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.
        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier)
          }
          this.inc('pre', identifier)
          break
    
        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (this.minor !== 0 ||
              this.patch !== 0 ||
              this.prerelease.length === 0) {
            this.major++
          }
          this.minor = 0
          this.patch = 0
          this.prerelease = []
          break
        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++
          }
          this.patch = 0
          this.prerelease = []
          break
        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++
          }
          this.prerelease = []
          break
        // This probably shouldn't be used publicly.
        // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
        case 'pre':
          if (this.prerelease.length === 0) {
            this.prerelease = [0]
          } else {
            var i = this.prerelease.length
            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++
                i = -2
              }
            }
            if (i === -1) {
              // didn't increment anything
              this.prerelease.push(0)
            }
          }
          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0]
              }
            } else {
              this.prerelease = [identifier, 0]
            }
          }
          break
    
        default:
          throw new Error('invalid increment argument: ' + release)
      }
      this.format()
      this.raw = this.version
      return this
    }
    
    exports.inc = inc
    function inc (version, release, loose, identifier) {
      if (typeof (loose) === 'string') {
        identifier = loose
        loose = undefined
      }
    
      try {
        return new SemVer(version, loose).inc(release, identifier).version
      } catch (er) {
        return null
      }
    }
    
    exports.diff = diff
    function diff (version1, version2) {
      if (eq(version1, version2)) {
        return null
      } else {
        var v1 = parse(version1)
        var v2 = parse(version2)
        var prefix = ''
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = 'pre'
          var defaultResult = 'prerelease'
        }
        for (var key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return prefix + key
            }
          }
        }
        return defaultResult // may be undefined
      }
    }
    
    exports.compareIdentifiers = compareIdentifiers
    
    var numeric = /^[0-9]+$/
    function compareIdentifiers (a, b) {
      var anum = numeric.test(a)
      var bnum = numeric.test(b)
    
      if (anum && bnum) {
        a = +a
        b = +b
      }
    
      return a === b ? 0
        : (anum && !bnum) ? -1
        : (bnum && !anum) ? 1
        : a < b ? -1
        : 1
    }
    
    exports.rcompareIdentifiers = rcompareIdentifiers
    function rcompareIdentifiers (a, b) {
      return compareIdentifiers(b, a)
    }
    
    exports.major = major
    function major (a, loose) {
      return new SemVer(a, loose).major
    }
    
    exports.minor = minor
    function minor (a, loose) {
      return new SemVer(a, loose).minor
    }
    
    exports.patch = patch
    function patch (a, loose) {
      return new SemVer(a, loose).patch
    }
    
    exports.compare = compare
    function compare (a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose))
    }
    
    exports.compareLoose = compareLoose
    function compareLoose (a, b) {
      return compare(a, b, true)
    }
    
    exports.compareBuild = compareBuild
    function compareBuild (a, b, loose) {
      var versionA = new SemVer(a, loose)
      var versionB = new SemVer(b, loose)
      return versionA.compare(versionB) || versionA.compareBuild(versionB)
    }
    
    exports.rcompare = rcompare
    function rcompare (a, b, loose) {
      return compare(b, a, loose)
    }
    
    exports.sort = sort
    function sort (list, loose) {
      return list.sort(function (a, b) {
        return exports.compareBuild(a, b, loose)
      })
    }
    
    exports.rsort = rsort
    function rsort (list, loose) {
      return list.sort(function (a, b) {
        return exports.compareBuild(b, a, loose)
      })
    }
    
    exports.gt = gt
    function gt (a, b, loose) {
      return compare(a, b, loose) > 0
    }
    
    exports.lt = lt
    function lt (a, b, loose) {
      return compare(a, b, loose) < 0
    }
    
    exports.eq = eq
    function eq (a, b, loose) {
      return compare(a, b, loose) === 0
    }
    
    exports.neq = neq
    function neq (a, b, loose) {
      return compare(a, b, loose) !== 0
    }
    
    exports.gte = gte
    function gte (a, b, loose) {
      return compare(a, b, loose) >= 0
    }
    
    exports.lte = lte
    function lte (a, b, loose) {
      return compare(a, b, loose) <= 0
    }
    
    exports.cmp = cmp
    function cmp (a, op, b, loose) {
      switch (op) {
        case '===':
          if (typeof a === 'object')
            a = a.version
          if (typeof b === 'object')
            b = b.version
          return a === b
    
        case '!==':
          if (typeof a === 'object')
            a = a.version
          if (typeof b === 'object')
            b = b.version
          return a !== b
    
        case '':
        case '=':
        case '==':
          return eq(a, b, loose)
    
        case '!=':
          return neq(a, b, loose)
    
        case '>':
          return gt(a, b, loose)
    
        case '>=':
          return gte(a, b, loose)
    
        case '<':
          return lt(a, b, loose)
    
        case '<=':
          return lte(a, b, loose)
    
        default:
          throw new TypeError('Invalid operator: ' + op)
      }
    }
    
    exports.Comparator = Comparator
    function Comparator (comp, options) {
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        }
      }
    
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp
        } else {
          comp = comp.value
        }
      }
    
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options)
      }
    
      debug('comparator', comp, options)
      this.options = options
      this.loose = !!options.loose
      this.parse(comp)
    
      if (this.semver === ANY) {
        this.value = ''
      } else {
        this.value = this.operator + this.semver.version
      }
    
      debug('comp', this)
    }
    
    var ANY = {}
    Comparator.prototype.parse = function (comp) {
      var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
      var m = comp.match(r)
    
      if (!m) {
        throw new TypeError('Invalid comparator: ' + comp)
      }
    
      this.operator = m[1] !== undefined ? m[1] : ''
      if (this.operator === '=') {
        this.operator = ''
      }
    
      // if it literally is just '>' or '' then allow anything.
      if (!m[2]) {
        this.semver = ANY
      } else {
        this.semver = new SemVer(m[2], this.options.loose)
      }
    }
    
    Comparator.prototype.toString = function () {
      return this.value
    }
    
    Comparator.prototype.test = function (version) {
      debug('Comparator.test', version, this.options.loose)
    
      if (this.semver === ANY || version === ANY) {
        return true
      }
    
      if (typeof version === 'string') {
        try {
          version = new SemVer(version, this.options)
        } catch (er) {
          return false
        }
      }
    
      return cmp(version, this.operator, this.semver, this.options)
    }
    
    Comparator.prototype.intersects = function (comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError('a Comparator is required')
      }
    
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        }
      }
    
      var rangeTmp
    
      if (this.operator === '') {
        if (this.value === '') {
          return true
        }
        rangeTmp = new Range(comp.value, options)
        return satisfies(this.value, rangeTmp, options)
      } else if (comp.operator === '') {
        if (comp.value === '') {
          return true
        }
        rangeTmp = new Range(this.value, options)
        return satisfies(comp.semver, rangeTmp, options)
      }
    
      var sameDirectionIncreasing =
        (this.operator === '>=' || this.operator === '>') &&
        (comp.operator === '>=' || comp.operator === '>')
      var sameDirectionDecreasing =
        (this.operator === '<=' || this.operator === '<') &&
        (comp.operator === '<=' || comp.operator === '<')
      var sameSemVer = this.semver.version === comp.semver.version
      var differentDirectionsInclusive =
        (this.operator === '>=' || this.operator === '<=') &&
        (comp.operator === '>=' || comp.operator === '<=')
      var oppositeDirectionsLessThan =
        cmp(this.semver, '<', comp.semver, options) &&
        ((this.operator === '>=' || this.operator === '>') &&
        (comp.operator === '<=' || comp.operator === '<'))
      var oppositeDirectionsGreaterThan =
        cmp(this.semver, '>', comp.semver, options) &&
        ((this.operator === '<=' || this.operator === '<') &&
        (comp.operator === '>=' || comp.operator === '>'))
    
      return sameDirectionIncreasing || sameDirectionDecreasing ||
        (sameSemVer && differentDirectionsInclusive) ||
        oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
    }
    
    exports.Range = Range
    function Range (range, options) {
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        }
      }
    
      if (range instanceof Range) {
        if (range.loose === !!options.loose &&
            range.includePrerelease === !!options.includePrerelease) {
          return range
        } else {
          return new Range(range.raw, options)
        }
      }
    
      if (range instanceof Comparator) {
        return new Range(range.value, options)
      }
    
      if (!(this instanceof Range)) {
        return new Range(range, options)
      }
    
      this.options = options
      this.loose = !!options.loose
      this.includePrerelease = !!options.includePrerelease
    
      // First, split based on boolean or ||
      this.raw = range
      this.set = range.split(/\s*\|\|\s*/).map(function (range) {
        return this.parseRange(range.trim())
      }, this).filter(function (c) {
        // throw out any that are not relevant for whatever reason
        return c.length
      })
    
      if (!this.set.length) {
        throw new TypeError('Invalid SemVer Range: ' + range)
      }
    
      this.format()
    }
    
    Range.prototype.format = function () {
      this.range = this.set.map(function (comps) {
        return comps.join(' ').trim()
      }).join('||').trim()
      return this.range
    }
    
    Range.prototype.toString = function () {
      return this.range
    }
    
    Range.prototype.parseRange = function (range) {
      var loose = this.options.loose
      range = range.trim()
      // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
      var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE]
      range = range.replace(hr, hyphenReplace)
      debug('hyphen replace', range)
      // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
      range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace)
      debug('comparator trim', range, re[COMPARATORTRIM])
    
      // `~ 1.2.3` => `~1.2.3`
      range = range.replace(re[TILDETRIM], tildeTrimReplace)
    
      // `^ 1.2.3` => `^1.2.3`
      range = range.replace(re[CARETTRIM], caretTrimReplace)
    
      // normalize spaces
      range = range.split(/\s+/).join(' ')
    
      // At this point, the range is completely trimmed and
      // ready to be split into comparators.
    
      var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
      var set = range.split(' ').map(function (comp) {
        return parseComparator(comp, this.options)
      }, this).join(' ').split(/\s+/)
      if (this.options.loose) {
        // in loose mode, throw out any that are not valid comparators
        set = set.filter(function (comp) {
          return !!comp.match(compRe)
        })
      }
      set = set.map(function (comp) {
        return new Comparator(comp, this.options)
      }, this)
    
      return set
    }
    
    Range.prototype.intersects = function (range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError('a Range is required')
      }
    
      return this.set.some(function (thisComparators) {
        return (
          isSatisfiable(thisComparators, options) &&
          range.set.some(function (rangeComparators) {
            return (
              isSatisfiable(rangeComparators, options) &&
              thisComparators.every(function (thisComparator) {
                return rangeComparators.every(function (rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options)
                })
              })
            )
          })
        )
      })
    }
    
    // take a set of comparators and determine whether there
    // exists a version which can satisfy it
    function isSatisfiable (comparators, options) {
      var result = true
      var remainingComparators = comparators.slice()
      var testComparator = remainingComparators.pop()
    
      while (result && remainingComparators.length) {
        result = remainingComparators.every(function (otherComparator) {
          return testComparator.intersects(otherComparator, options)
        })
    
        testComparator = remainingComparators.pop()
      }
    
      return result
    }
    
    // Mostly just for testing and legacy API reasons
    exports.toComparators = toComparators
    function toComparators (range, options) {
      return new Range(range, options).set.map(function (comp) {
        return comp.map(function (c) {
          return c.value
        }).join(' ').trim().split(' ')
      })
    }
    
    // comprised of xranges, tildes, stars, and gtlt's at this point.
    // already replaced the hyphen ranges
    // turn into a set of JUST comparators.
    function parseComparator (comp, options) {
      debug('comp', comp, options)
      comp = replaceCarets(comp, options)
      debug('caret', comp)
      comp = replaceTildes(comp, options)
      debug('tildes', comp)
      comp = replaceXRanges(comp, options)
      debug('xrange', comp)
      comp = replaceStars(comp, options)
      debug('stars', comp)
      return comp
    }
    
    function isX (id) {
      return !id || id.toLowerCase() === 'x' || id === '*'
    }
    
    // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
    function replaceTildes (comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceTilde(comp, options)
      }).join(' ')
    }
    
    function replaceTilde (comp, options) {
      var r = options.loose ? re[TILDELOOSE] : re[TILDE]
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('tilde', comp, _, M, m, p, pr)
        var ret
    
        if (isX(M)) {
          ret = ''
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
        } else if (isX(p)) {
          // ~1.2 == >=1.2.0 <1.3.0
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
        } else if (pr) {
          debug('replaceTilde pr', pr)
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + (+m + 1) + '.0'
        } else {
          // ~1.2.3 == >=1.2.3 <1.3.0
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
    
        debug('tilde return', ret)
        return ret
      })
    }
    
    // ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
    // ^1.2.3 --> >=1.2.3 <2.0.0
    // ^1.2.0 --> >=1.2.0 <2.0.0
    function replaceCarets (comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceCaret(comp, options)
      }).join(' ')
    }
    
    function replaceCaret (comp, options) {
      debug('caret', comp, options)
      var r = options.loose ? re[CARETLOOSE] : re[CARET]
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('caret', comp, _, M, m, p, pr)
        var ret
    
        if (isX(M)) {
          ret = ''
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
        } else if (isX(p)) {
          if (M === '0') {
            ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
          } else {
            ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'
          }
        } else if (pr) {
          debug('replaceCaret pr', pr)
          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                    ' <' + M + '.' + m + '.' + (+p + 1)
            } else {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                    ' <' + M + '.' + (+m + 1) + '.0'
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                  ' <' + (+M + 1) + '.0.0'
          }
        } else {
          debug('no pr')
          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p +
                    ' <' + M + '.' + m + '.' + (+p + 1)
            } else {
              ret = '>=' + M + '.' + m + '.' + p +
                    ' <' + M + '.' + (+m + 1) + '.0'
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p +
                  ' <' + (+M + 1) + '.0.0'
          }
        }
    
        debug('caret return', ret)
        return ret
      })
    }
    
    function replaceXRanges (comp, options) {
      debug('replaceXRanges', comp, options)
      return comp.split(/\s+/).map(function (comp) {
        return replaceXRange(comp, options)
      }).join(' ')
    }
    
    function replaceXRange (comp, options) {
      comp = comp.trim()
      var r = options.loose ? re[XRANGELOOSE] : re[XRANGE]
      return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
        debug('xRange', comp, ret, gtlt, M, m, p, pr)
        var xM = isX(M)
        var xm = xM || isX(m)
        var xp = xm || isX(p)
        var anyX = xp
    
        if (gtlt === '=' && anyX) {
          gtlt = ''
        }
    
        // if we're including prereleases in the match, then we need
        // to fix this to -0, the lowest possible prerelease value
        pr = options.includePrerelease ? '-0' : ''
    
        if (xM) {
          if (gtlt === '>' || gtlt === '<') {
            // nothing is allowed
            ret = '<0.0.0-0'
          } else {
            // nothing is forbidden
            ret = '*'
          }
        } else if (gtlt && anyX) {
          // we know patch is an x, because we have any x at all.
          // replace X with 0
          if (xm) {
            m = 0
          }
          p = 0
    
          if (gtlt === '>') {
            // >1 => >=2.0.0
            // >1.2 => >=1.3.0
            // >1.2.3 => >= 1.2.4
            gtlt = '>='
            if (xm) {
              M = +M + 1
              m = 0
              p = 0
            } else {
              m = +m + 1
              p = 0
            }
          } else if (gtlt === '<=') {
            // <=0.7.x is actually <0.8.0, since any 0.7.x should
            // pass.  Similarly, <=7.x is actually <8.0.0, etc.
            gtlt = '<'
            if (xm) {
              M = +M + 1
            } else {
              m = +m + 1
            }
          }
    
          ret = gtlt + M + '.' + m + '.' + p + pr
        } else if (xm) {
          ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr
        } else if (xp) {
          ret = '>=' + M + '.' + m + '.0' + pr +
            ' <' + M + '.' + (+m + 1) + '.0' + pr
        }
    
        debug('xRange return', ret)
    
        return ret
      })
    }
    
    // Because * is AND-ed with everything else in the comparator,
    // and '' means "any version", just remove the *s entirely.
    function replaceStars (comp, options) {
      debug('replaceStars', comp, options)
      // Looseness is ignored here.  star is always as loose as it gets!
      return comp.trim().replace(re[STAR], '')
    }
    
    // This function is passed to string.replace(re[HYPHENRANGE])
    // M, m, patch, prerelease, build
    // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
    // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
    // 1.2 - 3.4 => >=1.2.0 <3.5.0
    function hyphenReplace ($0,
      from, fM, fm, fp, fpr, fb,
      to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = ''
      } else if (isX(fm)) {
        from = '>=' + fM + '.0.0'
      } else if (isX(fp)) {
        from = '>=' + fM + '.' + fm + '.0'
      } else {
        from = '>=' + from
      }
    
      if (isX(tM)) {
        to = ''
      } else if (isX(tm)) {
        to = '<' + (+tM + 1) + '.0.0'
      } else if (isX(tp)) {
        to = '<' + tM + '.' + (+tm + 1) + '.0'
      } else if (tpr) {
        to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr
      } else {
        to = '<=' + to
      }
    
      return (from + ' ' + to).trim()
    }
    
    // if ANY of the sets match ALL of its comparators, then pass
    Range.prototype.test = function (version) {
      if (!version) {
        return false
      }
    
      if (typeof version === 'string') {
        try {
          version = new SemVer(version, this.options)
        } catch (er) {
          return false
        }
      }
    
      for (var i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true
        }
      }
      return false
    }
    
    function testSet (set, version, options) {
      for (var i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false
        }
      }
    
      if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for (i = 0; i < set.length; i++) {
          debug(set[i].semver)
          if (set[i].semver === ANY) {
            continue
          }
    
          if (set[i].semver.prerelease.length > 0) {
            var allowed = set[i].semver
            if (allowed.major === version.major &&
                allowed.minor === version.minor &&
                allowed.patch === version.patch) {
              return true
            }
          }
        }
    
        // Version has a -pre, but it's not one of the ones we like.
        return false
      }
    
      return true
    }
    
    exports.satisfies = satisfies
    function satisfies (version, range, options) {
      try {
        range = new Range(range, options)
      } catch (er) {
        return false
      }
      return range.test(version)
    }
    
    exports.maxSatisfying = maxSatisfying
    function maxSatisfying (versions, range, options) {
      var max = null
      var maxSV = null
      try {
        var rangeObj = new Range(range, options)
      } catch (er) {
        return null
      }
      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!max || maxSV.compare(v) === -1) {
            // compare(max, v, true)
            max = v
            maxSV = new SemVer(max, options)
          }
        }
      })
      return max
    }
    
    exports.minSatisfying = minSatisfying
    function minSatisfying (versions, range, options) {
      var min = null
      var minSV = null
      try {
        var rangeObj = new Range(range, options)
      } catch (er) {
        return null
      }
      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!min || minSV.compare(v) === 1) {
            // compare(min, v, true)
            min = v
            minSV = new SemVer(min, options)
          }
        }
      })
      return min
    }
    
    exports.minVersion = minVersion
    function minVersion (range, loose) {
      range = new Range(range, loose)
    
      var minver = new SemVer('0.0.0')
      if (range.test(minver)) {
        return minver
      }
    
      minver = new SemVer('0.0.0-0')
      if (range.test(minver)) {
        return minver
      }
    
      minver = null
      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i]
    
        comparators.forEach(function (comparator) {
          // Clone to avoid manipulating the comparator's semver object.
          var compver = new SemVer(comparator.semver.version)
          switch (comparator.operator) {
            case '>':
              if (compver.prerelease.length === 0) {
                compver.patch++
              } else {
                compver.prerelease.push(0)
              }
              compver.raw = compver.format()
              /* fallthrough */
            case '':
            case '>=':
              if (!minver || gt(minver, compver)) {
                minver = compver
              }
              break
            case '<':
            case '<=':
              /* Ignore maximum versions */
              break
            /* istanbul ignore next */
            default:
              throw new Error('Unexpected operation: ' + comparator.operator)
          }
        })
      }
    
      if (minver && range.test(minver)) {
        return minver
      }
    
      return null
    }
    
    exports.validRange = validRange
    function validRange (range, options) {
      try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || '*'
      } catch (er) {
        return null
      }
    }
    
    // Determine if version is less than all the versions possible in the range
    exports.ltr = ltr
    function ltr (version, range, options) {
      return outside(version, range, '<', options)
    }
    
    // Determine if version is greater than all the versions possible in the range.
    exports.gtr = gtr
    function gtr (version, range, options) {
      return outside(version, range, '>', options)
    }
    
    exports.outside = outside
    function outside (version, range, hilo, options) {
      version = new SemVer(version, options)
      range = new Range(range, options)
    
      var gtfn, ltefn, ltfn, comp, ecomp
      switch (hilo) {
        case '>':
          gtfn = gt
          ltefn = lte
          ltfn = lt
          comp = '>'
          ecomp = '>='
          break
        case '<':
          gtfn = lt
          ltefn = gte
          ltfn = gt
          comp = '<'
          ecomp = '<='
          break
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"')
      }
    
      // If it satisifes the range it is not outside
      if (satisfies(version, range, options)) {
        return false
      }
    
      // From now on, variable terms are as if we're in "gtr" mode.
      // but note that everything is flipped for the "ltr" function.
    
      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i]
    
        var high = null
        var low = null
    
        comparators.forEach(function (comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator('>=0.0.0')
          }
          high = high || comparator
          low = low || comparator
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator
          }
        })
    
        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) {
          return false
        }
    
        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) &&
            ltefn(version, low.semver)) {
          return false
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false
        }
      }
      return true
    }
    
    exports.prerelease = prerelease
    function prerelease (version, options) {
      var parsed = parse(version, options)
      return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
    }
    
    exports.intersects = intersects
    function intersects (r1, r2, options) {
      r1 = new Range(r1, options)
      r2 = new Range(r2, options)
      return r1.intersects(r2)
    }
    
    exports.coerce = coerce
    function coerce (version, options) {
      if (version instanceof SemVer) {
        return version
      }
    
      if (typeof version === 'number') {
        version = String(version)
      }
    
      if (typeof version !== 'string') {
        return null
      }
    
      options = options || {}
    
      var match = null
      if (!options.rtl) {
        match = version.match(re[COERCE])
      } else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        var next
        while ((next = re[COERCERTL].exec(version)) &&
          (!match || match.index + match[0].length !== version.length)
        ) {
          if (!match ||
              next.index + next[0].length !== match.index + match[0].length) {
            match = next
          }
          re[COERCERTL].lastIndex = next.index + next[1].length + next[2].length
        }
        // leave it in a clean state
        re[COERCERTL].lastIndex = -1
      }
    
      if (match === null) {
        return null
      }
    
      return parse(match[2] +
        '.' + (match[3] || '0') +
        '.' + (match[4] || '0'), options)
    }
    
    }).call(this,require('_process'))
    },{"_process":231}],336:[function(require,module,exports){
    (function (global,Buffer){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file accounts.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var _ = require("underscore");
    var core = require('web3-core');
    var Method = require('web3-core-method');
    var Promise = require('any-promise');
    var Account = require("eth-lib/lib/account");
    var Hash = require("eth-lib/lib/hash");
    var RLP = require("eth-lib/lib/rlp");
    var Nat = require("eth-lib/lib/nat");
    var Bytes = require("eth-lib/lib/bytes");
    var cryp = (typeof global === 'undefined') ? require('crypto-browserify') : require('crypto');
    var scrypt = require('./scrypt');
    var uuid = require('uuid');
    var utils = require('web3-utils');
    var helpers = require('web3-core-helpers');
    
    var isNot = function(value) {
        return (_.isUndefined(value) || _.isNull(value));
    };
    
    var trimLeadingZero = function (hex) {
        while (hex && hex.startsWith('0x0')) {
            hex = '0x' + hex.slice(3);
        }
        return hex;
    };
    
    var makeEven = function (hex) {
        if(hex.length % 2 === 1) {
            hex = hex.replace('0x', '0x0');
        }
        return hex;
    };
    
    
    var Accounts = function Accounts() {
        var _this = this;
    
        // sets _requestmanager
        core.packageInit(this, arguments);
    
        // remove unecessary core functions
        delete this.BatchRequest;
        delete this.extend;
    
        var _ethereumCall = [
            new Method({
                name: 'getId',
                call: 'net_version',
                params: 0,
                outputFormatter: utils.hexToNumber
            }),
            new Method({
                name: 'getGasPrice',
                call: 'eth_gasPrice',
                params: 0
            }),
            new Method({
                name: 'getTransactionCount',
                call: 'eth_getTransactionCount',
                params: 2,
                inputFormatter: [function (address) {
                    if (utils.isAddress(address)) {
                        return address;
                    } else {
                        throw new Error('Address '+ address +' is not a valid address to get the "transactionCount".');
                    }
                }, function () { return 'latest'; }]
            })
        ];
        // attach methods to this._ethereumCall
        this._ethereumCall = {};
        _.each(_ethereumCall, function (method) {
            method.attachToObject(_this._ethereumCall);
            method.setRequestManager(_this._requestManager);
        });
    
    
        this.wallet = new Wallet(this);
    };
    
    Accounts.prototype._addAccountFunctions = function (account) {
        var _this = this;
    
        // add sign functions
        account.signTransaction = function signTransaction(tx, callback) {
            return _this.signTransaction(tx, account.privateKey, callback);
        };
        account.sign = function sign(data) {
            return _this.sign(data, account.privateKey);
        };
    
        account.encrypt = function encrypt(password, options) {
            return _this.encrypt(account.privateKey, password, options);
        };
    
    
        return account;
    };
    
    Accounts.prototype.create = function create(entropy) {
        return this._addAccountFunctions(Account.create(entropy || utils.randomHex(32)));
    };
    
    Accounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey) {
        return this._addAccountFunctions(Account.fromPrivate(privateKey));
    };
    
    Accounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {
        var _this = this,
            error = false,
            result;
    
        callback = callback || function () {};
    
        if (!tx) {
            error = new Error('No transaction object given!');
    
            callback(error);
            return Promise.reject(error);
        }
    
        function signed (tx) {
    
            if (!tx.gas && !tx.gasLimit) {
                error = new Error('"gas" is missing');
            }
    
            if (tx.nonce  < 0 ||
                tx.gas  < 0 ||
                tx.gasPrice  < 0 ||
                tx.chainId  < 0) {
                error = new Error('Gas, gasPrice, nonce or chainId is lower than 0');
            }
    
            if (error) {
                callback(error);
                return Promise.reject(error);
            }
    
            try {
                tx = helpers.formatters.inputCallFormatter(tx);
    
                var transaction = tx;
                transaction.to = tx.to || '0x';
                transaction.data = tx.data || '0x';
                transaction.value = tx.value || '0x';
                transaction.chainId = utils.numberToHex(tx.chainId);
    
                var rlpEncoded = RLP.encode([
                    Bytes.fromNat(transaction.nonce),
                    Bytes.fromNat(transaction.gasPrice),
                    Bytes.fromNat(transaction.gas),
                    transaction.to.toLowerCase(),
                    Bytes.fromNat(transaction.value),
                    transaction.data,
                    Bytes.fromNat(transaction.chainId || "0x1"),
                    "0x",
                    "0x"]);
    
    
                var hash = Hash.keccak256(rlpEncoded);
    
                var signature = Account.makeSigner(Nat.toNumber(transaction.chainId || "0x1") * 2 + 35)(Hash.keccak256(rlpEncoded), privateKey);
    
                var rawTx = RLP.decode(rlpEncoded).slice(0, 6).concat(Account.decodeSignature(signature));
    
                rawTx[6] = makeEven(trimLeadingZero(rawTx[6]));
                rawTx[7] = makeEven(trimLeadingZero(rawTx[7]));
                rawTx[8] = makeEven(trimLeadingZero(rawTx[8]));
    
                var rawTransaction = RLP.encode(rawTx);
    
                var values = RLP.decode(rawTransaction);
                result = {
                    messageHash: hash,
                    v: trimLeadingZero(values[6]),
                    r: trimLeadingZero(values[7]),
                    s: trimLeadingZero(values[8]),
                    rawTransaction: rawTransaction
                };
    
            } catch(e) {
                callback(e);
                return Promise.reject(e);
            }
    
            callback(null, result);
            return result;
        }
    
        // Resolve immediately if nonce, chainId and price are provided
        if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined) {
            return Promise.resolve(signed(tx));
        }
    
    
        // Otherwise, get the missing info from the Ethereum Node
        return Promise.all([
            isNot(tx.chainId) ? _this._ethereumCall.getId() : tx.chainId,
            isNot(tx.gasPrice) ? _this._ethereumCall.getGasPrice() : tx.gasPrice,
            isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce
        ]).then(function (args) {
            if (isNot(args[0]) || isNot(args[1]) || isNot(args[2])) {
                throw new Error('One of the values "chainId", "gasPrice", or "nonce" couldn\'t be fetched: '+ JSON.stringify(args));
            }
            return signed(_.extend(tx, {chainId: args[0], gasPrice: args[1], nonce: args[2]}));
        });
    };
    
    /* jshint ignore:start */
    Accounts.prototype.recoverTransaction = function recoverTransaction(rawTx) {
        var values = RLP.decode(rawTx);
        var signature = Account.encodeSignature(values.slice(6,9));
        var recovery = Bytes.toNumber(values[6]);
        var extraData = recovery < 35 ? [] : [Bytes.fromNumber((recovery - 35) >> 1), "0x", "0x"];
        var signingData = values.slice(0,6).concat(extraData);
        var signingDataHex = RLP.encode(signingData);
        return Account.recover(Hash.keccak256(signingDataHex), signature);
    };
    /* jshint ignore:end */
    
    Accounts.prototype.hashMessage = function hashMessage(data) {
        var message = utils.isHexStrict(data) ? utils.hexToBytes(data) : data;
        var messageBuffer = Buffer.from(message);
        var preamble = "\x19Ethereum Signed Message:\n" + message.length;
        var preambleBuffer = Buffer.from(preamble);
        var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);
        return Hash.keccak256s(ethMessage);
    };
    
    Accounts.prototype.sign = function sign(data, privateKey) {
        var hash = this.hashMessage(data);
        var signature = Account.sign(hash, privateKey);
        var vrs = Account.decodeSignature(signature);
        return {
            message: data,
            messageHash: hash,
            v: vrs[0],
            r: vrs[1],
            s: vrs[2],
            signature: signature
        };
    };
    
    Accounts.prototype.recover = function recover(message, signature, preFixed) {
        var args = [].slice.apply(arguments);
    
    
        if (_.isObject(message)) {
            return this.recover(message.messageHash, Account.encodeSignature([message.v, message.r, message.s]), true);
        }
    
        if (!preFixed) {
            message = this.hashMessage(message);
        }
    
        if (args.length >= 4) {
            preFixed = args.slice(-1)[0];
            preFixed = _.isBoolean(preFixed) ? !!preFixed : false;
    
            return this.recover(message, Account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s
        }
        return Account.recover(message, signature);
    };
    
    // Taken from https://github.com/ethereumjs/ethereumjs-wallet
    Accounts.prototype.decrypt = function (v3Keystore, password, nonStrict) {
        /* jshint maxcomplexity: 10 */
    
        if(!_.isString(password)) {
            throw new Error('No password given.');
        }
    
        var json = (_.isObject(v3Keystore)) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);
    
        if (json.version !== 3) {
            throw new Error('Not a valid V3 wallet');
        }
    
        var derivedKey;
        var kdfparams;
        if (json.crypto.kdf === 'scrypt') {
            kdfparams = json.crypto.kdfparams;
    
            // FIXME: support progress reporting callback
            derivedKey = scrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        } else if (json.crypto.kdf === 'pbkdf2') {
            kdfparams = json.crypto.kdfparams;
    
            if (kdfparams.prf !== 'hmac-sha256') {
                throw new Error('Unsupported parameters to PBKDF2');
            }
    
            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
        } else {
            throw new Error('Unsupported key derivation scheme');
        }
    
        var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');
    
        var mac = utils.sha3(Buffer.concat([ derivedKey.slice(16, 32), ciphertext ])).replace('0x','');
        if (mac !== json.crypto.mac) {
            throw new Error('Key derivation failed - possibly wrong password');
        }
    
        var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));
        var seed = '0x'+ Buffer.concat([ decipher.update(ciphertext), decipher.final() ]).toString('hex');
    
        return this.privateKeyToAccount(seed);
    };
    
    Accounts.prototype.encrypt = function (privateKey, password, options) {
        /* jshint maxcomplexity: 20 */
        var account = this.privateKeyToAccount(privateKey);
    
        options = options || {};
        var salt = options.salt || cryp.randomBytes(32);
        var iv = options.iv || cryp.randomBytes(16);
    
        var derivedKey;
        var kdf = options.kdf || 'scrypt';
        var kdfparams = {
            dklen: options.dklen || 32,
            salt: salt.toString('hex')
        };
    
        if (kdf === 'pbkdf2') {
            kdfparams.c = options.c || 262144;
            kdfparams.prf = 'hmac-sha256';
            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
        } else if (kdf === 'scrypt') {
            // FIXME: support progress reporting callback
            kdfparams.n = options.n || 8192; // 2048 4096 8192 16384
            kdfparams.r = options.r || 8;
            kdfparams.p = options.p || 1;
            derivedKey = scrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        } else {
            throw new Error('Unsupported kdf');
        }
    
        var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);
        if (!cipher) {
            throw new Error('Unsupported cipher');
        }
    
        var ciphertext = Buffer.concat([ cipher.update(Buffer.from(account.privateKey.replace('0x',''), 'hex')), cipher.final() ]);
    
        var mac = utils.sha3(Buffer.concat([ derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex') ])).replace('0x','');
    
        return {
            version: 3,
            id: uuid.v4({ random: options.uuid || cryp.randomBytes(16) }),
            address: account.address.toLowerCase().replace('0x',''),
            crypto: {
                ciphertext: ciphertext.toString('hex'),
                cipherparams: {
                    iv: iv.toString('hex')
                },
                cipher: options.cipher || 'aes-128-ctr',
                kdf: kdf,
                kdfparams: kdfparams,
                mac: mac.toString('hex')
            }
        };
    };
    
    
    // Note: this is trying to follow closely the specs on
    // http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html
    
    function Wallet(accounts) {
        this._accounts = accounts;
        this.length = 0;
        this.defaultKeyName = "web3js_wallet";
    }
    
    Wallet.prototype._findSafeIndex = function (pointer) {
        pointer = pointer || 0;
        if (_.has(this, pointer)) {
            return this._findSafeIndex(pointer + 1);
        } else {
            return pointer;
        }
    };
    
    Wallet.prototype._currentIndexes = function () {
        var keys = Object.keys(this);
        var indexes = keys
            .map(function(key) { return parseInt(key); })
            .filter(function(n) { return (n < 9e20); });
    
        return indexes;
    };
    
    Wallet.prototype.create = function (numberOfAccounts, entropy) {
        for (var i = 0; i < numberOfAccounts; ++i) {
            this.add(this._accounts.create(entropy).privateKey);
        }
        return this;
    };
    
    Wallet.prototype.add = function (account) {
    
        if (_.isString(account)) {
            account = this._accounts.privateKeyToAccount(account);
        }
        if (!this[account.address]) {
            account = this._accounts.privateKeyToAccount(account.privateKey);
            account.index = this._findSafeIndex();
    
            this[account.index] = account;
            this[account.address] = account;
            this[account.address.toLowerCase()] = account;
    
            this.length++;
    
            return account;
        } else {
            return this[account.address];
        }
    };
    
    Wallet.prototype.remove = function (addressOrIndex) {
        var account = this[addressOrIndex];
    
        if (account && account.address) {
            // address
            this[account.address].privateKey = null;
            delete this[account.address];
            // address lowercase
            this[account.address.toLowerCase()].privateKey = null;
            delete this[account.address.toLowerCase()];
            // index
            this[account.index].privateKey = null;
            delete this[account.index];
    
            this.length--;
    
            return true;
        } else {
            return false;
        }
    };
    
    Wallet.prototype.clear = function () {
        var _this = this;
        var indexes = this._currentIndexes();
    
        indexes.forEach(function(index) {
            _this.remove(index);
        });
    
        return this;
    };
    
    Wallet.prototype.encrypt = function (password, options) {
        var _this = this;
        var indexes = this._currentIndexes();
    
        var accounts = indexes.map(function(index) {
            return _this[index].encrypt(password, options);
        });
    
        return accounts;
    };
    
    
    Wallet.prototype.decrypt = function (encryptedWallet, password) {
        var _this = this;
    
        encryptedWallet.forEach(function (keystore) {
            var account = _this._accounts.decrypt(keystore, password);
    
            if (account) {
                _this.add(account);
            } else {
                throw new Error('Couldn\'t decrypt accounts. Password wrong?');
            }
        });
    
        return this;
    };
    
    Wallet.prototype.save = function (password, keyName) {
        localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));
    
        return true;
    };
    
    Wallet.prototype.load = function (password, keyName) {
        var keystore = localStorage.getItem(keyName || this.defaultKeyName);
    
        if (keystore) {
            try {
                keystore = JSON.parse(keystore);
            } catch(e) {
    
            }
        }
    
        return this.decrypt(keystore || [], password);
    };
    
    if (typeof localStorage === 'undefined') {
        delete Wallet.prototype.save;
        delete Wallet.prototype.load;
    }
    
    
    module.exports = Accounts;
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
    },{"./scrypt":337,"any-promise":42,"buffer":96,"crypto":106,"crypto-browserify":106,"eth-lib/lib/account":158,"eth-lib/lib/bytes":160,"eth-lib/lib/hash":161,"eth-lib/lib/nat":162,"eth-lib/lib/rlp":163,"underscore":297,"uuid":304,"web3-core":323,"web3-core-helpers":313,"web3-core-method":314,"web3-utils":355}],337:[function(require,module,exports){
    (function (process){
    var scryptsy = require('scryptsy');
    
    var scrypt;
    
    var isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
    if (isNode) {
        var NODE_MIN_VER_WITH_BUILTIN_SCRYPT = '10.5.0';
        var NODE_MIN_VER_INCOMPAT_SCRYPT_PKG = '12.0.0';
        var semver = require('semver');
        var useNodeBuiltin = isNode && semver.Range('>=' + NODE_MIN_VER_WITH_BUILTIN_SCRYPT).test(process.version);
    
        var tryScryptPkg = (function() {
            var scryptPkg;
            return function() {
                if (scryptPkg !== undefined) { return scryptPkg; }
                try {
                    scryptPkg = (function(m) { return require(m); })('scrypt');
                } catch (e) {
                    if (/was compiled against a different/.test(e.message)) {
                        throw e;
                    }
                    scryptPkg = null;
                }
                return scryptPkg;
            };
        })();
    
        var canImprove = function(nodeVer) {
            return 'can improve web3\'s peformance when running Node.js versions older than ' + nodeVer + ' by installing the (deprecated) scrypt package in your project';
        };
    
        if (useNodeBuiltin) {
            var crypto = require('crypto');
            var fallbackCount = 0;
            scrypt = function(key, salt, N, r, p, dkLen) {
                try {
                    return crypto.scryptSync(key, salt, dkLen, {N: N, r: r, p: p});
                } catch (e) {
                    if (/scrypt:memory limit exceeded/.test(e.message)) {
                        var scryptPkg = tryScryptPkg();
                        if (scryptPkg) {
                            return scryptPkg.hashSync(key, {N: N, r: r, p: p}, dkLen, salt);
                        }
                        fallbackCount += 1;
                        console.warn(
                            '\x1b[33m%s\x1b[0m',
                            'Memory limit exceeded for Node\'s built-in crypto.scrypt, falling back to scryptsy (times: ' + fallbackCount + '), if this happens frequently you ' + canImprove(NODE_MIN_VER_INCOMPAT_SCRYPT_PKG)
                        );
                        return scryptsy(key, salt, N, r, p, dkLen);
                    }
                    throw e;
                }
            };
        } else {
            var scryptPkg = tryScryptPkg();
            if (scryptPkg) {
                scrypt = function(key, salt, N, r, p, dkLen) {
                    return scryptPkg.hashSync(key, {N: N, r: r, p: p}, dkLen, salt);
                };
            } else {
                console.warn(
                    '\x1b[33m%s\x1b[0m',
                    'You ' + canImprove(NODE_MIN_VER_WITH_BUILTIN_SCRYPT)
                );
            }
        }
    }
    
    scrypt = scrypt || scryptsy;
    
    module.exports = scrypt;
    
    }).call(this,require('_process'))
    },{"_process":231,"crypto":106,"scryptsy":265,"semver":335}],338:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file contract.js
     *
     * To initialize a contract use:
     *
     *  var Contract = require('web3-eth-contract');
     *  Contract.setProvider('ws://localhost:8546');
     *  var contract = new Contract(abi, address, ...);
     *
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    
    "use strict";
    
    
    var _ = require('underscore');
    var core = require('web3-core');
    var Method = require('web3-core-method');
    var utils = require('web3-utils');
    var Subscription = require('web3-core-subscriptions').subscription;
    var formatters = require('web3-core-helpers').formatters;
    var errors = require('web3-core-helpers').errors;
    var promiEvent = require('web3-core-promievent');
    var abi = require('web3-eth-abi');
    
    
    /**
     * Should be called to create new contract instance
     *
     * @method Contract
     * @constructor
     * @param {Array} jsonInterface
     * @param {String} address
     * @param {Object} options
     */
    var Contract = function Contract(jsonInterface, address, options) {
        var _this = this,
            args = Array.prototype.slice.call(arguments);
    
        if(!(this instanceof Contract)) {
            throw new Error('Please use the "new" keyword to instantiate a web3.eth.contract() object!');
        }
    
        // sets _requestmanager
        core.packageInit(this, [this.constructor.currentProvider]);
    
        this.clearSubscriptions = this._requestManager.clearSubscriptions;
    
    
    
        if(!jsonInterface || !(Array.isArray(jsonInterface))) {
            throw new Error('You must provide the json interface of the contract when instantiating a contract object.');
        }
    
    
    
        // create the options object
        this.options = {};
    
        var lastArg = args[args.length - 1];
        if(_.isObject(lastArg) && !_.isArray(lastArg)) {
            options = lastArg;
    
            this.options = _.extend(this.options, this._getOrSetDefaultOptions(options));
            if(_.isObject(address)) {
                address = null;
            }
        }
    
        // set address
        Object.defineProperty(this.options, 'address', {
            set: function(value){
                if(value) {
                    _this._address = utils.toChecksumAddress(formatters.inputAddressFormatter(value));
                }
            },
            get: function(){
                return _this._address;
            },
            enumerable: true
        });
    
        // add method and event signatures, when the jsonInterface gets set
        Object.defineProperty(this.options, 'jsonInterface', {
            set: function(value){
                _this.methods = {};
                _this.events = {};
    
                _this._jsonInterface = value.map(function(method) {
                    var func,
                        funcName;
    
                    // make constant and payable backwards compatible
                    method.constant = (method.stateMutability === "view" || method.stateMutability === "pure" || method.constant);
                    method.payable = (method.stateMutability === "payable" || method.payable);
    
    
                    if (method.name) {
                        funcName = utils._jsonInterfaceMethodToString(method);
                    }
    
    
                    // function
                    if (method.type === 'function') {
                        method.signature = abi.encodeFunctionSignature(funcName);
                        func = _this._createTxObject.bind({
                            method: method,
                            parent: _this
                        });
    
    
                        // add method only if not one already exists
                        if(!_this.methods[method.name]) {
                            _this.methods[method.name] = func;
                        } else {
                            var cascadeFunc = _this._createTxObject.bind({
                                method: method,
                                parent: _this,
                                nextMethod: _this.methods[method.name]
                            });
                            _this.methods[method.name] = cascadeFunc;
                        }
    
                        // definitely add the method based on its signature
                        _this.methods[method.signature] = func;
    
                        // add method by name
                        _this.methods[funcName] = func;
    
    
                    // event
                    } else if (method.type === 'event') {
                        method.signature = abi.encodeEventSignature(funcName);
                        var event = _this._on.bind(_this, method.signature);
    
                        // add method only if not already exists
                        if(!_this.events[method.name] || _this.events[method.name].name === 'bound ')
                            _this.events[method.name] = event;
    
                        // definitely add the method based on its signature
                        _this.events[method.signature] = event;
    
                        // add event by name
                        _this.events[funcName] = event;
                    }
    
    
                    return method;
                });
    
                // add allEvents
                _this.events.allEvents = _this._on.bind(_this, 'allevents');
    
                return _this._jsonInterface;
            },
            get: function(){
                return _this._jsonInterface;
            },
            enumerable: true
        });
    
        // get default account from the Class
        var defaultAccount = this.constructor.defaultAccount;
        var defaultBlock = this.constructor.defaultBlock || 'latest';
    
        Object.defineProperty(this, 'defaultAccount', {
            get: function () {
                return defaultAccount;
            },
            set: function (val) {
                if(val) {
                    defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));
                }
    
                return val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultBlock', {
            get: function () {
                return defaultBlock;
            },
            set: function (val) {
                defaultBlock = val;
    
                return val;
            },
            enumerable: true
        });
    
        // properties
        this.methods = {};
        this.events = {};
    
        this._address = null;
        this._jsonInterface = [];
    
        // set getter/setter properties
        this.options.address = address;
        this.options.jsonInterface = jsonInterface;
    
    };
    
    Contract.setProvider = function(provider, accounts) {
        // Contract.currentProvider = provider;
        core.packageInit(this, [provider]);
    
        this._ethAccounts = accounts;
    };
    
    
    /**
     * Get the callback and modiufy the array if necessary
     *
     * @method _getCallback
     * @param {Array} args
     * @return {Function} the callback
     */
    Contract.prototype._getCallback = function getCallback(args) {
        if (args && _.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
        }
    };
    
    /**
     * Checks that no listener with name "newListener" or "removeListener" is added.
     *
     * @method _checkListener
     * @param {String} type
     * @param {String} event
     * @return {Object} the contract instance
     */
    Contract.prototype._checkListener = function(type, event){
        if(event === type) {
            throw new Error('The event "'+ type +'" is a reserved event name, you can\'t use it.');
        }
    };
    
    
    /**
     * Use default values, if options are not available
     *
     * @method _getOrSetDefaultOptions
     * @param {Object} options the options gived by the user
     * @return {Object} the options with gaps filled by defaults
     */
    Contract.prototype._getOrSetDefaultOptions = function getOrSetDefaultOptions(options) {
        var gasPrice = options.gasPrice ? String(options.gasPrice): null;
        var from = options.from ? utils.toChecksumAddress(formatters.inputAddressFormatter(options.from)) : null;
    
        options.data = options.data || this.options.data;
    
        options.from = from || this.options.from;
        options.gasPrice = gasPrice || this.options.gasPrice;
        options.gas = options.gas || options.gasLimit || this.options.gas;
    
        // TODO replace with only gasLimit?
        delete options.gasLimit;
    
        return options;
    };
    
    
    /**
     * Should be used to encode indexed params and options to one final object
     *
     * @method _encodeEventABI
     * @param {Object} event
     * @param {Object} options
     * @return {Object} everything combined together and encoded
     */
    Contract.prototype._encodeEventABI = function (event, options) {
        options = options || {};
        var filter = options.filter || {},
            result = {};
    
        ['fromBlock', 'toBlock'].filter(function (f) {
            return options[f] !== undefined;
        }).forEach(function (f) {
            result[f] = formatters.inputBlockNumberFormatter(options[f]);
        });
    
        // use given topics
        if(_.isArray(options.topics)) {
            result.topics = options.topics;
    
        // create topics based on filter
        } else {
    
            result.topics = [];
    
            // add event signature
            if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
                result.topics.push(event.signature);
            }
    
            // add event topics (indexed arguments)
            if (event.name !== 'ALLEVENTS') {
                var indexedTopics = event.inputs.filter(function (i) {
                    return i.indexed === true;
                }).map(function (i) {
                    var value = filter[i.name];
                    if (!value) {
                        return null;
                    }
    
                    // TODO: https://github.com/ethereum/web3.js/issues/344
                    // TODO: deal properly with components
    
                    if (_.isArray(value)) {
                        return value.map(function (v) {
                            return abi.encodeParameter(i.type, v);
                        });
                    }
                    return abi.encodeParameter(i.type, value);
                });
    
                result.topics = result.topics.concat(indexedTopics);
            }
    
            if(!result.topics.length)
                delete result.topics;
        }
    
        if(this.options.address) {
            result.address = this.options.address.toLowerCase();
        }
    
        return result;
    };
    
    /**
     * Should be used to decode indexed params and options
     *
     * @method _decodeEventABI
     * @param {Object} data
     * @return {Object} result object with decoded indexed && not indexed params
     */
    Contract.prototype._decodeEventABI = function (data) {
        var event = this;
    
        data.data = data.data || '';
        data.topics = data.topics || [];
        var result = formatters.outputLogFormatter(data);
    
        // if allEvents get the right event
        if(event.name === 'ALLEVENTS') {
            event = event.jsonInterface.find(function (intf) {
                return (intf.signature === data.topics[0]);
            }) || {anonymous: true};
        }
    
        // create empty inputs if none are present (e.g. anonymous events on allEvents)
        event.inputs = event.inputs || [];
    
    
        var argTopics = event.anonymous ? data.topics : data.topics.slice(1);
    
        result.returnValues = abi.decodeLog(event.inputs, data.data, argTopics);
        delete result.returnValues.__length__;
    
        // add name
        result.event = event.name;
    
        // add signature
        result.signature = (event.anonymous || !data.topics[0]) ? null : data.topics[0];
    
        // move the data and topics to "raw"
        result.raw = {
            data: result.data,
            topics: result.topics
        };
        delete result.data;
        delete result.topics;
    
    
        return result;
    };
    
    /**
     * Encodes an ABI for a method, including signature or the method.
     * Or when constructor encodes only the constructor parameters.
     *
     * @method _encodeMethodABI
     * @param {Mixed} args the arguments to encode
     * @param {String} the encoded ABI
     */
    Contract.prototype._encodeMethodABI = function _encodeMethodABI() {
        var methodSignature = this._method.signature,
            args = this.arguments || [];
    
        var signature = false,
            paramsABI = this._parent.options.jsonInterface.filter(function (json) {
                return ((methodSignature === 'constructor' && json.type === methodSignature) ||
                    ((json.signature === methodSignature || json.signature === methodSignature.replace('0x','') || json.name === methodSignature) && json.type === 'function'));
            }).map(function (json) {
                var inputLength = (_.isArray(json.inputs)) ? json.inputs.length : 0;
    
                if (inputLength !== args.length) {
                    throw new Error('The number of arguments is not matching the methods required number. You need to pass '+ inputLength +' arguments.');
                }
    
                if (json.type === 'function') {
                    signature = json.signature;
                }
                return _.isArray(json.inputs) ? json.inputs : [];
            }).map(function (inputs) {
                return abi.encodeParameters(inputs, args).replace('0x','');
            })[0] || '';
    
        // return constructor
        if(methodSignature === 'constructor') {
            if(!this._deployData)
                throw new Error('The contract has no contract data option set. This is necessary to append the constructor parameters.');
    
            return this._deployData + paramsABI;
    
        // return method
        } else {
    
            var returnValue = (signature) ? signature + paramsABI : paramsABI;
    
            if(!returnValue) {
                throw new Error('Couldn\'t find a matching contract method named "'+ this._method.name +'".');
            } else {
                return returnValue;
            }
        }
    
    };
    
    
    /**
     * Decode method return values
     *
     * @method _decodeMethodReturn
     * @param {Array} outputs
     * @param {String} returnValues
     * @return {Object} decoded output return values
     */
    Contract.prototype._decodeMethodReturn = function (outputs, returnValues) {
        if (!returnValues) {
            return null;
        }
    
        returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
        var result = abi.decodeParameters(outputs, returnValues);
    
        if (result.__length__ === 1) {
            return result[0];
        } else {
            delete result.__length__;
            return result;
        }
    };
    
    
    /**
     * Deploys a contract and fire events based on its state: transactionHash, receipt
     *
     * All event listeners will be removed, once the last possible event is fired ("error", or "receipt")
     *
     * @method deploy
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} EventEmitter possible events are "error", "transactionHash" and "receipt"
     */
    Contract.prototype.deploy = function(options, callback){
    
        options = options || {};
    
        options.arguments = options.arguments || [];
        options = this._getOrSetDefaultOptions(options);
    
    
        // return error, if no "data" is specified
        if(!options.data) {
            return utils._fireError(new Error('No "data" specified in neither the given options, nor the default options.'), null, null, callback);
        }
    
        var constructor = _.find(this.options.jsonInterface, function (method) {
            return (method.type === 'constructor');
        }) || {};
        constructor.signature = 'constructor';
    
        return this._createTxObject.apply({
            method: constructor,
            parent: this,
            deployData: options.data,
            _ethAccounts: this.constructor._ethAccounts
        }, options.arguments);
    
    };
    
    /**
     * Gets the event signature and outputformatters
     *
     * @method _generateEventOptions
     * @param {Object} event
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} the event options object
     */
    Contract.prototype._generateEventOptions = function() {
        var args = Array.prototype.slice.call(arguments);
    
        // get the callback
        var callback = this._getCallback(args);
    
        // get the options
        var options = (_.isObject(args[args.length - 1])) ? args.pop() : {};
    
        var event = (_.isString(args[0])) ? args[0] : 'allevents';
        event = (event.toLowerCase() === 'allevents') ? {
                name: 'ALLEVENTS',
                jsonInterface: this.options.jsonInterface
            } : this.options.jsonInterface.find(function (json) {
                return (json.type === 'event' && (json.name === event || json.signature === '0x'+ event.replace('0x','')));
            });
    
        if (!event) {
            throw new Error('Event "' + event.name + '" doesn\'t exist in this contract.');
        }
    
        if (!utils.isAddress(this.options.address)) {
            throw new Error('This contract object doesn\'t have address set yet, please set an address first.');
        }
    
        return {
            params: this._encodeEventABI(event, options),
            event: event,
            callback: callback
        };
    };
    
    /**
     * Adds event listeners and creates a subscription, and remove it once its fired.
     *
     * @method clone
     * @return {Object} the event subscription
     */
    Contract.prototype.clone = function() {
        return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
    };
    
    
    /**
     * Adds event listeners and creates a subscription, and remove it once its fired.
     *
     * @method once
     * @param {String} event
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} the event subscription
     */
    Contract.prototype.once = function(event, options, callback) {
        var args = Array.prototype.slice.call(arguments);
    
        // get the callback
        callback = this._getCallback(args);
    
        if (!callback) {
            throw new Error('Once requires a callback as the second parameter.');
        }
    
        // don't allow fromBlock
        if (options)
            delete options.fromBlock;
    
        // don't return as once shouldn't provide "on"
        this._on(event, options, function (err, res, sub) {
            sub.unsubscribe();
            if(_.isFunction(callback)){
                callback(err, res, sub);
            }
        });
    
        return undefined;
    };
    
    /**
     * Adds event listeners and creates a subscription.
     *
     * @method _on
     * @param {String} event
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} the event subscription
     */
    Contract.prototype._on = function(){
        var subOptions = this._generateEventOptions.apply(this, arguments);
    
    
        // prevent the event "newListener" and "removeListener" from being overwritten
        this._checkListener('newListener', subOptions.event.name, subOptions.callback);
        this._checkListener('removeListener', subOptions.event.name, subOptions.callback);
    
        // TODO check if listener already exists? and reuse subscription if options are the same.
    
        // create new subscription
        var subscription = new Subscription({
            subscription: {
                params: 1,
                inputFormatter: [formatters.inputLogFormatter],
                outputFormatter: this._decodeEventABI.bind(subOptions.event),
                // DUBLICATE, also in web3-eth
                subscriptionHandler: function (output) {
                    if(output.removed) {
                        this.emit('changed', output);
                    } else {
                        this.emit('data', output);
                    }
    
                    if (_.isFunction(this.callback)) {
                        this.callback(null, output, this);
                    }
                }
            },
            type: 'eth',
            requestManager: this._requestManager
        });
        subscription.subscribe('logs', subOptions.params, subOptions.callback || function () {});
    
        return subscription;
    };
    
    /**
     * Get past events from contracts
     *
     * @method getPastEvents
     * @param {String} event
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} the promievent
     */
    Contract.prototype.getPastEvents = function(){
        var subOptions = this._generateEventOptions.apply(this, arguments);
    
        var getPastLogs = new Method({
            name: 'getPastLogs',
            call: 'eth_getLogs',
            params: 1,
            inputFormatter: [formatters.inputLogFormatter],
            outputFormatter: this._decodeEventABI.bind(subOptions.event)
        });
        getPastLogs.setRequestManager(this._requestManager);
        var call = getPastLogs.buildCall();
    
        getPastLogs = null;
    
        return call(subOptions.params, subOptions.callback);
    };
    
    
    /**
     * returns the an object with call, send, estimate functions
     *
     * @method _createTxObject
     * @returns {Object} an object with functions to call the methods
     */
    Contract.prototype._createTxObject =  function _createTxObject(){
        var args = Array.prototype.slice.call(arguments);
        var txObject = {};
    
        if(this.method.type === 'function') {
    
            txObject.call = this.parent._executeMethod.bind(txObject, 'call');
            txObject.call.request = this.parent._executeMethod.bind(txObject, 'call', true); // to make batch requests
    
        }
    
        txObject.send = this.parent._executeMethod.bind(txObject, 'send');
        txObject.send.request = this.parent._executeMethod.bind(txObject, 'send', true); // to make batch requests
        txObject.encodeABI = this.parent._encodeMethodABI.bind(txObject);
        txObject.estimateGas = this.parent._executeMethod.bind(txObject, 'estimate');
    
        if (args && this.method.inputs && args.length !== this.method.inputs.length) {
            if (this.nextMethod) {
                return this.nextMethod.apply(null, args);
            }
            throw errors.InvalidNumberOfParams(args.length, this.method.inputs.length, this.method.name);
        }
    
        txObject.arguments = args || [];
        txObject._method = this.method;
        txObject._parent = this.parent;
        txObject._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts;
    
        if(this.deployData) {
            txObject._deployData = this.deployData;
        }
    
        return txObject;
    };
    
    
    /**
     * Generates the options for the execute call
     *
     * @method _processExecuteArguments
     * @param {Array} args
     * @param {Promise} defer
     */
    Contract.prototype._processExecuteArguments = function _processExecuteArguments(args, defer) {
        var processedArgs = {};
    
        processedArgs.type = args.shift();
    
        // get the callback
        processedArgs.callback = this._parent._getCallback(args);
    
        // get block number to use for call
        if(processedArgs.type === 'call' && args[args.length - 1] !== true && (_.isString(args[args.length - 1]) || isFinite(args[args.length - 1])))
            processedArgs.defaultBlock = args.pop();
    
        // get the options
        processedArgs.options = (_.isObject(args[args.length - 1])) ? args.pop() : {};
    
        // get the generateRequest argument for batch requests
        processedArgs.generateRequest = (args[args.length - 1] === true)? args.pop() : false;
    
        processedArgs.options = this._parent._getOrSetDefaultOptions(processedArgs.options);
        processedArgs.options.data = this.encodeABI();
    
        // add contract address
        if(!this._deployData && !utils.isAddress(this._parent.options.address))
            throw new Error('This contract object doesn\'t have address set yet, please set an address first.');
    
        if(!this._deployData)
            processedArgs.options.to = this._parent.options.address;
    
        // return error, if no "data" is specified
        if(!processedArgs.options.data)
            return utils._fireError(new Error('Couldn\'t find a matching contract method, or the number of parameters is wrong.'), defer.eventEmitter, defer.reject, processedArgs.callback);
    
        return processedArgs;
    };
    
    /**
     * Executes a call, transact or estimateGas on a contract function
     *
     * @method _executeMethod
     * @param {String} type the type this execute function should execute
     * @param {Boolean} makeRequest if true, it simply returns the request parameters, rather than executing it
     */
    Contract.prototype._executeMethod = function _executeMethod(){
        var _this = this,
            args = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), defer),
            defer = promiEvent((args.type !== 'send')),
            ethAccounts = _this.constructor._ethAccounts || _this._ethAccounts;
    
        // simple return request for batch requests
        if(args.generateRequest) {
    
            var payload = {
                params: [formatters.inputCallFormatter.call(this._parent, args.options)],
                callback: args.callback
            };
    
            if(args.type === 'call') {
                payload.params.push(formatters.inputDefaultBlockNumberFormatter.call(this._parent, args.defaultBlock));
                payload.method = 'eth_call';
                payload.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs);
            } else {
                payload.method = 'eth_sendTransaction';
            }
    
            return payload;
    
        } else {
    
            switch (args.type) {
                case 'estimate':
    
                    var estimateGas = (new Method({
                        name: 'estimateGas',
                        call: 'eth_estimateGas',
                        params: 1,
                        inputFormatter: [formatters.inputCallFormatter],
                        outputFormatter: utils.hexToNumber,
                        requestManager: _this._parent._requestManager,
                        accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)
                        defaultAccount: _this._parent.defaultAccount,
                        defaultBlock: _this._parent.defaultBlock
                    })).createFunction();
    
                    return estimateGas(args.options, args.callback);
    
                case 'call':
    
                    // TODO check errors: missing "from" should give error on deploy and send, call ?
    
                    var call = (new Method({
                        name: 'call',
                        call: 'eth_call',
                        params: 2,
                        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],
                        // add output formatter for decoding
                        outputFormatter: function (result) {
                            return _this._parent._decodeMethodReturn(_this._method.outputs, result);
                        },
                        requestManager: _this._parent._requestManager,
                        accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)
                        defaultAccount: _this._parent.defaultAccount,
                        defaultBlock: _this._parent.defaultBlock
                    })).createFunction();
    
                    return call(args.options, args.defaultBlock, args.callback);
    
                case 'send':
    
                    // return error, if no "from" is specified
                    if(!utils.isAddress(args.options.from)) {
                        return utils._fireError(new Error('No "from" address specified in neither the given options, nor the default options.'), defer.eventEmitter, defer.reject, args.callback);
                    }
    
                    if (_.isBoolean(this._method.payable) && !this._method.payable && args.options.value && args.options.value > 0) {
                        return utils._fireError(new Error('Can not send value to non-payable contract method or constructor'), defer.eventEmitter, defer.reject, args.callback);
                    }
    
    
                    // make sure receipt logs are decoded
                    var extraFormatters = {
                        receiptFormatter: function (receipt) {
                            if (_.isArray(receipt.logs)) {
    
                                // decode logs
                                var events = _.map(receipt.logs, function(log) {
                                    return _this._parent._decodeEventABI.call({
                                        name: 'ALLEVENTS',
                                        jsonInterface: _this._parent.options.jsonInterface
                                    }, log);
                                });
    
                                // make log names keys
                                receipt.events = {};
                                var count = 0;
                                events.forEach(function (ev) {
                                    if (ev.event) {
                                        // if > 1 of the same event, don't overwrite any existing events
                                        if (receipt.events[ev.event]) {
                                            if (Array.isArray(receipt.events[ ev.event ])) {
                                                receipt.events[ ev.event ].push(ev);
                                            } else {
                                                receipt.events[ev.event] = [receipt.events[ev.event], ev];
                                            }
                                        } else {
                                            receipt.events[ ev.event ] = ev;
                                        }
                                    } else {
                                        receipt.events[count] = ev;
                                        count++;
                                    }
                                });
    
                                delete receipt.logs;
                            }
                            return receipt;
                        },
                        contractDeployFormatter: function (receipt) {
                            var newContract = _this._parent.clone();
                            newContract.options.address = receipt.contractAddress;
                            return newContract;
                        }
                    };
    
                    var sendTransaction = (new Method({
                        name: 'sendTransaction',
                        call: 'eth_sendTransaction',
                        params: 1,
                        inputFormatter: [formatters.inputTransactionFormatter],
                        requestManager: _this._parent._requestManager,
                        accounts: _this.constructor._ethAccounts || _this._ethAccounts, // is eth.accounts (necessary for wallet signing)
                        defaultAccount: _this._parent.defaultAccount,
                        defaultBlock: _this._parent.defaultBlock,
                        extraFormatters: extraFormatters
                    })).createFunction();
    
                    return sendTransaction(args.options, args.callback);
    
            }
    
        }
    
    };
    
    module.exports = Contract;
    
    },{"underscore":297,"web3-core":323,"web3-core-helpers":313,"web3-core-method":314,"web3-core-promievent":315,"web3-core-subscriptions":320,"web3-eth-abi":334,"web3-utils":355}],339:[function(require,module,exports){
    /*
        This file is part of web3.js.
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file ENS.js
     *
     * @author Samuel Furter <samuel@ethereum.org>
     * @date 2018
     */
    
    "use strict";
    
    var config = require('./config');
    var Registry = require('./contracts/Registry');
    var ResolverMethodHandler = require('./lib/ResolverMethodHandler');
    
    /**
     * Constructs a new instance of ENS
     *
     * @method ENS
     * @param {Object} eth
     * @constructor
     */
    function ENS(eth) {
        this.eth = eth;
    }
    
    Object.defineProperty(ENS.prototype, 'registry', {
        get: function () {
            return new Registry(this);
        },
        enumerable: true
    });
    
    Object.defineProperty(ENS.prototype, 'resolverMethodHandler', {
        get: function () {
            return new ResolverMethodHandler(this.registry);
        },
        enumerable: true
    });
    
    /**
     * @param {string} name
     * @returns {Promise<Contract>}
     */
    ENS.prototype.resolver = function (name) {
        return this.registry.resolver(name);
    };
    
    /**
     * Returns the address record associated with a name.
     *
     * @method getAddress
     * @param {string} name
     * @param {function} callback
     * @return {eventifiedPromise}
     */
    ENS.prototype.getAddress = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'addr', []).call(callback);
    };
    
    /**
     * Sets a new address
     *
     * @method setAddress
     * @param {string} name
     * @param {string} address
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ENS.prototype.setAddress = function (name, address, sendOptions, callback) {
        return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(sendOptions, callback);
    };
    
    /**
     * Returns the public key
     *
     * @method getPubkey
     * @param {string} name
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ENS.prototype.getPubkey = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'pubkey', [], callback).call(callback);
    };
    
    /**
     * Set the new public key
     *
     * @method setPubkey
     * @param {string} name
     * @param {string} x
     * @param {string} y
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ENS.prototype.setPubkey = function (name, x, y, sendOptions, callback) {
        return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(sendOptions, callback);
    };
    
    /**
     * Returns the content
     *
     * @method getContent
     * @param {string} name
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ENS.prototype.getContent = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'content', []).call(callback);
    };
    
    /**
     * Set the content
     *
     * @method setContent
     * @param {string} name
     * @param {string} hash
     * @param {function} callback
     * @param {Object} sendOptions
     * @returns {eventifiedPromise}
     */
    ENS.prototype.setContent = function (name, hash, sendOptions, callback) {
        return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(sendOptions, callback);
    };
    
    /**
     * Get the multihash
     *
     * @method getMultihash
     * @param {string} name
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ENS.prototype.getMultihash = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);
    };
    
    /**
     * Set the multihash
     *
     * @method setMultihash
     * @param {string} name
     * @param {string} hash
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ENS.prototype.setMultihash = function (name, hash, sendOptions, callback) {
        return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(sendOptions, callback);
    };
    
    /**
     * Checks if the current used network is synced and looks for ENS support there.
     * Throws an error if not.
     *
     * @returns {Promise<Block>}
     */
    ENS.prototype.checkNetwork = function () {
        var self = this;
        return self.eth.getBlock('latest').then(function (block) {
            var headAge = new Date() / 1000 - block.timestamp;
            if (headAge > 3600) {
                throw new Error("Network not synced; last block was " + headAge + " seconds ago");
            }
            return self.eth.net.getNetworkType();
        }).then(function (networkType) {
            var addr = config.addresses[networkType];
            if (typeof addr === 'undefined') {
                throw new Error("ENS is not supported on network " + networkType);
            }
    
            return addr;
        });
    };
    
    module.exports = ENS;
    
    },{"./config":340,"./contracts/Registry":341,"./lib/ResolverMethodHandler":343}],340:[function(require,module,exports){
    "use strict";
    
    var config = {
        addresses: {
            main: "0x314159265dD8dbb310642f98f50C066173C1259b",
            ropsten: "0x112234455c3a32fd11230c42e7bccd4a84e02010",
            rinkeby: "0xe7410170f87102df0055eb195163a03b7f2bff4a"
        },
    };
    
    module.exports = config;
    
    },{}],341:[function(require,module,exports){
    /*
        This file is part of web3.js.
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file Registry.js
     *
     * @author Samuel Furter <samuel@ethereum.org>
     * @date 2018
     */
    
    "use strict";
    
    var _ = require('underscore');
    var Contract = require('web3-eth-contract');
    var namehash = require('eth-ens-namehash');
    var PromiEvent = require('web3-core-promievent');
    var REGISTRY_ABI = require('../ressources/ABI/Registry');
    var RESOLVER_ABI = require('../ressources/ABI/Resolver');
    
    
    /**
     * A wrapper around the ENS registry contract.
     *
     * @method Registry
     * @param {Ens} ens
     * @constructor
     */
    function Registry(ens) {
        var self = this;
        this.ens = ens;
        this.contract = ens.checkNetwork().then(function (address) {
            var contract = new Contract(REGISTRY_ABI, address);
            contract.setProvider(self.ens.eth.currentProvider);
    
            return contract;
        });
    }
    
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method owner
     * @param {string} name
     * @param {function} callback
     * @return {Promise<any>}
     */
    Registry.prototype.owner = function (name, callback) {
        var promiEvent = new PromiEvent(true);
    
        this.contract.then(function (contract) {
            contract.methods.owner(namehash.hash(name)).call()
                .then(function (receipt) {
                    promiEvent.resolve(receipt);
    
                    if (_.isFunction(callback)) {
                        callback(receipt);
                    }
                })
                .catch(function (error) {
                    promiEvent.reject(error);
    
                    if (_.isFunction(callback)) {
                        callback(error);
                    }
                });
        });
    
        return promiEvent.eventEmitter;
    };
    
    /**
     * Returns the resolver contract associated with a name.
     *
     * @method resolver
     * @param {string} name
     * @return {Promise<Contract>}
     */
    Registry.prototype.resolver = function (name) {
        var self = this;
    
        return this.contract.then(function (contract) {
            return contract.methods.resolver(namehash.hash(name)).call();
        }).then(function (address) {
            var contract = new Contract(RESOLVER_ABI, address);
            contract.setProvider(self.ens.eth.currentProvider);
            return contract;
        });
    };
    
    module.exports = Registry;
    
    },{"../ressources/ABI/Registry":344,"../ressources/ABI/Resolver":345,"eth-ens-namehash":157,"underscore":297,"web3-core-promievent":315,"web3-eth-contract":338}],342:[function(require,module,exports){
    /*
        This file is part of web3.js.
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     *
     * @author Samuel Furter <samuel@ethereum.org>
     * @date 2018
     */
    
    "use strict";
    
    var ENS = require('./ENS');
    
    module.exports = ENS;
    
    },{"./ENS":339}],343:[function(require,module,exports){
    /*
        This file is part of web3.js.
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file ResolverMethodHandler.js
     *
     * @author Samuel Furter <samuel@ethereum.org>
     * @date 2018
     */
    
    "use strict";
    
    var PromiEvent = require('web3-core-promievent');
    var namehash = require('eth-ens-namehash');
    var _ = require('underscore');
    
    /**
     * @param {Registry} registry
     * @constructor
     */
    function ResolverMethodHandler(registry) {
        this.registry = registry;
    }
    
    /**
     * Executes an resolver method and returns an eventifiedPromise
     *
     * @param {string} ensName
     * @param {string} methodName
     * @param {array} methodArguments
     * @param {function} callback
     * @returns {Object}
     */
    ResolverMethodHandler.prototype.method = function (ensName, methodName, methodArguments, callback) {
        return {
            call: this.call.bind({
                ensName: ensName,
                methodName: methodName,
                methodArguments: methodArguments,
                callback: callback,
                parent: this
            }),
            send: this.send.bind({
                ensName: ensName,
                methodName: methodName,
                methodArguments: methodArguments,
                callback: callback,
                parent: this
            })
        };
    };
    
    /**
     * Executes call
     *
     * @returns {eventifiedPromise}
     */
    ResolverMethodHandler.prototype.call = function (callback) {
        var self = this;
        var promiEvent = new PromiEvent();
        var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);
    
        this.parent.registry.resolver(this.ensName).then(function (resolver) {
            self.parent.handleCall(promiEvent, resolver.methods[self.methodName], preparedArguments, callback);
        }).catch(function (error) {
            promiEvent.reject(error);
        });
    
        return promiEvent.eventEmitter;
    };
    
    
    /**
     * Executes send
     *
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ResolverMethodHandler.prototype.send = function (sendOptions, callback) {
        var self = this;
        var promiEvent = new PromiEvent();
        var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);
    
        this.parent.registry.resolver(this.ensName).then(function (resolver) {
            self.parent.handleSend(promiEvent, resolver.methods[self.methodName], preparedArguments, sendOptions, callback);
        }).catch(function (error) {
            promiEvent.reject(error);
        });
    
        return promiEvent.eventEmitter;
    };
    
    /**
     * Handles a call method
     *
     * @param {eventifiedPromise} promiEvent
     * @param {function} method
     * @param {array} preparedArguments
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ResolverMethodHandler.prototype.handleCall = function (promiEvent, method, preparedArguments, callback) {
        method.apply(this, preparedArguments).call()
            .then(function (receipt) {
                promiEvent.resolve(receipt);
    
                if (_.isFunction(callback)) {
                    callback(receipt);
                }
            }).catch(function (error) {
                promiEvent.reject(error);
    
                if (_.isFunction(callback)) {
                    callback(error);
                }
            });
    
        return promiEvent;
    };
    
    /**
     * Handles a send method
     *
     * @param {eventifiedPromise} promiEvent
     * @param {function} method
     * @param {array} preparedArguments
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ResolverMethodHandler.prototype.handleSend = function (promiEvent, method, preparedArguments, sendOptions, callback) {
        method.apply(this, preparedArguments).send(sendOptions)
            .on('transactionHash', function (hash) {
                promiEvent.eventEmitter.emit('transactionHash', hash);
            })
            .on('confirmation', function (confirmationNumber, receipt) {
                promiEvent.eventEmitter.emit('confirmation', confirmationNumber, receipt);
            })
            .on('receipt', function (receipt) {
                promiEvent.eventEmitter.emit('receipt', receipt);
                promiEvent.resolve(receipt);
    
                if (_.isFunction(callback)) {
                    callback(receipt);
                }
            })
            .on('error', function (error) {
                promiEvent.eventEmitter.emit('error', error);
                promiEvent.reject(error);
    
                if (_.isFunction(callback)) {
                    callback(error);
                }
            });
    
        return promiEvent;
    };
    
    /**
     * Adds the ENS node to the arguments
     *
     * @param {string} name
     * @param {array} methodArguments
     * @returns {array}
     */
    ResolverMethodHandler.prototype.prepareArguments = function (name, methodArguments) {
        var node = namehash.hash(name);
    
        if (methodArguments.length > 0) {
            methodArguments.unshift(node);
    
            return methodArguments;
        }
    
        return [node];
    };
    
    module.exports = ResolverMethodHandler;
    
    },{"eth-ens-namehash":157,"underscore":297,"web3-core-promievent":315}],344:[function(require,module,exports){
    "use strict";
    
    var REGISTRY = [
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "resolver",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "label",
                    "type": "bytes32"
                },
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "setSubnodeOwner",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "ttl",
                    "type": "uint64"
                }
            ],
            "name": "setTTL",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "ttl",
            "outputs": [
                {
                    "name": "",
                    "type": "uint64"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "resolver",
                    "type": "address"
                }
            ],
            "name": "setResolver",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "setOwner",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "name": "label",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "NewOwner",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "resolver",
                    "type": "address"
                }
            ],
            "name": "NewResolver",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "ttl",
                    "type": "uint64"
                }
            ],
            "name": "NewTTL",
            "type": "event"
        }
    ];
    
    module.exports = REGISTRY;
    
    },{}],345:[function(require,module,exports){
    "use strict";
    
    var RESOLVER = [
        {
            "constant": true,
            "inputs": [
                {
                    "name": "interfaceID",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "contentTypes",
                    "type": "uint256"
                }
            ],
            "name": "ABI",
            "outputs": [
                {
                    "name": "contentType",
                    "type": "uint256"
                },
                {
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "hash",
                    "type": "bytes"
                }
            ],
            "name": "setMultihash",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "multihash",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "x",
                    "type": "bytes32"
                },
                {
                    "name": "y",
                    "type": "bytes32"
                }
            ],
            "name": "setPubkey",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "content",
            "outputs": [
                {
                    "name": "ret",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "addr",
            "outputs": [
                {
                    "name": "ret",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "contentType",
                    "type": "uint256"
                },
                {
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "setABI",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "name",
            "outputs": [
                {
                    "name": "ret",
                    "type": "string"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "name",
                    "type": "string"
                }
            ],
            "name": "setName",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "setContent",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "pubkey",
            "outputs": [
                {
                    "name": "x",
                    "type": "bytes32"
                },
                {
                    "name": "y",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "addr",
                    "type": "address"
                }
            ],
            "name": "setAddr",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "inputs": [
                {
                    "name": "ensAddr",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "a",
                    "type": "address"
                }
            ],
            "name": "AddrChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContentChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "name",
                    "type": "string"
                }
            ],
            "name": "NameChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "name": "contentType",
                    "type": "uint256"
                }
            ],
            "name": "ABIChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "x",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "y",
                    "type": "bytes32"
                }
            ],
            "name": "PubkeyChanged",
            "type": "event"
        }
    ];
    
    module.exports = RESOLVER;
    
    },{}],346:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file iban.js
     *
     * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol
     *
     * @author Marek Kotewicz <marek@parity.io>
     * @date 2015
     */
    
    "use strict";
    
    var utils = require('web3-utils');
    var BigNumber = require('bn.js');
    
    
    var leftPad = function (string, bytes) {
        var result = string;
        while (result.length < bytes * 2) {
            result = '0' + result;
        }
        return result;
    };
    
    /**
     * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
     * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
     *
     * @method iso13616Prepare
     * @param {String} iban the IBAN
     * @returns {String} the prepared IBAN
     */
    var iso13616Prepare = function (iban) {
        var A = 'A'.charCodeAt(0);
        var Z = 'Z'.charCodeAt(0);
    
        iban = iban.toUpperCase();
        iban = iban.substr(4) + iban.substr(0,4);
    
        return iban.split('').map(function(n){
            var code = n.charCodeAt(0);
            if (code >= A && code <= Z){
                // A = 10, B = 11, ... Z = 35
                return code - A + 10;
            } else {
                return n;
            }
        }).join('');
    };
    
    /**
     * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
     *
     * @method mod9710
     * @param {String} iban
     * @returns {Number}
     */
    var mod9710 = function (iban) {
        var remainder = iban,
            block;
    
        while (remainder.length > 2){
            block = remainder.slice(0, 9);
            remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
        }
    
        return parseInt(remainder, 10) % 97;
    };
    
    /**
     * This prototype should be used to create iban object from iban correct string
     *
     * @param {String} iban
     */
    var Iban = function Iban(iban) {
        this._iban = iban;
    };
    
    /**
     * This method should be used to create an ethereum address from a direct iban address
     *
     * @method toAddress
     * @param {String} iban address
     * @return {String} the ethereum address
     */
    Iban.toAddress = function (ib) {
        ib = new Iban(ib);
    
        if(!ib.isDirect()) {
            throw new Error('IBAN is indirect and can\'t be converted');
        }
    
        return ib.toAddress();
    };
    
    /**
     * This method should be used to create iban address from an ethereum address
     *
     * @method toIban
     * @param {String} address
     * @return {String} the IBAN address
     */
    Iban.toIban = function (address) {
        return Iban.fromAddress(address).toString();
    };
    
    /**
     * This method should be used to create iban object from an ethereum address
     *
     * @method fromAddress
     * @param {String} address
     * @return {Iban} the IBAN object
     */
    Iban.fromAddress = function (address) {
        if(!utils.isAddress(address)){
            throw new Error('Provided address is not a valid address: '+ address);
        }
    
        address = address.replace('0x','').replace('0X','');
    
        var asBn = new BigNumber(address, 16);
        var base36 = asBn.toString(36);
        var padded = leftPad(base36, 15);
        return Iban.fromBban(padded.toUpperCase());
    };
    
    /**
     * Convert the passed BBAN to an IBAN for this country specification.
     * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
     *
     * @method fromBban
     * @param {String} bban the BBAN to convert to IBAN
     * @returns {Iban} the IBAN object
     */
    Iban.fromBban = function (bban) {
        var countryCode = 'XE';
    
        var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
        var checkDigit = ('0' + (98 - remainder)).slice(-2);
    
        return new Iban(countryCode + checkDigit + bban);
    };
    
    /**
     * Should be used to create IBAN object for given institution and identifier
     *
     * @method createIndirect
     * @param {Object} options, required options are "institution" and "identifier"
     * @return {Iban} the IBAN object
     */
    Iban.createIndirect = function (options) {
        return Iban.fromBban('ETH' + options.institution + options.identifier);
    };
    
    /**
     * This method should be used to check if given string is valid iban object
     *
     * @method isValid
     * @param {String} iban string
     * @return {Boolean} true if it is valid IBAN
     */
    Iban.isValid = function (iban) {
        var i = new Iban(iban);
        return i.isValid();
    };
    
    /**
     * Should be called to check if iban is correct
     *
     * @method isValid
     * @returns {Boolean} true if it is, otherwise false
     */
    Iban.prototype.isValid = function () {
        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
            mod9710(iso13616Prepare(this._iban)) === 1;
    };
    
    /**
     * Should be called to check if iban number is direct
     *
     * @method isDirect
     * @returns {Boolean} true if it is, otherwise false
     */
    Iban.prototype.isDirect = function () {
        return this._iban.length === 34 || this._iban.length === 35;
    };
    
    /**
     * Should be called to check if iban number if indirect
     *
     * @method isIndirect
     * @returns {Boolean} true if it is, otherwise false
     */
    Iban.prototype.isIndirect = function () {
        return this._iban.length === 20;
    };
    
    /**
     * Should be called to get iban checksum
     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
     *
     * @method checksum
     * @returns {String} checksum
     */
    Iban.prototype.checksum = function () {
        return this._iban.substr(2, 2);
    };
    
    /**
     * Should be called to get institution identifier
     * eg. XREG
     *
     * @method institution
     * @returns {String} institution identifier
     */
    Iban.prototype.institution = function () {
        return this.isIndirect() ? this._iban.substr(7, 4) : '';
    };
    
    /**
     * Should be called to get client identifier within institution
     * eg. GAVOFYORK
     *
     * @method client
     * @returns {String} client identifier
     */
    Iban.prototype.client = function () {
        return this.isIndirect() ? this._iban.substr(11) : '';
    };
    
    /**
     * Should be called to get client direct address
     *
     * @method toAddress
     * @returns {String} ethereum address
     */
    Iban.prototype.toAddress = function () {
        if (this.isDirect()) {
            var base36 = this._iban.substr(4);
            var asBn = new BigNumber(base36, 36);
            return utils.toChecksumAddress(asBn.toString(16, 20));
        }
    
        return '';
    };
    
    Iban.prototype.toString = function () {
        return this._iban;
    };
    
    module.exports = Iban;
    
    },{"bn.js":61,"web3-utils":355}],347:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var core = require('web3-core');
    var Method = require('web3-core-method');
    var utils = require('web3-utils');
    var Net = require('web3-net');
    
    var formatters = require('web3-core-helpers').formatters;
    
    
    var Personal = function Personal() {
        var _this = this;
    
        // sets _requestmanager
        core.packageInit(this, arguments);
    
        this.net = new Net(this.currentProvider);
    
        var defaultAccount = null;
        var defaultBlock = 'latest';
    
        Object.defineProperty(this, 'defaultAccount', {
            get: function () {
                return defaultAccount;
            },
            set: function (val) {
                if(val) {
                    defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));
                }
    
                // update defaultBlock
                methods.forEach(function(method) {
                    method.defaultAccount = defaultAccount;
                });
    
                return val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultBlock', {
            get: function () {
                return defaultBlock;
            },
            set: function (val) {
                defaultBlock = val;
    
                // update defaultBlock
                methods.forEach(function(method) {
                    method.defaultBlock = defaultBlock;
                });
    
                return val;
            },
            enumerable: true
        });
    
    
        var methods = [
            new Method({
                name: 'getAccounts',
                call: 'personal_listAccounts',
                params: 0,
                outputFormatter: utils.toChecksumAddress
            }),
            new Method({
                name: 'newAccount',
                call: 'personal_newAccount',
                params: 1,
                inputFormatter: [null],
                outputFormatter: utils.toChecksumAddress
            }),
            new Method({
                name: 'unlockAccount',
                call: 'personal_unlockAccount',
                params: 3,
                inputFormatter: [formatters.inputAddressFormatter, null, null]
            }),
            new Method({
                name: 'lockAccount',
                call: 'personal_lockAccount',
                params: 1,
                inputFormatter: [formatters.inputAddressFormatter]
            }),
            new Method({
                name: 'importRawKey',
                call: 'personal_importRawKey',
                params: 2
            }),
            new Method({
                name: 'sendTransaction',
                call: 'personal_sendTransaction',
                params: 2,
                inputFormatter: [formatters.inputTransactionFormatter, null]
            }),
            new Method({
                name: 'signTransaction',
                call: 'personal_signTransaction',
                params: 2,
                inputFormatter: [formatters.inputTransactionFormatter, null]
            }),
            new Method({
                name: 'sign',
                call: 'personal_sign',
                params: 3,
                inputFormatter: [formatters.inputSignFormatter, formatters.inputAddressFormatter, null]
            }),
            new Method({
                name: 'ecRecover',
                call: 'personal_ecRecover',
                params: 2,
                inputFormatter: [formatters.inputSignFormatter, null]
            })
        ];
        methods.forEach(function(method) {
            method.attachToObject(_this);
            method.setRequestManager(_this._requestManager);
            method.defaultBlock = _this.defaultBlock;
            method.defaultAccount = _this.defaultAccount;
        });
    };
    
    core.addProviders(Personal);
    
    
    
    module.exports = Personal;
    
    
    
    },{"web3-core":323,"web3-core-helpers":313,"web3-core-method":314,"web3-net":350,"web3-utils":355}],348:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file getNetworkType.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var _ = require('underscore');
    
    var getNetworkType = function (callback) {
        var _this = this,
            id;
    
    
        return this.net.getId()
            .then(function (givenId) {
    
                id = givenId;
    
                return _this.getBlock(0);
            })
            .then(function (genesis) {
                var returnValue = 'private';
    
                if (genesis.hash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' &&
                    id === 1) {
                    returnValue = 'main';
                }
                if (genesis.hash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' &&
                    id === 2) {
                    returnValue = 'morden';
                }
                if (genesis.hash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' &&
                    id === 3) {
                    returnValue = 'ropsten';
                }
                if (genesis.hash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' &&
                    id === 4) {
                    returnValue = 'rinkeby';
                }
                if (genesis.hash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' &&
                    id === 42) {
                    returnValue = 'kovan';
                }
    
                if (_.isFunction(callback)) {
                    callback(null, returnValue);
                }
    
                return returnValue;
            })
            .catch(function (err) {
                if (_.isFunction(callback)) {
                    callback(err);
                } else {
                    throw err;
                }
            });
    };
    
    module.exports = getNetworkType;
    
    },{"underscore":297}],349:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var _ = require('underscore');
    var core = require('web3-core');
    var helpers = require('web3-core-helpers');
    var Subscriptions = require('web3-core-subscriptions').subscriptions;
    var Method = require('web3-core-method');
    var utils = require('web3-utils');
    var Net = require('web3-net');
    
    var ENS = require('web3-eth-ens');
    var Personal = require('web3-eth-personal');
    var BaseContract = require('web3-eth-contract');
    var Iban = require('web3-eth-iban');
    var Accounts = require('web3-eth-accounts');
    var abi = require('web3-eth-abi');
    
    var getNetworkType = require('./getNetworkType.js');
    var formatter = helpers.formatters;
    
    
    var blockCall = function (args) {
        return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
    };
    
    var transactionFromBlockCall = function (args) {
        return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
    };
    
    var uncleCall = function (args) {
        return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
    };
    
    var getBlockTransactionCountCall = function (args) {
        return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
    };
    
    var uncleCountCall = function (args) {
        return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
    };
    
    
    var Eth = function Eth() {
        var _this = this;
    
        // sets _requestmanager
        core.packageInit(this, arguments);
    
        // overwrite setProvider
        var setProvider = this.setProvider;
        this.setProvider = function () {
            setProvider.apply(_this, arguments);
            _this.net.setProvider.apply(_this, arguments);
            _this.personal.setProvider.apply(_this, arguments);
            _this.accounts.setProvider.apply(_this, arguments);
            _this.Contract.setProvider(_this.currentProvider, _this.accounts);
        };
    
    
        var defaultAccount = null;
        var defaultBlock = 'latest';
    
        Object.defineProperty(this, 'defaultAccount', {
            get: function () {
                return defaultAccount;
            },
            set: function (val) {
                if(val) {
                    defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));
                }
    
                // also set on the Contract object
                _this.Contract.defaultAccount = defaultAccount;
                _this.personal.defaultAccount = defaultAccount;
    
                // update defaultBlock
                methods.forEach(function(method) {
                    method.defaultAccount = defaultAccount;
                });
    
                return val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultBlock', {
            get: function () {
                return defaultBlock;
            },
            set: function (val) {
                defaultBlock = val;
                // also set on the Contract object
                _this.Contract.defaultBlock = defaultBlock;
                _this.personal.defaultBlock = defaultBlock;
    
                // update defaultBlock
                methods.forEach(function(method) {
                    method.defaultBlock = defaultBlock;
                });
    
                return val;
            },
            enumerable: true
        });
    
    
        this.clearSubscriptions = _this._requestManager.clearSubscriptions;
    
        // add net
        this.net = new Net(this.currentProvider);
        // add chain detection
        this.net.getNetworkType = getNetworkType.bind(this);
    
        // add accounts
        this.accounts = new Accounts(this.currentProvider);
    
        // add personal
        this.personal = new Personal(this.currentProvider);
        this.personal.defaultAccount = this.defaultAccount;
    
        // create a proxy Contract type for this instance, as a Contract's provider
        // is stored as a class member rather than an instance variable. If we do
        // not create this proxy type, changing the provider in one instance of
        // web3-eth would subsequently change the provider for _all_ contract
        // instances!
        var self = this;
        var Contract = function Contract() {
            BaseContract.apply(this, arguments);
    
            // when Eth.setProvider is called, call packageInit
            // on all contract instances instantiated via this Eth
            // instances. This will update the currentProvider for
            // the contract instances
            var _this = this;
            var setProvider = self.setProvider;
            self.setProvider = function() {
              setProvider.apply(self, arguments);
              core.packageInit(_this, [self.currentProvider]);
            };
        };
    
        Contract.setProvider = function() {
            BaseContract.setProvider.apply(this, arguments);
        };
    
        // make our proxy Contract inherit from web3-eth-contract so that it has all
        // the right functionality and so that instanceof and friends work properly
        Contract.prototype = Object.create(BaseContract.prototype);
        Contract.prototype.constructor = Contract;
    
        // add contract
        this.Contract = Contract;
        this.Contract.defaultAccount = this.defaultAccount;
        this.Contract.defaultBlock = this.defaultBlock;
        this.Contract.setProvider(this.currentProvider, this.accounts);
    
        // add IBAN
        this.Iban = Iban;
    
        // add ABI
        this.abi = abi;
    
        // add ENS
        this.ens = new ENS(this);
    
        var methods = [
            new Method({
                name: 'getNodeInfo',
                call: 'web3_clientVersion'
            }),
            new Method({
                name: 'getProtocolVersion',
                call: 'eth_protocolVersion',
                params: 0
            }),
            new Method({
                name: 'getCoinbase',
                call: 'eth_coinbase',
                params: 0
            }),
            new Method({
                name: 'isMining',
                call: 'eth_mining',
                params: 0
            }),
            new Method({
                name: 'getHashrate',
                call: 'eth_hashrate',
                params: 0,
                outputFormatter: utils.hexToNumber
            }),
            new Method({
                name: 'isSyncing',
                call: 'eth_syncing',
                params: 0,
                outputFormatter: formatter.outputSyncingFormatter
            }),
            new Method({
                name: 'getGasPrice',
                call: 'eth_gasPrice',
                params: 0,
                outputFormatter: formatter.outputBigNumberFormatter
            }),
            new Method({
                name: 'getAccounts',
                call: 'eth_accounts',
                params: 0,
                outputFormatter: utils.toChecksumAddress
            }),
            new Method({
                name: 'getBlockNumber',
                call: 'eth_blockNumber',
                params: 0,
                outputFormatter: utils.hexToNumber
            }),
            new Method({
                name: 'getBalance',
                call: 'eth_getBalance',
                params: 2,
                inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
                outputFormatter: formatter.outputBigNumberFormatter
            }),
            new Method({
                name: 'getStorageAt',
                call: 'eth_getStorageAt',
                params: 3,
                inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]
            }),
            new Method({
                name: 'getCode',
                call: 'eth_getCode',
                params: 2,
                inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]
            }),
            new Method({
                name: 'getBlock',
                call: blockCall,
                params: 2,
                inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],
                outputFormatter: formatter.outputBlockFormatter
            }),
            new Method({
                name: 'getUncle',
                call: uncleCall,
                params: 2,
                inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],
                outputFormatter: formatter.outputBlockFormatter,
    
            }),
            new Method({
                name: 'getBlockTransactionCount',
                call: getBlockTransactionCountCall,
                params: 1,
                inputFormatter: [formatter.inputBlockNumberFormatter],
                outputFormatter: utils.hexToNumber
            }),
            new Method({
                name: 'getBlockUncleCount',
                call: uncleCountCall,
                params: 1,
                inputFormatter: [formatter.inputBlockNumberFormatter],
                outputFormatter: utils.hexToNumber
            }),
            new Method({
                name: 'getTransaction',
                call: 'eth_getTransactionByHash',
                params: 1,
                inputFormatter: [null],
                outputFormatter: formatter.outputTransactionFormatter
            }),
            new Method({
                name: 'getTransactionFromBlock',
                call: transactionFromBlockCall,
                params: 2,
                inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],
                outputFormatter: formatter.outputTransactionFormatter
            }),
            new Method({
                name: 'getTransactionReceipt',
                call: 'eth_getTransactionReceipt',
                params: 1,
                inputFormatter: [null],
                outputFormatter: formatter.outputTransactionReceiptFormatter
            }),
            new Method({
                name: 'getTransactionCount',
                call: 'eth_getTransactionCount',
                params: 2,
                inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
                outputFormatter: utils.hexToNumber
            }),
            new Method({
                name: 'sendSignedTransaction',
                call: 'eth_sendRawTransaction',
                params: 1,
                inputFormatter: [null]
            }),
            new Method({
                name: 'signTransaction',
                call: 'eth_signTransaction',
                params: 1,
                inputFormatter: [formatter.inputTransactionFormatter]
            }),
            new Method({
                name: 'sendTransaction',
                call: 'eth_sendTransaction',
                params: 1,
                inputFormatter: [formatter.inputTransactionFormatter]
            }),
            new Method({
                name: 'sign',
                call: 'eth_sign',
                params: 2,
                inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],
                transformPayload: function (payload) {
                    payload.params.reverse();
                    return payload;
                }
            }),
            new Method({
                name: 'call',
                call: 'eth_call',
                params: 2,
                inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]
            }),
            new Method({
                name: 'estimateGas',
                call: 'eth_estimateGas',
                params: 1,
                inputFormatter: [formatter.inputCallFormatter],
                outputFormatter: utils.hexToNumber
            }),
            new Method({
                name: 'submitWork',
                call: 'eth_submitWork',
                params: 3
            }),
            new Method({
                name: 'getWork',
                call: 'eth_getWork',
                params: 0
            }),
            new Method({
                name: 'getPastLogs',
                call: 'eth_getLogs',
                params: 1,
                inputFormatter: [formatter.inputLogFormatter],
                outputFormatter: formatter.outputLogFormatter
            }),
    
            // subscriptions
            new Subscriptions({
                name: 'subscribe',
                type: 'eth',
                subscriptions: {
                    'newBlockHeaders': {
                        // TODO rename on RPC side?
                        subscriptionName: 'newHeads', // replace subscription with this name
                        params: 0,
                        outputFormatter: formatter.outputBlockFormatter
                    },
                    'pendingTransactions': {
                        subscriptionName: 'newPendingTransactions', // replace subscription with this name
                        params: 0
                    },
                    'logs': {
                        params: 1,
                        inputFormatter: [formatter.inputLogFormatter],
                        outputFormatter: formatter.outputLogFormatter,
                        // DUBLICATE, also in web3-eth-contract
                        subscriptionHandler: function (output) {
                            if(output.removed) {
                                this.emit('changed', output);
                            } else {
                                this.emit('data', output);
                            }
    
                            if (_.isFunction(this.callback)) {
                                this.callback(null, output, this);
                            }
                        }
                    },
                    'syncing': {
                        params: 0,
                        outputFormatter: formatter.outputSyncingFormatter,
                        subscriptionHandler: function (output) {
                            var _this = this;
    
                            // fire TRUE at start
                            if(this._isSyncing !== true) {
                                this._isSyncing = true;
                                this.emit('changed', _this._isSyncing);
    
                                if (_.isFunction(this.callback)) {
                                    this.callback(null, _this._isSyncing, this);
                                }
    
                                setTimeout(function () {
                                    _this.emit('data', output);
    
                                    if (_.isFunction(_this.callback)) {
                                        _this.callback(null, output, _this);
                                    }
                                }, 0);
    
                                // fire sync status
                            } else {
                                this.emit('data', output);
                                if (_.isFunction(_this.callback)) {
                                    this.callback(null, output, this);
                                }
    
                                // wait for some time before fireing the FALSE
                                clearTimeout(this._isSyncingTimeout);
                                this._isSyncingTimeout = setTimeout(function () {
                                    if(output.currentBlock > output.highestBlock - 200) {
                                        _this._isSyncing = false;
                                        _this.emit('changed', _this._isSyncing);
    
                                        if (_.isFunction(_this.callback)) {
                                            _this.callback(null, _this._isSyncing, _this);
                                        }
                                    }
                                }, 500);
                            }
                        }
                    }
                }
            })
        ];
    
        methods.forEach(function(method) {
            method.attachToObject(_this);
            method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)
            method.defaultBlock = _this.defaultBlock;
            method.defaultAccount = _this.defaultAccount;
        });
    
    };
    
    core.addProviders(Eth);
    
    
    module.exports = Eth;
    
    
    },{"./getNetworkType.js":348,"underscore":297,"web3-core":323,"web3-core-helpers":313,"web3-core-method":314,"web3-core-subscriptions":320,"web3-eth-abi":334,"web3-eth-accounts":336,"web3-eth-contract":338,"web3-eth-ens":342,"web3-eth-iban":346,"web3-eth-personal":347,"web3-net":350,"web3-utils":355}],350:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var core = require('web3-core');
    var Method = require('web3-core-method');
    var utils = require('web3-utils');
    
    
    var Net = function () {
        var _this = this;
    
        // sets _requestmanager
        core.packageInit(this, arguments);
    
    
        [
            new Method({
                name: 'getId',
                call: 'net_version',
                params: 0,
                outputFormatter: utils.hexToNumber
            }),
            new Method({
                name: 'isListening',
                call: 'net_listening',
                params: 0
            }),
            new Method({
                name: 'getPeerCount',
                call: 'net_peerCount',
                params: 0,
                outputFormatter: utils.hexToNumber
            })
        ].forEach(function(method) {
            method.attachToObject(_this);
            method.setRequestManager(_this._requestManager);
        });
    
    };
    
    core.addProviders(Net);
    
    
    module.exports = Net;
    
    
    
    },{"web3-core":323,"web3-core-method":314,"web3-utils":355}],351:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /** @file httpprovider.js
     * @authors:
     *   Marek Kotewicz <marek@parity.io>
     *   Marian Oancea
     *   Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2015
     */
    
    var errors = require('web3-core-helpers').errors;
    var XHR2 = require('xhr2-cookies').XMLHttpRequest // jshint ignore: line
    var http = require('http');
    var https = require('https');
    
    
    /**
     * HttpProvider should be used to send rpc calls over http
     */
    var HttpProvider = function HttpProvider(host, options) {
        options = options || {};
    
        var keepAlive =
            (options.keepAlive === true || options.keepAlive !== false) ?
                true :
                false;
        this.host = host || 'http://localhost:8545';
        if (this.host.substring(0,5) === "https") {
            this.httpsAgent = new https.Agent({ keepAlive: keepAlive });
        }else{
            this.httpAgent = new http.Agent({ keepAlive: keepAlive });
        }
        this.timeout = options.timeout || 0;
        this.headers = options.headers;
        this.connected = false;
    };
    
    HttpProvider.prototype._prepareRequest = function(){
        var request = new XHR2();
        request.nodejsSet({
            httpsAgent:this.httpsAgent,
            httpAgent:this.httpAgent
        });
    
        request.open('POST', this.host, true);
        request.setRequestHeader('Content-Type','application/json');
        request.timeout = this.timeout && this.timeout !== 1 ? this.timeout : 0;
        request.withCredentials = true;
    
        if(this.headers) {
            this.headers.forEach(function(header) {
                request.setRequestHeader(header.name, header.value);
            });
        }
    
        return request;
    };
    
    /**
     * Should be used to make async request
     *
     * @method send
     * @param {Object} payload
     * @param {Function} callback triggered on end with (err, result)
     */
    HttpProvider.prototype.send = function (payload, callback) {
        var _this = this;
        var request = this._prepareRequest();
    
        request.onreadystatechange = function() {
            if (request.readyState === 4 && request.timeout !== 1) {
                var result = request.responseText;
                var error = null;
    
                try {
                    result = JSON.parse(result);
                } catch(e) {
                    error = errors.InvalidResponse(request.responseText);
                }
    
                _this.connected = true;
                callback(error, result);
            }
        };
    
        request.ontimeout = function() {
            _this.connected = false;
            callback(errors.ConnectionTimeout(this.timeout));
        };
    
        try {
            request.send(JSON.stringify(payload));
        } catch(error) {
            this.connected = false;
            callback(errors.InvalidConnection(this.host));
        }
    };
    
    HttpProvider.prototype.disconnect = function () {
        //NO OP
    };
    
    
    module.exports = HttpProvider;
    
    },{"http":278,"https":194,"web3-core-helpers":313,"xhr2-cookies":370}],352:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /** @file index.js
     * @authors:
     *   Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var _ = require('underscore');
    var errors = require('web3-core-helpers').errors;
    var oboe = require('oboe');
    
    
    var IpcProvider = function IpcProvider(path, net) {
        var _this = this;
        this.responseCallbacks = {};
        this.notificationCallbacks = [];
        this.path = path;
        this.connected = false;
    
        this.connection = net.connect({path: this.path});
    
        this.addDefaultEvents();
    
        // LISTEN FOR CONNECTION RESPONSES
        var callback = function(result) {
            /*jshint maxcomplexity: 6 */
    
            var id = null;
    
            // get the id which matches the returned id
            if(_.isArray(result)) {
                result.forEach(function(load){
                    if(_this.responseCallbacks[load.id])
                        id = load.id;
                });
            } else {
                id = result.id;
            }
    
            // notification
            if(!id && result.method.indexOf('_subscription') !== -1) {
                _this.notificationCallbacks.forEach(function(callback){
                    if(_.isFunction(callback))
                        callback(result);
                });
    
                // fire the callback
            } else if(_this.responseCallbacks[id]) {
                _this.responseCallbacks[id](null, result);
                delete _this.responseCallbacks[id];
            }
        };
    
        // use oboe.js for Sockets
        if (net.constructor.name === 'Socket') {
            oboe(this.connection)
            .done(callback);
        } else {
            this.connection.on('data', function(data){
                _this._parseResponse(data.toString()).forEach(callback);
            });
        }
    };
    
    /**
    Will add the error and end event to timeout existing calls
    
    @method addDefaultEvents
    */
    IpcProvider.prototype.addDefaultEvents = function(){
        var _this = this;
    
        this.connection.on('connect', function(){
            _this.connected = true;
        });
    
        this.connection.on('close', function(){
            _this.connected = false;
        });
    
        this.connection.on('error', function(){
            _this._timeout();
        });
    
        this.connection.on('end', function(){
            _this._timeout();
        });
    
        this.connection.on('timeout', function(){
            _this._timeout();
        });
    };
    
    
    /**
     Will parse the response and make an array out of it.
    
     NOTE, this exists for backwards compatibility reasons.
    
     @method _parseResponse
     @param {String} data
     */
    IpcProvider.prototype._parseResponse = function(data) {
        var _this = this,
            returnValues = [];
    
        // DE-CHUNKER
        var dechunkedData = data
            .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
            .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
            .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
            .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
            .split('|--|');
    
        dechunkedData.forEach(function(data){
    
            // prepend the last chunk
            if(_this.lastChunk)
                data = _this.lastChunk + data;
    
            var result = null;
    
            try {
                result = JSON.parse(data);
    
            } catch(e) {
    
                _this.lastChunk = data;
    
                // start timeout to cancel all requests
                clearTimeout(_this.lastChunkTimeout);
                _this.lastChunkTimeout = setTimeout(function(){
                    _this._timeout();
                    throw errors.InvalidResponse(data);
                }, 1000 * 15);
    
                return;
            }
    
            // cancel timeout and set chunk to null
            clearTimeout(_this.lastChunkTimeout);
            _this.lastChunk = null;
    
            if(result)
                returnValues.push(result);
        });
    
        return returnValues;
    };
    
    
    /**
    Get the adds a callback to the responseCallbacks object,
    which will be called if a response matching the response Id will arrive.
    
    @method _addResponseCallback
    */
    IpcProvider.prototype._addResponseCallback = function(payload, callback) {
        var id = payload.id || payload[0].id;
        var method = payload.method || payload[0].method;
    
        this.responseCallbacks[id] = callback;
        this.responseCallbacks[id].method = method;
    };
    
    /**
    Timeout all requests when the end/error event is fired
    
    @method _timeout
    */
    IpcProvider.prototype._timeout = function() {
        for(var key in this.responseCallbacks) {
            if(this.responseCallbacks.hasOwnProperty(key)){
                this.responseCallbacks[key](errors.InvalidConnection('on IPC'));
                delete this.responseCallbacks[key];
            }
        }
    };
    
    /**
     Try to reconnect
    
     @method reconnect
     */
    IpcProvider.prototype.reconnect = function() {
        this.connection.connect({path: this.path});
    };
    
    
    IpcProvider.prototype.send = function (payload, callback) {
        // try reconnect, when connection is gone
        if(!this.connection.writable)
            this.connection.connect({path: this.path});
    
    
        this.connection.write(JSON.stringify(payload));
        this._addResponseCallback(payload, callback);
    };
    
    /**
    Subscribes to provider events.provider
    
    @method on
    @param {String} type    'notification', 'connect', 'error', 'end' or 'data'
    @param {Function} callback   the callback to call
    */
    IpcProvider.prototype.on = function (type, callback) {
    
        if(typeof callback !== 'function')
            throw new Error('The second parameter callback must be a function.');
    
        switch(type){
            case 'data':
                this.notificationCallbacks.push(callback);
                break;
    
            // adds error, end, timeout, connect
            default:
                this.connection.on(type, callback);
                break;
        }
    };
    
    /**
     Subscribes to provider events.provider
    
     @method on
     @param {String} type    'connect', 'error', 'end' or 'data'
     @param {Function} callback   the callback to call
     */
    IpcProvider.prototype.once = function (type, callback) {
    
        if(typeof callback !== 'function')
            throw new Error('The second parameter callback must be a function.');
    
        this.connection.once(type, callback);
    };
    
    /**
    Removes event listener
    
    @method removeListener
    @param {String} type    'data', 'connect', 'error', 'end' or 'data'
    @param {Function} callback   the callback to call
    */
    IpcProvider.prototype.removeListener = function (type, callback) {
        var _this = this;
    
        switch(type){
            case 'data':
                this.notificationCallbacks.forEach(function(cb, index){
                    if(cb === callback)
                        _this.notificationCallbacks.splice(index, 1);
                });
                break;
    
            default:
                this.connection.removeListener(type, callback);
                break;
        }
    };
    
    /**
    Removes all event listeners
    
    @method removeAllListeners
    @param {String} type    'data', 'connect', 'error', 'end' or 'data'
    */
    IpcProvider.prototype.removeAllListeners = function (type) {
        switch(type){
            case 'data':
                this.notificationCallbacks = [];
                break;
    
            default:
                this.connection.removeAllListeners(type);
                break;
        }
    };
    
    /**
    Resets the providers, clears all callbacks
    
    @method reset
    */
    IpcProvider.prototype.reset = function () {
        this._timeout();
        this.notificationCallbacks = [];
    
        this.connection.removeAllListeners('error');
        this.connection.removeAllListeners('end');
        this.connection.removeAllListeners('timeout');
    
        this.addDefaultEvents();
    };
    
    module.exports = IpcProvider;
    
    
    },{"oboe":218,"underscore":297,"web3-core-helpers":313}],353:[function(require,module,exports){
    (function (process,Buffer){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /** @file WebsocketProvider.js
     * @authors:
     *   Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var _ = require('underscore');
    var errors = require('web3-core-helpers').errors;
    var Ws = require('websocket').w3cwebsocket;
    
    var isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
    
    var _btoa = null;
    var parseURL = null;
    if (isNode) {
        _btoa = function(str) {
            return Buffer.from(str).toString('base64');
        };
        var url = require('url');
        if (url.URL) {
            // Use the new Node 6+ API for parsing URLs that supports username/password
            var newURL = url.URL;
            parseURL = function(url) {
                return new newURL(url);
            };
        }
        else {
            // Web3 supports Node.js 5, so fall back to the legacy URL API if necessary
            parseURL = require('url').parse;
        }
    } else {
        _btoa = btoa;
        parseURL = function(url) {
            return new URL(url);
        };
    }
    // Default connection ws://localhost:8546
    
    
    
    
    var WebsocketProvider = function WebsocketProvider(url, options)  {
        if (!Ws) {
            throw new Error('websocket is not available');
        }
    
        var _this = this;
        this.responseCallbacks = {};
        this.notificationCallbacks = [];
    
        options = options || {};
        this._customTimeout = options.timeout;
    
        // The w3cwebsocket implementation does not support Basic Auth
        // username/password in the URL. So generate the basic auth header, and
        // pass through with any additional headers supplied in constructor
        var parsedURL = parseURL(url);
        var headers = options.headers || {};
        var protocol = options.protocol || undefined;
        if (parsedURL.username && parsedURL.password) {
            headers.authorization = 'Basic ' + _btoa(parsedURL.username + ':' + parsedURL.password);
        }
    
        // Allow a custom client configuration
        var clientConfig = options.clientConfig || undefined;
        
        // Allow a custom request options
        // https://github.com/theturtle32/WebSocket-Node/blob/master/docs/WebSocketClient.md#connectrequesturl-requestedprotocols-origin-headers-requestoptions
        var requestOptions = options.requestOptions || undefined;
    
        // When all node core implementations that do not have the
        // WHATWG compatible URL parser go out of service this line can be removed.
        if (parsedURL.auth) {
            headers.authorization = 'Basic ' + _btoa(parsedURL.auth);
        }
        this.connection = new Ws(url, protocol, undefined, headers, requestOptions, clientConfig);
    
        this.addDefaultEvents();
    
    
        // LISTEN FOR CONNECTION RESPONSES
        this.connection.onmessage = function(e) {
            /*jshint maxcomplexity: 6 */
            var data = (typeof e.data === 'string') ? e.data : '';
    
            _this._parseResponse(data).forEach(function(result){
    
                var id = null;
    
                // get the id which matches the returned id
                if(_.isArray(result)) {
                    result.forEach(function(load){
                        if(_this.responseCallbacks[load.id])
                            id = load.id;
                    });
                } else {
                    id = result.id;
                }
    
                // notification
                if(!id && result && result.method && result.method.indexOf('_subscription') !== -1) {
                    _this.notificationCallbacks.forEach(function(callback){
                        if(_.isFunction(callback))
                            callback(result);
                    });
    
                    // fire the callback
                } else if(_this.responseCallbacks[id]) {
                    _this.responseCallbacks[id](null, result);
                    delete _this.responseCallbacks[id];
                }
            });
        };
    
        // make property `connected` which will return the current connection status
        Object.defineProperty(this, 'connected', {
          get: function () {
            return this.connection && this.connection.readyState === this.connection.OPEN;
          },
          enumerable: true,
      });
    };
    
    /**
     Will add the error and end event to timeout existing calls
    
     @method addDefaultEvents
     */
    WebsocketProvider.prototype.addDefaultEvents = function(){
        var _this = this;
    
        this.connection.onerror = function(){
            _this._timeout();
        };
    
        this.connection.onclose = function(){
            _this._timeout();
    
            // reset all requests and callbacks
            _this.reset();
        };
    
        // this.connection.on('timeout', function(){
        //     _this._timeout();
        // });
    };
    
    /**
     Will parse the response and make an array out of it.
    
     @method _parseResponse
     @param {String} data
     */
    WebsocketProvider.prototype._parseResponse = function(data) {
        var _this = this,
            returnValues = [];
    
        // DE-CHUNKER
        var dechunkedData = data
            .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
            .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
            .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
            .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
            .split('|--|');
    
        dechunkedData.forEach(function(data){
    
            // prepend the last chunk
            if(_this.lastChunk)
                data = _this.lastChunk + data;
    
            var result = null;
    
            try {
                result = JSON.parse(data);
    
            } catch(e) {
    
                _this.lastChunk = data;
    
                // start timeout to cancel all requests
                clearTimeout(_this.lastChunkTimeout);
                _this.lastChunkTimeout = setTimeout(function(){
                    _this._timeout();
                    throw errors.InvalidResponse(data);
                }, 1000 * 15);
    
                return;
            }
    
            // cancel timeout and set chunk to null
            clearTimeout(_this.lastChunkTimeout);
            _this.lastChunk = null;
    
            if(result)
                returnValues.push(result);
        });
    
        return returnValues;
    };
    
    
    /**
     Adds a callback to the responseCallbacks object,
     which will be called if a response matching the response Id will arrive.
    
     @method _addResponseCallback
     */
    WebsocketProvider.prototype._addResponseCallback = function(payload, callback) {
        var id = payload.id || payload[0].id;
        var method = payload.method || payload[0].method;
    
        this.responseCallbacks[id] = callback;
        this.responseCallbacks[id].method = method;
    
        var _this = this;
    
        // schedule triggering the error response if a custom timeout is set
        if (this._customTimeout) {
            setTimeout(function () {
                if (_this.responseCallbacks[id]) {
                    _this.responseCallbacks[id](errors.ConnectionTimeout(_this._customTimeout));
                    delete _this.responseCallbacks[id];
                }
            }, this._customTimeout);
        }
    };
    
    /**
     Timeout all requests when the end/error event is fired
    
     @method _timeout
     */
    WebsocketProvider.prototype._timeout = function() {
        for(var key in this.responseCallbacks) {
            if(this.responseCallbacks.hasOwnProperty(key)){
                this.responseCallbacks[key](errors.InvalidConnection('on WS'));
                delete this.responseCallbacks[key];
            }
        }
    };
    
    
    WebsocketProvider.prototype.send = function (payload, callback) {
        var _this = this;
    
        if (this.connection.readyState === this.connection.CONNECTING) {
            setTimeout(function () {
                _this.send(payload, callback);
            }, 10);
            return;
        }
    
        // try reconnect, when connection is gone
        // if(!this.connection.writable)
        //     this.connection.connect({url: this.url});
        if (this.connection.readyState !== this.connection.OPEN) {
            console.error('connection not open on send()');
            if (typeof this.connection.onerror === 'function') {
                this.connection.onerror(new Error('connection not open'));
            } else {
                console.error('no error callback');
            }
            callback(new Error('connection not open'));
            return;
        }
    
        this.connection.send(JSON.stringify(payload));
        this._addResponseCallback(payload, callback);
    };
    
    /**
     Subscribes to provider events.provider
    
     @method on
     @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
     @param {Function} callback   the callback to call
     */
    WebsocketProvider.prototype.on = function (type, callback) {
    
        if(typeof callback !== 'function')
            throw new Error('The second parameter callback must be a function.');
    
        switch(type){
            case 'data':
                this.notificationCallbacks.push(callback);
                break;
    
            case 'connect':
                this.connection.onopen = callback;
                break;
    
            case 'end':
                this.connection.onclose = callback;
                break;
    
            case 'error':
                this.connection.onerror = callback;
                break;
    
            // default:
            //     this.connection.on(type, callback);
            //     break;
        }
    };
    
    // TODO add once
    
    /**
     Removes event listener
    
     @method removeListener
     @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
     @param {Function} callback   the callback to call
     */
    WebsocketProvider.prototype.removeListener = function (type, callback) {
        var _this = this;
    
        switch(type){
            case 'data':
                this.notificationCallbacks.forEach(function(cb, index){
                    if(cb === callback)
                        _this.notificationCallbacks.splice(index, 1);
                });
                break;
    
            // TODO remvoving connect missing
    
            // default:
            //     this.connection.removeListener(type, callback);
            //     break;
        }
    };
    
    /**
     Removes all event listeners
    
     @method removeAllListeners
     @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
     */
    WebsocketProvider.prototype.removeAllListeners = function (type) {
        switch(type){
            case 'data':
                this.notificationCallbacks = [];
                break;
    
            // TODO remvoving connect properly missing
    
            case 'connect':
                this.connection.onopen = null;
                break;
    
            case 'end':
                this.connection.onclose = null;
                break;
    
            case 'error':
                this.connection.onerror = null;
                break;
    
            default:
                // this.connection.removeAllListeners(type);
                break;
        }
    };
    
    /**
     Resets the providers, clears all callbacks
    
     @method reset
     */
    WebsocketProvider.prototype.reset = function () {
        this._timeout();
        this.notificationCallbacks = [];
    
        // this.connection.removeAllListeners('error');
        // this.connection.removeAllListeners('end');
        // this.connection.removeAllListeners('timeout');
    
        this.addDefaultEvents();
    };
    
    WebsocketProvider.prototype.disconnect = function () {
        if (this.connection) {
            this.connection.close();
        }
    };
    
    module.exports = WebsocketProvider;
    
    }).call(this,require('_process'),require("buffer").Buffer)
    },{"_process":231,"buffer":96,"underscore":297,"url":300,"web3-core-helpers":313,"websocket":360}],354:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    var core = require('web3-core');
    var Subscriptions = require('web3-core-subscriptions').subscriptions;
    var Method = require('web3-core-method');
    // var formatters = require('web3-core-helpers').formatters;
    var Net = require('web3-net');
    
    
    var Shh = function Shh() {
        var _this = this;
    
        // sets _requestmanager
        core.packageInit(this, arguments);
    
        // overwrite setProvider
        var setProvider = this.setProvider;
        this.setProvider = function () {
            setProvider.apply(_this, arguments);
            _this.net.setProvider.apply(_this, arguments);
        };
    
        this.net = new Net(this.currentProvider);
    
        [
            new Subscriptions({
                name: 'subscribe',
                type: 'shh',
                subscriptions: {
                    'messages': {
                        params: 1
                        // inputFormatter: [formatters.inputPostFormatter],
                        // outputFormatter: formatters.outputPostFormatter
                    }
                }
            }),
    
            new Method({
                name: 'getVersion',
                call: 'shh_version',
                params: 0
            }),
            new Method({
                name: 'getInfo',
                call: 'shh_info',
                params: 0
            }),
            new Method({
                name: 'setMaxMessageSize',
                call: 'shh_setMaxMessageSize',
                params: 1
            }),
            new Method({
                name: 'setMinPoW',
                call: 'shh_setMinPoW',
                params: 1
            }),
            new Method({
                name: 'markTrustedPeer',
                call: 'shh_markTrustedPeer',
                params: 1
            }),
            new Method({
                name: 'newKeyPair',
                call: 'shh_newKeyPair',
                params: 0
            }),
            new Method({
                name: 'addPrivateKey',
                call: 'shh_addPrivateKey',
                params: 1
            }),
            new Method({
                name: 'deleteKeyPair',
                call: 'shh_deleteKeyPair',
                params: 1
            }),
            new Method({
                name: 'hasKeyPair',
                call: 'shh_hasKeyPair',
                params: 1
            }),
            new Method({
                name: 'getPublicKey',
                call: 'shh_getPublicKey',
                params: 1
            }),
            new Method({
                name: 'getPrivateKey',
                call: 'shh_getPrivateKey',
                params: 1
            }),
            new Method({
                name: 'newSymKey',
                call: 'shh_newSymKey',
                params: 0
            }),
            new Method({
                name: 'addSymKey',
                call: 'shh_addSymKey',
                params: 1
            }),
            new Method({
                name: 'generateSymKeyFromPassword',
                call: 'shh_generateSymKeyFromPassword',
                params: 1
            }),
            new Method({
                name: 'hasSymKey',
                call: 'shh_hasSymKey',
                params: 1
            }),
            new Method({
                name: 'getSymKey',
                call: 'shh_getSymKey',
                params: 1
            }),
            new Method({
                name: 'deleteSymKey',
                call: 'shh_deleteSymKey',
                params: 1
            }),
    
            new Method({
                name: 'newMessageFilter',
                call: 'shh_newMessageFilter',
                params: 1
            }),
            new Method({
                name: 'getFilterMessages',
                call: 'shh_getFilterMessages',
                params: 1
            }),
            new Method({
                name: 'deleteMessageFilter',
                call: 'shh_deleteMessageFilter',
                params: 1
            }),
    
            new Method({
                name: 'post',
                call: 'shh_post',
                params: 1,
                inputFormatter: [null]
            }),
    
            new Method({
                name: 'unsubscribe',
                call: 'shh_unsubscribe',
                params: 1
            })
        ].forEach(function(method) {
            method.attachToObject(_this);
            method.setRequestManager(_this._requestManager);
        });
    };
    
    Shh.prototype.clearSubscriptions = function () {
         this._requestManager.clearSubscriptions();
    };
    
    core.addProviders(Shh);
    
    
    
    module.exports = Shh;
    
    
    
    },{"web3-core":323,"web3-core-method":314,"web3-core-subscriptions":320,"web3-net":350}],355:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file utils.js
     * @author Marek Kotewicz <marek@parity.io>
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    
    var _ = require('underscore');
    var ethjsUnit = require('ethjs-unit');
    var utils = require('./utils.js');
    var soliditySha3 = require('./soliditySha3.js');
    var randomHex = require('randomhex');
    
    
    
    /**
     * Fires an error in an event emitter and callback and returns the eventemitter
     *
     * @method _fireError
     * @param {Object} error a string, a error, or an object with {message, data}
     * @param {Object} emitter
     * @param {Function} reject
     * @param {Function} callback
     * @return {Object} the emitter
     */
    var _fireError = function (error, emitter, reject, callback) {
        /*jshint maxcomplexity: 10 */
    
        // add data if given
        if(_.isObject(error) && !(error instanceof Error) &&  error.data) {
            if(_.isObject(error.data) || _.isArray(error.data)) {
                error.data = JSON.stringify(error.data, null, 2);
            }
    
            error = error.message +"\n"+ error.data;
        }
    
        if(_.isString(error)) {
            error = new Error(error);
        }
    
        if (_.isFunction(callback)) {
            callback(error);
        }
        if (_.isFunction(reject)) {
            // suppress uncatched error if an error listener is present
            // OR suppress uncatched error if an callback listener is present
            if (emitter &&
                (_.isFunction(emitter.listeners) &&
                emitter.listeners('error').length) || _.isFunction(callback)) {
                emitter.catch(function(){});
            }
            // reject later, to be able to return emitter
            setTimeout(function () {
                reject(error);
            }, 1);
        }
    
        if(emitter && _.isFunction(emitter.emit)) {
            // emit later, to be able to return emitter
            setTimeout(function () {
                emitter.emit('error', error);
                emitter.removeAllListeners();
            }, 1);
        }
    
        return emitter;
    };
    
    /**
     * Should be used to create full function/event name from json abi
     *
     * @method _jsonInterfaceMethodToString
     * @param {Object} json
     * @return {String} full function/event name
     */
    var _jsonInterfaceMethodToString = function (json) {
        if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {
            return json.name;
        }
    
        return json.name + '(' + _flattenTypes(false, json.inputs).join(',') + ')';
    };
    
    
    /**
     * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings
     *
     * @method _flattenTypes
     * @param {bool} includeTuple
     * @param {Object} puts
     * @return {Array} parameters as strings
     */
    var _flattenTypes = function(includeTuple, puts)
    {
        // console.log("entered _flattenTypes. inputs/outputs: " + puts)
        var types = [];
    
        puts.forEach(function(param) {
            if (typeof param.components === 'object') {
                if (param.type.substring(0, 5) !== 'tuple') {
                    throw new Error('components found but type is not tuple; report on GitHub');
                }
                var suffix = '';
                var arrayBracket = param.type.indexOf('[');
                if (arrayBracket >= 0) { suffix = param.type.substring(arrayBracket); }
                var result = _flattenTypes(includeTuple, param.components);
                // console.log("result should have things: " + result)
                if(_.isArray(result) && includeTuple) {
                    // console.log("include tuple word, and its an array. joining...: " + result.types)
                    types.push('tuple(' + result.join(',') + ')' + suffix);
                }
                else if(!includeTuple) {
                    // console.log("don't include tuple, but its an array. joining...: " + result)
                    types.push('(' + result.join(',') + ')' + suffix);
                }
                else {
                    // console.log("its a single type within a tuple: " + result.types)
                    types.push('(' + result + ')');
                }
            } else {
                // console.log("its a type and not directly in a tuple: " + param.type)
                types.push(param.type);
            }
        });
    
        return types;
    };
    
    
    /**
     * Should be called to get ascii from it's hex representation
     *
     * @method hexToAscii
     * @param {String} hex
     * @returns {String} ascii string representation of hex value
     */
    var hexToAscii = function(hex) {
        if (!utils.isHexStrict(hex))
            throw new Error('The parameter must be a valid HEX string.');
    
        var str = "";
        var i = 0, l = hex.length;
        if (hex.substring(0, 2) === '0x') {
            i = 2;
        }
        for (; i < l; i+=2) {
            var code = parseInt(hex.substr(i, 2), 16);
            str += String.fromCharCode(code);
        }
    
        return str;
    };
    
    /**
     * Should be called to get hex representation (prefixed by 0x) of ascii string
     *
     * @method asciiToHex
     * @param {String} str
     * @returns {String} hex representation of input string
     */
    var asciiToHex = function(str) {
        if(!str)
            return "0x00";
        var hex = "";
        for(var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i);
            var n = code.toString(16);
            hex += n.length < 2 ? '0' + n : n;
        }
    
        return "0x" + hex;
    };
    
    
    
    /**
     * Returns value of unit in Wei
     *
     * @method getUnitValue
     * @param {String} unit the unit to convert to, default ether
     * @returns {BN} value of the unit (in Wei)
     * @throws error if the unit is not correct:w
     */
    var getUnitValue = function (unit) {
        unit = unit ? unit.toLowerCase() : 'ether';
        if (!ethjsUnit.unitMap[unit]) {
            throw new Error('This unit "'+ unit +'" doesn\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));
        }
        return unit;
    };
    
    /**
     * Takes a number of wei and converts it to any other ether unit.
     *
     * Possible units are:
     *   SI Short   SI Full        Effigy       Other
     * - kwei       femtoether     babbage
     * - mwei       picoether      lovelace
     * - gwei       nanoether      shannon      nano
     * - --         microether     szabo        micro
     * - --         milliether     finney       milli
     * - ether      --             --
     * - kether                    --           grand
     * - mether
     * - gether
     * - tether
     *
     * @method fromWei
     * @param {Number|String} number can be a number, number string or a HEX of a decimal
     * @param {String} unit the unit to convert to, default ether
     * @return {String|Object} When given a BN object it returns one as well, otherwise a number
     */
    var fromWei = function(number, unit) {
        unit = getUnitValue(unit);
    
        if(!utils.isBN(number) && !_.isString(number)) {
            throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
        }
    
        return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
    };
    
    /**
     * Takes a number of a unit and converts it to wei.
     *
     * Possible units are:
     *   SI Short   SI Full        Effigy       Other
     * - kwei       femtoether     babbage
     * - mwei       picoether      lovelace
     * - gwei       nanoether      shannon      nano
     * - --         microether     szabo        micro
     * - --         microether     szabo        micro
     * - --         milliether     finney       milli
     * - ether      --             --
     * - kether                    --           grand
     * - mether
     * - gether
     * - tether
     *
     * @method toWei
     * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal
     * @param {String} unit the unit to convert from, default ether
     * @return {String|Object} When given a BN object it returns one as well, otherwise a number
     */
    var toWei = function(number, unit) {
        unit = getUnitValue(unit);
    
        if(!utils.isBN(number) && !_.isString(number)) {
            throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
        }
    
        return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
    };
    
    
    
    
    /**
     * Converts to a checksum address
     *
     * @method toChecksumAddress
     * @param {String} address the given HEX address
     * @return {String}
     */
    var toChecksumAddress = function (address) {
        if (typeof address === 'undefined') return '';
    
        if(!/^(0x)?[0-9a-f]{40}$/i.test(address))
            throw new Error('Given address "'+ address +'" is not a valid Ethereum address.');
    
    
    
        address = address.toLowerCase().replace(/^0x/i,'');
        var addressHash = utils.sha3(address).replace(/^0x/i,'');
        var checksumAddress = '0x';
    
        for (var i = 0; i < address.length; i++ ) {
            // If ith character is 9 to f then make it uppercase
            if (parseInt(addressHash[i], 16) > 7) {
                checksumAddress += address[i].toUpperCase();
            } else {
                checksumAddress += address[i];
            }
        }
        return checksumAddress;
    };
    
    
    
    module.exports = {
        _fireError: _fireError,
        _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,
        _flattenTypes: _flattenTypes,
        // extractDisplayName: extractDisplayName,
        // extractTypeName: extractTypeName,
        randomHex: randomHex,
        _: _,
        BN: utils.BN,
        isBN: utils.isBN,
        isBigNumber: utils.isBigNumber,
        isHex: utils.isHex,
        isHexStrict: utils.isHexStrict,
        sha3: utils.sha3,
        keccak256: utils.sha3,
        soliditySha3: soliditySha3,
        isAddress: utils.isAddress,
        checkAddressChecksum: utils.checkAddressChecksum,
        toChecksumAddress: toChecksumAddress,
        toHex: utils.toHex,
        toBN: utils.toBN,
    
        bytesToHex: utils.bytesToHex,
        hexToBytes: utils.hexToBytes,
    
        hexToNumberString: utils.hexToNumberString,
    
        hexToNumber: utils.hexToNumber,
        toDecimal: utils.hexToNumber, // alias
    
        numberToHex: utils.numberToHex,
        fromDecimal: utils.numberToHex, // alias
    
        hexToUtf8: utils.hexToUtf8,
        hexToString: utils.hexToUtf8,
        toUtf8: utils.hexToUtf8,
    
        utf8ToHex: utils.utf8ToHex,
        stringToHex: utils.utf8ToHex,
        fromUtf8: utils.utf8ToHex,
    
        hexToAscii: hexToAscii,
        toAscii: hexToAscii,
        asciiToHex: asciiToHex,
        fromAscii: asciiToHex,
    
        unitMap: ethjsUnit.unitMap,
        toWei: toWei,
        fromWei: fromWei,
    
        padLeft: utils.leftPad,
        leftPad: utils.leftPad,
        padRight: utils.rightPad,
        rightPad: utils.rightPad,
        toTwosComplement: utils.toTwosComplement
    };
    
    
    },{"./soliditySha3.js":356,"./utils.js":357,"ethjs-unit":169,"randomhex":247,"underscore":297}],356:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file soliditySha3.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    var _ = require('underscore');
    var BN = require('bn.js');
    var utils = require('./utils.js');
    
    
    var _elementaryName = function (name) {
        /*jshint maxcomplexity:false */
    
        if (name.startsWith('int[')) {
            return 'int256' + name.slice(3);
        } else if (name === 'int') {
            return 'int256';
        } else if (name.startsWith('uint[')) {
            return 'uint256' + name.slice(4);
        } else if (name === 'uint') {
            return 'uint256';
        } else if (name.startsWith('fixed[')) {
            return 'fixed128x128' + name.slice(5);
        } else if (name === 'fixed') {
            return 'fixed128x128';
        } else if (name.startsWith('ufixed[')) {
            return 'ufixed128x128' + name.slice(6);
        } else if (name === 'ufixed') {
            return 'ufixed128x128';
        }
        return name;
    };
    
    // Parse N from type<N>
    var _parseTypeN = function (type) {
        var typesize = /^\D+(\d+).*$/.exec(type);
        return typesize ? parseInt(typesize[1], 10) : null;
    };
    
    // Parse N from type[<N>]
    var _parseTypeNArray = function (type) {
        var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
        return arraySize ? parseInt(arraySize[1], 10) : null;
    };
    
    var _parseNumber = function (arg) {
        var type = typeof arg;
        if (type === 'string') {
            if (utils.isHexStrict(arg)) {
                return new BN(arg.replace(/0x/i,''), 16);
            } else {
                return new BN(arg, 10);
            }
        } else if (type === 'number') {
            return new BN(arg);
        } else if (utils.isBigNumber(arg)) {
            return new BN(arg.toString(10));
        } else if (utils.isBN(arg)) {
            return arg;
        } else {
            throw new Error(arg +' is not a number');
        }
    };
    
    var _solidityPack = function (type, value, arraySize) {
        /*jshint maxcomplexity:false */
    
        var size, num;
        type = _elementaryName(type);
    
    
        if (type === 'bytes') {
    
            if (value.replace(/^0x/i,'').length % 2 !== 0) {
                throw new Error('Invalid bytes characters '+ value.length);
            }
    
            return value;
        } else if (type === 'string') {
            return utils.utf8ToHex(value);
        } else if (type === 'bool') {
            return value ? '01' : '00';
        } else if (type.startsWith('address')) {
            if(arraySize) {
                size = 64;
            } else {
                size = 40;
            }
    
            if(!utils.isAddress(value)) {
                throw new Error(value +' is not a valid address, or the checksum is invalid.');
            }
    
            return utils.leftPad(value.toLowerCase(), size);
        }
    
        size = _parseTypeN(type);
    
        if (type.startsWith('bytes')) {
    
            if(!size) {
                throw new Error('bytes[] not yet supported in solidity');
            }
    
            // must be 32 byte slices when in an array
            if(arraySize) {
                size = 32;
            }
    
            if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {
                throw new Error('Invalid bytes' + size +' for '+ value);
            }
    
            return utils.rightPad(value, size * 2);
        } else if (type.startsWith('uint')) {
    
            if ((size % 8) || (size < 8) || (size > 256)) {
                throw new Error('Invalid uint'+size+' size');
            }
    
            num = _parseNumber(value);
            if (num.bitLength() > size) {
                throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
            }
    
            if(num.lt(new BN(0))) {
                throw new Error('Supplied uint '+ num.toString() +' is negative');
            }
    
            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;
        } else if (type.startsWith('int')) {
    
            if ((size % 8) || (size < 8) || (size > 256)) {
                throw new Error('Invalid int'+size+' size');
            }
    
            num = _parseNumber(value);
            if (num.bitLength() > size) {
                throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
            }
    
            if(num.lt(new BN(0))) {
                return num.toTwos(size).toString('hex');
            } else {
                return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;
            }
    
        } else {
            // FIXME: support all other types
            throw new Error('Unsupported or invalid type: ' + type);
        }
    };
    
    
    var _processSoliditySha3Args = function (arg) {
        /*jshint maxcomplexity:false */
    
        if(_.isArray(arg)) {
            throw new Error('Autodetection of array types is not supported.');
        }
    
        var type, value = '';
        var hexArg, arraySize;
    
        // if type is given
        if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {
            type = arg.hasOwnProperty('t') ? arg.t : arg.type;
            value = arg.hasOwnProperty('v') ? arg.v : arg.value;
    
        // otherwise try to guess the type
        } else {
    
            type = utils.toHex(arg, true);
            value = utils.toHex(arg);
    
            if (!type.startsWith('int') && !type.startsWith('uint')) {
                type = 'bytes';
            }
        }
    
        if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {
            value = new BN(value);
        }
    
        // get the array size
        if(_.isArray(value)) {
            arraySize = _parseTypeNArray(type);
            if(arraySize && value.length !== arraySize) {
                throw new Error(type +' is not matching the given array '+ JSON.stringify(value));
            } else {
                arraySize = value.length;
            }
        }
    
    
        if (_.isArray(value)) {
            hexArg = value.map(function (val) {
                return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');
            });
            return hexArg.join('');
        } else {
            hexArg = _solidityPack(type, value, arraySize);
            return hexArg.toString('hex').replace('0x','');
        }
    
    };
    
    /**
     * Hashes solidity values to a sha3 hash using keccak 256
     *
     * @method soliditySha3
     * @return {Object} the sha3
     */
    var soliditySha3 = function () {
        /*jshint maxcomplexity:false */
    
        var args = Array.prototype.slice.call(arguments);
    
        var hexArgs = _.map(args, _processSoliditySha3Args);
    
        // console.log(args, hexArgs);
        // console.log('0x'+ hexArgs.join(''));
    
        return utils.sha3('0x'+ hexArgs.join(''));
    };
    
    
    module.exports = soliditySha3;
    
    },{"./utils.js":357,"bn.js":61,"underscore":297}],357:[function(require,module,exports){
    /*
     This file is part of web3.js.
    
     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
    
     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
    
     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file utils.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */
    
    var _ = require('underscore');
    var BN = require('bn.js');
    var numberToBN = require('number-to-bn');
    var utf8 = require('utf8');
    var Hash = require("eth-lib/lib/hash");
    
    
    /**
     * Returns true if object is BN, otherwise false
     *
     * @method isBN
     * @param {Object} object
     * @return {Boolean}
     */
    var isBN = function (object) {
        return object instanceof BN ||
            (object && object.constructor && object.constructor.name === 'BN');
    };
    
    /**
     * Returns true if object is BigNumber, otherwise false
     *
     * @method isBigNumber
     * @param {Object} object
     * @return {Boolean}
     */
    var isBigNumber = function (object) {
        return object && object.constructor && object.constructor.name === 'BigNumber';
    };
    
    /**
     * Takes an input and transforms it into an BN
     *
     * @method toBN
     * @param {Number|String|BN} number, string, HEX string or BN
     * @return {BN} BN
     */
    var toBN = function(number){
        try {
            return numberToBN.apply(null, arguments);
        } catch(e) {
            throw new Error(e + ' Given value: "'+ number +'"');
        }
    };
    
    
    /**
     * Takes and input transforms it into BN and if it is negative value, into two's complement
     *
     * @method toTwosComplement
     * @param {Number|String|BN} number
     * @return {String}
     */
    var toTwosComplement = function (number) {
        return '0x'+ toBN(number).toTwos(256).toString(16, 64);
    };
    
    /**
     * Checks if the given string is an address
     *
     * @method isAddress
     * @param {String} address the given HEX address
     * @return {Boolean}
     */
    var isAddress = function (address) {
        // check if it has the basic requirements of an address
        if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
            return false;
            // If it's ALL lowercase or ALL upppercase
        } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
            return true;
            // Otherwise check each case
        } else {
            return checkAddressChecksum(address);
        }
    };
    
    
    
    /**
     * Checks if the given string is a checksummed address
     *
     * @method checkAddressChecksum
     * @param {String} address the given HEX address
     * @return {Boolean}
     */
    var checkAddressChecksum = function (address) {
        // Check each case
        address = address.replace(/^0x/i,'');
        var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');
    
        for (var i = 0; i < 40; i++ ) {
            // the nth letter should be uppercase if the nth digit of casemap is 1
            if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
                return false;
            }
        }
        return true;
    };
    
    /**
     * Should be called to pad string to expected length
     *
     * @method leftPad
     * @param {String} string to be padded
     * @param {Number} chars that result string should have
     * @param {String} sign, by default 0
     * @returns {String} right aligned string
     */
    var leftPad = function (string, chars, sign) {
        var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
        string = string.toString(16).replace(/^0x/i,'');
    
        var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
    
        return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : "0") + string;
    };
    
    /**
     * Should be called to pad string to expected length
     *
     * @method rightPad
     * @param {String} string to be padded
     * @param {Number} chars that result string should have
     * @param {String} sign, by default 0
     * @returns {String} right aligned string
     */
    var rightPad = function (string, chars, sign) {
        var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
        string = string.toString(16).replace(/^0x/i,'');
    
        var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
    
        return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : "0"));
    };
    
    
    /**
     * Should be called to get hex representation (prefixed by 0x) of utf8 string
     *
     * @method utf8ToHex
     * @param {String} str
     * @returns {String} hex representation of input string
     */
    var utf8ToHex = function(str) {
        str = utf8.encode(str);
        var hex = "";
    
        // remove \u0000 padding from either side
        str = str.replace(/^(?:\u0000)*/,'');
        str = str.split("").reverse().join("");
        str = str.replace(/^(?:\u0000)*/,'');
        str = str.split("").reverse().join("");
    
        for(var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i);
            // if (code !== 0) {
            var n = code.toString(16);
            hex += n.length < 2 ? '0' + n : n;
            // }
        }
    
        return "0x" + hex;
    };
    
    /**
     * Should be called to get utf8 from it's hex representation
     *
     * @method hexToUtf8
     * @param {String} hex
     * @returns {String} ascii string representation of hex value
     */
    var hexToUtf8 = function(hex) {
        if (!isHexStrict(hex))
            throw new Error('The parameter "'+ hex +'" must be a valid HEX string.');
    
        var str = "";
        var code = 0;
        hex = hex.replace(/^0x/i,'');
    
        // remove 00 padding from either side
        hex = hex.replace(/^(?:00)*/,'');
        hex = hex.split("").reverse().join("");
        hex = hex.replace(/^(?:00)*/,'');
        hex = hex.split("").reverse().join("");
    
        var l = hex.length;
    
        for (var i=0; i < l; i+=2) {
            code = parseInt(hex.substr(i, 2), 16);
            // if (code !== 0) {
            str += String.fromCharCode(code);
            // }
        }
    
        return utf8.decode(str);
    };
    
    
    /**
     * Converts value to it's number representation
     *
     * @method hexToNumber
     * @param {String|Number|BN} value
     * @return {String}
     */
    var hexToNumber = function (value) {
        if (!value) {
            return value;
        }
    
        return toBN(value).toNumber();
    };
    
    /**
     * Converts value to it's decimal representation in string
     *
     * @method hexToNumberString
     * @param {String|Number|BN} value
     * @return {String}
     */
    var hexToNumberString = function (value) {
        if (!value) return value;
    
        return toBN(value).toString(10);
    };
    
    
    /**
     * Converts value to it's hex representation
     *
     * @method numberToHex
     * @param {String|Number|BN} value
     * @return {String}
     */
    var numberToHex = function (value) {
        if (_.isNull(value) || _.isUndefined(value)) {
            return value;
        }
    
        if (!isFinite(value) && !isHexStrict(value)) {
            throw new Error('Given input "'+value+'" is not a number.');
        }
    
        var number = toBN(value);
        var result = number.toString(16);
    
        return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;
    };
    
    
    /**
     * Convert a byte array to a hex string
     *
     * Note: Implementation from crypto-js
     *
     * @method bytesToHex
     * @param {Array} bytes
     * @return {String} the hex string
     */
    var bytesToHex = function(bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
            /* jshint ignore:start */
            hex.push((bytes[i] >>> 4).toString(16));
            hex.push((bytes[i] & 0xF).toString(16));
            /* jshint ignore:end */
        }
        return '0x'+ hex.join("");
    };
    
    /**
     * Convert a hex string to a byte array
     *
     * Note: Implementation from crypto-js
     *
     * @method hexToBytes
     * @param {string} hex
     * @return {Array} the byte array
     */
    var hexToBytes = function(hex) {
        hex = hex.toString(16);
    
        if (!isHexStrict(hex)) {
            throw new Error('Given value "'+ hex +'" is not a valid hex string.');
        }
    
        hex = hex.replace(/^0x/i,'');
    
        for (var bytes = [], c = 0; c < hex.length; c += 2)
            bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
    };
    
    /**
     * Auto converts any given value into it's hex representation.
     *
     * And even stringifys objects before.
     *
     * @method toHex
     * @param {String|Number|BN|Object} value
     * @param {Boolean} returnType
     * @return {String}
     */
    var toHex = function (value, returnType) {
        /*jshint maxcomplexity: false */
    
        if (isAddress(value)) {
            return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');
        }
    
        if (_.isBoolean(value)) {
            return returnType ? 'bool' : value ? '0x01' : '0x00';
        }
    
    
        if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {
            return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
        }
    
        // if its a negative number, pass it through numberToHex
        if (_.isString(value)) {
            if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {
                return returnType ? 'int256' : numberToHex(value);
            } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {
                return returnType ? 'bytes' : value;
            } else if (!isFinite(value)) {
                return returnType ? 'string' : utf8ToHex(value);
            }
        }
    
        return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);
    };
    
    
    /**
     * Check if string is HEX, requires a 0x in front
     *
     * @method isHexStrict
     * @param {String} hex to be checked
     * @returns {Boolean}
     */
    var isHexStrict = function (hex) {
        return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));
    };
    
    /**
     * Check if string is HEX
     *
     * @method isHex
     * @param {String} hex to be checked
     * @returns {Boolean}
     */
    var isHex = function (hex) {
        return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));
    };
    
    
    /**
     * Returns true if given string is a valid Ethereum block header bloom.
     *
     * TODO UNDOCUMENTED
     *
     * @method isBloom
     * @param {String} hex encoded bloom filter
     * @return {Boolean}
     */
    var isBloom = function (bloom) {
        if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
            return false;
        } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
            return true;
        }
        return false;
    };
    
    /**
     * Returns true if given string is a valid log topic.
     *
     * TODO UNDOCUMENTED
     *
     * @method isTopic
     * @param {String} hex encoded topic
     * @return {Boolean}
     */
    var isTopic = function (topic) {
        if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
            return false;
        } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
            return true;
        }
        return false;
    };
    
    
    /**
     * Hashes values to a sha3 hash using keccak 256
     *
     * To hash a HEX string the hex must have 0x in front.
     *
     * @method sha3
     * @return {String} the sha3 string
     */
    var SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
    
    var sha3 = function (value) {
        if (isBN(value)) {
            value = value.toString();
        }
    
        if (isHexStrict(value) && /^0x/i.test((value).toString())) {
            value = hexToBytes(value);
        }
    
        var returnValue = Hash.keccak256(value); // jshint ignore:line
    
        if(returnValue === SHA3_NULL_S) {
            return null;
        } else {
            return returnValue;
        }
    };
    // expose the under the hood keccak256
    sha3._Hash = Hash;
    
    
    module.exports = {
        BN: BN,
        isBN: isBN,
        isBigNumber: isBigNumber,
        toBN: toBN,
        isAddress: isAddress,
        isBloom: isBloom, // TODO UNDOCUMENTED
        isTopic: isTopic, // TODO UNDOCUMENTED
        checkAddressChecksum: checkAddressChecksum,
        utf8ToHex: utf8ToHex,
        hexToUtf8: hexToUtf8,
        hexToNumber: hexToNumber,
        hexToNumberString: hexToNumberString,
        numberToHex: numberToHex,
        toHex: toHex,
        hexToBytes: hexToBytes,
        bytesToHex: bytesToHex,
        isHex: isHex,
        isHexStrict: isHexStrict,
        leftPad: leftPad,
        rightPad: rightPad,
        toTwosComplement: toTwosComplement,
        sha3: sha3
    };
    
    },{"bn.js":61,"eth-lib/lib/hash":161,"number-to-bn":213,"underscore":297,"utf8":302}],358:[function(require,module,exports){
    module.exports={
        "name": "web3",
        "version": "1.2.1",
        "description": "Ethereum JavaScript API",
        "repository": "https://github.com/ethereum/web3.js/tree/1.x/packages/web3",
        "license": "LGPL-3.0",
        "engines": {
            "node": ">=8.0.0"
        },
        "main": "src/index.js",
        "bugs": {
            "url": "https://github.com/ethereum/web3.js/issues"
        },
        "keywords": [
            "Ethereum",
            "JavaScript",
            "API"
        ],
        "author": "ethereum.org",
        "authors": [
            {
                "name": "Fabian Vogelsteller",
                "email": "fabian@ethereum.org",
                "homepage": "http://frozeman.de"
            },
            {
                "name": "Marek Kotewicz",
                "email": "marek@parity.io",
                "url": "https://github.com/debris"
            },
            {
                "name": "Marian Oancea",
                "url": "https://github.com/cubedro"
            },
            {
                "name": "Gav Wood",
                "email": "g@parity.io",
                "homepage": "http://gavwood.com"
            },
            {
                "name": "Jeffery Wilcke",
                "email": "jeffrey.wilcke@ethereum.org",
                "url": "https://github.com/obscuren"
            }
        ],
        "dependencies": {
            "web3-bzz": "1.2.1",
            "web3-core": "1.2.1",
            "web3-eth": "1.2.1",
            "web3-eth-personal": "1.2.1",
            "web3-net": "1.2.1",
            "web3-shh": "1.2.1",
            "web3-utils": "1.2.1"
        }
    }
    
    },{}],359:[function(require,module,exports){
    /*
        This file is part of web3.js.
    
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @authors:
     *   Fabian Vogelsteller <fabian@ethereum.org>
     *   Gav Wood <gav@parity.io>
     *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>
     *   Marek Kotewicz <marek@parity.io>
     *   Marian Oancea <marian@ethereum.org>
     * @date 2017
     */
    
    "use strict";
    
    
    var version = require('../package.json').version;
    var core = require('web3-core');
    var Eth = require('web3-eth');
    var Net = require('web3-net');
    var Personal = require('web3-eth-personal');
    var Shh = require('web3-shh');
    var Bzz = require('web3-bzz');
    var utils = require('web3-utils');
    
    var Web3 = function Web3() {
        var _this = this;
    
        // sets _requestmanager etc
        core.packageInit(this, arguments);
    
        this.version = version;
        this.utils = utils;
    
        this.eth = new Eth(this);
        this.shh = new Shh(this);
        this.bzz = new Bzz(this);
    
        // overwrite package setProvider
        var setProvider = this.setProvider;
        this.setProvider = function (provider, net) {
            setProvider.apply(_this, arguments);
    
            this.eth.setProvider(provider, net);
            this.shh.setProvider(provider, net);
            this.bzz.setProvider(provider);
    
            return true;
        };
    };
    
    Web3.version = version;
    Web3.utils = utils;
    Web3.modules = {
        Eth: Eth,
        Net: Net,
        Personal: Personal,
        Shh: Shh,
        Bzz: Bzz
    };
    
    core.addProviders(Web3);
    
    module.exports = Web3;
    
    
    },{"../package.json":358,"web3-bzz":310,"web3-core":323,"web3-eth":349,"web3-eth-personal":347,"web3-net":350,"web3-shh":354,"web3-utils":355}],360:[function(require,module,exports){
    var _globalThis;
    try {
        _globalThis = require('es5-ext/global');
    } catch (error) {
    } finally {
        if (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }
        if (!_globalThis) { throw new Error('Could not determine global this'); }
    }
    
    var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
    var websocket_version = require('./version');
    
    
    /**
     * Expose a W3C WebSocket class with just one or two arguments.
     */
    function W3CWebSocket(uri, protocols) {
        var native_instance;
    
        if (protocols) {
            native_instance = new NativeWebSocket(uri, protocols);
        }
        else {
            native_instance = new NativeWebSocket(uri);
        }
    
        /**
         * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
         * class). Since it is an Object it will be returned as it is when creating an
         * instance of W3CWebSocket via 'new W3CWebSocket()'.
         *
         * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
         */
        return native_instance;
    }
    if (NativeWebSocket) {
        ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {
            Object.defineProperty(W3CWebSocket, prop, {
                get: function() { return NativeWebSocket[prop]; }
            });
        });
    }
    
    /**
     * Module exports.
     */
    module.exports = {
        'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
        'version'      : websocket_version
    };
    
    },{"./version":361,"es5-ext/global":156}],361:[function(require,module,exports){
    module.exports = require('../package.json').version;
    
    },{"../package.json":362}],362:[function(require,module,exports){
    module.exports={
      "name": "websocket",
      "description": "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
      "keywords": [
        "websocket",
        "websockets",
        "socket",
        "networking",
        "comet",
        "push",
        "RFC-6455",
        "realtime",
        "server",
        "client"
      ],
      "author": "Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)",
      "contributors": [
        "Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"
      ],
      "version": "1.0.29",
      "repository": {
        "type": "git",
        "url": "https://github.com/theturtle32/WebSocket-Node.git"
      },
      "homepage": "https://github.com/theturtle32/WebSocket-Node",
      "engines": {
        "node": ">=0.10.0"
      },
      "dependencies": {
        "debug": "^2.2.0",
        "es5-ext": "^0.10.50",
        "nan": "^2.14.0",
        "gulp": "^4.0.2",
        "typedarray-to-buffer": "^3.1.5",
        "yaeti": "^0.0.6"
      },
      "devDependencies": {
        "buffer-equal": "^1.0.0",
        "faucet": "^0.0.1",
        "gulp-jshint": "^2.0.4",
        "jshint-stylish": "^2.2.1",
        "jshint": "^2.0.0",
        "tape": "^4.9.1"
      },
      "config": {
        "verbose": false
      },
      "scripts": {
        "install": "(node-gyp rebuild 2> builderror.log) || (exit 0)",
        "test": "faucet test/unit",
        "gulp": "gulp"
      },
      "main": "index",
      "directories": {
        "lib": "./lib"
      },
      "browser": "lib/browser.js",
      "license": "Apache-2.0"
    }
    
    },{}],363:[function(require,module,exports){
    var request = require('xhr-request')
    
    module.exports = function (url, options) {
      return new Promise(function (resolve, reject) {
        request(url, options, function (err, data) {
          if (err) reject(err);
          else resolve(data);
        });
      });
    };
    
    },{"xhr-request":364}],364:[function(require,module,exports){
    var queryString = require('query-string')
    var setQuery = require('url-set-query')
    var assign = require('object-assign')
    var ensureHeader = require('./lib/ensure-header.js')
    
    // this is replaced in the browser
    var request = require('./lib/request.js')
    
    var mimeTypeJson = 'application/json'
    var noop = function () {}
    
    module.exports = xhrRequest
    function xhrRequest (url, opt, cb) {
      if (!url || typeof url !== 'string') {
        throw new TypeError('must specify a URL')
      }
      if (typeof opt === 'function') {
        cb = opt
        opt = {}
      }
      if (cb && typeof cb !== 'function') {
        throw new TypeError('expected cb to be undefined or a function')
      }
    
      cb = cb || noop
      opt = opt || {}
    
      var defaultResponse = opt.json ? 'json' : 'text'
      opt = assign({ responseType: defaultResponse }, opt)
    
      var headers = opt.headers || {}
      var method = (opt.method || 'GET').toUpperCase()
      var query = opt.query
      if (query) {
        if (typeof query !== 'string') {
          query = queryString.stringify(query)
        }
        url = setQuery(url, query)
      }
    
      // allow json response
      if (opt.responseType === 'json') {
        ensureHeader(headers, 'Accept', mimeTypeJson)
      }
    
      // if body content is json
      if (opt.json && method !== 'GET' && method !== 'HEAD') {
        ensureHeader(headers, 'Content-Type', mimeTypeJson)
        opt.body = JSON.stringify(opt.body)
      }
    
      opt.method = method
      opt.url = url
      opt.headers = headers
      delete opt.query
      delete opt.json
    
      return request(opt, cb)
    }
    
    },{"./lib/ensure-header.js":365,"./lib/request.js":367,"object-assign":214,"query-string":239,"url-set-query":299}],365:[function(require,module,exports){
    module.exports = ensureHeader
    function ensureHeader (headers, key, value) {
      var lower = key.toLowerCase()
      if (!headers[key] && !headers[lower]) {
        headers[key] = value
      }
    }
    
    },{}],366:[function(require,module,exports){
    module.exports = getResponse
    function getResponse (opt, resp) {
      if (!resp) return null
      return {
        statusCode: resp.statusCode,
        headers: resp.headers,
        method: opt.method,
        url: opt.url,
        // the XHR object in browser, http response in Node
        rawRequest: resp.rawRequest ? resp.rawRequest : resp
      }
    }
    
    },{}],367:[function(require,module,exports){
    var xhr = require('xhr')
    var normalize = require('./normalize-response')
    var noop = function () {}
    
    module.exports = xhrRequest
    function xhrRequest (opt, cb) {
      delete opt.uri
    
      // for better JSON.parse error handling than xhr module
      var useJson = false
      if (opt.responseType === 'json') {
        opt.responseType = 'text'
        useJson = true
      }
    
      var req = xhr(opt, function xhrRequestResult (err, resp, body) {
        if (useJson && !err) {
          try {
            var text = resp.rawRequest.responseText
            body = JSON.parse(text)
          } catch (e) {
            err = e
          }
        }
    
        resp = normalize(opt, resp)
        if (err) cb(err, null, resp)
        else cb(err, body, resp)
        cb = noop
      })
    
      // Patch abort() so that it also calls the callback, but with an error
      var onabort = req.onabort
      req.onabort = function () {
        var ret = onabort.apply(req, Array.prototype.slice.call(arguments))
        cb(new Error('XHR Aborted'))
        cb = noop
        return ret
      }
    
      return req
    }
    
    },{"./normalize-response":366,"xhr":368}],368:[function(require,module,exports){
    "use strict";
    var window = require("global/window")
    var isFunction = require("is-function")
    var parseHeaders = require("parse-headers")
    var xtend = require("xtend")
    
    module.exports = createXHR
    // Allow use of default import syntax in TypeScript
    module.exports.default = createXHR;
    createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
    createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest
    
    forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
        createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
            options = initParams(uri, options, callback)
            options.method = method.toUpperCase()
            return _createXHR(options)
        }
    })
    
    function forEachArray(array, iterator) {
        for (var i = 0; i < array.length; i++) {
            iterator(array[i])
        }
    }
    
    function isEmpty(obj){
        for(var i in obj){
            if(obj.hasOwnProperty(i)) return false
        }
        return true
    }
    
    function initParams(uri, options, callback) {
        var params = uri
    
        if (isFunction(options)) {
            callback = options
            if (typeof uri === "string") {
                params = {uri:uri}
            }
        } else {
            params = xtend(options, {uri: uri})
        }
    
        params.callback = callback
        return params
    }
    
    function createXHR(uri, options, callback) {
        options = initParams(uri, options, callback)
        return _createXHR(options)
    }
    
    function _createXHR(options) {
        if(typeof options.callback === "undefined"){
            throw new Error("callback argument missing")
        }
    
        var called = false
        var callback = function cbOnce(err, response, body){
            if(!called){
                called = true
                options.callback(err, response, body)
            }
        }
    
        function readystatechange() {
            if (xhr.readyState === 4) {
                setTimeout(loadFunc, 0)
            }
        }
    
        function getBody() {
            // Chrome with requestType=blob throws errors arround when even testing access to responseText
            var body = undefined
    
            if (xhr.response) {
                body = xhr.response
            } else {
                body = xhr.responseText || getXml(xhr)
            }
    
            if (isJson) {
                try {
                    body = JSON.parse(body)
                } catch (e) {}
            }
    
            return body
        }
    
        function errorFunc(evt) {
            clearTimeout(timeoutTimer)
            if(!(evt instanceof Error)){
                evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
            }
            evt.statusCode = 0
            return callback(evt, failureResponse)
        }
    
        // will load the data & process the response in a special response object
        function loadFunc() {
            if (aborted) return
            var status
            clearTimeout(timeoutTimer)
            if(options.useXDR && xhr.status===undefined) {
                //IE8 CORS GET successful response doesn't have a status field, but body is fine
                status = 200
            } else {
                status = (xhr.status === 1223 ? 204 : xhr.status)
            }
            var response = failureResponse
            var err = null
    
            if (status !== 0){
                response = {
                    body: getBody(),
                    statusCode: status,
                    method: method,
                    headers: {},
                    url: uri,
                    rawRequest: xhr
                }
                if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                    response.headers = parseHeaders(xhr.getAllResponseHeaders())
                }
            } else {
                err = new Error("Internal XMLHttpRequest Error")
            }
            return callback(err, response, response.body)
        }
    
        var xhr = options.xhr || null
    
        if (!xhr) {
            if (options.cors || options.useXDR) {
                xhr = new createXHR.XDomainRequest()
            }else{
                xhr = new createXHR.XMLHttpRequest()
            }
        }
    
        var key
        var aborted
        var uri = xhr.url = options.uri || options.url
        var method = xhr.method = options.method || "GET"
        var body = options.body || options.data
        var headers = xhr.headers = options.headers || {}
        var sync = !!options.sync
        var isJson = false
        var timeoutTimer
        var failureResponse = {
            body: undefined,
            headers: {},
            statusCode: 0,
            method: method,
            url: uri,
            rawRequest: xhr
        }
    
        if ("json" in options && options.json !== false) {
            isJson = true
            headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
            if (method !== "GET" && method !== "HEAD") {
                headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
                body = JSON.stringify(options.json === true ? body : options.json)
            }
        }
    
        xhr.onreadystatechange = readystatechange
        xhr.onload = loadFunc
        xhr.onerror = errorFunc
        // IE9 must have onprogress be set to a unique function.
        xhr.onprogress = function () {
            // IE must die
        }
        xhr.onabort = function(){
            aborted = true;
        }
        xhr.ontimeout = errorFunc
        xhr.open(method, uri, !sync, options.username, options.password)
        //has to be after open
        if(!sync) {
            xhr.withCredentials = !!options.withCredentials
        }
        // Cannot set timeout with sync request
        // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
        // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
        if (!sync && options.timeout > 0 ) {
            timeoutTimer = setTimeout(function(){
                if (aborted) return
                aborted = true//IE9 may still call readystatechange
                xhr.abort("timeout")
                var e = new Error("XMLHttpRequest timeout")
                e.code = "ETIMEDOUT"
                errorFunc(e)
            }, options.timeout )
        }
    
        if (xhr.setRequestHeader) {
            for(key in headers){
                if(headers.hasOwnProperty(key)){
                    xhr.setRequestHeader(key, headers[key])
                }
            }
        } else if (options.headers && !isEmpty(options.headers)) {
            throw new Error("Headers cannot be set on an XDomainRequest object")
        }
    
        if ("responseType" in options) {
            xhr.responseType = options.responseType
        }
    
        if ("beforeSend" in options &&
            typeof options.beforeSend === "function"
        ) {
            options.beforeSend(xhr)
        }
    
        // Microsoft Edge browser sends "undefined" when send is called with undefined value.
        // XMLHttpRequest spec says to pass null as body to indicate no body
        // See https://github.com/naugtur/xhr/issues/100.
        xhr.send(body || null)
    
        return xhr
    
    
    }
    
    function getXml(xhr) {
        // xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
        // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
        try {
            if (xhr.responseType === "document") {
                return xhr.responseXML
            }
            var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
            if (xhr.responseType === "" && !firefoxBugTakenEffect) {
                return xhr.responseXML
            }
        } catch (e) {}
    
        return null
    }
    
    function noop() {}
    
    },{"global/window":178,"is-function":202,"parse-headers":225,"xtend":375}],369:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var SecurityError = /** @class */ (function (_super) {
        __extends(SecurityError, _super);
        function SecurityError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SecurityError;
    }(Error));
    exports.SecurityError = SecurityError;
    var InvalidStateError = /** @class */ (function (_super) {
        __extends(InvalidStateError, _super);
        function InvalidStateError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return InvalidStateError;
    }(Error));
    exports.InvalidStateError = InvalidStateError;
    var NetworkError = /** @class */ (function (_super) {
        __extends(NetworkError, _super);
        function NetworkError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NetworkError;
    }(Error));
    exports.NetworkError = NetworkError;
    var SyntaxError = /** @class */ (function (_super) {
        __extends(SyntaxError, _super);
        function SyntaxError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SyntaxError;
    }(Error));
    exports.SyntaxError = SyntaxError;
    
    },{}],370:[function(require,module,exports){
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(require("./xml-http-request"));
    var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
    exports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget;
    
    },{"./xml-http-request":374,"./xml-http-request-event-target":372}],371:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ProgressEvent = /** @class */ (function () {
        function ProgressEvent(type) {
            this.type = type;
            this.bubbles = false;
            this.cancelable = false;
            this.loaded = 0;
            this.lengthComputable = false;
            this.total = 0;
        }
        return ProgressEvent;
    }());
    exports.ProgressEvent = ProgressEvent;
    
    },{}],372:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var XMLHttpRequestEventTarget = /** @class */ (function () {
        function XMLHttpRequestEventTarget() {
            this.listeners = {};
        }
        XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
            eventType = eventType.toLowerCase();
            this.listeners[eventType] = this.listeners[eventType] || [];
            this.listeners[eventType].push(listener.handleEvent || listener);
        };
        XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
            eventType = eventType.toLowerCase();
            if (!this.listeners[eventType]) {
                return;
            }
            var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
            if (index < 0) {
                return;
            }
            this.listeners[eventType].splice(index, 1);
        };
        XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
            var eventType = event.type.toLowerCase();
            event.target = this; // TODO: set event.currentTarget?
            if (this.listeners[eventType]) {
                for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
                    var listener_1 = _a[_i];
                    listener_1.call(this, event);
                }
            }
            var listener = this["on" + eventType];
            if (listener) {
                listener.call(this, event);
            }
            return true;
        };
        return XMLHttpRequestEventTarget;
    }());
    exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;
    
    },{}],373:[function(require,module,exports){
    (function (Buffer){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
    var XMLHttpRequestUpload = /** @class */ (function (_super) {
        __extends(XMLHttpRequestUpload, _super);
        function XMLHttpRequestUpload() {
            var _this = _super.call(this) || this;
            _this._contentType = null;
            _this._body = null;
            _this._reset();
            return _this;
        }
        XMLHttpRequestUpload.prototype._reset = function () {
            this._contentType = null;
            this._body = null;
        };
        XMLHttpRequestUpload.prototype._setData = function (data) {
            if (data == null) {
                return;
            }
            if (typeof data === 'string') {
                if (data.length !== 0) {
                    this._contentType = 'text/plain;charset=UTF-8';
                }
                this._body = new Buffer(data, 'utf-8');
            }
            else if (Buffer.isBuffer(data)) {
                this._body = data;
            }
            else if (data instanceof ArrayBuffer) {
                var body = new Buffer(data.byteLength);
                var view = new Uint8Array(data);
                for (var i = 0; i < data.byteLength; i++) {
                    body[i] = view[i];
                }
                this._body = body;
            }
            else if (data.buffer && data.buffer instanceof ArrayBuffer) {
                var body = new Buffer(data.byteLength);
                var offset = data.byteOffset;
                var view = new Uint8Array(data.buffer);
                for (var i = 0; i < data.byteLength; i++) {
                    body[i] = view[i + offset];
                }
                this._body = body;
            }
            else {
                throw new Error("Unsupported send() data " + data);
            }
        };
        XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
            if (this._contentType && !loweredHeaders['content-type']) {
                headers['Content-Type'] = this._contentType;
            }
            if (this._body) {
                headers['Content-Length'] = this._body.length.toString();
            }
        };
        XMLHttpRequestUpload.prototype._startUpload = function (request) {
            if (this._body) {
                request.write(this._body);
            }
            request.end();
        };
        return XMLHttpRequestUpload;
    }(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
    exports.XMLHttpRequestUpload = XMLHttpRequestUpload;
    
    }).call(this,require("buffer").Buffer)
    },{"./xml-http-request-event-target":372,"buffer":96}],374:[function(require,module,exports){
    (function (process,Buffer){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign = (this && this.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var http = require("http");
    var https = require("https");
    var os = require("os");
    var url = require("url");
    var progress_event_1 = require("./progress-event");
    var errors_1 = require("./errors");
    var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
    var xml_http_request_upload_1 = require("./xml-http-request-upload");
    var Cookie = require("cookiejar");
    var XMLHttpRequest = /** @class */ (function (_super) {
        __extends(XMLHttpRequest, _super);
        function XMLHttpRequest(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this) || this;
            _this.UNSENT = XMLHttpRequest.UNSENT;
            _this.OPENED = XMLHttpRequest.OPENED;
            _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
            _this.LOADING = XMLHttpRequest.LOADING;
            _this.DONE = XMLHttpRequest.DONE;
            _this.onreadystatechange = null;
            _this.readyState = XMLHttpRequest.UNSENT;
            _this.response = null;
            _this.responseText = '';
            _this.responseType = '';
            _this.status = 0; // TODO: UNSENT?
            _this.statusText = '';
            _this.timeout = 0;
            _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();
            _this.responseUrl = '';
            _this.withCredentials = false;
            _this._method = null;
            _this._url = null;
            _this._sync = false;
            _this._headers = {};
            _this._loweredHeaders = {};
            _this._mimeOverride = null; // TODO: is type right?
            _this._request = null;
            _this._response = null;
            _this._responseParts = null;
            _this._responseHeaders = null;
            _this._aborting = null; // TODO: type?
            _this._error = null; // TODO: type?
            _this._loadedBytes = 0;
            _this._totalBytes = 0;
            _this._lengthComputable = false;
            _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
            _this._restrictedHeaders = {
                'accept-charset': true,
                'accept-encoding': true,
                'access-control-request-headers': true,
                'access-control-request-method': true,
                connection: true,
                'content-length': true,
                cookie: true,
                cookie2: true,
                date: true,
                dnt: true,
                expect: true,
                host: true,
                'keep-alive': true,
                origin: true,
                referer: true,
                te: true,
                trailer: true,
                'transfer-encoding': true,
                upgrade: true,
                'user-agent': true,
                via: true
            };
            _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
            _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
            _this._anonymous = options.anon || false;
            return _this;
        }
        XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
            if (async === void 0) { async = true; }
            method = method.toUpperCase();
            if (this._restrictedMethods[method]) {
                throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
            }
            ;
            var xhrUrl = this._parseUrl(url, user, password);
            if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {
                // TODO(pwnall): terminate abort(), terminate send()
            }
            this._method = method;
            this._url = xhrUrl;
            this._sync = !async;
            this._headers = {};
            this._loweredHeaders = {};
            this._mimeOverride = null;
            this._setReadyState(XMLHttpRequest.OPENED);
            this._request = null;
            this._response = null;
            this.status = 0;
            this.statusText = '';
            this._responseParts = [];
            this._responseHeaders = null;
            this._loadedBytes = 0;
            this._totalBytes = 0;
            this._lengthComputable = false;
        };
        XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
            if (this.readyState !== XMLHttpRequest.OPENED) {
                throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
            }
            var loweredName = name.toLowerCase();
            if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
                console.warn("Refused to set unsafe header \"" + name + "\"");
                return;
            }
            value = value.toString();
            if (this._loweredHeaders[loweredName] != null) {
                name = this._loweredHeaders[loweredName];
                this._headers[name] = this._headers[name] + ", " + value;
            }
            else {
                this._loweredHeaders[loweredName] = name;
                this._headers[name] = value;
            }
        };
        XMLHttpRequest.prototype.send = function (data) {
            if (this.readyState !== XMLHttpRequest.OPENED) {
                throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
            }
            if (this._request) {
                throw new XMLHttpRequest.InvalidStateError('send() already called');
            }
            switch (this._url.protocol) {
                case 'file:':
                    return this._sendFile(data);
                case 'http:':
                case 'https:':
                    return this._sendHttp(data);
                default:
                    throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
            }
        };
        XMLHttpRequest.prototype.abort = function () {
            if (this._request == null) {
                return;
            }
            this._request.abort();
            this._setError();
            this._dispatchProgress('abort');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype.getResponseHeader = function (name) {
            if (this._responseHeaders == null || name == null) {
                return null;
            }
            var loweredName = name.toLowerCase();
            return this._responseHeaders.hasOwnProperty(loweredName)
                ? this._responseHeaders[name.toLowerCase()]
                : null;
        };
        XMLHttpRequest.prototype.getAllResponseHeaders = function () {
            var _this = this;
            if (this._responseHeaders == null) {
                return '';
            }
            return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
        };
        XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
            if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
                throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
            }
            this._mimeOverride = mimeType.toLowerCase();
        };
        XMLHttpRequest.prototype.nodejsSet = function (options) {
            this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
            this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
            if (options.hasOwnProperty('baseUrl')) {
                if (options.baseUrl != null) {
                    var parsedUrl = url.parse(options.baseUrl, false, true);
                    if (!parsedUrl.protocol) {
                        throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
                    }
                }
                this.nodejsBaseUrl = options.baseUrl;
            }
        };
        XMLHttpRequest.nodejsSet = function (options) {
            XMLHttpRequest.prototype.nodejsSet(options);
        };
        XMLHttpRequest.prototype._setReadyState = function (readyState) {
            this.readyState = readyState;
            this.dispatchEvent(new progress_event_1.ProgressEvent('readystatechange'));
        };
        XMLHttpRequest.prototype._sendFile = function (data) {
            // TODO
            throw new Error('Protocol file: not implemented');
        };
        XMLHttpRequest.prototype._sendHttp = function (data) {
            if (this._sync) {
                throw new Error('Synchronous XHR processing not implemented');
            }
            if (data && (this._method === 'GET' || this._method === 'HEAD')) {
                console.warn("Discarding entity body for " + this._method + " requests");
                data = null;
            }
            else {
                data = data || '';
            }
            this.upload._setData(data);
            this._finalizeHeaders();
            this._sendHxxpRequest();
        };
        XMLHttpRequest.prototype._sendHxxpRequest = function () {
            var _this = this;
            if (this.withCredentials) {
                var cookie = XMLHttpRequest.cookieJar
                    .getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
                this._headers.cookie = this._headers.cookie2 = cookie;
            }
            var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [https, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
            var requestMethod = hxxp.request.bind(hxxp);
            var request = requestMethod({
                hostname: this._url.hostname,
                port: +this._url.port,
                path: this._url.path,
                auth: this._url.auth,
                method: this._method,
                headers: this._headers,
                agent: agent
            });
            this._request = request;
            if (this.timeout) {
                request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
            }
            request.on('response', function (response) { return _this._onHttpResponse(request, response); });
            request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
            this.upload._startUpload(request);
            if (this._request === request) {
                this._dispatchProgress('loadstart');
            }
        };
        XMLHttpRequest.prototype._finalizeHeaders = function () {
            this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
            this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
        };
        XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
            var _this = this;
            if (this._request !== request) {
                return;
            }
            if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
                XMLHttpRequest.cookieJar
                    .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
            }
            if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
                this._url = this._parseUrl(response.headers.location);
                this._method = 'GET';
                if (this._loweredHeaders['content-type']) {
                    delete this._headers[this._loweredHeaders['content-type']];
                    delete this._loweredHeaders['content-type'];
                }
                if (this._headers['Content-Type'] != null) {
                    delete this._headers['Content-Type'];
                }
                delete this._headers['Content-Length'];
                this.upload._reset();
                this._finalizeHeaders();
                this._sendHxxpRequest();
                return;
            }
            this._response = response;
            this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
            this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
            this._response.on('close', function () { return _this._onHttpResponseClose(response); });
            this.responseUrl = this._url.href.split('#')[0];
            this.status = response.statusCode;
            this.statusText = http.STATUS_CODES[this.status];
            this._parseResponseHeaders(response);
            var lengthString = this._responseHeaders['content-length'] || '';
            this._totalBytes = +lengthString;
            this._lengthComputable = !!lengthString;
            this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
        };
        XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
            if (this._response !== response) {
                return;
            }
            this._responseParts.push(new Buffer(data));
            this._loadedBytes += data.length;
            if (this.readyState !== XMLHttpRequest.LOADING) {
                this._setReadyState(XMLHttpRequest.LOADING);
            }
            this._dispatchProgress('progress');
        };
        XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
            if (this._response !== response) {
                return;
            }
            this._parseResponse();
            this._request = null;
            this._response = null;
            this._setReadyState(XMLHttpRequest.DONE);
            this._dispatchProgress('load');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
            if (this._response !== response) {
                return;
            }
            var request = this._request;
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest.DONE);
            this._dispatchProgress('error');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype._onHttpTimeout = function (request) {
            if (this._request !== request) {
                return;
            }
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest.DONE);
            this._dispatchProgress('timeout');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
            if (this._request !== request) {
                return;
            }
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest.DONE);
            this._dispatchProgress('error');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
            var event = new XMLHttpRequest.ProgressEvent(eventType);
            event.lengthComputable = this._lengthComputable;
            event.loaded = this._loadedBytes;
            event.total = this._totalBytes;
            this.dispatchEvent(event);
        };
        XMLHttpRequest.prototype._setError = function () {
            this._request = null;
            this._response = null;
            this._responseHeaders = null;
            this._responseParts = null;
        };
        XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
            var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
            var xhrUrl = url.parse(absoluteUrl, false, true);
            xhrUrl.hash = null;
            var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
            if (xhrUser || xhrPassword || user || password) {
                xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
            }
            return xhrUrl;
        };
        XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
            this._responseHeaders = {};
            for (var name_1 in response.headers) {
                var loweredName = name_1.toLowerCase();
                if (this._privateHeaders[loweredName]) {
                    continue;
                }
                this._responseHeaders[loweredName] = response.headers[name_1];
            }
            if (this._mimeOverride != null) {
                this._responseHeaders['content-type'] = this._mimeOverride;
            }
        };
        XMLHttpRequest.prototype._parseResponse = function () {
            var buffer = Buffer.concat(this._responseParts);
            this._responseParts = null;
            switch (this.responseType) {
                case 'json':
                    this.responseText = null;
                    try {
                        this.response = JSON.parse(buffer.toString('utf-8'));
                    }
                    catch (_a) {
                        this.response = null;
                    }
                    return;
                case 'buffer':
                    this.responseText = null;
                    this.response = buffer;
                    return;
                case 'arraybuffer':
                    this.responseText = null;
                    var arrayBuffer = new ArrayBuffer(buffer.length);
                    var view = new Uint8Array(arrayBuffer);
                    for (var i = 0; i < buffer.length; i++) {
                        view[i] = buffer[i];
                    }
                    this.response = arrayBuffer;
                    return;
                case 'text':
                default:
                    try {
                        this.responseText = buffer.toString(this._parseResponseEncoding());
                    }
                    catch (_b) {
                        this.responseText = buffer.toString('binary');
                    }
                    this.response = this.responseText;
            }
        };
        XMLHttpRequest.prototype._parseResponseEncoding = function () {
            return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
        };
        XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;
        XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;
        XMLHttpRequest.NetworkError = errors_1.NetworkError;
        XMLHttpRequest.SecurityError = errors_1.SecurityError;
        XMLHttpRequest.SyntaxError = errors_1.SyntaxError;
        XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;
        XMLHttpRequest.UNSENT = 0;
        XMLHttpRequest.OPENED = 1;
        XMLHttpRequest.HEADERS_RECEIVED = 2;
        XMLHttpRequest.LOADING = 3;
        XMLHttpRequest.DONE = 4;
        XMLHttpRequest.cookieJar = Cookie.CookieJar();
        return XMLHttpRequest;
    }(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
    exports.XMLHttpRequest = XMLHttpRequest;
    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;
    XMLHttpRequest.prototype.nodejsBaseUrl = null;
    
    }).call(this,require('_process'),require("buffer").Buffer)
    },{"./errors":369,"./progress-event":371,"./xml-http-request-event-target":372,"./xml-http-request-upload":373,"_process":231,"buffer":96,"cookiejar":99,"http":278,"https":194,"os":219,"url":300}],375:[function(require,module,exports){
    module.exports = extend
    
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    
    function extend() {
        var target = {}
    
        for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i]
    
            for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                    target[key] = source[key]
                }
            }
        }
    
        return target
    }
    
    },{}],376:[function(require,module,exports){
    const Blockchain = {
      getBlockByNumber(blockNumber, provider, callback) {
        const params = [blockNumber, true];
        provider.send(
          {
            jsonrpc: "2.0",
            method: "eth_getBlockByNumber",
            params,
            id: Date.now()
          },
          callback
        );
      },
    
      getBlockByHash(blockHash, provider, callback) {
        const params = [blockHash, true];
        provider.send(
          {
            jsonrpc: "2.0",
            method: "eth_getBlockByHash",
            params,
            id: Date.now()
          },
          callback
        );
      },
    
      parse(uri) {
        const parsed = {};
        if (uri.indexOf("blockchain://") !== 0) return parsed;
    
        const cleanUri = uri.replace("blockchain://", "");
    
        const pieces = cleanUri.split("/block/");
    
        parsed.genesis_hash = `0x${pieces[0]}`;
        parsed.block_hash = `0x${pieces[1]}`;
    
        return parsed;
      },
    
      asURI(provider, callback) {
        let genesis, latest;
    
        this.getBlockByNumber("0x0", provider, (err, { result }) => {
          if (err) return callback(err);
          genesis = result;
    
          this.getBlockByNumber("latest", provider, (err, { result }) => {
            if (err) return callback(err);
            latest = result;
            const url = `blockchain://${genesis.hash.replace(
              "0x",
              ""
            )}/block/${latest.hash.replace("0x", "")}`;
            callback(null, url);
          });
        });
      },
    
      matches(uri, provider, callback) {
        const parsedUri = this.parse(uri);
    
        const expected_genesis = parsedUri.genesis_hash;
        const expected_block = parsedUri.block_hash;
    
        this.getBlockByNumber("0x0", provider, (err, { result }) => {
          if (err) return callback(err);
          const block = result;
          if (block.hash !== expected_genesis) return callback(null, false);
    
          this.getBlockByHash(expected_block, provider, (err, { result }) => {
            // Treat an error as if the block didn't exist. This is because
            // some clients respond differently.
            const block = result;
            if (err || block == null) {
              return callback(null, false);
            }
    
            callback(null, true);
          });
        });
      }
    };
    
    module.exports = Blockchain;
    
    },{}],377:[function(require,module,exports){
    var pkgVersion = require("./package.json").version;
    var Ajv = require("ajv");
    var util = require("util");
    
    var contractObjectSchema = require("./spec/contract-object.spec.json");
    var networkObjectSchema = require("./spec/network-object.spec.json");
    var abiSchema = require("./spec/abi.spec.json");
    
    /**
     * Property definitions for Contract Objects
     *
     * Describes canonical output properties as sourced from some "dirty" input
     * object. Describes normalization process to account for deprecated and/or
     * nonstandard keys and values.
     *
     * Maps (key -> property) where:
     *  - `key` is the top-level output key matching up with those in the schema
     *  - `property` is an object with optional values:
     *      - `sources`: list of sources (see below); default `key`
     *      - `transform`: function(value) -> transformed value; default x -> x
     *
     * Each source represents a means to select a value from dirty object.
     * Allows:
     *  - dot-separated (`.`) string, corresponding to path to value in dirty
     *    object
     *  - function(dirtyObj) -> (cleanValue | undefined)
     *
     * The optional `transform` parameter standardizes value regardless of source,
     * for purposes of ensuring data type and/or string schemas.
     */
    
    // helper that ensures abi's do not contain function signatures
    const sanitizedValue = dirtyValueArray => {
      let sanitizedValueArray = [];
      dirtyValueArray.forEach(item => {
        let sanitizedItem = Object.assign({}, item);
        delete sanitizedItem.signature;
        sanitizedValueArray.push(sanitizedItem);
      });
      return sanitizedValueArray;
    };
    
    var properties = {
      contractName: {
        sources: ["contractName", "contract_name"]
      },
      abi: {
        sources: ["abi", "interface"],
        transform: function(value) {
          if (typeof value === "string") {
            try {
              value = JSON.parse(value);
            } catch (e) {
              value = undefined;
            }
          }
          if (Array.isArray(value)) {
            return sanitizedValue(value);
          }
          return value;
        }
      },
      metadata: {
        sources: ["metadata"]
      },
      bytecode: {
        sources: ["bytecode", "binary", "unlinked_binary", "evm.bytecode.object"],
        transform: function(value) {
          if (value && value.indexOf("0x") !== 0) {
            value = "0x" + value;
          }
          return value;
        }
      },
      deployedBytecode: {
        sources: [
          "deployedBytecode",
          "runtimeBytecode",
          "evm.deployedBytecode.object"
        ],
        transform: function(value) {
          if (value && value.indexOf("0x") !== 0) {
            value = "0x" + value;
          }
          return value;
        }
      },
      sourceMap: {
        sources: ["sourceMap", "srcmap", "evm.bytecode.sourceMap"]
      },
      deployedSourceMap: {
        sources: [
          "deployedSourceMap",
          "srcmapRuntime",
          "evm.deployedBytecode.sourceMap"
        ]
      },
      source: {},
      sourcePath: {},
      ast: {},
      legacyAST: {
        transform: function(value, obj) {
          var schemaVersion = obj.schemaVersion || "0.0.0";
    
          // legacyAST introduced in v2.0.0
          if (schemaVersion[0] < 2) {
            return obj.ast;
          } else {
            return value;
          }
        }
      },
      compiler: {},
      networks: {
        transform: function(value, obj) {
          if (value === undefined) {
            value = {};
          }
          if (obj.network_id && value[obj.network_id]) {
            value[obj.network_id].events = obj.events;
            value[obj.network_id].links = obj.links;
          }
          return value;
        }
      },
      schemaVersion: {
        sources: ["schemaVersion", "schema_version"]
      },
      updatedAt: {
        sources: ["updatedAt", "updated_at"],
        transform: function(value) {
          if (typeof value === "number") {
            value = new Date(value).toISOString();
          }
          return value;
        }
      },
      devdoc: {},
      userdoc: {}
    };
    
    /**
     * Construct a getter for a given key, possibly applying some post-retrieve
     * transformation on the resulting value.
     *
     * @return {Function} Accepting dirty object and returning value || undefined
     */
    function getter(key, transform) {
      if (transform === undefined) {
        transform = function(x) {
          return x;
        };
      }
    
      return function(obj) {
        try {
          return transform(obj[key]);
        } catch (e) {
          return undefined;
        }
      };
    }
    
    /**
     * Chains together a series of function(obj) -> value, passing resulting
     * returned value to next function in chain.
     *
     * Accepts any number of functions passed as arguments
     * @return {Function} Accepting initial object, returning end-of-chain value
     *
     * Assumes all intermediary values to be objects, with well-formed sequence
     * of operations.
     */
    function chain() {
      var getters = Array.prototype.slice.call(arguments);
      return function(obj) {
        return getters.reduce(function(cur, get) {
          return get(cur);
        }, obj);
      };
    }
    
    // Schema module
    //
    
    var TruffleContractSchema = {
      // Return a promise to validate a contract object
      // - Resolves as validated `contractObj`
      // - Rejects with list of errors from schema validator
      validate: function(contractObj) {
        var ajv = new Ajv({ verbose: true });
        ajv.addSchema(abiSchema);
        ajv.addSchema(networkObjectSchema);
        ajv.addSchema(contractObjectSchema);
        if (ajv.validate("contract-object.spec.json", contractObj)) {
          return contractObj;
        } else {
          const message = `Schema validation failed. Errors:\n\n${ajv.errors
            .map(
              ({
                keyword,
                dataPath,
                schemaPath,
                params,
                message,
                data,
                schema, // eslint-disable-line no-unused-vars
                parentSchema
              }) =>
                util.format(
                  "%s (%s):\n%s\n",
                  message,
                  keyword,
                  util.inspect(
                    {
                      dataPath,
                      schemaPath,
                      params,
                      data,
                      parentSchema
                    },
                    { depth: 5 }
                  )
                )
            )
            .join("\n")}`;
          const error = new Error(message);
          error.errors = ajv.errors;
          throw error;
        }
      },
    
      // accepts as argument anything that can be turned into a contract object
      // returns a contract object
      normalize: function(objDirty, options) {
        options = options || {};
        var normalized = {};
    
        // iterate over each property
        Object.keys(properties).forEach(function(key) {
          var property = properties[key];
          var value; // normalized value || undefined
    
          // either used the defined sources or assume the key will only ever be
          // listed as its canonical name (itself)
          var sources = property.sources || [key];
    
          // iterate over sources until value is defined or end of list met
          for (var i = 0; value === undefined && i < sources.length; i++) {
            var source = sources[i];
            // string refers to path to value in objDirty, split and chain
            // getters
            if (typeof source === "string") {
              var traversals = source.split(".").map(function(k) {
                return getter(k);
              });
              source = chain.apply(null, traversals);
            }
    
            // source should be a function that takes the objDirty and returns
            // value or undefined
            value = source(objDirty);
          }
    
          // run source-agnostic transform on value
          // (e.g. make sure bytecode begins 0x)
          if (property.transform) {
            value = property.transform(value, objDirty);
          }
    
          // add resulting (possibly undefined) to normalized obj
          normalized[key] = value;
        });
    
        // Copy x- options
        Object.keys(objDirty).forEach(function(key) {
          if (key.indexOf("x-") === 0) {
            normalized[key] = getter(key)(objDirty);
          }
        });
    
        // update schema version
        normalized.schemaVersion = pkgVersion;
    
        if (options.validate) {
          this.validate(normalized);
        }
    
        return normalized;
      }
    };
    
    module.exports = TruffleContractSchema;
    
    },{"./package.json":378,"./spec/abi.spec.json":379,"./spec/contract-object.spec.json":380,"./spec/network-object.spec.json":381,"ajv":1,"util":94}],378:[function(require,module,exports){
    module.exports={
      "name": "@truffle/contract-schema",
      "version": "3.0.14",
      "description": "JSON schema for contract artifacts",
      "main": "index.js",
      "scripts": {
        "prepare": "yarn run build",
        "build": "cd spec && json2ts -i contract-object.spec.json -o ./index.d.ts",
        "test": "mocha"
      },
      "repository": "https://github.com/trufflesuite/truffle/tree/master/packages/contract-schema",
      "keywords": [
        "ethereum",
        "json",
        "schema",
        "contract",
        "artifacts"
      ],
      "author": "Tim Coulter <tim@trufflesuite.com>",
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/trufflesuite/truffle/issues"
      },
      "homepage": "https://github.com/trufflesuite/truffle/tree/master/packages/contract-schema#readme",
      "dependencies": {
        "ajv": "^6.10.0",
        "crypto-js": "^3.1.9-1",
        "debug": "^4.1.0"
      },
      "devDependencies": {
        "json-schema-to-typescript": "^5.5.0",
        "mocha": "5.2.0",
        "solc": "0.5.0"
      },
      "directories": {
        "spec": "./spec"
      },
      "publishConfig": {
        "access": "public"
      },
      "gitHead": "5e8ec5fcecdf400b3cb8a4d9dc153df781df1a28"
    }
    
    },{}],379:[function(require,module,exports){
    module.exports={
      "$id": "abi.spec.json",
      "$schema": "http://json-schema.org/schema#",
      "title": "ABI",
    
      "type": "array",
      "items": { "oneOf": [
        { "$ref": "#/definitions/Event" },
        { "$ref": "#/definitions/ConstructorFunction" },
        { "$ref": "#/definitions/FallbackFunction" },
        { "$ref": "#/definitions/NormalFunction" }
      ]},
    
      "definitions": {
        "Name": {
          "type": "string",
          "pattern": "^$|^[a-zA-Z_\\$][a-zA-Z_\\$0-9]*$"
        },
    
        "Type": {
          "oneOf": [
            { "type": "string", "pattern": "^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?(\\[[0-9]*\\])*$" },
            { "type": "string", "pattern": "^address(\\[[0-9]*\\])*$"},
            { "type": "string", "pattern": "^bool(\\[[0-9]*\\])*$"},
            { "type": "string", "pattern": "^u?fixed(0x8|8x0|0x16|8x8|16x0|0x24|8x16|16x8|24x0|0x32|8x24|16x16|24x8|32x0|0x40|8x32|16x24|24x16|32x8|40x0|0x48|8x40|16x32|24x24|32x16|40x8|48x0|0x56|8x48|16x40|24x32|32x24|40x16|48x8|56x0|0x64|8x56|16x48|24x40|32x32|40x24|48x16|56x8|64x0|0x72|8x64|16x56|24x48|32x40|40x32|48x24|56x16|64x8|72x0|0x80|8x72|16x64|24x56|32x48|40x40|48x32|56x24|64x16|72x8|80x0|0x88|8x80|16x72|24x64|32x56|40x48|48x40|56x32|64x24|72x16|80x8|88x0|0x96|8x88|16x80|24x72|32x64|40x56|48x48|56x40|64x32|72x24|80x16|88x8|96x0|0x104|8x96|16x88|24x80|32x72|40x64|48x56|56x48|64x40|72x32|80x24|88x16|96x8|104x0|0x112|8x104|16x96|24x88|32x80|40x72|48x64|56x56|64x48|72x40|80x32|88x24|96x16|104x8|112x0|0x120|8x112|16x104|24x96|32x88|40x80|48x72|56x64|64x56|72x48|80x40|88x32|96x24|104x16|112x8|120x0|0x128|8x120|16x112|24x104|32x96|40x88|48x80|56x72|64x64|72x56|80x48|88x40|96x32|104x24|112x16|120x8|128x0|0x136|8x128|16x120|24x112|32x104|40x96|48x88|56x80|64x72|72x64|80x56|88x48|96x40|104x32|112x24|120x16|128x8|136x0|0x144|8x136|16x128|24x120|32x112|40x104|48x96|56x88|64x80|72x72|80x64|88x56|96x48|104x40|112x32|120x24|128x16|136x8|144x0|0x152|8x144|16x136|24x128|32x120|40x112|48x104|56x96|64x88|72x80|80x72|88x64|96x56|104x48|112x40|120x32|128x24|136x16|144x8|152x0|0x160|8x152|16x144|24x136|32x128|40x120|48x112|56x104|64x96|72x88|80x80|88x72|96x64|104x56|112x48|120x40|128x32|136x24|144x16|152x8|160x0|0x168|8x160|16x152|24x144|32x136|40x128|48x120|56x112|64x104|72x96|80x88|88x80|96x72|104x64|112x56|120x48|128x40|136x32|144x24|152x16|160x8|168x0|0x176|8x168|16x160|24x152|32x144|40x136|48x128|56x120|64x112|72x104|80x96|88x88|96x80|104x72|112x64|120x56|128x48|136x40|144x32|152x24|160x16|168x8|176x0|0x184|8x176|16x168|24x160|32x152|40x144|48x136|56x128|64x120|72x112|80x104|88x96|96x88|104x80|112x72|120x64|128x56|136x48|144x40|152x32|160x24|168x16|176x8|184x0|0x192|8x184|16x176|24x168|32x160|40x152|48x144|56x136|64x128|72x120|80x112|88x104|96x96|104x88|112x80|120x72|128x64|136x56|144x48|152x40|160x32|168x24|176x16|184x8|192x0|0x200|8x192|16x184|24x176|32x168|40x160|48x152|56x144|64x136|72x128|80x120|88x112|96x104|104x96|112x88|120x80|128x72|136x64|144x56|152x48|160x40|168x32|176x24|184x16|192x8|200x0|0x208|8x200|16x192|24x184|32x176|40x168|48x160|56x152|64x144|72x136|80x128|88x120|96x112|104x104|112x96|120x88|128x80|136x72|144x64|152x56|160x48|168x40|176x32|184x24|192x16|200x8|208x0|0x216|8x208|16x200|24x192|32x184|40x176|48x168|56x160|64x152|72x144|80x136|88x128|96x120|104x112|112x104|120x96|128x88|136x80|144x72|152x64|160x56|168x48|176x40|184x32|192x24|200x16|208x8|216x0|0x224|8x216|16x208|24x200|32x192|40x184|48x176|56x168|64x160|72x152|80x144|88x136|96x128|104x120|112x112|120x104|128x96|136x88|144x80|152x72|160x64|168x56|176x48|184x40|192x32|200x24|208x16|216x8|224x0|0x232|8x224|16x216|24x208|32x200|40x192|48x184|56x176|64x168|72x160|80x152|88x144|96x136|104x128|112x120|120x112|128x104|136x96|144x88|152x80|160x72|168x64|176x56|184x48|192x40|200x32|208x24|216x16|224x8|232x0|0x240|8x232|16x224|24x216|32x208|40x200|48x192|56x184|64x176|72x168|80x160|88x152|96x144|104x136|112x128|120x120|128x112|136x104|144x96|152x88|160x80|168x72|176x64|184x56|192x48|200x40|208x32|216x24|224x16|232x8|240x0|0x248|8x240|16x232|24x224|32x216|40x208|48x200|56x192|64x184|72x176|80x168|88x160|96x152|104x144|112x136|120x128|128x120|136x112|144x104|152x96|160x88|168x80|176x72|184x64|192x56|200x48|208x40|216x32|224x24|232x16|240x8|248x0|0x256|8x248|16x240|24x232|32x224|40x216|48x208|56x200|64x192|72x184|80x176|88x168|96x160|104x152|112x144|120x136|128x128|136x120|144x112|152x104|160x96|168x88|176x80|184x72|192x64|200x56|208x48|216x40|224x32|232x24|240x16|248x8|256x0)?(\\[[0-9]*\\])*$" },
            { "type": "string", "pattern": "^bytes(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32)(\\[[0-9]*\\])*$" },
            { "type": "string", "pattern": "^bytes(\\[[0-9]*\\])*$" },
            { "type": "string", "pattern": "^function(\\[[0-9]*\\])*$" },
            { "type": "string", "pattern": "^string(\\[[0-9]*\\])*$" },
            { "type": "string", "pattern": "^tuple$" }
          ]
        },
    
        "StateMutability": {
          "type": "string",
          "enum": [
            "pure",
            "view",
            "nonpayable",
            "payable"
          ]
        },
    
        "NormalFunction": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["function"],
              "default": "function"
            },
            "name": { "$ref": "#/definitions/Name" },
            "inputs": {
              "type": "array",
              "items": { "$ref": "#/definitions/Parameter" }
            },
            "outputs": {
              "type": "array",
              "items": { "$ref": "#/definitions/Parameter" },
              "default": []
            },
            "stateMutability": {
              "$ref": "#/definitions/StateMutability"
            },
            "constant": { "type": "boolean" },
            "payable": { "type": "boolean", "default": false }
          },
          "required": ["name", "inputs", "stateMutability"],
          "additionalProperties": false
        },
    
        "ConstructorFunction": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["constructor"]
            },
            "inputs": {
              "type": "array",
              "items": { "$ref": "#/definitions/Parameter" }
            },
            "stateMutability": {
              "$ref": "#/definitions/StateMutability"
            },
            "constant": { "type": "boolean" },
            "payable": { "type": "boolean", "default": false }
          },
          "required": ["type", "inputs", "stateMutability"],
          "additionalProperties": false
        },
    
        "FallbackFunction": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["fallback"]
            },
            "stateMutability": {
              "$ref": "#/definitions/StateMutability"
            },
            "constant": { "type": "boolean" },
            "payable": { "type": "boolean", "default": false }
          },
          "required": ["type", "stateMutability"],
          "additionalProperties": false
        },
    
        "Event": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["event"]
            },
            "name": { "$ref": "#/definitions/Name" },
            "inputs": {
              "type": "array",
              "items": { "$ref": "#/definitions/EventParameter" }
            },
            "anonymous": { "type": "boolean" }
          },
          "required": ["type", "name", "inputs", "anonymous"],
          "additionalProperties": false
        },
    
        "Parameter": {
          "type": "object",
          "properties": {
            "name": { "$ref": "#/definitions/Name" },
            "type": { "$ref": "#/definitions/Type" },
            "components": {
              "type": "array",
              "items": { "type": "object" }
            },
        "internalType": { "type": "string" }
          },
          "if": {
            "properties": {
              "type": {
                "oneOf": [
                  { "pattern": "^tuple$" }
                ]
              }
            }
          },
          "then": { "required": ["name", "type", "components"] },
          "else": { "required": ["name", "type"] }
        },
    
        "EventParameter": {
          "type": "object",
          "properties": {
            "name": { "$ref": "#/definitions/Name" },
            "type": { "$ref": "#/definitions/Type" },
            "indexed": { "type": "boolean" },
        "internalType": { "type": "string" }
          },
          "required": ["name", "type", "indexed"]
        }
      }
    }
    
    },{}],380:[function(require,module,exports){
    module.exports={
      "$id": "contract-object.spec.json",
      "$schema": "http://json-schema.org/schema#",
      "title": "Contract Object",
      "description": "Describes a contract consumable by Truffle, possibly including deployed instances on networks",
    
      "type": "object",
      "properties": {
        "contractName": {
          "allOf": [{ "$ref": "#/definitions/ContractName" }],
          "description": "Name used to identify the contract",
          "default": "Contract"
        },
        "abi": {
          "allOf": [{ "$ref": "abi.spec.json#" }],
          "description": "Interface description returned by compiler for source"
        },
        "metadata": { "$ref": "#/definitions/Metadata" },
        "bytecode": {
          "allOf": [{ "$ref": "#/definitions/Bytecode" }],
          "description": "Bytecode sent as contract-creation transaction data, with unresolved link references"
        },
        "deployedBytecode": {
          "allOf": [{ "$ref": "#/definitions/Bytecode" }],
          "description": "On-chain deployed contract bytecode, with unresolved link references" 
        },
        "sourceMap": {
          "allOf": [{ "$ref": "#/definitions/SourceMap" }],
          "description": "Source mapping for contract-creation transaction data bytecode"
        },
        "deployedSourceMap": {
          "allOf": [{ "$ref": "#/definitions/SourceMap" }],
          "description": "Source mapping for contract bytecode"
        },
        "source": { "$ref": "#/definitions/Source" },
        "sourcePath": { "$ref": "#/definitions/SourcePath" },
        "ast": { "$ref": "#/definitions/AST" },
        "legacyAST": { "$ref": "#/definitions/LegacyAST" },
        "compiler": {
          "type": "object",
          "properties": {
            "name": {"type": "string"},
            "version": {"type": "string"}
          }
        },
        "networks": {
          "patternProperties": {
            "^[a-zA-Z0-9]+$": { "$ref": "network-object.spec.json#" }
          },
          "additionalProperties": false
        },
        "schemaVersion": { "$ref": "#/definitions/SchemaVersion" },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "devdoc": { "$ref": "#/definitions/NatSpec" },
        "userdoc": { "$ref": "#/definitions/NatSpec" }
      },
      "required": [
        "abi"
      ],
      "patternProperties": {
        "^x-": { "anyOf": [
          { "type": "string" },
          { "type": "boolean" },
          { "type": "number" },
          { "type": "object" },
          { "type": "array" }
        ]}
      },
      "additionalProperties": false,
    
      "definitions": {
        "ContractName": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
        },
    
        "NatSpec": {
          "type": "object"
        },
    
        "Metadata": {
          "type": "string"
        },
    
        "Bytecode": {
          "type": "string",
          "pattern": "^0x0$|^0x([a-fA-F0-9]{2}|__.{38})+$"
        },
    
        "Source": {
          "type": "string"
        },
    
        "SourceMap": {
          "type": "string",
          "examples": [
            "315:637:1:-;;;452:55;;;;;;;-1:-1:-1;;;;;485:9:1;476:19;:8;:19;;;;;;;;;;498:5;476:27;;452:55;315:637;;;;;;;"
          ]
        },
    
        "SourcePath": {
          "type": "string"
        },
    
        "AST": {
          "type": "object"
        },
    
        "LegacyAST": {
          "type": "object"
        },
    
        "SchemaVersion": {
          "type": "string",
          "pattern": "[0-9]+\\.[0-9]+\\.[0-9]+"
        }
      }
    }
    
    },{}],381:[function(require,module,exports){
    module.exports={
      "$id": "network-object.spec.json",
      "$schema": "http://json-schema.org/schema#",
      "title": "Network Object",
    
      "type": "object",
      "properties": {
        "address": { "$ref": "#/definitions/Address" },
        "transactionHash": { "$ref": "#/definitions/TransactionHash" },
        "events": {
          "type": "object",
          "patternProperties": {
            "^0x[a-fA-F0-9]{64}$": { "$ref": "abi.spec.json#/definitions/Event" }
          },
          "additionalProperties": false
        },
        "links": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z_][a-zA-Z0-9_]*$": { "$ref": "#/definitions/Address" }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
    
      "definitions": {
        "Address": {
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$"
        },
    
        "TransactionHash": {
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{64}$"
        }
      }
    }
    
    },{}],382:[function(require,module,exports){
    // From here:
    // https://phabricator.babeljs.io/T3083
    //
    // Turns out I was doing some bad things, but for now I'm going to
    // keep on doing them. TODO: Stop it.
    
    function ExtendableBuiltin(cls) {
      function ExtendableBuiltin() {
        cls.apply(this, arguments);
      }
      ExtendableBuiltin.prototype = Object.create(cls.prototype);
      Object.setPrototypeOf(ExtendableBuiltin, cls);
    
      return ExtendableBuiltin;
    }
    
    module.exports = ExtendableBuiltin;
    
    },{}],383:[function(require,module,exports){
    var ExtendableBuiltin = require("./extendablebuiltin");
    var inherits = require("util").inherits;
    
    inherits(ExtendableError, ExtendableBuiltin(Error));
    
    // From: http://stackoverflow.com/questions/31089801/extending-error-in-javascript-with-es6-syntax
    function ExtendableError(message) {
      ExtendableError.super_.call(this);
      this.message = message;
      this.stack = new Error(message).stack;
      this.name = this.constructor.name;
    }
    
    // Hack. Likely won't be formatted correctly when there are
    // 10 or more errors. But if there's 10 or more errors, I'm guessing
    // formatting won't matter so much.
    ExtendableError.prototype.formatForMocha = function() {
      this.message = this.message.replace(/\n/g, "\n     ");
    };
    
    module.exports = ExtendableError;
    
    },{"./extendablebuiltin":382,"util":94}],384:[function(require,module,exports){
    const Schema = require("@truffle/contract-schema");
    const Contract = require("./lib/contract");
    const truffleContractVersion = require("./package.json").version;
    
    const contract = (json = {}) => {
      const normalizedArtifactObject = Schema.normalize(json);
    
      // Note we don't use `new` here at all. This will cause the class to
      // "mutate" instead of instantiate an instance.
      return Contract.clone(normalizedArtifactObject);
    };
    
    contract.version = truffleContractVersion;
    
    module.exports = contract;
    
    if (typeof window !== "undefined") {
      window.TruffleContract = contract;
    }
    
    },{"./lib/contract":385,"./package.json":399,"@truffle/contract-schema":377}],385:[function(require,module,exports){
    (function (global){
    const debug = require("debug")("contract:contract"); // eslint-disable-line no-unused-vars
    let Web3 = require("web3");
    const webUtils = require("web3-utils");
    const execute = require("./execute");
    const {
      bootstrap,
      constructorMethods,
      properties
    } = require("./contract/index");
    
    // For browserified version. If browserify gave us an empty version,
    // look for the one provided by the user.
    if (typeof Web3 === "object" && Object.keys(Web3).length === 0) {
      Web3 = global.Web3;
    }
    
    (function(module) {
      // Accepts a contract object created with web3.eth.Contract or an address.
      function Contract(contract) {
        var instance = this;
        var constructor = instance.constructor;
    
        // Disambiguate between .at() and .new()
        if (typeof contract === "string") {
          var web3Instance = new constructor.web3.eth.Contract(constructor.abi);
          web3Instance.options.address = contract;
          contract = web3Instance;
        }
    
        // Core:
        instance.methods = {};
        instance.abi = constructor.abi;
        instance.address = contract.options.address;
        instance.transactionHash = contract.transactionHash;
        instance.contract = contract;
    
        // User defined methods, overloaded methods, events
        instance.abi.forEach(function(item) {
          switch (item.type) {
            case "function":
              var isConstant =
                ["pure", "view"].includes(item.stateMutability) || item.constant; // new form // deprecated case
    
              var signature = webUtils._jsonInterfaceMethodToString(item);
    
              var method = function(constant, web3Method) {
                var fn;
    
                constant
                  ? (fn = execute.call.call(
                      constructor,
                      web3Method,
                      item,
                      instance.address
                    ))
                  : (fn = execute.send.call(
                      constructor,
                      web3Method,
                      item,
                      instance.address
                    ));
    
                fn.call = execute.call.call(
                  constructor,
                  web3Method,
                  item,
                  instance.address
                );
                fn.sendTransaction = execute.send.call(
                  constructor,
                  web3Method,
                  item,
                  instance.address
                );
                fn.estimateGas = execute.estimate.call(
                  constructor,
                  web3Method,
                  item,
                  instance.address
                );
                fn.request = execute.request.call(
                  constructor,
                  web3Method,
                  item,
                  instance.address
                );
    
                return fn;
              };
    
              // Only define methods once. Any overloaded methods will have all their
              // accessors available by ABI signature available on the `methods` key below.
              if (instance[item.name] === undefined) {
                instance[item.name] = method(
                  isConstant,
                  contract.methods[item.name]
                );
              }
    
              // Overloaded methods should be invoked via the .methods property
              instance.methods[signature] = method(
                isConstant,
                contract.methods[signature]
              );
              break;
    
            case "event":
              instance[item.name] = execute.event.call(
                constructor,
                contract.events[item.name]
              );
              break;
          }
        });
    
        // sendTransaction / send
        instance.sendTransaction = execute.send.call(
          constructor,
          null,
          null,
          instance.address
        );
    
        // Prefer user defined `send`
        if (!instance.send) {
          instance.send = (value, txParams = {}) => {
            const packet = Object.assign({ value: value }, txParams);
            return instance.sendTransaction(packet);
          };
        }
    
        // Other events
        instance.allEvents = execute.allEvents.call(constructor, contract);
        instance.getPastEvents = execute.getPastEvents.call(constructor, contract);
      }
    
      Contract._constructorMethods = constructorMethods(Contract);
    
      // Getter functions are scoped to Contract object.
      Contract._properties = properties;
    
      bootstrap(Contract);
      module.exports = Contract;
    
      return Contract;
    })(module || {});
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./contract/index":388,"./execute":390,"debug":397,"web3":359,"web3-utils":355}],386:[function(require,module,exports){
    const execute = require("../execute");
    
    module.exports = fn => {
      // Add our static methods
      // Add something here about excluding send, privately defined methods
      Object.keys(fn._constructorMethods).forEach(function(key) {
        fn[key] = fn._constructorMethods[key].bind(fn);
      });
    
      // Add our properties.
      Object.keys(fn._properties).forEach(function(key) {
        fn.addProp(key, fn._properties[key]);
      });
    
      // estimateGas as sub-property of new
      fn["new"].estimateGas = execute.estimateDeployment.bind(fn);
    
      return fn;
    };
    
    },{"../execute":390}],387:[function(require,module,exports){
    const Web3Shim = require("truffle-interface-adapter").Web3Shim;
    const utils = require("../utils");
    const execute = require("../execute");
    const bootstrap = require("./bootstrap");
    
    module.exports = Contract => ({
      setProvider(provider) {
        if (!provider) {
          throw new Error(
            `Invalid provider passed to setProvider(); provider is ${provider}`
          );
        }
    
        this.web3.setProvider(provider);
        this.currentProvider = provider;
      },
    
      new() {
        utils.checkProvider(this);
    
        if (!this.bytecode || this.bytecode === "0x") {
          throw new Error(
            `${
              this.contractName
            } error: contract binary not set. Can't deploy new instance.\n` +
              `This contract may be abstract, not implement an abstract parent's methods completely\n` +
              `or not invoke an inherited contract's constructor correctly\n`
          );
        }
    
        var constructorABI = this.abi.filter(i => i.type === "constructor")[0];
    
        return execute.deploy.call(this, constructorABI)(...arguments);
      },
    
      async at(address) {
        if (
          address == null ||
          typeof address !== "string" ||
          address.length !== 42
        ) {
          throw new Error(
            `Invalid address passed to ${this.contractName}.at(): ${address}`
          );
        }
    
        try {
          await this.detectNetwork();
          const onChainCode = await this.web3.eth.getCode(address);
          await utils.checkCode(onChainCode, this.contractName, address);
          return new this(address);
        } catch (error) {
          throw error;
        }
      },
    
      async deployed() {
        try {
          utils.checkProvider(this);
          await this.detectNetwork();
          utils.checkNetworkArtifactMatch(this);
          utils.checkDeployment(this);
          return new this(this.address);
        } catch (error) {
          throw error;
        }
      },
    
      defaults(class_defaults) {
        if (this.class_defaults == null) {
          this.class_defaults = {};
        }
    
        if (class_defaults == null) {
          class_defaults = {};
        }
    
        Object.keys(class_defaults).forEach(key => {
          const value = class_defaults[key];
          this.class_defaults[key] = value;
        });
    
        return this.class_defaults;
      },
    
      hasNetwork(network_id) {
        return this._json.networks[`${network_id}`] != null;
      },
    
      isDeployed() {
        if (this.network_id == null) {
          return false;
        }
    
        if (this._json.networks[this.network_id] == null) {
          return false;
        }
    
        return !!this.network.address;
      },
    
      async detectNetwork() {
        // if artifacts already have a network_id and network configuration synced,
        // use that network and use latest block gasLimit
        if (this.network_id && this.networks[this.network_id] != null) {
          try {
            const { gasLimit } = await this.web3.eth.getBlock("latest");
            return { id: this.network_id, blockLimit: gasLimit };
          } catch (error) {
            throw error;
          }
        }
        // since artifacts don't have a network_id synced with a network configuration,
        // poll chain for network_id and sync artifacts
        try {
          const chainNetworkID = await this.web3.eth.net.getId();
          const { gasLimit } = await this.web3.eth.getBlock("latest");
          return await utils.setInstanceNetworkID(this, chainNetworkID, gasLimit);
        } catch (error) {
          throw error;
        }
      },
    
      setNetwork(network_id) {
        if (!network_id) return;
        this.network_id = `${network_id}`;
      },
    
      setNetworkType(networkType = "ethereum") {
        if (this.web3) {
          this.web3.setNetworkType(networkType);
        }
    
        this.networkType = networkType;
      },
    
      setWallet(wallet) {
        this.web3.eth.accounts.wallet = wallet;
      },
    
      // Overrides the deployed address to null.
      // You must call this explicitly so you don't inadvertently do this otherwise.
      resetAddress() {
        delete this.network.address;
      },
    
      link(name, address) {
        // Case: Contract.link(instance)
        if (typeof name === "function") {
          const contract = name;
    
          if (contract.isDeployed() === false) {
            throw new Error("Cannot link contract without an address.");
          }
    
          this.link(contract.contractName, contract.address);
    
          // Merge events so this contract knows about library's events
          Object.keys(contract.events).forEach(topic => {
            this.network.events[topic] = contract.events[topic];
          });
    
          return;
        }
    
        // Case: Contract.link({<libraryName>: <address>, ... })
        if (typeof name === "object") {
          const obj = name;
          Object.keys(obj).forEach(name => {
            const a = obj[name];
            this.link(name, a);
          });
          return;
        }
    
        // Case: Contract.link(<libraryName>, <address>)
        if (this._json.networks[this.network_id] == null) {
          this._json.networks[this.network_id] = {
            events: {},
            links: {}
          };
        }
    
        this.network.links[name] = address;
      },
    
      // Note, this function can be called with two input types:
      // 1. Object with a bunch of data; this data will be merged with the json data of contract being cloned.
      // 2. network id; this will clone the contract and set a specific network id upon cloning.
      clone(json) {
        json = json || {};
    
        const temp = function TruffleContract() {
          this.constructor = temp;
          return Contract.apply(this, arguments);
        };
    
        temp.prototype = Object.create(this.prototype);
    
        let network_id;
    
        // If we have a network id passed
        if (typeof json !== "object") {
          network_id = json;
          json = this._json;
        }
    
        json = utils.merge({}, this._json || {}, json);
    
        temp._constructorMethods = this._constructorMethods;
        temp._properties = this._properties;
    
        temp._property_values = {};
        temp._json = json;
    
        bootstrap(temp);
    
        temp.web3 = new Web3Shim({
          type: temp.networkType
        });
        temp.class_defaults = temp.prototype.defaults || {};
    
        if (network_id) {
          temp.setNetwork(network_id);
        }
    
        // Copy over custom key/values to the contract class
        Object.keys(json).forEach(key => {
          if (key.indexOf("x-") !== 0) return;
          temp[key] = json[key];
        });
    
        return temp;
      },
    
      addProp(key, fn) {
        const getter = () => {
          if (fn.get != null) {
            return fn.get.call(this);
          }
    
          return this._property_values[key] || fn.call(this);
        };
    
        const setter = val => {
          if (fn.set != null) {
            fn.set.call(this, val);
            return;
          }
    
          // If there's not a setter, then the property is immutable.
          throw new Error(`${key} property is immutable`);
        };
    
        const definition = {};
        definition.enumerable = false;
        definition.configurable = false;
        definition.get = getter;
        definition.set = setter;
    
        Object.defineProperty(this, key, definition);
      },
    
      toJSON() {
        return this._json;
      },
    
      decodeLogs: utils.decodeLogs
    });
    
    },{"../execute":390,"../utils":396,"./bootstrap":386,"truffle-interface-adapter":402}],388:[function(require,module,exports){
    module.exports = {
      constructorMethods: require("./constructorMethods"),
      bootstrap: require("./bootstrap"),
      properties: require("./properties")
    };
    
    },{"./bootstrap":386,"./constructorMethods":387,"./properties":389}],389:[function(require,module,exports){
    const utils = require("../utils");
    const web3Utils = require("web3-utils");
    
    module.exports = {
      contract_name: {
        get: function() {
          return this.contractName;
        },
        set: function(val) {
          this.contractName = val;
        }
      },
      contractName: {
        get: function() {
          return this._json.contractName || "Contract";
        },
        set: function(val) {
          this._json.contractName = val;
        }
      },
    
      gasMultiplier: {
        get: function() {
          if (this._json.gasMultiplier === undefined) {
            this._json.gasMultiplier = 1.25;
          }
          return this._json.gasMultiplier;
        },
        set: function(val) {
          this._json.gasMultiplier = val;
        }
      },
      timeoutBlocks: {
        get: function() {
          return this._json.timeoutBlocks;
        },
        set: function(val) {
          this._json.timeoutBlocks = val;
        }
      },
      autoGas: {
        get: function() {
          if (this._json.autoGas === undefined) {
            this._json.autoGas = true;
          }
          return this._json.autoGas;
        },
        set: function(val) {
          this._json.autoGas = val;
        }
      },
      numberFormat: {
        get: function() {
          if (this._json.numberFormat === undefined) {
            this._json.numberFormat = "BN";
          }
          return this._json.numberFormat;
        },
        set: function(val) {
          const allowedFormats = ["BigNumber", "BN", "String"];
    
          const msg =
            `Invalid number format setting: "${val}": ` +
            `valid formats are: ${JSON.stringify(allowedFormats)}.`;
    
          if (!allowedFormats.includes(val)) throw new Error(msg);
    
          this._json.numberFormat = val;
        }
      },
      abi: {
        get: function() {
          return this._json.abi;
        },
        set: function(val) {
          this._json.abi = val;
        }
      },
      metadata: function() {
        return this._json.metadata;
      },
      network: function() {
        var network_id = this.network_id;
    
        if (network_id == null) {
          var error =
            this.contractName +
            " has no network id set, cannot lookup artifact data." +
            " Either set the network manually using " +
            this.contractName +
            ".setNetwork(), run " +
            this.contractName +
            ".detectNetwork(), or use new()," +
            " at() or deployed() as a thenable which will detect the network automatically.";
    
          throw new Error(error);
        }
    
        // TODO: this might be bad; setting a value on a get.
        if (this._json.networks[network_id] == null) {
          var error =
            this.contractName +
            " has no network configuration" +
            " for its current network id (" +
            network_id +
            ").";
    
          throw new Error(error);
        }
    
        var returnVal = this._json.networks[network_id];
    
        // Normalize output
        if (returnVal.links == null) {
          returnVal.links = {};
        }
    
        if (returnVal.events == null) {
          returnVal.events = {};
        }
    
        return returnVal;
      },
      networks: function() {
        return this._json.networks;
      },
      address: {
        get: function() {
          var address = this.network.address;
    
          if (address == null) {
            var error =
              "Cannot find deployed address: " +
              this.contractName +
              " not deployed or address not set.";
            throw new Error(error);
          }
    
          return address;
        },
        set: function(val) {
          if (val == null) {
            throw new Error("Cannot set deployed address; malformed value: " + val);
          }
    
          var network_id = this.network_id;
    
          if (network_id == null) {
            var error =
              this.contractName +
              " has no network id set, cannot lookup artifact data." +
              " Either set the network manually using " +
              this.contractName +
              ".setNetwork(), run " +
              this.contractName +
              ".detectNetwork()," +
              " or use new(), at() or deployed() as a thenable which will" +
              " detect the network automatically.";
    
            throw new Error(error);
          }
    
          // Create a network if we don't have one.
          if (this._json.networks[network_id] == null) {
            this._json.networks[network_id] = {
              events: {},
              links: {}
            };
          }
    
          // Finally, set the address.
          this.network.address = val;
        }
      },
      transactionHash: {
        get: function() {
          return this.network.transactionHash;
        },
        set: function(val) {
          this.network.transactionHash = val;
        }
      },
      links: function() {
        if (!this.network_id) {
          var error =
            this.contractName +
            " has no network id set, cannot lookup artifact data." +
            " Either set the network manually using " +
            this.contractName +
            ".setNetwork()," +
            " run " +
            this.contractName +
            ".detectNetwork(), or use new(), at()" +
            " or deployed() as a thenable which will detect the network automatically.";
    
          throw new Error(error);
        }
    
        if (this._json.networks[this.network_id] == null) {
          return {};
        }
    
        return this.network.links || {};
      },
      events: function() {
        var events;
    
        if (this._json.networks[this.network_id] == null) {
          events = {};
        } else {
          events = this.network.events || {};
        }
    
        // Merge abi events with whatever's returned.
        var abi = this.abi;
    
        abi.forEach(function(item) {
          if (item.type !== "event") return;
    
          if (item.signature) {
            events[item.signature] = item;
          } else {
            var signature = item.name + "(";
    
            item.inputs.forEach(function(input, index) {
              signature += input.type;
    
              if (index < item.inputs.length - 1) {
                signature += ",";
              }
            });
    
            signature += ")";
    
            var topic = web3Utils.keccak256(signature);
    
            events[topic] = item;
          }
        });
    
        return events;
      },
      binary: function() {
        return utils.linkBytecode(this.bytecode, this.links);
      },
      deployedBinary: function() {
        return utils.linkBytecode(this.deployedBytecode, this.links);
      },
    
      // deprecated; use bytecode
      unlinked_binary: {
        get: function() {
          return this.bytecode;
        },
        set: function(val) {
          this.bytecode = val;
        }
      },
      // alias for unlinked_binary; unlinked_binary will eventually be deprecated
      bytecode: {
        get: function() {
          return this._json.bytecode;
        },
        set: function(val) {
          this._json.bytecode = val;
        }
      },
      deployedBytecode: {
        get: function() {
          var code = this._json.deployedBytecode;
    
          if (code.indexOf("0x") !== 0) {
            code = "0x" + code;
          }
    
          return code;
        },
        set: function(val) {
          var code = val;
    
          if (val.indexOf("0x") !== 0) {
            code = "0x" + code;
          }
    
          this._json.deployedBytecode = code;
        }
      },
      sourceMap: {
        get: function() {
          return this._json.sourceMap;
        },
        set: function(val) {
          this._json.sourceMap = val;
        }
      },
      deployedSourceMap: {
        get: function() {
          return this._json.deployedSourceMap;
        },
        set: function(val) {
          this._json.deployedSourceMap = val;
        }
      },
      source: {
        get: function() {
          return this._json.source;
        },
        set: function(val) {
          this._json.source = val;
        }
      },
      sourcePath: {
        get: function() {
          return this._json.sourcePath;
        },
        set: function(val) {
          this._json.sourcePath = val;
        }
      },
      legacyAST: {
        get: function() {
          return this._json.legacyAST;
        },
        set: function(val) {
          this._json.legacyAST = val;
        }
      },
      ast: {
        get: function() {
          return this._json.ast;
        },
        set: function(val) {
          this._json.ast = val;
        }
      },
      compiler: {
        get: function() {
          return this._json.compiler;
        },
        set: function(val) {
          this._json.compiler = val;
        }
      },
      // Deprecated
      schema_version: function() {
        return this.schemaVersion;
      },
      schemaVersion: function() {
        return this._json.schemaVersion;
      },
      // deprecated
      updated_at: function() {
        return this.updatedAt;
      },
      updatedAt: function() {
        try {
          return this.network.updatedAt || this._json.updatedAt;
        } catch (e) {
          return this._json.updatedAt;
        }
      },
      userdoc: function() {
        return this._json.userdoc;
      },
      devdoc: function() {
        return this._json.devdoc;
      }
    };
    
    },{"../utils":396,"web3-utils":355}],390:[function(require,module,exports){
    const debug = require("debug")("contract:execute"); // eslint-disable-line no-unused-vars
    var Web3PromiEvent = require("web3-core-promievent");
    var EventEmitter = require("events");
    var utils = require("./utils");
    var StatusError = require("./statuserror");
    var Reason = require("./reason");
    var handlers = require("./handlers");
    var override = require("./override");
    var reformat = require("./reformat");
    
    var execute = {
      // -----------------------------------  Helpers --------------------------------------------------
      /**
       * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.
       * @param  {Object} params     `sendTransaction` parameters
       * @param  {Number} blockLimit  most recent network block.blockLimit
       * @return {Number}             gas estimate
       */
      getGasEstimate: function(params, blockLimit) {
        var constructor = this;
        var web3 = this.web3;
    
        return new Promise(function(accept) {
          // Always prefer specified gas - this includes gas set by class_defaults
          if (params.gas) return accept(params.gas);
          if (!constructor.autoGas) return accept();
    
          web3.eth
            .estimateGas(params)
            .then(gas => {
              const bestEstimate = utils.multiplyBigNumberByDecimal(
                utils.bigNumberify(gas),
                constructor.gasMultiplier
              );
    
              // Don't go over blockLimit
              const limit = utils.bigNumberify(blockLimit);
              bestEstimate.gte(limit)
                ? accept(limit.sub(1).toHexString())
                : accept(bestEstimate.toHexString());
    
              // We need to let txs that revert through.
              // Often that's exactly what you are testing.
            })
            .catch(() => accept());
        });
      },
    
      /**
       * Prepares simple wrapped calls by checking network and organizing the method inputs into
       * objects web3 can consume.
       * @param  {Object} constructor   TruffleContract constructor
       * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.
       * @param  {Array}  _arguments    Arguments passed to method invocation
       * @return {Promise}              Resolves object w/ tx params disambiguated from arguments
       */
      prepareCall: function(constructor, methodABI, _arguments) {
        var args = Array.prototype.slice.call(_arguments);
        var params = utils.getTxParams.call(constructor, methodABI, args);
    
        args = utils.convertToEthersBN(args);
    
        return constructor.detectNetwork().then(network => {
          return { args: args, params: params, network: network };
        });
      },
    
      /**
       * Disambiguates between transaction parameter objects and BN / BigNumber objects
       * @param  {Any}  arg
       * @return {Boolean}
       */
      hasTxParams: function(arg) {
        return utils.is_object(arg) && !utils.is_big_number(arg);
      },
    
      /**
       * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`
       * to execute a call at.
       * @param  {Array}  args      `arguments` that were passed to method
       * @param  {Any}    lastArg    terminal argument passed to method
       * @param  {Array}  inputs     ABI segment defining method arguments
       * @return {Boolean}           true if final argument is `defaultBlock`
       */
      hasDefaultBlock: function(args, lastArg, inputs) {
        var hasDefaultBlock =
          !execute.hasTxParams(lastArg) && args.length > inputs.length;
        var hasDefaultBlockWithParams =
          execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;
        return hasDefaultBlock || hasDefaultBlockWithParams;
      },
    
      // -----------------------------------  Methods --------------------------------------------------
    
      /**
       * Executes method as .call and processes optional `defaultBlock` argument.
       * @param  {Function} fn         method
       * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.
       * @return {Promise}             Return value of the call.
       */
      call: function(fn, methodABI, address) {
        var constructor = this;
    
        return function() {
          var defaultBlock = "latest";
          var args = Array.prototype.slice.call(arguments);
          var lastArg = args[args.length - 1];
          var promiEvent = new Web3PromiEvent();
    
          // Extract defaultBlock parameter
          if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {
            defaultBlock = args.pop();
          }
    
          execute
            .prepareCall(constructor, methodABI, args)
            .then(async ({ args, params }) => {
              let result;
    
              params.to = address;
    
              promiEvent.eventEmitter.emit("execute:call:method", {
                fn: fn,
                args: args,
                address: address,
                abi: methodABI,
                contract: constructor
              });
    
              result = await fn(...args).call(params, defaultBlock);
              result = reformat.numbers.call(
                constructor,
                result,
                methodABI.outputs
              );
              return promiEvent.resolve(result);
            })
            .catch(promiEvent.reject);
    
          return promiEvent.eventEmitter;
        };
      },
    
      /**
       * Executes method as .send
       * @param  {Function} fn         Method to invoke
       * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.
       * @param  {String}   address    Deployed address of the targeted instance
       * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)
       */
      send: function(fn, methodABI, address) {
        var constructor = this;
        var web3 = constructor.web3;
    
        return function() {
          var deferred;
          var promiEvent = new Web3PromiEvent();
    
          execute
            .prepareCall(constructor, methodABI, arguments)
            .then(async ({ args, params, network }) => {
              var context = {
                contract: constructor, // Can't name this field `constructor` or `_constructor`
                promiEvent: promiEvent,
                params: params
              };
    
              params.to = address;
              params.data = fn ? fn(...args).encodeABI() : params.data;
    
              promiEvent.eventEmitter.emit("execute:send:method", {
                fn,
                args,
                address,
                abi: methodABI,
                contract: constructor
              });
    
              try {
                params.gas = await execute.getGasEstimate.call(
                  constructor,
                  params,
                  network.blockLimit
                );
              } catch (error) {
                promiEvent.reject(error);
                return;
              }
    
              deferred = web3.eth.sendTransaction(params);
              deferred.catch(override.start.bind(constructor, context));
              handlers.setup(deferred, context);
            })
            .catch(promiEvent.reject);
    
          return promiEvent.eventEmitter;
        };
      },
    
      /**
       * Deploys an instance
       * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys
       * @return {PromiEvent}             Resolves a TruffleContract instance
       */
      deploy: function(constructorABI) {
        var constructor = this;
        var web3 = constructor.web3;
    
        return function() {
          var deferred;
          const promiEvent = new Web3PromiEvent();
    
          execute
            .prepareCall(constructor, constructorABI, arguments)
            .then(async ({ args, params, network }) => {
              const { blockLimit } = network;
    
              utils.checkLibraries.apply(constructor);
    
              // Promievent and flag that allows instance to resolve (rather than just receipt)
              const context = {
                contract: constructor,
                promiEvent,
                onlyEmitReceipt: true
              };
    
              var options = {
                data: constructor.binary,
                arguments: args
              };
    
              var contract = new web3.eth.Contract(constructor.abi);
              params.data = contract.deploy(options).encodeABI();
    
              params.gas = await execute.getGasEstimate.call(
                constructor,
                params,
                blockLimit
              );
    
              context.params = params;
    
              promiEvent.eventEmitter.emit("execute:deploy:method", {
                args,
                abi: constructorABI,
                contract: constructor
              });
    
              deferred = web3.eth.sendTransaction(params);
              handlers.setup(deferred, context);
    
              try {
                const receipt = await deferred;
                if (receipt.status !== undefined && !receipt.status) {
                  var reason = await Reason.get(params, web3);
    
                  var error = new StatusError(
                    params,
                    context.transactionHash,
                    receipt,
                    reason
                  );
    
                  return context.promiEvent.reject(error);
                }
    
                var web3Instance = new web3.eth.Contract(
                  constructor.abi,
                  receipt.contractAddress
                );
                web3Instance.transactionHash = context.transactionHash;
    
                context.promiEvent.resolve(new constructor(web3Instance));
              } catch (web3Error) {
                // Manage web3's 50 blocks' timeout error.
                // Web3's own subscriptions go dead here.
                await override.start.call(constructor, context, web3Error);
              }
            })
            .catch(promiEvent.reject);
    
          return promiEvent.eventEmitter;
        };
      },
    
      /**
       * Begins listening for an event OR manages the event callback
       * @param  {Function} fn  Solidity event method
       * @return {Emitter}      Event emitter
       */
      event: function(fn) {
        var constructor = this;
        var decode = utils.decodeLogs;
        var currentLogID = null;
    
        // Someone upstream is firing duplicates :/
        function dedupe(id) {
          return id === currentLogID ? false : (currentLogID = id);
        }
    
        return function(params, callback) {
          if (typeof params === "function") {
            callback = params;
            params = {};
          }
    
          // As callback
          if (callback !== undefined) {
            var intermediary = function(err, e) {
              if (err) return callback(err);
              if (!dedupe(e.id)) return;
              callback(null, decode.call(constructor, e, true)[0]);
            };
    
            return constructor
              .detectNetwork()
              .then(() => fn.call(constructor.events, params, intermediary));
          }
    
          // As EventEmitter
          var emitter = new EventEmitter();
    
          constructor.detectNetwork().then(() => {
            var event = fn(params);
    
            event.on(
              "data",
              e =>
                dedupe(e.id) &&
                emitter.emit("data", decode.call(constructor, e, true)[0])
            );
            event.on(
              "changed",
              e =>
                dedupe(e.id) &&
                emitter.emit("changed", decode.call(constructor, e, true)[0])
            );
            event.on("error", e => emitter.emit("error", e));
          });
    
          return emitter;
        };
      },
    
      /**
       * Wraps web3 `allEvents`, with additional log decoding
       * @return {PromiEvent}  EventEmitter
       */
      allEvents: function(web3Instance) {
        var constructor = this;
        var decode = utils.decodeLogs;
        var currentLogID = null;
    
        // Someone upstream is firing duplicates :/
        function dedupe(id) {
          return id === currentLogID ? false : (currentLogID = id);
        }
    
        return function(params) {
          var emitter = new EventEmitter();
    
          constructor.detectNetwork().then(() => {
            var event = web3Instance.events.allEvents(params);
    
            event.on(
              "data",
              e =>
                dedupe(e.id) &&
                emitter.emit("data", decode.call(constructor, e, true)[0])
            );
            event.on(
              "changed",
              e =>
                dedupe(e.id) &&
                emitter.emit("changed", decode.call(constructor, e, true)[0])
            );
            event.on("error", e => emitter.emit("error", e));
          });
    
          return emitter;
        };
      },
    
      /**
       * Wraps web3 `getPastEvents`, with additional log decoding
       * @return {Promise}  Resolves array of event objects
       */
      getPastEvents: function(web3Instance) {
        var constructor = this;
        var decode = utils.decodeLogs;
    
        return function(event, options) {
          return web3Instance
            .getPastEvents(event, options)
            .then(events => decode.call(constructor, events, false));
        };
      },
    
      /**
       * Estimates gas cost of a method invocation
       * @param  {Function} fn  Method to target
       * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.
       * @return {Promise}
       */
      estimate: function(fn, methodABI) {
        var constructor = this;
        return function() {
          return execute
            .prepareCall(constructor, methodABI, arguments)
            .then(res => fn(...res.args).estimateGas(res.params));
        };
      },
    
      /**
       *
       * @param  {Function} fn  Method to target
       * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.
       * @return {Promise}
       */
      request: function(fn, methodABI) {
        var constructor = this;
        return function() {
          return execute
            .prepareCall(constructor, methodABI, arguments)
            .then(res => fn(...res.args).request(res.params));
        };
      },
    
      // This gets attached to `.new` (declared as a static_method in `contract`)
      // during bootstrapping as `estimate`
      estimateDeployment: function() {
        var constructor = this;
    
        var constructorABI = constructor.abi.filter(
          i => i.type === "constructor"
        )[0];
    
        return execute
          .prepareCall(constructor, constructorABI, arguments)
          .then(res => {
            var options = {
              data: constructor.binary,
              arguments: res.args
            };
    
            delete res.params["data"]; // Is this necessary?
    
            var instance = new constructor.web3.eth.Contract(
              constructor.abi,
              res.params
            );
            return instance.deploy(options).estimateGas(res.params);
          });
      }
    };
    
    module.exports = execute;
    
    },{"./handlers":391,"./override":392,"./reason":393,"./reformat":394,"./statuserror":395,"./utils":396,"debug":397,"events":91,"web3-core-promievent":315}],391:[function(require,module,exports){
    const debug = require("debug")("contract:handlers"); // eslint-disable-line no-unused-vars
    var StatusError = require("./statuserror");
    var Utils = require("./utils");
    var Reason = require("./reason");
    
    /*
      Handlers for events emitted by `send` / `call` etc.
     */
    var handlers = {
      // ----------------------------------- Constants -------------------------------------------------
    
      maxConfirmations: 24, // Maximum number of confirmation web3 emits
      defaultTimeoutBlocks: 50, // Maximum number of blocks web3 will wait before abandoning tx
      timeoutMessage: "50 blocks", // Substring of web3 timeout error.
    
      // -----------------------------------  Helpers --------------------------------------------------
    
      /**
       * Parses error message and determines if we should squash block timeout errors at user's request.
       * @param  {Object} context execution state
       * @param  {Object} error   error
       * @return {Boolean}
       */
      ignoreTimeoutError: function(context, error) {
        var timedOut =
          error.message && error.message.includes(handlers.timeoutMessage);
    
        var shouldWait =
          context.contract &&
          context.contract.timeoutBlocks &&
          context.contract.timeoutBlocks > handlers.defaultTimeoutBlocks;
    
        return timedOut && shouldWait;
      },
    
      /**
       * Attaches Truffle specific handlers to all of the events emitted by a web3 method.
       * @param {Object}       context  execution state
       * @param {PromiEvent}   emitter  promiEvent returned by a web3 method call
       */
      setup: function(emitter, context) {
        emitter.on("error", handlers.error.bind(emitter, context));
        emitter.on("transactionHash", handlers.hash.bind(emitter, context));
        emitter.on("confirmation", handlers.confirmation.bind(emitter, context));
        emitter.on("receipt", handlers.receipt.bind(emitter, context));
      },
    
      // -----------------------------------  Handlers -------------------------------------------------
      /**
       * Error event handler. Emits error unless error is block timeout and user has
       * specified we should wait longer
       * @param  {Object} context   execution state
       * @param  {Object} error     error
       */
      error: function(context, error) {
        if (!handlers.ignoreTimeoutError(context, error)) {
          context.promiEvent.eventEmitter.emit("error", error);
          this.removeListener("error", handlers.error);
        }
      },
    
      /**
       * Transaction hash event handler. Attaches the hash to the context object
       * so it can be attached to the contract instance after a deployment resolves.
       * @param  {Object} context   execution state
       * @param  {String} hash      transaction hash
       */
      hash: function(context, hash) {
        context.transactionHash = hash;
        context.promiEvent.eventEmitter.emit("transactionHash", hash);
        this.removeListener("transactionHash", handlers.hash);
      },
    
      confirmation: function(context, number, receipt) {
        context.promiEvent.eventEmitter.emit("confirmation", number, receipt);
    
        // Per web3: initial confirmation index is 0
        if (number === handlers.maxConfirmations + 1) {
          this.removeListener("confirmation", handlers.confirmation);
        }
      },
    
      /**
       * Receipt event handler. This handler decodes the event logs, re-emits the receipt,
       * and (for method calls only) resolves/rejects the promiEvent with the receipt.
       * @param  {Object} context   execution state
       * @param  {Object} receipt   transaction receipt
       */
      receipt: async function(context, receipt) {
        // keep around the raw (not decoded) logs in the raw logs field as a
        // stopgap until we can get the ABI for all events, not just the current
        // contract
        receipt.rawLogs = receipt.logs;
    
        // Decode logs, use as receipt.logs for ease of use.
        try {
          receipt.logs = receipt.logs
            ? Utils.decodeLogs.call(context.contract, receipt.logs)
            : [];
        } catch (error) {
          return context.promiEvent.reject(error);
        }
    
        // Emit receipt
        context.promiEvent.eventEmitter.emit("receipt", receipt);
    
        // .new(): Exit early. We need the promiEvent to resolve a contract instance.
        if (context.onlyEmitReceipt) {
          context.receipt = receipt;
          return;
        }
    
        // .method(): resolve/reject receipt in handler
        if (receipt.status !== undefined && !receipt.status) {
          var reason = await Reason.get(context.params, context.contract.web3);
    
          var error = new StatusError(
            context.params,
            receipt.transactionHash,
            receipt,
            reason
          );
    
          return context.promiEvent.reject(error);
        }
    
        // This object has some duplicate data but is backward compatible.
        context.promiEvent.resolve({
          tx: receipt.transactionHash,
          receipt: receipt,
          logs: receipt.logs
        });
    
        this.removeListener("receipt", handlers.receipt);
      }
    };
    
    module.exports = handlers;
    
    },{"./reason":393,"./statuserror":395,"./utils":396,"debug":397}],392:[function(require,module,exports){
    var Reason = require('./reason');
    var handlers = require('./handlers');
    
    var override = {
    
      timeoutMessage: 'not mined within', // Substring of timeout err fired by web3
      defaultMaxBlocks: 50,               // Max # of blocks web3 will wait for a tx
      pollingInterval: 1000,
    
      /**
       * Attempts to extract receipt object from Web3 error message
       * @param  {Object} message       web3 error
       * @return {Object|undefined} receipt
       */
      extractReceipt(message){
        const hasReceipt = message &&
                           message.includes('{');
                           message.includes('}');
    
        if (hasReceipt){
          const receiptString =  '{' + message.split('{')[1].trim();
          try {
            return JSON.parse(receiptString);
          } catch (err){
            // ignore
          }
        }
      },
    
      /**
       * Fired after web3 ceases to support subscriptions if user has specified
       * a higher block wait time than web3's 50 blocks limit. Opens a subscription to listen
       * for new blocks and begins evaluating whether block height has reached the user
       * defined timeout threshhold. Resolves either a contract instance or a transaction receipt.
       *
       * @param  {Object} context execution state
       * @param  {Object} err     error
       */
      start: async function(context, web3Error){
        var constructor = this;
        var blockNumber = null;
        var currentBlock = override.defaultMaxBlocks;
        var maxBlocks = constructor.timeoutBlocks;
    
        var timedOut = web3Error.message && web3Error.message.includes(override.timeoutMessage);
        var shouldWait = maxBlocks > currentBlock;
    
        // Reject after attempting to get reason string if we shouldn't be waiting.
        if (!timedOut || !shouldWait){
    
          // We might have been routed here in web3 >= beta.34 by their own status check
          // error. We want to extract the receipt, emit a receipt event
          // and reject it ourselves.
          var receipt = override.extractReceipt(web3Error.message);
          if (receipt){
            await handlers.receipt(context, receipt);
            return;
          }
    
          // This will run if there's a reason and no status field
          // e.g: revert with reason ganache-cli --vmErrorsOnRPCResponse=true
          var reason = await Reason.get(context.params, constructor.web3);
          if (reason) {
            web3Error.reason = reason;
            web3Error.message += ` -- Reason given: ${reason}.`;
          }
    
          return context.promiEvent.reject(web3Error);
        }
    
        // This will run every block from now until contract.timeoutBlocks
        var listener = function(pollID){
          var self = this;
          currentBlock++;
    
          if (currentBlock > constructor.timeoutBlocks){
            clearInterval(pollID);
            return;
          }
    
          constructor.web3.eth.getTransactionReceipt(context.transactionHash)
            .then(result => {
              if (!result) return;
    
              (result.contractAddress)
                ? constructor
                    .at(result.contractAddress)
                    .then(context.promiEvent.resolve)
                    .catch(context.promiEvent.reject)
    
                : constructor.promiEvent.resolve(result);
    
            })
            .catch(err => {
              clearInterval(pollID);
              context.promiEvent.reject(err);
            });
        };
    
        // Start polling
        let currentPollingBlock = await constructor.web3.eth.getBlockNumber();
    
        const pollID = setInterval(async() => {
          const newBlock = await constructor.web3.eth.getBlockNumber();
    
          if(newBlock > currentPollingBlock){
            currentPollingBlock = newBlock;
            listener(pollID);
          }
        }, override.pollingInterval);
      },
    };
    
    module.exports = override;
    
    },{"./handlers":391,"./reason":393}],393:[function(require,module,exports){
    /**
     * Methods to fetch and decode reason string from ganache when a tx errors.
     */
    
    const reason = {
      /**
       * Extracts a reason string from `eth_call` response
       * @param  {Object}           res  response from `eth_call` to extract reason
       * @param  {Web3}             web3 a helpful friend
       * @return {String|Undefined}      decoded reason string
       */
      _extract: function(res, web3){
        if (!res || (!res.error && !res.result)) return;
    
        const errorStringHash = '0x08c379a0';
    
        const isObject = res && typeof res === 'object' && res.error && res.error.data;
        const isString = res && typeof res === 'object' && typeof res.result === 'string';
    
        if (isObject) {
          const data = res.error.data;
          const hash = Object.keys(data)[0];
    
          if (data[hash].return && data[hash].return.includes(errorStringHash)){
            return web3.eth.abi.decodeParameter('string', data[hash].return.slice(10));
          }
    
        } else if (isString && res.result.includes(errorStringHash)){
          return web3.eth.abi.decodeParameter('string', res.result.slice(10));
        }
      },
    
      /**
       * Runs tx via `eth_call` and resolves a reason string if it exists on the response.
       * @param  {Object} web3
       * @return {String|Undefined}
       */
      get: function(params, web3){
        const packet = {
          jsonrpc: '2.0',
          method: 'eth_call',
          params: [params, 'latest'],
          id: new Date().getTime(),
        };
    
        return new Promise(resolve => {
          web3.currentProvider.send(packet, (err, response) => {
            const reasonString = reason._extract(response, web3);
            resolve(reasonString);
          });
        });
      },
    };
    
    module.exports = reason;
    
    },{}],394:[function(require,module,exports){
    /**
     * Utilities for reformatting web3 outputs
     */
    const BigNumber = require("bignumber.js/bignumber");
    const web3Utils = require("web3-utils");
    
    /**
     * Converts from string to other number format
     * @param  {String} val    number string returned by web3
     * @param  {String} format name of format to convert to
     * @return {Object|String} converted value
     */
    const _convertNumber = function(val, format) {
      const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;
    
      switch (format) {
        case "BigNumber":
          return new BigNumber(val);
        case "BN":
          return web3Utils.toBN(val);
        case "String":
          return val;
        default:
          throw new Error(badFormatMsg);
      }
    };
    
    /**
     * Converts arrays of number strings to other number formats
     * @param  {String[]} arr       number string array returned by web3
     * @param  {String}   format    name of format to convert to
     * @return {Object[]|String[]}  array of converted values
     */
    const _convertNumberArray = function(arr, format) {
      return arr.map(item => _convertNumber(item, format));
    };
    
    /**
     * Reformats numbers in the result/result-object of a web3 call.
     * Possible forms of `result` are:
     *   - object (with index keys and optionally, named keys)
     *   - array
     *   - single primitive
     * @param  {String|Object|Array} result      web3 call result
     * @param  {Array}               abiSegment  event params OR .call outputs
     * @return {String|Object|Array} reformatted result
     */
    const numbers = function(result, abiSegment) {
      const format = this.numberFormat;
    
      abiSegment.forEach((output, i) => {
        // output is a number type (uint || int);
        if (output.type.includes("int")) {
          // output is an array type
          if (output.type.includes("[")) {
            // result is array
            if (Array.isArray(result)) {
              result = _convertNumberArray(result, format);
    
              // result is object
            } else {
              // output has name
              if (output.name.length) {
                result[output.name] = _convertNumberArray(
                  result[output.name],
                  format
                );
              }
              // output will always have an index key
              result[i] = _convertNumberArray(result[i], format);
            }
            //
          } else if (typeof result === "object") {
            // output has name
            if (output.name.length) {
              result[output.name] = _convertNumber(result[output.name], format);
            }
    
            // output will always have an index key
            result[i] = _convertNumber(result[i], format);
          } else {
            result = _convertNumber(result, format);
          }
        }
      });
      return result;
    };
    
    module.exports = {
      numbers: numbers
    };
    
    },{"bignumber.js/bignumber":60,"web3-utils":355}],395:[function(require,module,exports){
    var TruffleError = require("@truffle/error");
    var inherits = require("util").inherits;
    var utils = require("./utils");
    
    inherits(StatusError, TruffleError);
    
    var defaultGas = 90000;
    
    function StatusError(args, tx, receipt, reason) {
      var message;
      var gasLimit = args.gas || defaultGas;
      var reasonString = "";
    
      if (reason) reasonString = `Reason given: ${reason}.`;
    
      if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {
        message =
          "Transaction: " +
          tx +
          " exited with an error (status 0) after consuming all gas.\n" +
          "     Please check that the transaction:\n" +
          "     - satisfies all conditions set by Solidity `assert` statements.\n" +
          "     - has enough gas to execute the full transaction.\n" +
          "     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).";
      } else {
        message =
          `Transaction: ${tx} exited with an error (status 0). ${reasonString}\n` +
          "     Please check that the transaction:\n" +
          "     - satisfies all conditions set by Solidity `require` statements.\n" +
          "     - does not trigger a Solidity `revert` statement.\n";
      }
    
      StatusError.super_.call(this, message);
      this.tx = tx;
      this.receipt = receipt;
      this.reason = reason;
    }
    
    module.exports = StatusError;
    
    },{"./utils":396,"@truffle/error":383,"util":94}],396:[function(require,module,exports){
    const debug = require("debug")("contract:utils"); // eslint-disable-line no-unused-vars
    const web3Utils = require("web3-utils");
    const bigNumberify = require("ethers/utils/bignumber").bigNumberify;
    const abi = require("web3-eth-abi");
    const BlockchainUtils = require("@truffle/blockchain-utils");
    const reformat = require("./reformat");
    
    const Utils = {
      is_object(val) {
        return typeof val === "object" && !Array.isArray(val);
      },
    
      is_big_number(val) {
        if (typeof val !== "object") return false;
    
        return web3Utils.isBN(val) || web3Utils.isBigNumber(val);
      },
    
      is_tx_params(val) {
        if (!Utils.is_object(val)) return false;
        if (Utils.is_big_number(val)) return false;
    
        const allowed_fields = {
          from: true,
          to: true,
          gas: true,
          gasPrice: true,
          value: true,
          data: true,
          nonce: true,
          privateFor: true
        };
    
        for (let field_name of Object.keys(val)) {
          if (allowed_fields[field_name]) return true;
        }
    
        return false;
      },
    
      decodeLogs(_logs, isSingle) {
        const constructor = this;
        const logs = Utils.toTruffleLog(_logs, isSingle);
    
        return logs
          .map(log => {
            const logABI = constructor.events[log.topics[0]];
    
            if (logABI == null) {
              return null;
            }
    
            const copy = Utils.merge({}, log);
    
            copy.event = logABI.name;
            copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);
    
            if (copy.data === "0x") {
              copy.data = "";
            }
    
            let logArgs;
            try {
              logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);
            } catch (_) {
              return null;
            }
            copy.args = reformat.numbers.call(constructor, logArgs, logABI.inputs);
    
            delete copy.data;
            delete copy.topics;
    
            return copy;
          })
          .filter(log => log != null);
      },
    
      toTruffleLog(events, isSingle) {
        // Transform singletons (from event listeners) to the kind of
        // object we find on the receipt
        if (isSingle && typeof isSingle === "boolean") {
          const temp = [];
          temp.push(events);
          return temp.map(log => {
            log.data = log.raw.data;
            log.topics = log.raw.topics;
            return log;
          });
        }
    
        // Or reformat items in the existing array
        events.forEach(event => {
          if (event.raw) {
            event.data = event.raw.data;
            event.topics = event.raw.topics;
          }
        });
    
        return events;
      },
    
      merge() {
        const merged = {};
        const args = Array.prototype.slice.call(arguments);
    
        for (let i = 0; i < args.length; i++) {
          const object = args[i];
          const keys = Object.keys(object);
          for (let j = 0; j < keys.length; j++) {
            const key = keys[j];
            const value = object[key];
            merged[key] = value;
          }
        }
    
        return merged;
      },
      parallel(arr, callback = () => {}) {
        if (!arr.length) {
          return callback(null, []);
        }
        let index = 0;
        const results = new Array(arr.length);
        arr.forEach((fn, position) => {
          fn((err, result) => {
            if (err) {
              callback(err);
              callback = () => {};
            } else {
              index++;
              results[position] = result;
              if (index >= arr.length) {
                callback(null, results);
              }
            }
          });
        });
      },
    
      linkBytecode(bytecode, links) {
        Object.keys(links).forEach(library_name => {
          const library_address = links[library_name];
          const regex = new RegExp(`__${library_name}_+`, "g");
    
          bytecode = bytecode.replace(regex, library_address.replace("0x", ""));
        });
    
        return bytecode;
      },
    
      // Extracts optional tx params from a list of fn arguments
      getTxParams(methodABI, args) {
        const constructor = this;
    
        const expected_arg_count = methodABI ? methodABI.inputs.length : 0;
    
        let tx_params = {};
        const last_arg = args[args.length - 1];
    
        if (
          args.length === expected_arg_count + 1 &&
          Utils.is_tx_params(last_arg)
        ) {
          tx_params = args.pop();
        }
    
        return Utils.merge(constructor.class_defaults, tx_params);
      },
    
      // Verifies that a contracts libraries have been linked correctly.
      // Throws on error
      checkLibraries() {
        const constructor = this;
        const regex = /__[^_]+_+/g;
        let unlinked_libraries = constructor.binary.match(regex);
    
        if (unlinked_libraries !== null) {
          unlinked_libraries = unlinked_libraries
            .map((
              name // Remove underscores
            ) => name.replace(/_/g, ""))
            .sort()
            .filter((name, index, arr) => {
              // Remove duplicates
              if (index + 1 >= arr.length) {
                return true;
              }
    
              return name !== arr[index + 1];
            })
            .join(", ");
    
          const error = `${
            constructor.contractName
          } contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${
            constructor.contractName
          }: ${unlinked_libraries}`;
    
          throw new Error(error);
        }
      },
    
      convertToEthersBN(original) {
        const converted = [];
        original.forEach(item => {
          // Recurse for arrays
          if (Array.isArray(item)) {
            converted.push(Utils.convertToEthersBN(item));
    
            // Convert Web3 BN / BigNumber
          } else if (Utils.is_big_number(item)) {
            const ethersBN = bigNumberify(item.toString());
            converted.push(ethersBN);
          } else {
            converted.push(item);
          }
        });
        return converted;
      },
    
      bigNumberify,
    
      /**
       * Multiplies an ethers.js BigNumber and a number with decimal places using
       * integer math rather than using an arbitrary floating-point library like
       * `bignumber.js`.
       * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)
       * @param  {Number}    decimal           a number which has 0+ decimal places
       * @param  {Number}    [maxPrecision=5]  the max number of signficant figures
       *                                       `decimal` can have. (default: 5)
       * @return {BigNumber}                   floor(bignum * decimal)
       */
      multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {
        if (typeof maxPrecision === "undefined") {
          maxPrecision = 5;
        }
    
        const significantFigures = Math.min(
          decimal.toString().length - 1, // length less one because `.`
          maxPrecision
        );
    
        const denominator = bigNumberify(10).pow(significantFigures);
        const numerator = Math.round(decimal * denominator);
        const secondOperand = bigNumberify(numerator).div(denominator);
    
        return bignum.mul(secondOperand);
      },
    
      // checks if given contract instance has a set provider
      checkProvider({ currentProvider, contractName }) {
        if (!currentProvider)
          throw new Error(
            `${contractName} error: Please call setProvider() first before calling new().`
          );
      },
    
      // verifies current network has been assigned to contract instance
      checkNetworkArtifactMatch({ networks, network_id, contractName }) {
        if (networks[network_id] == null)
          throw new Error(
            `${contractName} has not been deployed to detected network (network/artifact mismatch)`
          );
      },
    
      // verifies contract instance has been deployed
      checkDeployment({ isDeployed, contractName, network_id }) {
        if (!isDeployed())
          throw new Error(
            `${contractName} has not been deployed to detected network (${network_id})`
          );
      },
    
      // checks if provided contract address has on-chain code
      checkCode(onChainCode, contractName, address) {
        if (!onChainCode || onChainCode.replace("0x", "").replace(/0/g, "") === "")
          throw new Error(
            `Cannot create instance of ${contractName}; no code at address ${address}`
          );
      },
    
      // parses known contract instance networks
      parseKnownNetworks(
        { networks, currentProvider, setNetwork, network_id },
        gasLimit
      ) {
        // wrap uri matching in a promise to allow provider.send time to resolve
        // (.send call happens in BlockchainUtils.matches)
        return new Promise((accept, reject) => {
          // go through all the networks that are listed as
          // blockchain uris and see if they match
          const uris = Object.keys(networks).filter(
            network => network.indexOf("blockchain://") === 0
          );
          const matches = uris.map(uri =>
            BlockchainUtils.matches.bind(BlockchainUtils, uri, currentProvider)
          );
    
          Utils.parallel(matches, (err, results) => {
            if (err) reject(err);
    
            for (let i = 0; i < results.length; i++) {
              if (results[i]) {
                setNetwork(uris[i]);
                accept({
                  id: network_id,
                  blockLimit: gasLimit
                });
              }
            }
            // no match found!
            accept(false);
          });
        });
      },
    
      // sets a contract instance network ID
      async setInstanceNetworkID(
        TruffleContractInstance,
        chainNetworkID,
        gasLimit
      ) {
        // if chainNetworkID already present as network configuration, use it
        if (TruffleContractInstance.hasNetwork(chainNetworkID)) {
          TruffleContractInstance.setNetwork(chainNetworkID);
          return {
            id: TruffleContractInstance.network_id,
            blockLimit: gasLimit
          };
        }
        // chainNetworkID not present,
        // parse all known networks
        const matchedNetwork = await Utils.parseKnownNetworks(
          TruffleContractInstance,
          gasLimit
        );
        if (matchedNetwork) return matchedNetwork;
    
        // network unknown, trust the provider and use given chainNetworkID
        TruffleContractInstance.setNetwork(chainNetworkID);
        return { id: TruffleContractInstance.network_id, blockLimit: gasLimit };
      }
    };
    
    module.exports = Utils;
    
    },{"./reformat":394,"@truffle/blockchain-utils":376,"debug":397,"ethers/utils/bignumber":166,"web3-eth-abi":334,"web3-utils":355}],397:[function(require,module,exports){
    (function (process){
    /* eslint-env browser */
    
    /**
     * This is the web browser implementation of `debug()`.
     */
    
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    
    /**
     * Colors.
     */
    
    exports.colors = [
        '#0000CC',
        '#0000FF',
        '#0033CC',
        '#0033FF',
        '#0066CC',
        '#0066FF',
        '#0099CC',
        '#0099FF',
        '#00CC00',
        '#00CC33',
        '#00CC66',
        '#00CC99',
        '#00CCCC',
        '#00CCFF',
        '#3300CC',
        '#3300FF',
        '#3333CC',
        '#3333FF',
        '#3366CC',
        '#3366FF',
        '#3399CC',
        '#3399FF',
        '#33CC00',
        '#33CC33',
        '#33CC66',
        '#33CC99',
        '#33CCCC',
        '#33CCFF',
        '#6600CC',
        '#6600FF',
        '#6633CC',
        '#6633FF',
        '#66CC00',
        '#66CC33',
        '#9900CC',
        '#9900FF',
        '#9933CC',
        '#9933FF',
        '#99CC00',
        '#99CC33',
        '#CC0000',
        '#CC0033',
        '#CC0066',
        '#CC0099',
        '#CC00CC',
        '#CC00FF',
        '#CC3300',
        '#CC3333',
        '#CC3366',
        '#CC3399',
        '#CC33CC',
        '#CC33FF',
        '#CC6600',
        '#CC6633',
        '#CC9900',
        '#CC9933',
        '#CCCC00',
        '#CCCC33',
        '#FF0000',
        '#FF0033',
        '#FF0066',
        '#FF0099',
        '#FF00CC',
        '#FF00FF',
        '#FF3300',
        '#FF3333',
        '#FF3366',
        '#FF3399',
        '#FF33CC',
        '#FF33FF',
        '#FF6600',
        '#FF6633',
        '#FF9900',
        '#FF9933',
        '#FFCC00',
        '#FFCC33'
    ];
    
    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */
    
    // eslint-disable-next-line complexity
    function useColors() {
        // NB: In an Electron preload script, document will be defined but not fully
        // initialized. Since we know we're in Chrome, we'll just detect this case
        // explicitly
        if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
            return true;
        }
    
        // Internet Explorer and Edge do not support colors.
        if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
        }
    
        // Is webkit? http://stackoverflow.com/a/16459606/376773
        // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
        return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
            // Is firebug? http://stackoverflow.com/a/398120/376773
            (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
            // Is firefox >= v31?
            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
            (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
            // Double check webkit in userAgent just in case we are in a worker
            (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
    }
    
    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */
    
    function formatArgs(args) {
        args[0] = (this.useColors ? '%c' : '') +
            this.namespace +
            (this.useColors ? ' %c' : ' ') +
            args[0] +
            (this.useColors ? '%c ' : ' ') +
            '+' + module.exports.humanize(this.diff);
    
        if (!this.useColors) {
            return;
        }
    
        const c = 'color: ' + this.color;
        args.splice(1, 0, c, 'color: inherit');
    
        // The final "%c" is somewhat tricky, because there could be other
        // arguments passed either before or after the %c, so we need to
        // figure out the correct index to insert the CSS into
        let index = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, match => {
            if (match === '%%') {
                return;
            }
            index++;
            if (match === '%c') {
                // We only are interested in the *last* %c
                // (the user may have provided their own)
                lastC = index;
            }
        });
    
        args.splice(lastC, 0, c);
    }
    
    /**
     * Invokes `console.log()` when available.
     * No-op when `console.log` is not a "function".
     *
     * @api public
     */
    function log(...args) {
        // This hackery is required for IE8/9, where
        // the `console.log` function doesn't have 'apply'
        return typeof console === 'object' &&
            console.log &&
            console.log(...args);
    }
    
    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
        try {
            if (namespaces) {
                exports.storage.setItem('debug', namespaces);
            } else {
                exports.storage.removeItem('debug');
            }
        } catch (error) {
            // Swallow
            // XXX (@Qix-) should we be logging these?
        }
    }
    
    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */
    function load() {
        let r;
        try {
            r = exports.storage.getItem('debug');
        } catch (error) {
            // Swallow
            // XXX (@Qix-) should we be logging these?
        }
    
        // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
        if (!r && typeof process !== 'undefined' && 'env' in process) {
            r = process.env.DEBUG;
        }
    
        return r;
    }
    
    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */
    
    function localstorage() {
        try {
            // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
            // The Browser also has localStorage in the global context.
            return localStorage;
        } catch (error) {
            // Swallow
            // XXX (@Qix-) should we be logging these?
        }
    }
    
    module.exports = require('./common')(exports);
    
    const {formatters} = module.exports;
    
    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */
    
    formatters.j = function (v) {
        try {
            return JSON.stringify(v);
        } catch (error) {
            return '[UnexpectedJSONParseError]: ' + error.message;
        }
    };
    
    }).call(this,require('_process'))
    },{"./common":398,"_process":231}],398:[function(require,module,exports){
    
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     */
    
    function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require('ms');
    
        Object.keys(env).forEach(key => {
            createDebug[key] = env[key];
        });
    
        /**
        * Active `debug` instances.
        */
        createDebug.instances = [];
    
        /**
        * The currently active debug mode names, and names to skip.
        */
    
        createDebug.names = [];
        createDebug.skips = [];
    
        /**
        * Map of special "%n" handling functions, for the debug "format" argument.
        *
        * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
        */
        createDebug.formatters = {};
    
        /**
        * Selects a color for a debug namespace
        * @param {String} namespace The namespace string for the for the debug instance to be colored
        * @return {Number|String} An ANSI color code for the given namespace
        * @api private
        */
        function selectColor(namespace) {
            let hash = 0;
    
            for (let i = 0; i < namespace.length; i++) {
                hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
                hash |= 0; // Convert to 32bit integer
            }
    
            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;
    
        /**
        * Create a debugger with the given `namespace`.
        *
        * @param {String} namespace
        * @return {Function}
        * @api public
        */
        function createDebug(namespace) {
            let prevTime;
    
            function debug(...args) {
                // Disabled?
                if (!debug.enabled) {
                    return;
                }
    
                const self = debug;
    
                // Set `diff` timestamp
                const curr = Number(new Date());
                const ms = curr - (prevTime || curr);
                self.diff = ms;
                self.prev = prevTime;
                self.curr = curr;
                prevTime = curr;
    
                args[0] = createDebug.coerce(args[0]);
    
                if (typeof args[0] !== 'string') {
                    // Anything else let's inspect with %O
                    args.unshift('%O');
                }
    
                // Apply any `formatters` transformations
                let index = 0;
                args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                    // If we encounter an escaped % then don't increase the array index
                    if (match === '%%') {
                        return match;
                    }
                    index++;
                    const formatter = createDebug.formatters[format];
                    if (typeof formatter === 'function') {
                        const val = args[index];
                        match = formatter.call(self, val);
    
                        // Now we need to remove `args[index]` since it's inlined in the `format`
                        args.splice(index, 1);
                        index--;
                    }
                    return match;
                });
    
                // Apply env-specific formatting (colors, etc.)
                createDebug.formatArgs.call(self, args);
    
                const logFn = self.log || createDebug.log;
                logFn.apply(self, args);
            }
    
            debug.namespace = namespace;
            debug.enabled = createDebug.enabled(namespace);
            debug.useColors = createDebug.useColors();
            debug.color = selectColor(namespace);
            debug.destroy = destroy;
            debug.extend = extend;
            // Debug.formatArgs = formatArgs;
            // debug.rawLog = rawLog;
    
            // env-specific initialization logic for debug instances
            if (typeof createDebug.init === 'function') {
                createDebug.init(debug);
            }
    
            createDebug.instances.push(debug);
    
            return debug;
        }
    
        function destroy() {
            const index = createDebug.instances.indexOf(this);
            if (index !== -1) {
                createDebug.instances.splice(index, 1);
                return true;
            }
            return false;
        }
    
        function extend(namespace, delimiter) {
            const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
            newDebug.log = this.log;
            return newDebug;
        }
    
        /**
        * Enables a debug mode by namespaces. This can include modes
        * separated by a colon and wildcards.
        *
        * @param {String} namespaces
        * @api public
        */
        function enable(namespaces) {
            createDebug.save(namespaces);
    
            createDebug.names = [];
            createDebug.skips = [];
    
            let i;
            const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
            const len = split.length;
    
            for (i = 0; i < len; i++) {
                if (!split[i]) {
                    // ignore empty strings
                    continue;
                }
    
                namespaces = split[i].replace(/\*/g, '.*?');
    
                if (namespaces[0] === '-') {
                    createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
                } else {
                    createDebug.names.push(new RegExp('^' + namespaces + '$'));
                }
            }
    
            for (i = 0; i < createDebug.instances.length; i++) {
                const instance = createDebug.instances[i];
                instance.enabled = createDebug.enabled(instance.namespace);
            }
        }
    
        /**
        * Disable debug output.
        *
        * @return {String} namespaces
        * @api public
        */
        function disable() {
            const namespaces = [
                ...createDebug.names.map(toNamespace),
                ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
            ].join(',');
            createDebug.enable('');
            return namespaces;
        }
    
        /**
        * Returns true if the given mode name is enabled, false otherwise.
        *
        * @param {String} name
        * @return {Boolean}
        * @api public
        */
        function enabled(name) {
            if (name[name.length - 1] === '*') {
                return true;
            }
    
            let i;
            let len;
    
            for (i = 0, len = createDebug.skips.length; i < len; i++) {
                if (createDebug.skips[i].test(name)) {
                    return false;
                }
            }
    
            for (i = 0, len = createDebug.names.length; i < len; i++) {
                if (createDebug.names[i].test(name)) {
                    return true;
                }
            }
    
            return false;
        }
    
        /**
        * Convert regexp to namespace
        *
        * @param {RegExp} regxep
        * @return {String} namespace
        * @api private
        */
        function toNamespace(regexp) {
            return regexp.toString()
                .substring(2, regexp.toString().length - 2)
                .replace(/\.\*\?$/, '*');
        }
    
        /**
        * Coerce `val`.
        *
        * @param {Mixed} val
        * @return {Mixed}
        * @api private
        */
        function coerce(val) {
            if (val instanceof Error) {
                return val.stack || val.message;
            }
            return val;
        }
    
        createDebug.enable(createDebug.load());
    
        return createDebug;
    }
    
    module.exports = setup;
    
    },{"ms":211}],399:[function(require,module,exports){
    module.exports={
      "name": "truffle-contract",
      "description": "A better contract abstraction for Ethereum (formerly EtherPudding)",
      "license": "MIT",
      "author": "Tim Coulter <tim.coulter@consensys.net>",
      "homepage": "https://github.com/trufflesuite/truffle/tree/master/packages/truffle-contract#readme",
      "repository": "https://github.com/trufflesuite/truffle/tree/master/packages/truffle-contract",
      "bugs": {
        "url": "https://github.com/trufflesuite/truffle/issues"
      },
      "version": "4.0.31",
      "main": "index.js",
      "scripts": {
        "compile": "mkdir -p dist && browserify ./index.js -o ./dist/truffle-contract.js && uglifyjs ./dist/truffle-contract.js -o ./dist/truffle-contract.min.js",
        "prepare": "yarn compile",
        "publish:next": "node ../truffle/scripts/prereleaseVersion.js next next",
        "test": "./scripts/test.sh",
        "test:debug": "$(yarn bin)/mocha --inspect-brk",
        "test:trace": "$(yarn bin)/mocha --trace-warnings"
      },
      "dependencies": {
        "@truffle/blockchain-utils": "^0.0.11",
        "@truffle/contract-schema": "^3.0.14",
        "@truffle/error": "^0.0.6",
        "bignumber.js": "^7.2.1",
        "ethers": "^4.0.0-beta.1",
        "truffle-interface-adapter": "^0.2.5",
        "web3": "1.2.1",
        "web3-core-promievent": "1.2.1",
        "web3-eth-abi": "1.2.1",
        "web3-utils": "1.2.1"
      },
      "devDependencies": {
        "async": "2.6.1",
        "browserify": "^14.0.0",
        "chai": "4.2.0",
        "debug": "^4.1.0",
        "ganache-core": "2.7.0",
        "mocha": "5.2.0",
        "temp": "^0.8.3",
        "truffle-compile": "^4.2.3",
        "uglify-es": "^3.3.9"
      },
      "keywords": [
        "abstraction",
        "contract",
        "ethereum",
        "truffle"
      ],
      "publishConfig": {
        "access": "public"
      },
      "gitHead": "5e8ec5fcecdf400b3cb8a4d9dc153df781df1a28"
    }
    
    },{}],400:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const bn_js_1 = __importDefault(require("bn.js"));
    exports.EthereumDefinition = {
        initNetworkType(web3) {
            return __awaiter(this, void 0, void 0, function* () {
                // truffle has started expecting gas used/limit to be
                // hex strings to support bignumbers for other ledgers
                overrides.getBlock(web3);
                overrides.getTransaction(web3);
                overrides.getTransactionReceipt(web3);
            });
        }
    };
    const overrides = {
        // The ts-ignores are ignoring the checks that are
        // saying that web3.eth.getBlock is a function and doesn't
        // have a `method` property, which it does
        "getBlock": (web3) => {
            // @ts-ignore
            const _oldFormatter = web3.eth.getBlock.method.outputFormatter;
            // @ts-ignore
            web3.eth.getBlock.method.outputFormatter = block => {
                // @ts-ignore
                let result = _oldFormatter.call(web3.eth.getBlock.method, block);
                // Perhaps there is a better method of doing this,
                // but the raw hexstrings work for the time being
                result.gasLimit = "0x" + new bn_js_1.default(result.gasLimit).toString(16);
                result.gasUsed = "0x" + new bn_js_1.default(result.gasUsed).toString(16);
                return result;
            };
        },
        "getTransaction": (web3) => {
            const _oldTransactionFormatter = 
            // @ts-ignore
            web3.eth.getTransaction.method.outputFormatter;
            // @ts-ignore
            web3.eth.getTransaction.method.outputFormatter = tx => {
                let result = _oldTransactionFormatter.call(
                // @ts-ignore
                web3.eth.getTransaction.method, tx);
                // Perhaps there is a better method of doing this,
                // but the raw hexstrings work for the time being
                result.gas = "0x" + new bn_js_1.default(result.gas).toString(16);
                return result;
            };
        },
        "getTransactionReceipt": (web3) => {
            const _oldTransactionReceiptFormatter = 
            // @ts-ignore
            web3.eth.getTransactionReceipt.method.outputFormatter;
            // @ts-ignore
            web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {
                let result = _oldTransactionReceiptFormatter.call(
                // @ts-ignore
                web3.eth.getTransactionReceipt.method, receipt);
                // Perhaps there is a better method of doing this,
                // but the raw hexstrings work for the time being
                result.gasUsed = "0x" + new bn_js_1.default(result.gasUsed).toString(16);
                return result;
            };
        }
    };
    
    },{"bn.js":61}],401:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FabricEvmDefinition = {
        initNetworkType(web3) {
            return __awaiter(this, void 0, void 0, function* () {
                // web3 expects getId to return a hexString convertible to a number
                // for fabric-evm we ignore the hexToNumber output formatter
                overrides.getId(web3);
            });
        }
    };
    const overrides = {
        // The ts-ignores are ignoring the checks that are
        // saying that web3.eth.net.getId is a function and doesn't
        // have a `method` property, which it does
        "getId": (web3) => {
            // @ts-ignore
            const _oldGetIdFormatter = web3.eth.net.getId.method.outputFormatter;
            // @ts-ignore
            web3.eth.net.getId.method.outputFormatter = (hexId) => {
                // chaincode-fabric-evm currently returns a "fabric-evm" string
                // instead of a hex networkID. Instead of trying to decode the hexToNumber,
                // let's just accept `fabric-evm` as a valid networkID for now.
                return hexId;
            };
        }
    };
    
    },{}],402:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var web3_shim_1 = require("./web3-shim");
    exports.Web3Shim = web3_shim_1.Web3Shim;
    
    },{"./web3-shim":404}],403:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const bn_js_1 = __importDefault(require("bn.js"));
    const abi_coder_1 = require("ethers/utils/abi-coder");
    const lodash_1 = __importDefault(require("lodash"));
    exports.QuorumDefinition = {
        initNetworkType(web3) {
            return __awaiter(this, void 0, void 0, function* () {
                // duck punch some of web3's output formatters
                overrides.getBlock(web3);
                overrides.getTransaction(web3);
                overrides.getTransactionReceipt(web3);
                overrides.decodeParameters(web3);
            });
        }
    };
    const overrides = {
        // The ts-ignores are ignoring the checks that are
        // saying that web3.eth.getBlock is a function and doesn't
        // have a `method` property, which it does
        "getBlock": (web3) => {
            // @ts-ignore
            const _oldBlockFormatter = web3.eth.getBlock.method.outputFormatter;
            // @ts-ignore
            web3.eth.getBlock.method.outputFormatter = (block) => {
                const _oldTimestamp = block.timestamp;
                const _oldGasLimit = block.gasLimit;
                const _oldGasUsed = block.gasUsed;
                // Quorum uses nanoseconds instead of seconds in timestamp
                let timestamp = new bn_js_1.default(block.timestamp.slice(2), 16);
                timestamp = timestamp.div(new bn_js_1.default(10).pow(new bn_js_1.default(9)));
                block.timestamp = "0x" + timestamp.toString(16);
                // Since we're overwriting the gasLimit/Used later,
                // it doesn't matter what it is before the call
                // The same applies to the timestamp, but I reduced
                // the precision since there was an accurate representation
                // We do this because Quorum can have large block/transaction
                // gas limits
                block.gasLimit = "0x0";
                block.gasUsed = "0x0";
                // @ts-ignore
                let result = _oldBlockFormatter.call(web3.eth.getBlock.method, block);
                // Perhaps there is a better method of doing this,
                // but the raw hexstrings work for the time being
                result.timestamp = _oldTimestamp;
                result.gasLimit = _oldGasLimit;
                result.gasUsed = _oldGasUsed;
                return result;
            };
        },
        "getTransaction": (web3) => {
            const _oldTransactionFormatter = 
            // @ts-ignore
            web3.eth.getTransaction.method.outputFormatter;
            // @ts-ignore
            web3.eth.getTransaction.method.outputFormatter = (tx) => {
                const _oldGas = tx.gas;
                tx.gas = "0x0";
                let result = _oldTransactionFormatter.call(
                // @ts-ignore
                web3.eth.getTransaction.method, tx);
                // Perhaps there is a better method of doing this,
                // but the raw hexstrings work for the time being
                result.gas = _oldGas;
                return result;
            };
        },
        "getTransactionReceipt": (web3) => {
            const _oldTransactionReceiptFormatter = 
            // @ts-ignore
            web3.eth.getTransactionReceipt.method.outputFormatter;
            // @ts-ignore
            web3.eth.getTransactionReceipt.method.outputFormatter = (receipt) => {
                const _oldGasUsed = receipt.gasUsed;
                receipt.gasUsed = "0x0";
                let result = _oldTransactionReceiptFormatter.call(
                // @ts-ignore
                web3.eth.getTransactionReceipt.method, receipt);
                // Perhaps there is a better method of doing this,
                // but the raw hexstrings work for the time being
                result.gasUsed = _oldGasUsed;
                return result;
            };
        },
        // The primary difference between this decodeParameters function and web3's
        // is that the 'Out of Gas?' zero/null bytes guard has been removed and any
        // falsy bytes are interpreted as a zero value.
        "decodeParameters": (web3) => {
            const _oldDecodeParameters = web3.eth.abi.decodeParameters;
            const ethersAbiCoder = new abi_coder_1.AbiCoder((type, value) => {
                if (type.match(/^u?int/) &&
                    !lodash_1.default.isArray(value) &&
                    (!lodash_1.default.isObject(value) || value.constructor.name !== "BN")) {
                    return value.toString();
                }
                return value;
            });
            // result method
            function Result() { }
            web3.eth.abi.decodeParameters = (outputs, bytes) => {
                // if bytes is falsy, we'll pass 64 '0' bits to the ethers.js decoder.
                // the decoder will decode the 64 '0' bits as a 0 value.
                if (!bytes)
                    bytes = "0".repeat(64);
                const res = ethersAbiCoder.decode(
                //@ts-ignore 'mapTypes' not existing on type 'ABI'
                web3.eth.abi.mapTypes(outputs), `0x${bytes.replace(/0x/i, "")}`);
                //@ts-ignore complaint regarding Result method
                const returnValue = new Result();
                returnValue.__length__ = 0;
                outputs.forEach((output, i) => {
                    let decodedValue = res[returnValue.__length__];
                    decodedValue = decodedValue === "0x" ? null : decodedValue;
                    returnValue[i] = decodedValue;
                    // @ts-ignore object not having name key
                    if (lodash_1.default.isObject(output) && output.name) {
                        // @ts-ignore object not having name key
                        returnValue[output.name] = decodedValue;
                    }
                    returnValue.__length__++;
                });
                return returnValue;
            };
        }
    };
    
    },{"bn.js":61,"ethers/utils/abi-coder":408,"lodash":416}],404:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const web3_1 = __importDefault(require("web3"));
    const ethereum_overloads_1 = require("./ethereum-overloads");
    const quorum_overloads_1 = require("./quorum-overloads");
    const fabric_evm_overloads_1 = require("./fabric-evm-overloads");
    const initInterface = (web3Shim) => __awaiter(this, void 0, void 0, function* () {
        const networkTypes = new Map(Object.entries({
            "ethereum": ethereum_overloads_1.EthereumDefinition,
            "quorum": quorum_overloads_1.QuorumDefinition,
            "fabric-evm": fabric_evm_overloads_1.FabricEvmDefinition
        }));
        networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);
    });
    ;
    // March 14, 2019 - Mike Seese:
    // This shim was intended to be temporary (see the above comment)
    // with the idea of a more robust implementation. That implementation
    // would essentially take this shim and include it under the
    // ethereum/apis/web3 (or something like that) structure.
    // I chose to extend/inherit web3 here to keep scope minimal for
    // getting web3 to behave with Quorum and AxCore (future/concurrent PR).
    // I wanted to do as little changing to the original Truffle codebase, and
    // for it to still expect a web3 instance. Otherwise, the scope of these
    // quick support work would be high. The "Web3Shim" is a shim for only
    // web3.js, and it was not intended to serve as the general purpose
    // truffle <=> all DLTs adapter. We have other commitments currently that
    // should drive the development of the correct architecture of
    // `truffle-interface-adapter`that should use this work in a more
    // sane and organized manner.
    class Web3Shim extends web3_1.default {
        constructor(options) {
            super();
            if (options) {
                this.networkType = options.networkType || "ethereum";
                if (options.provider) {
                    this.setProvider(options.provider);
                }
            }
            else {
                this.networkType = "ethereum";
            }
            initInterface(this);
        }
        setNetworkType(networkType) {
            this.networkType = networkType;
            initInterface(this);
        }
    }
    exports.Web3Shim = Web3Shim;
    ;
    
    },{"./ethereum-overloads":400,"./fabric-evm-overloads":401,"./quorum-overloads":403,"web3":359}],405:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = "4.0.32";
    
    },{}],406:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = require("./utils/bignumber");
    var AddressZero = '0x0000000000000000000000000000000000000000';
    exports.AddressZero = AddressZero;
    var HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';
    exports.HashZero = HashZero;
    // NFKD (decomposed)
    //const EtherSymbol = '\uD835\uDF63';
    // NFKC (composed)
    var EtherSymbol = '\u039e';
    exports.EtherSymbol = EtherSymbol;
    var NegativeOne = bignumber_1.bigNumberify(-1);
    exports.NegativeOne = NegativeOne;
    var Zero = bignumber_1.bigNumberify(0);
    exports.Zero = Zero;
    var One = bignumber_1.bigNumberify(1);
    exports.One = One;
    var Two = bignumber_1.bigNumberify(2);
    exports.Two = Two;
    var WeiPerEther = bignumber_1.bigNumberify('1000000000000000000');
    exports.WeiPerEther = WeiPerEther;
    var MaxUint256 = bignumber_1.bigNumberify('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
    exports.MaxUint256 = MaxUint256;
    
    },{"./utils/bignumber":410}],407:[function(require,module,exports){
    arguments[4][165][0].apply(exports,arguments)
    },{"./_version":405,"dup":165}],408:[function(require,module,exports){
    'use strict';
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
    var constants_1 = require("../constants");
    var errors = __importStar(require("../errors"));
    var address_1 = require("./address");
    var bignumber_1 = require("./bignumber");
    var bytes_1 = require("./bytes");
    var utf8_1 = require("./utf8");
    var properties_1 = require("./properties");
    ///////////////////////////////
    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    exports.defaultCoerceFunc = function (type, value) {
        var match = type.match(paramTypeNumber);
        if (match && parseInt(match[2]) <= 48) {
            return value.toNumber();
        }
        return value;
    };
    ///////////////////////////////////
    // Parsing for Solidity Signatures
    var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
    function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
            type = 'uint256' + type.substring(4);
        }
        else if (type.match(/^int($|[^1-9])/)) {
            type = 'int256' + type.substring(3);
        }
        return type;
    }
    function parseParam(param, allowIndexed) {
        var originalParam = param;
        function throwError(i) {
            throw new Error('unexpected character "' + originalParam[i] + '" at position ' + i + ' in "' + originalParam + '"');
        }
        param = param.replace(/\s/g, ' ');
        var parent = { type: '', name: '', state: { allowType: true } };
        var node = parent;
        for (var i = 0; i < param.length; i++) {
            var c = param[i];
            switch (c) {
                case '(':
                    if (!node.state.allowParams) {
                        throwError(i);
                    }
                    node.state.allowType = false;
                    node.type = verifyType(node.type);
                    node.components = [{ type: '', name: '', parent: node, state: { allowType: true } }];
                    node = node.components[0];
                    break;
                case ')':
                    delete node.state;
                    if (allowIndexed && node.name === 'indexed') {
                        node.indexed = true;
                        node.name = '';
                    }
                    node.type = verifyType(node.type);
                    var child = node;
                    node = node.parent;
                    if (!node) {
                        throwError(i);
                    }
                    delete child.parent;
                    node.state.allowParams = false;
                    node.state.allowName = true;
                    node.state.allowArray = true;
                    break;
                case ',':
                    delete node.state;
                    if (allowIndexed && node.name === 'indexed') {
                        node.indexed = true;
                        node.name = '';
                    }
                    node.type = verifyType(node.type);
                    var sibling = { type: '', name: '', parent: node.parent, state: { allowType: true } };
                    node.parent.components.push(sibling);
                    delete node.parent;
                    node = sibling;
                    break;
                // Hit a space...
                case ' ':
                    // If reading type, the type is done and may read a param or name
                    if (node.state.allowType) {
                        if (node.type !== '') {
                            node.type = verifyType(node.type);
                            delete node.state.allowType;
                            node.state.allowName = true;
                            node.state.allowParams = true;
                        }
                    }
                    // If reading name, the name is done
                    if (node.state.allowName) {
                        if (node.name !== '') {
                            if (allowIndexed && node.name === 'indexed') {
                                node.indexed = true;
                                node.name = '';
                            }
                            else {
                                node.state.allowName = false;
                            }
                        }
                    }
                    break;
                case '[':
                    if (!node.state.allowArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.allowArray = false;
                    node.state.allowName = false;
                    node.state.readArray = true;
                    break;
                case ']':
                    if (!node.state.readArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.readArray = false;
                    node.state.allowArray = true;
                    node.state.allowName = true;
                    break;
                default:
                    if (node.state.allowType) {
                        node.type += c;
                        node.state.allowParams = true;
                        node.state.allowArray = true;
                    }
                    else if (node.state.allowName) {
                        node.name += c;
                        delete node.state.allowArray;
                    }
                    else if (node.state.readArray) {
                        node.type += c;
                    }
                    else {
                        throwError(i);
                    }
            }
        }
        if (node.parent) {
            throw new Error("unexpected eof");
        }
        delete parent.state;
        if (allowIndexed && node.name === 'indexed') {
            node.indexed = true;
            node.name = '';
        }
        parent.type = verifyType(parent.type);
        return parent;
    }
    // @TODO: Better return type
    function parseSignatureEvent(fragment) {
        var abi = {
            anonymous: false,
            inputs: [],
            name: '',
            type: 'event'
        };
        var match = fragment.match(regexParen);
        if (!match) {
            throw new Error('invalid event: ' + fragment);
        }
        abi.name = match[1].trim();
        splitNesting(match[2]).forEach(function (param) {
            param = parseParam(param, true);
            param.indexed = !!param.indexed;
            abi.inputs.push(param);
        });
        match[3].split(' ').forEach(function (modifier) {
            switch (modifier) {
                case 'anonymous':
                    abi.anonymous = true;
                    break;
                case '':
                    break;
                default:
                    errors.info('unknown modifier: ' + modifier);
            }
        });
        if (abi.name && !abi.name.match(regexIdentifier)) {
            throw new Error('invalid identifier: "' + abi.name + '"');
        }
        return abi;
    }
    function parseSignatureFunction(fragment) {
        var abi = {
            constant: false,
            gas: null,
            inputs: [],
            name: '',
            outputs: [],
            payable: false,
            stateMutability: null,
            type: 'function'
        };
        var comps = fragment.split('@');
        if (comps.length !== 1) {
            if (comps.length > 2) {
                throw new Error('invalid signature');
            }
            if (!comps[1].match(/^[0-9]+$/)) {
                throw new Error('invalid signature gas');
            }
            abi.gas = bignumber_1.bigNumberify(comps[1]);
            fragment = comps[0];
        }
        comps = fragment.split(' returns ');
        var left = comps[0].match(regexParen);
        if (!left) {
            throw new Error('invalid signature');
        }
        abi.name = left[1].trim();
        if (!abi.name.match(regexIdentifier)) {
            throw new Error('invalid identifier: "' + left[1] + '"');
        }
        splitNesting(left[2]).forEach(function (param) {
            abi.inputs.push(parseParam(param));
        });
        left[3].split(' ').forEach(function (modifier) {
            switch (modifier) {
                case 'constant':
                    abi.constant = true;
                    break;
                case 'payable':
                    abi.payable = true;
                    abi.stateMutability = 'payable';
                    break;
                case 'pure':
                    abi.constant = true;
                    abi.stateMutability = 'pure';
                    break;
                case 'view':
                    abi.constant = true;
                    abi.stateMutability = 'view';
                    break;
                case 'external':
                case 'public':
                case '':
                    break;
                default:
                    errors.info('unknown modifier: ' + modifier);
            }
        });
        // We have outputs
        if (comps.length > 1) {
            var right = comps[1].match(regexParen);
            if (right[1].trim() != '' || right[3].trim() != '') {
                throw new Error('unexpected tokens');
            }
            splitNesting(right[2]).forEach(function (param) {
                abi.outputs.push(parseParam(param));
            });
        }
        if (abi.name === 'constructor') {
            abi.type = "constructor";
            if (abi.outputs.length) {
                throw new Error('constructor may not have outputs');
            }
            delete abi.name;
            delete abi.outputs;
        }
        return abi;
    }
    function parseParamType(type) {
        return parseParam(type, true);
    }
    exports.parseParamType = parseParamType;
    // @TODO: Allow a second boolean to expose names
    function formatParamType(paramType) {
        return getParamCoder(exports.defaultCoerceFunc, paramType).type;
    }
    exports.formatParamType = formatParamType;
    // @TODO: Allow a second boolean to expose names and modifiers
    function formatSignature(fragment) {
        return fragment.name + '(' + fragment.inputs.map(function (i) { return formatParamType(i); }).join(',') + ')';
    }
    exports.formatSignature = formatSignature;
    function parseSignature(fragment) {
        if (typeof (fragment) === 'string') {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            fragment = fragment.replace(/\s/g, ' ');
            fragment = fragment.replace(/\(/g, ' (').replace(/\)/g, ') ').replace(/\s+/g, ' ');
            fragment = fragment.trim();
            if (fragment.substring(0, 6) === 'event ') {
                return parseSignatureEvent(fragment.substring(6).trim());
            }
            else {
                if (fragment.substring(0, 9) === 'function ') {
                    fragment = fragment.substring(9);
                }
                return parseSignatureFunction(fragment.trim());
            }
        }
        throw new Error('unknown signature');
    }
    exports.parseSignature = parseSignature;
    var Coder = /** @class */ (function () {
        function Coder(coerceFunc, name, type, localName, dynamic) {
            this.coerceFunc = coerceFunc;
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        return Coder;
    }());
    // Clones the functionality of an existing Coder, but without a localName
    var CoderAnonymous = /** @class */ (function (_super) {
        __extends(CoderAnonymous, _super);
        function CoderAnonymous(coder) {
            var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;
            properties_1.defineReadOnly(_this, 'coder', coder);
            return _this;
        }
        CoderAnonymous.prototype.encode = function (value) { return this.coder.encode(value); };
        CoderAnonymous.prototype.decode = function (data, offset) { return this.coder.decode(data, offset); };
        return CoderAnonymous;
    }(Coder));
    var CoderNull = /** @class */ (function (_super) {
        __extends(CoderNull, _super);
        function CoderNull(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'null', '', localName, false) || this;
        }
        CoderNull.prototype.encode = function (value) {
            return bytes_1.arrayify([]);
        };
        CoderNull.prototype.decode = function (data, offset) {
            if (offset > data.length) {
                throw new Error('invalid null');
            }
            return {
                consumed: 0,
                value: this.coerceFunc('null', undefined)
            };
        };
        return CoderNull;
    }(Coder));
    var CoderNumber = /** @class */ (function (_super) {
        __extends(CoderNumber, _super);
        function CoderNumber(coerceFunc, size, signed, localName) {
            var _this = this;
            var name = ((signed ? 'int' : 'uint') + (size * 8));
            _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
            _this.size = size;
            _this.signed = signed;
            return _this;
        }
        CoderNumber.prototype.encode = function (value) {
            try {
                var v = bignumber_1.bigNumberify(value);
                if (this.signed) {
                    var bounds = constants_1.MaxUint256.maskn(this.size * 8 - 1);
                    if (v.gt(bounds)) {
                        throw new Error('out-of-bounds');
                    }
                    bounds = bounds.add(constants_1.One).mul(constants_1.NegativeOne);
                    if (v.lt(bounds)) {
                        throw new Error('out-of-bounds');
                    }
                }
                else if (v.lt(constants_1.Zero) || v.gt(constants_1.MaxUint256.maskn(this.size * 8))) {
                    throw new Error('out-of-bounds');
                }
                v = v.toTwos(this.size * 8).maskn(this.size * 8);
                if (this.signed) {
                    v = v.fromTwos(this.size * 8).toTwos(256);
                }
                return bytes_1.padZeros(bytes_1.arrayify(v), 32);
            }
            catch (error) {
                errors.throwError('invalid number value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: this.name,
                    value: value
                });
            }
            return null;
        };
        CoderNumber.prototype.decode = function (data, offset) {
            if (data.length < offset + 32) {
                errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: this.name,
                    value: bytes_1.hexlify(data.slice(offset, offset + 32))
                });
            }
            var junkLength = 32 - this.size;
            var value = bignumber_1.bigNumberify(data.slice(offset + junkLength, offset + 32));
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            else {
                value = value.maskn(this.size * 8);
            }
            return {
                consumed: 32,
                value: this.coerceFunc(this.name, value),
            };
        };
        return CoderNumber;
    }(Coder));
    var uint256Coder = new CoderNumber(function (type, value) { return value; }, 32, false, 'none');
    var CoderBoolean = /** @class */ (function (_super) {
        __extends(CoderBoolean, _super);
        function CoderBoolean(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;
        }
        CoderBoolean.prototype.encode = function (value) {
            return uint256Coder.encode(!!value ? 1 : 0);
        };
        CoderBoolean.prototype.decode = function (data, offset) {
            try {
                var result = uint256Coder.decode(data, offset);
            }
            catch (error) {
                if (error.reason === 'insufficient data for uint256 type') {
                    errors.throwError('insufficient data for boolean type', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'boolean',
                        value: error.value
                    });
                }
                throw error;
            }
            return {
                consumed: result.consumed,
                value: this.coerceFunc('bool', !result.value.isZero())
            };
        };
        return CoderBoolean;
    }(Coder));
    var CoderFixedBytes = /** @class */ (function (_super) {
        __extends(CoderFixedBytes, _super);
        function CoderFixedBytes(coerceFunc, length, localName) {
            var _this = this;
            var name = ('bytes' + length);
            _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
            _this.length = length;
            return _this;
        }
        CoderFixedBytes.prototype.encode = function (value) {
            var result = new Uint8Array(32);
            try {
                var data = bytes_1.arrayify(value);
                if (data.length !== this.length) {
                    throw new Error('incorrect data length');
                }
                result.set(data);
            }
            catch (error) {
                errors.throwError('invalid ' + this.name + ' value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: this.name,
                    value: (error.value || value)
                });
            }
            return result;
        };
        CoderFixedBytes.prototype.decode = function (data, offset) {
            if (data.length < offset + 32) {
                errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: this.name,
                    value: bytes_1.hexlify(data.slice(offset, offset + 32))
                });
            }
            return {
                consumed: 32,
                value: this.coerceFunc(this.name, bytes_1.hexlify(data.slice(offset, offset + this.length)))
            };
        };
        return CoderFixedBytes;
    }(Coder));
    var CoderAddress = /** @class */ (function (_super) {
        __extends(CoderAddress, _super);
        function CoderAddress(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;
        }
        CoderAddress.prototype.encode = function (value) {
            var result = new Uint8Array(32);
            try {
                result.set(bytes_1.arrayify(address_1.getAddress(value)), 12);
            }
            catch (error) {
                errors.throwError('invalid address', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'address',
                    value: value
                });
            }
            return result;
        };
        CoderAddress.prototype.decode = function (data, offset) {
            if (data.length < offset + 32) {
                errors.throwError('insufficuent data for address type', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'address',
                    value: bytes_1.hexlify(data.slice(offset, offset + 32))
                });
            }
            return {
                consumed: 32,
                value: this.coerceFunc('address', address_1.getAddress(bytes_1.hexlify(data.slice(offset + 12, offset + 32))))
            };
        };
        return CoderAddress;
    }(Coder));
    function _encodeDynamicBytes(value) {
        var dataLength = 32 * Math.ceil(value.length / 32);
        var padding = new Uint8Array(dataLength - value.length);
        return bytes_1.concat([
            uint256Coder.encode(value.length),
            value,
            padding
        ]);
    }
    function _decodeDynamicBytes(data, offset, localName) {
        if (data.length < offset + 32) {
            errors.throwError('insufficient data for dynamicBytes length', errors.INVALID_ARGUMENT, {
                arg: localName,
                coderType: 'dynamicBytes',
                value: bytes_1.hexlify(data.slice(offset, offset + 32))
            });
        }
        var length = uint256Coder.decode(data, offset).value;
        try {
            length = length.toNumber();
        }
        catch (error) {
            errors.throwError('dynamic bytes count too large', errors.INVALID_ARGUMENT, {
                arg: localName,
                coderType: 'dynamicBytes',
                value: length.toString()
            });
        }
        if (data.length < offset + 32 + length) {
            errors.throwError('insufficient data for dynamicBytes type', errors.INVALID_ARGUMENT, {
                arg: localName,
                coderType: 'dynamicBytes',
                value: bytes_1.hexlify(data.slice(offset, offset + 32 + length))
            });
        }
        return {
            consumed: 32 + 32 * Math.ceil(length / 32),
            value: data.slice(offset + 32, offset + 32 + length),
        };
    }
    var CoderDynamicBytes = /** @class */ (function (_super) {
        __extends(CoderDynamicBytes, _super);
        function CoderDynamicBytes(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;
        }
        CoderDynamicBytes.prototype.encode = function (value) {
            try {
                return _encodeDynamicBytes(bytes_1.arrayify(value));
            }
            catch (error) {
                errors.throwError('invalid bytes value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'bytes',
                    value: error.value
                });
            }
            return null;
        };
        CoderDynamicBytes.prototype.decode = function (data, offset) {
            var result = _decodeDynamicBytes(data, offset, this.localName);
            result.value = this.coerceFunc('bytes', bytes_1.hexlify(result.value));
            return result;
        };
        return CoderDynamicBytes;
    }(Coder));
    var CoderString = /** @class */ (function (_super) {
        __extends(CoderString, _super);
        function CoderString(coerceFunc, localName) {
            return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;
        }
        CoderString.prototype.encode = function (value) {
            if (typeof (value) !== 'string') {
                errors.throwError('invalid string value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'string',
                    value: value
                });
            }
            return _encodeDynamicBytes(utf8_1.toUtf8Bytes(value));
        };
        CoderString.prototype.decode = function (data, offset) {
            var result = _decodeDynamicBytes(data, offset, this.localName);
            result.value = this.coerceFunc('string', utf8_1.toUtf8String(result.value));
            return result;
        };
        return CoderString;
    }(Coder));
    function alignSize(size) {
        return 32 * Math.ceil(size / 32);
    }
    function pack(coders, values) {
        if (Array.isArray(values)) {
            // do nothing
        }
        else if (values && typeof (values) === 'object') {
            var arrayValues = [];
            coders.forEach(function (coder) {
                arrayValues.push(values[coder.localName]);
            });
            values = arrayValues;
        }
        else {
            errors.throwError('invalid tuple value', errors.INVALID_ARGUMENT, {
                coderType: 'tuple',
                value: values
            });
        }
        if (coders.length !== values.length) {
            errors.throwError('types/value length mismatch', errors.INVALID_ARGUMENT, {
                coderType: 'tuple',
                value: values
            });
        }
        var parts = [];
        coders.forEach(function (coder, index) {
            parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
        });
        var staticSize = 0, dynamicSize = 0;
        parts.forEach(function (part) {
            if (part.dynamic) {
                staticSize += 32;
                dynamicSize += alignSize(part.value.length);
            }
            else {
                staticSize += alignSize(part.value.length);
            }
        });
        var offset = 0, dynamicOffset = staticSize;
        var data = new Uint8Array(staticSize + dynamicSize);
        parts.forEach(function (part) {
            if (part.dynamic) {
                //uint256Coder.encode(dynamicOffset).copy(data, offset);
                data.set(uint256Coder.encode(dynamicOffset), offset);
                offset += 32;
                //part.value.copy(data, dynamicOffset);  @TODO
                data.set(part.value, dynamicOffset);
                dynamicOffset += alignSize(part.value.length);
            }
            else {
                //part.value.copy(data, offset);  @TODO
                data.set(part.value, offset);
                offset += alignSize(part.value.length);
            }
        });
        return data;
    }
    function unpack(coders, data, offset) {
        var baseOffset = offset;
        var consumed = 0;
        var value = [];
        coders.forEach(function (coder) {
            if (coder.dynamic) {
                var dynamicOffset = uint256Coder.decode(data, offset);
                var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());
                // The dynamic part is leap-frogged somewhere else; doesn't count towards size
                result.consumed = dynamicOffset.consumed;
            }
            else {
                var result = coder.decode(data, offset);
            }
            if (result.value != undefined) {
                value.push(result.value);
            }
            offset += result.consumed;
            consumed += result.consumed;
        });
        coders.forEach(function (coder, index) {
            var name = coder.localName;
            if (!name) {
                return;
            }
            if (name === 'length') {
                name = '_length';
            }
            if (value[name] != null) {
                return;
            }
            value[name] = value[index];
        });
        return {
            value: value,
            consumed: consumed
        };
    }
    var CoderArray = /** @class */ (function (_super) {
        __extends(CoderArray, _super);
        function CoderArray(coerceFunc, coder, length, localName) {
            var _this = this;
            var type = (coder.type + '[' + (length >= 0 ? length : '') + ']');
            var dynamic = (length === -1 || coder.dynamic);
            _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;
            _this.coder = coder;
            _this.length = length;
            return _this;
        }
        CoderArray.prototype.encode = function (value) {
            if (!Array.isArray(value)) {
                errors.throwError('expected array value', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'array',
                    value: value
                });
            }
            var count = this.length;
            var result = new Uint8Array(0);
            if (count === -1) {
                count = value.length;
                result = uint256Coder.encode(count);
            }
            errors.checkArgumentCount(count, value.length, ' in coder array' + (this.localName ? (" " + this.localName) : ""));
            var coders = [];
            for (var i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return bytes_1.concat([result, pack(coders, value)]);
        };
        CoderArray.prototype.decode = function (data, offset) {
            // @TODO:
            //if (data.length < offset + length * 32) { throw new Error('invalid array'); }
            var consumed = 0;
            var count = this.length;
            if (count === -1) {
                try {
                    var decodedLength = uint256Coder.decode(data, offset);
                }
                catch (error) {
                    errors.throwError('insufficient data for dynamic array length', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'array',
                        value: error.value
                    });
                }
                try {
                    count = decodedLength.value.toNumber();
                }
                catch (error) {
                    errors.throwError('array count too large', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'array',
                        value: decodedLength.value.toString()
                    });
                }
                consumed += decodedLength.consumed;
                offset += decodedLength.consumed;
            }
            var coders = [];
            for (var i = 0; i < count; i++) {
                coders.push(new CoderAnonymous(this.coder));
            }
            var result = unpack(coders, data, offset);
            result.consumed += consumed;
            result.value = this.coerceFunc(this.type, result.value);
            return result;
        };
        return CoderArray;
    }(Coder));
    var CoderTuple = /** @class */ (function (_super) {
        __extends(CoderTuple, _super);
        function CoderTuple(coerceFunc, coders, localName) {
            var _this = this;
            var dynamic = false;
            var types = [];
            coders.forEach(function (coder) {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            var type = ('tuple(' + types.join(',') + ')');
            _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;
            _this.coders = coders;
            return _this;
        }
        CoderTuple.prototype.encode = function (value) {
            return pack(this.coders, value);
        };
        CoderTuple.prototype.decode = function (data, offset) {
            var result = unpack(this.coders, data, offset);
            result.value = this.coerceFunc(this.type, result.value);
            return result;
        };
        return CoderTuple;
    }(Coder));
    /*
    function getTypes(coders) {
        var type = coderTuple(coders).type;
        return type.substring(6, type.length - 1);
    }
    */
    function splitNesting(value) {
        value = value.trim();
        var result = [];
        var accum = '';
        var depth = 0;
        for (var offset = 0; offset < value.length; offset++) {
            var c = value[offset];
            if (c === ',' && depth === 0) {
                result.push(accum);
                accum = '';
            }
            else {
                accum += c;
                if (c === '(') {
                    depth++;
                }
                else if (c === ')') {
                    depth--;
                    if (depth === -1) {
                        throw new Error('unbalanced parenthsis');
                    }
                }
            }
        }
        if (accum) {
            result.push(accum);
        }
        return result;
    }
    // @TODO: Is there a way to return "class"?
    var paramTypeSimple = {
        address: CoderAddress,
        bool: CoderBoolean,
        string: CoderString,
        bytes: CoderDynamicBytes,
    };
    function getTupleParamCoder(coerceFunc, components, localName) {
        if (!components) {
            components = [];
        }
        var coders = [];
        components.forEach(function (component) {
            coders.push(getParamCoder(coerceFunc, component));
        });
        return new CoderTuple(coerceFunc, coders, localName);
    }
    function getParamCoder(coerceFunc, param) {
        var coder = paramTypeSimple[param.type];
        if (coder) {
            return new coder(coerceFunc, param.name);
        }
        var match = param.type.match(paramTypeNumber);
        if (match) {
            var size = parseInt(match[2] || "256");
            if (size === 0 || size > 256 || (size % 8) !== 0) {
                errors.throwError('invalid ' + match[1] + ' bit length', errors.INVALID_ARGUMENT, {
                    arg: 'param',
                    value: param
                });
            }
            return new CoderNumber(coerceFunc, size / 8, (match[1] === 'int'), param.name);
        }
        var match = param.type.match(paramTypeBytes);
        if (match) {
            var size = parseInt(match[1]);
            if (size === 0 || size > 32) {
                errors.throwError('invalid bytes length', errors.INVALID_ARGUMENT, {
                    arg: 'param',
                    value: param
                });
            }
            return new CoderFixedBytes(coerceFunc, size, param.name);
        }
        var match = param.type.match(paramTypeArray);
        if (match) {
            var size = parseInt(match[2] || "-1");
            param = properties_1.shallowCopy(param);
            param.type = match[1];
            param = properties_1.deepCopy(param);
            return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);
        }
        if (param.type.substring(0, 5) === 'tuple') {
            return getTupleParamCoder(coerceFunc, param.components, param.name);
        }
        if (param.type === '') {
            return new CoderNull(coerceFunc, param.name);
        }
        errors.throwError('invalid type', errors.INVALID_ARGUMENT, {
            arg: 'type',
            value: param.type
        });
        return null;
    }
    var AbiCoder = /** @class */ (function () {
        function AbiCoder(coerceFunc) {
            errors.checkNew(this, AbiCoder);
            if (!coerceFunc) {
                coerceFunc = exports.defaultCoerceFunc;
            }
            properties_1.defineReadOnly(this, 'coerceFunc', coerceFunc);
        }
        AbiCoder.prototype.encode = function (types, values) {
            if (types.length !== values.length) {
                errors.throwError('types/values length mismatch', errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            var coders = [];
            types.forEach(function (type) {
                // Convert types to type objects
                //   - "uint foo" => { type: "uint", name: "foo" }
                //   - "tuple(uint, uint)" => { type: "tuple", components: [ { type: "uint" }, { type: "uint" }, ] }
                var typeObject = null;
                if (typeof (type) === 'string') {
                    typeObject = parseParam(type);
                }
                else {
                    typeObject = type;
                }
                coders.push(getParamCoder(this.coerceFunc, typeObject));
            }, this);
            return bytes_1.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));
        };
        AbiCoder.prototype.decode = function (types, data) {
            var coders = [];
            types.forEach(function (type) {
                // See encode for details
                var typeObject = null;
                if (typeof (type) === 'string') {
                    typeObject = parseParam(type);
                }
                else {
                    typeObject = properties_1.deepCopy(type);
                }
                coders.push(getParamCoder(this.coerceFunc, typeObject));
            }, this);
            return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes_1.arrayify(data), 0).value;
        };
        return AbiCoder;
    }());
    exports.AbiCoder = AbiCoder;
    exports.defaultAbiCoder = new AbiCoder();
    
    },{"../constants":406,"../errors":407,"./address":409,"./bignumber":410,"./bytes":411,"./properties":413,"./utf8":415}],409:[function(require,module,exports){
    'use strict';
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    // We use this for base 36 maths
    var bn_js_1 = __importDefault(require("bn.js"));
    var bytes_1 = require("./bytes");
    var keccak256_1 = require("./keccak256");
    var rlp_1 = require("./rlp");
    var errors = require("../errors");
    ///////////////////////////////
    function getChecksumAddress(address) {
        if (typeof (address) !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
            errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
        }
        address = address.toLowerCase();
        var chars = address.substring(2).split('');
        var hashed = new Uint8Array(40);
        for (var i_1 = 0; i_1 < 40; i_1++) {
            hashed[i_1] = chars[i_1].charCodeAt(0);
        }
        hashed = bytes_1.arrayify(keccak256_1.keccak256(hashed));
        for (var i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return '0x' + chars.join('');
    }
    // Shims for environments that are missing some required constants and functions
    var MAX_SAFE_INTEGER = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    var ibanLookup = {};
    for (var i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (var i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + '00';
        var expanded = '';
        address.split('').forEach(function (c) {
            expanded += ibanLookup[c];
        });
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            var block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        var checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = '0' + checksum;
        }
        return checksum;
    }
    ;
    function getAddress(address) {
        var result = null;
        if (typeof (address) !== 'string') {
            errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== '0x') {
                address = '0x' + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                errors.throwError('bad address checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                errors.throwError('bad icap checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
            }
            result = (new bn_js_1.default.BN(address.substring(4), 36)).toString(16);
            while (result.length < 40) {
                result = '0' + result;
            }
            result = getChecksumAddress('0x' + result);
        }
        else {
            errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
        }
        return result;
    }
    exports.getAddress = getAddress;
    function getIcapAddress(address) {
        var base36 = (new bn_js_1.default.BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();
        while (base36.length < 30) {
            base36 = '0' + base36;
        }
        return 'XE' + ibanChecksum('XE00' + base36) + base36;
    }
    exports.getIcapAddress = getIcapAddress;
    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    function getContractAddress(transaction) {
        if (!transaction.from) {
            throw new Error('missing from address');
        }
        var nonce = transaction.nonce;
        return getAddress('0x' + keccak256_1.keccak256(rlp_1.encode([
            getAddress(transaction.from),
            bytes_1.stripZeros(bytes_1.hexlify(nonce))
        ])).substring(26));
    }
    exports.getContractAddress = getContractAddress;
    
    },{"../errors":407,"./bytes":411,"./keccak256":412,"./rlp":414,"bn.js":61}],410:[function(require,module,exports){
    arguments[4][166][0].apply(exports,arguments)
    },{"../errors":407,"./bytes":411,"./properties":413,"bn.js":61,"dup":166}],411:[function(require,module,exports){
    arguments[4][167][0].apply(exports,arguments)
    },{"../errors":407,"dup":167}],412:[function(require,module,exports){
    arguments[4][329][0].apply(exports,arguments)
    },{"./bytes":411,"dup":329,"js-sha3":205}],413:[function(require,module,exports){
    arguments[4][168][0].apply(exports,arguments)
    },{"../errors":407,"dup":168}],414:[function(require,module,exports){
    arguments[4][331][0].apply(exports,arguments)
    },{"./bytes":411,"dup":331}],415:[function(require,module,exports){
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require("../constants");
    var errors_1 = require("../errors");
    var bytes_1 = require("./bytes");
    ///////////////////////////////
    var UnicodeNormalizationForm;
    (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
    ;
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUtf8Bytes(str, form) {
        if (form === void 0) { form = UnicodeNormalizationForm.current; }
        if (form != UnicodeNormalizationForm.current) {
            errors_1.checkNormalize();
            str = str.normalize(form);
        }
        var result = [];
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 0x80) {
                result.push(c);
            }
            else if (c < 0x800) {
                result.push((c >> 6) | 0xc0);
                result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
                i++;
                var c2 = str.charCodeAt(i);
                if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                    throw new Error('invalid utf-8 string');
                }
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                result.push((c >> 18) | 0xf0);
                result.push(((c >> 12) & 0x3f) | 0x80);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
            else {
                result.push((c >> 12) | 0xe0);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
        }
        return bytes_1.arrayify(result);
    }
    exports.toUtf8Bytes = toUtf8Bytes;
    ;
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function toUtf8String(bytes, ignoreErrors) {
        bytes = bytes_1.arrayify(bytes);
        var result = '';
        var i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            var c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
                result += String.fromCharCode(c);
                continue;
            }
            // Multibyte; how many bytes left for this character?
            var extraLength = null;
            var overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
                extraLength = 1;
                overlongMask = 0x7f;
                // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
                extraLength = 2;
                overlongMask = 0x7ff;
                // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
                extraLength = 3;
                overlongMask = 0xffff;
            }
            else {
                if (!ignoreErrors) {
                    if ((c & 0xc0) === 0x80) {
                        throw new Error('invalid utf8 byte sequence; unexpected continuation byte');
                    }
                    throw new Error('invalid utf8 byte sequence; invalid prefix');
                }
                continue;
            }
            // Do we have enough bytes in our data?
            if (i + extraLength > bytes.length) {
                if (!ignoreErrors) {
                    throw new Error('invalid utf8 byte sequence; too short');
                }
                // If there is an invalid unprocessed byte, skip continuation bytes
                for (; i < bytes.length; i++) {
                    if (bytes[i] >> 6 !== 0x02) {
                        break;
                    }
                }
                continue;
            }
            // Remove the length prefix from the char
            var res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (var j = 0; j < extraLength; j++) {
                var nextChar = bytes[i];
                // Invalid continuation byte
                if ((nextChar & 0xc0) != 0x80) {
                    res = null;
                    break;
                }
                ;
                res = (res << 6) | (nextChar & 0x3f);
                i++;
            }
            if (res === null) {
                if (!ignoreErrors) {
                    throw new Error('invalid utf8 byte sequence; invalid continuation byte');
                }
                continue;
            }
            // Check for overlong seuences (more bytes than needed)
            if (res <= overlongMask) {
                if (!ignoreErrors) {
                    throw new Error('invalid utf8 byte sequence; overlong');
                }
                continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
                if (!ignoreErrors) {
                    throw new Error('invalid utf8 byte sequence; out-of-range');
                }
                continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
                if (!ignoreErrors) {
                    throw new Error('invalid utf8 byte sequence; utf-16 surrogate');
                }
                continue;
            }
            if (res <= 0xffff) {
                result += String.fromCharCode(res);
                continue;
            }
            res -= 0x10000;
            result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);
        }
        return result;
    }
    exports.toUtf8String = toUtf8String;
    function formatBytes32String(text) {
        // Get the bytes
        var bytes = toUtf8Bytes(text);
        // Check we have room for null-termination
        if (bytes.length > 31) {
            throw new Error('bytes32 string must be less than 32 bytes');
        }
        // Zero-pad (implicitly null-terminates)
        return bytes_1.hexlify(bytes_1.concat([bytes, constants_1.HashZero]).slice(0, 32));
    }
    exports.formatBytes32String = formatBytes32String;
    function parseBytes32String(bytes) {
        var data = bytes_1.arrayify(bytes);
        // Must be 32 bytes with a null-termination
        if (data.length !== 32) {
            throw new Error('invalid bytes32 - not 32 bytes long');
        }
        if (data[31] !== 0) {
            throw new Error('invalid bytes32 string - no null terminator');
        }
        // Find the null termination
        var length = 31;
        while (data[length - 1] === 0) {
            length--;
        }
        // Determine the string value
        return toUtf8String(data.slice(0, length));
    }
    exports.parseBytes32String = parseBytes32String;
    
    },{"../constants":406,"../errors":407,"./bytes":411}],416:[function(require,module,exports){
    (function (global){
    /**
     * @license
     * Lodash <https://lodash.com/>
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */
    ;(function() {
    
      /** Used as a safe reference for `undefined` in pre-ES5 environments. */
      var undefined;
    
      /** Used as the semantic version number. */
      var VERSION = '4.17.14';
    
      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200;
    
      /** Error message constants. */
      var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
          FUNC_ERROR_TEXT = 'Expected a function';
    
      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';
    
      /** Used as the maximum memoize cache size. */
      var MAX_MEMOIZE_SIZE = 500;
    
      /** Used as the internal argument placeholder. */
      var PLACEHOLDER = '__lodash_placeholder__';
    
      /** Used to compose bitmasks for cloning. */
      var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;
    
      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;
    
      /** Used to compose bitmasks for function metadata. */
      var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512;
    
      /** Used as default options for `_.truncate`. */
      var DEFAULT_TRUNC_LENGTH = 30,
          DEFAULT_TRUNC_OMISSION = '...';
    
      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
          HOT_SPAN = 16;
    
      /** Used to indicate the type of lazy iteratees. */
      var LAZY_FILTER_FLAG = 1,
          LAZY_MAP_FLAG = 2,
          LAZY_WHILE_FLAG = 3;
    
      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0,
          MAX_SAFE_INTEGER = 9007199254740991,
          MAX_INTEGER = 1.7976931348623157e+308,
          NAN = 0 / 0;
    
      /** Used as references for the maximum length and index of an array. */
      var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    
      /** Used to associate wrap methods with their bit flags. */
      var wrapFlags = [
        ['ary', WRAP_ARY_FLAG],
        ['bind', WRAP_BIND_FLAG],
        ['bindKey', WRAP_BIND_KEY_FLAG],
        ['curry', WRAP_CURRY_FLAG],
        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
        ['flip', WRAP_FLIP_FLAG],
        ['partial', WRAP_PARTIAL_FLAG],
        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
        ['rearg', WRAP_REARG_FLAG]
      ];
    
      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          asyncTag = '[object AsyncFunction]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          domExcTag = '[object DOMException]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          nullTag = '[object Null]',
          objectTag = '[object Object]',
          promiseTag = '[object Promise]',
          proxyTag = '[object Proxy]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]',
          undefinedTag = '[object Undefined]',
          weakMapTag = '[object WeakMap]',
          weakSetTag = '[object WeakSet]';
    
      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';
    
      /** Used to match empty string literals in compiled template source. */
      var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    
      /** Used to match HTML entities and HTML characters. */
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
          reUnescapedHtml = /[&<>"']/g,
          reHasEscapedHtml = RegExp(reEscapedHtml.source),
          reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    
      /** Used to match template delimiters. */
      var reEscape = /<%-([\s\S]+?)%>/g,
          reEvaluate = /<%([\s\S]+?)%>/g,
          reInterpolate = /<%=([\s\S]+?)%>/g;
    
      /** Used to match property names within property paths. */
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/,
          rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    
      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
          reHasRegExpChar = RegExp(reRegExpChar.source);
    
      /** Used to match leading and trailing whitespace. */
      var reTrim = /^\s+|\s+$/g,
          reTrimStart = /^\s+/,
          reTrimEnd = /\s+$/;
    
      /** Used to match wrap detail comments. */
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /;
    
      /** Used to match words composed of alphanumeric characters. */
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    
      /** Used to match backslashes in property paths. */
      var reEscapeChar = /\\(\\)?/g;
    
      /**
       * Used to match
       * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
       */
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    
      /** Used to match `RegExp` flags from their coerced string values. */
      var reFlags = /\w*$/;
    
      /** Used to detect bad signed hexadecimal string values. */
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    
      /** Used to detect binary string values. */
      var reIsBinary = /^0b[01]+$/i;
    
      /** Used to detect host constructors (Safari). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
    
      /** Used to detect octal string values. */
      var reIsOctal = /^0o[0-7]+$/i;
    
      /** Used to detect unsigned integer values. */
      var reIsUint = /^(?:0|[1-9]\d*)$/;
    
      /** Used to match Latin Unicode letters (excluding mathematical operators). */
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    
      /** Used to ensure capturing order of template delimiters. */
      var reNoMatch = /($^)/;
    
      /** Used to match unescaped characters in compiled string literals. */
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    
      /** Used to compose unicode character classes. */
      var rsAstralRange = '\\ud800-\\udfff',
          rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsDingbatRange = '\\u2700-\\u27bf',
          rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
          rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
          rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
          rsPunctuationRange = '\\u2000-\\u206f',
          rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
          rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
          rsVarRange = '\\ufe0e\\ufe0f',
          rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    
      /** Used to compose unicode capture groups. */
      var rsApos = "['\u2019]",
          rsAstral = '[' + rsAstralRange + ']',
          rsBreak = '[' + rsBreakRange + ']',
          rsCombo = '[' + rsComboRange + ']',
          rsDigits = '\\d+',
          rsDingbat = '[' + rsDingbatRange + ']',
          rsLower = '[' + rsLowerRange + ']',
          rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
          rsFitz = '\\ud83c[\\udffb-\\udfff]',
          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
          rsNonAstral = '[^' + rsAstralRange + ']',
          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
          rsUpper = '[' + rsUpperRange + ']',
          rsZWJ = '\\u200d';
    
      /** Used to compose unicode regexes. */
      var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
          rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
          rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
          rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
          reOptMod = rsModifier + '?',
          rsOptVar = '[' + rsVarRange + ']?',
          rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
          rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
          rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
          rsSeq = rsOptVar + reOptMod + rsOptJoin,
          rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
          rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    
      /** Used to match apostrophes. */
      var reApos = RegExp(rsApos, 'g');
    
      /**
       * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
       * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
       */
      var reComboMark = RegExp(rsCombo, 'g');
    
      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
      var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    
      /** Used to match complex or compound words. */
      var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join('|'), 'g');
    
      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
      var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');
    
      /** Used to detect strings that need a more robust regexp to match words. */
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    
      /** Used to assign default `context` object properties. */
      var contextProps = [
        'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
        'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
        'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
        'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
        '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
      ];
    
      /** Used to make template sourceURLs easier to identify. */
      var templateCounter = -1;
    
      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
      typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
      typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
      typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
      typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
      typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
      typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
      typedArrayTags[errorTag] = typedArrayTags[funcTag] =
      typedArrayTags[mapTag] = typedArrayTags[numberTag] =
      typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
      typedArrayTags[setTag] = typedArrayTags[stringTag] =
      typedArrayTags[weakMapTag] = false;
    
      /** Used to identify `toStringTag` values supported by `_.clone`. */
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] =
      cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
      cloneableTags[boolTag] = cloneableTags[dateTag] =
      cloneableTags[float32Tag] = cloneableTags[float64Tag] =
      cloneableTags[int8Tag] = cloneableTags[int16Tag] =
      cloneableTags[int32Tag] = cloneableTags[mapTag] =
      cloneableTags[numberTag] = cloneableTags[objectTag] =
      cloneableTags[regexpTag] = cloneableTags[setTag] =
      cloneableTags[stringTag] = cloneableTags[symbolTag] =
      cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
      cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] =
      cloneableTags[weakMapTag] = false;
    
      /** Used to map Latin Unicode letters to basic Latin letters. */
      var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
        '\xc7': 'C',  '\xe7': 'c',
        '\xd0': 'D',  '\xf0': 'd',
        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
        '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
        '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
        '\xd1': 'N',  '\xf1': 'n',
        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
        '\xc6': 'Ae', '\xe6': 'ae',
        '\xde': 'Th', '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
        '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
        '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
        '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
        '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
        '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
        '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
        '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
        '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
        '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
        '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
        '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
        '\u0134': 'J',  '\u0135': 'j',
        '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
        '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
        '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
        '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
        '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
        '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
        '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
        '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
        '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
        '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
        '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
        '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
        '\u0163': 't',  '\u0165': 't', '\u0167': 't',
        '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
        '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
        '\u0174': 'W',  '\u0175': 'w',
        '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
        '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
        '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
        '\u0132': 'IJ', '\u0133': 'ij',
        '\u0152': 'Oe', '\u0153': 'oe',
        '\u0149': "'n", '\u017f': 's'
      };
    
      /** Used to map characters to HTML entities. */
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };
    
      /** Used to map HTML entities to characters. */
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
      };
    
      /** Used to escape characters for inclusion in compiled string literals. */
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };
    
      /** Built-in method references without a dependency on `root`. */
      var freeParseFloat = parseFloat,
          freeParseInt = parseInt;
    
      /** Detect free variable `global` from Node.js. */
      var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    
      /** Detect free variable `self`. */
      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    
      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function('return this')();
    
      /** Detect free variable `exports`. */
      var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    
      /** Detect free variable `module`. */
      var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    
      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports;
    
      /** Detect free variable `process` from Node.js. */
      var freeProcess = moduleExports && freeGlobal.process;
    
      /** Used to access faster Node.js helpers. */
      var nodeUtil = (function() {
        try {
          // Use `util.types` for Node.js 10+.
          var types = freeModule && freeModule.require && freeModule.require('util').types;
    
          if (types) {
            return types;
          }
    
          // Legacy `process.binding('util')` for Node.js < 10.
          return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {}
      }());
    
      /* Node.js helper references. */
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
          nodeIsDate = nodeUtil && nodeUtil.isDate,
          nodeIsMap = nodeUtil && nodeUtil.isMap,
          nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
          nodeIsSet = nodeUtil && nodeUtil.isSet,
          nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    
      /*--------------------------------------------------------------------------*/
    
      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0: return func.call(thisArg);
          case 1: return func.call(thisArg, args[0]);
          case 2: return func.call(thisArg, args[0], args[1]);
          case 3: return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
    
      /**
       * A specialized version of `baseAggregator` for arrays.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
    
      /**
       * A specialized version of `_.forEach` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEach(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
    
      /**
       * A specialized version of `_.forEachRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
    
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
    
      /**
       * A specialized version of `_.every` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       */
      function arrayEvery(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
    
      /**
       * A specialized version of `_.filter` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];
    
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
    
      /**
       * A specialized version of `_.includes` for arrays without support for
       * specifying an index to search from.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
    
      /**
       * This function is like `arrayIncludes` except that it accepts a comparator.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
    
      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);
    
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
    
      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;
    
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
    
      /**
       * A specialized version of `_.reduce` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the first element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
    
      /**
       * A specialized version of `_.reduceRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the last element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
    
      /**
       * A specialized version of `_.some` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
    
      /**
       * Gets the size of an ASCII `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      var asciiSize = baseProperty('length');
    
      /**
       * Converts an ASCII `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function asciiToArray(string) {
        return string.split('');
      }
    
      /**
       * Splits an ASCII `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
    
      /**
       * The base implementation of methods like `_.findKey` and `_.findLastKey`,
       * without support for iteratee shorthands, which iterates over `collection`
       * using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the found element or its key, else `undefined`.
       */
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
          if (predicate(value, key, collection)) {
            result = key;
            return false;
          }
        });
        return result;
      }
    
      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);
    
        while ((fromRight ? index-- : ++index < length)) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
    
      /**
       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex);
      }
    
      /**
       * This function is like `baseIndexOf` except that it accepts a comparator.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
            length = array.length;
    
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
    
      /**
       * The base implementation of `_.isNaN` without support for number objects.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       */
      function baseIsNaN(value) {
        return value !== value;
      }
    
      /**
       * The base implementation of `_.mean` and `_.meanBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the mean.
       */
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? (baseSum(array, iteratee) / length) : NAN;
      }
    
      /**
       * The base implementation of `_.property` without support for deep paths.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined : object[key];
        };
      }
    
      /**
       * The base implementation of `_.propertyOf` without support for deep paths.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined : object[key];
        };
      }
    
      /**
       * The base implementation of `_.reduce` and `_.reduceRight`, without support
       * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} accumulator The initial value.
       * @param {boolean} initAccum Specify using the first or last element of
       *  `collection` as the initial value.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the accumulated value.
       */
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
          accumulator = initAccum
            ? (initAccum = false, value)
            : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
      }
    
      /**
       * The base implementation of `_.sortBy` which uses `comparer` to define the
       * sort order of `array` and replaces criteria objects with their corresponding
       * values.
       *
       * @private
       * @param {Array} array The array to sort.
       * @param {Function} comparer The function to define sort order.
       * @returns {Array} Returns `array`.
       */
      function baseSortBy(array, comparer) {
        var length = array.length;
    
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
    
      /**
       * The base implementation of `_.sum` and `_.sumBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the sum.
       */
      function baseSum(array, iteratee) {
        var result,
            index = -1,
            length = array.length;
    
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined) {
            result = result === undefined ? current : (result + current);
          }
        }
        return result;
      }
    
      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);
    
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
    
      /**
       * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
       * of key-value pairs for `object` corresponding to the property names of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the key-value pairs.
       */
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
    
      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
    
      /**
       * The base implementation of `_.values` and `_.valuesIn` which creates an
       * array of `object` property values corresponding to the property names
       * of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the array of property values.
       */
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
    
      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key);
      }
    
      /**
       * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the first unmatched string symbol.
       */
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1,
            length = strSymbols.length;
    
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }
    
      /**
       * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the last unmatched string symbol.
       */
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
    
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }
    
      /**
       * Gets the number of `placeholder` occurrences in `array`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} placeholder The placeholder to search for.
       * @returns {number} Returns the placeholder count.
       */
      function countHolders(array, placeholder) {
        var length = array.length,
            result = 0;
    
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
    
      /**
       * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
       * letters to basic Latin letters.
       *
       * @private
       * @param {string} letter The matched letter to deburr.
       * @returns {string} Returns the deburred letter.
       */
      var deburrLetter = basePropertyOf(deburredLetters);
    
      /**
       * Used by `_.escape` to convert characters to HTML entities.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
    
      /**
       * Used by `_.template` to escape characters for inclusion in compiled string literals.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }
    
      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }
    
      /**
       * Checks if `string` contains Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
       */
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
    
      /**
       * Checks if `string` contains a word composed of Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a word is found, else `false`.
       */
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
    
      /**
       * Converts `iterator` to an array.
       *
       * @private
       * @param {Object} iterator The iterator to convert.
       * @returns {Array} Returns the converted array.
       */
      function iteratorToArray(iterator) {
        var data,
            result = [];
    
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
    
      /**
       * Converts `map` to its key-value pairs.
       *
       * @private
       * @param {Object} map The map to convert.
       * @returns {Array} Returns the key-value pairs.
       */
      function mapToArray(map) {
        var index = -1,
            result = Array(map.size);
    
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
    
      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
    
      /**
       * Replaces all `placeholder` elements in `array` with an internal placeholder
       * and returns an array of their indexes.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {*} placeholder The placeholder to replace.
       * @returns {Array} Returns the new array of placeholder indexes.
       */
      function replaceHolders(array, placeholder) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];
    
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
    
      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
            result = Array(set.size);
    
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
    
      /**
       * Converts `set` to its value-value pairs.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the value-value pairs.
       */
      function setToPairs(set) {
        var index = -1,
            result = Array(set.size);
    
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
    
      /**
       * A specialized version of `_.indexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
            length = array.length;
    
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
    
      /**
       * A specialized version of `_.lastIndexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
    
      /**
       * Gets the number of symbols in `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the string size.
       */
      function stringSize(string) {
        return hasUnicode(string)
          ? unicodeSize(string)
          : asciiSize(string);
      }
    
      /**
       * Converts `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string);
      }
    
      /**
       * Used by `_.unescape` to convert HTML entities to characters.
       *
       * @private
       * @param {string} chr The matched character to unescape.
       * @returns {string} Returns the unescaped character.
       */
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    
      /**
       * Gets the size of a Unicode `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
    
      /**
       * Converts a Unicode `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
    
      /**
       * Splits a Unicode `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
    
      /*--------------------------------------------------------------------------*/
    
      /**
       * Create a new pristine `lodash` function using the `context` object.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Util
       * @param {Object} [context=root] The context object.
       * @returns {Function} Returns a new `lodash` function.
       * @example
       *
       * _.mixin({ 'foo': _.constant('foo') });
       *
       * var lodash = _.runInContext();
       * lodash.mixin({ 'bar': lodash.constant('bar') });
       *
       * _.isFunction(_.foo);
       * // => true
       * _.isFunction(_.bar);
       * // => false
       *
       * lodash.isFunction(lodash.foo);
       * // => false
       * lodash.isFunction(lodash.bar);
       * // => true
       *
       * // Create a suped-up `defer` in Node.js.
       * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
       */
      var runInContext = (function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
    
        /** Built-in constructor references. */
        var Array = context.Array,
            Date = context.Date,
            Error = context.Error,
            Function = context.Function,
            Math = context.Math,
            Object = context.Object,
            RegExp = context.RegExp,
            String = context.String,
            TypeError = context.TypeError;
    
        /** Used for built-in method references. */
        var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype;
    
        /** Used to detect overreaching core-js shims. */
        var coreJsData = context['__core-js_shared__'];
    
        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;
    
        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;
    
        /** Used to generate unique IDs. */
        var idCounter = 0;
    
        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
          return uid ? ('Symbol(src)_1.' + uid) : '';
        }());
    
        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;
    
        /** Used to infer the `Object` constructor. */
        var objectCtorString = funcToString.call(Object);
    
        /** Used to restore the original `_` reference in `_.noConflict`. */
        var oldDash = root._;
    
        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
          funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
          .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );
    
        /** Built-in value references. */
        var Buffer = moduleExports ? context.Buffer : undefined,
            Symbol = context.Symbol,
            Uint8Array = context.Uint8Array,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
            getPrototype = overArg(Object.getPrototypeOf, Object),
            objectCreate = Object.create,
            propertyIsEnumerable = objectProto.propertyIsEnumerable,
            splice = arrayProto.splice,
            spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
            symIterator = Symbol ? Symbol.iterator : undefined,
            symToStringTag = Symbol ? Symbol.toStringTag : undefined;
    
        var defineProperty = (function() {
          try {
            var func = getNative(Object, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        }());
    
        /** Mocked built-ins. */
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
            ctxNow = Date && Date.now !== root.Date.now && Date.now,
            ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
    
        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeCeil = Math.ceil,
            nativeFloor = Math.floor,
            nativeGetSymbols = Object.getOwnPropertySymbols,
            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
            nativeIsFinite = context.isFinite,
            nativeJoin = arrayProto.join,
            nativeKeys = overArg(Object.keys, Object),
            nativeMax = Math.max,
            nativeMin = Math.min,
            nativeNow = Date.now,
            nativeParseInt = context.parseInt,
            nativeRandom = Math.random,
            nativeReverse = arrayProto.reverse;
    
        /* Built-in method references that are verified to be native. */
        var DataView = getNative(context, 'DataView'),
            Map = getNative(context, 'Map'),
            Promise = getNative(context, 'Promise'),
            Set = getNative(context, 'Set'),
            WeakMap = getNative(context, 'WeakMap'),
            nativeCreate = getNative(Object, 'create');
    
        /** Used to store function metadata. */
        var metaMap = WeakMap && new WeakMap;
    
        /** Used to lookup unminified function names. */
        var realNames = {};
    
        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);
    
        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a `lodash` object which wraps `value` to enable implicit method
         * chain sequences. Methods that operate on and return arrays, collections,
         * and functions can be chained together. Methods that retrieve a single value
         * or may return a primitive value will automatically end the chain sequence
         * and return the unwrapped value. Otherwise, the value must be unwrapped
         * with `_#value`.
         *
         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
         * enabled using `_.chain`.
         *
         * The execution of chained methods is lazy, that is, it's deferred until
         * `_#value` is implicitly or explicitly called.
         *
         * Lazy evaluation allows several methods to support shortcut fusion.
         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
         * the creation of intermediate arrays and can greatly reduce the number of
         * iteratee executions. Sections of a chain sequence qualify for shortcut
         * fusion if the section is applied to an array and iteratees accept only
         * one argument. The heuristic for whether a section qualifies for shortcut
         * fusion is subject to change.
         *
         * Chaining is supported in custom builds as long as the `_#value` method is
         * directly or indirectly included in the build.
         *
         * In addition to lodash methods, wrappers have `Array` and `String` methods.
         *
         * The wrapper `Array` methods are:
         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
         *
         * The wrapper `String` methods are:
         * `replace` and `split`
         *
         * The wrapper methods that support shortcut fusion are:
         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
         *
         * The chainable wrapper methods are:
         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
         * `zipObject`, `zipObjectDeep`, and `zipWith`
         *
         * The wrapper methods that are **not** chainable by default are:
         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
         * `upperFirst`, `value`, and `words`
         *
         * @name _
         * @constructor
         * @category Seq
         * @param {*} value The value to wrap in a `lodash` instance.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2, 3]);
         *
         * // Returns an unwrapped value.
         * wrapped.reduce(_.add);
         * // => 6
         *
         * // Returns a wrapped value.
         * var squares = wrapped.map(square);
         *
         * _.isArray(squares);
         * // => false
         *
         * _.isArray(squares.value());
         * // => true
         */
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
    
        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function() {
          function object() {}
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object;
            object.prototype = undefined;
            return result;
          };
        }());
    
        /**
         * The function whose prototype chain sequence wrappers inherit from.
         *
         * @private
         */
        function baseLodash() {
          // No operation performed.
        }
    
        /**
         * The base constructor for creating `lodash` wrapper objects.
         *
         * @private
         * @param {*} value The value to wrap.
         * @param {boolean} [chainAll] Enable explicit method chain sequences.
         */
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined;
        }
    
        /**
         * By default, the template delimiters used by lodash are like those in
         * embedded Ruby (ERB) as well as ES2015 template strings. Change the
         * following template settings to use alternative delimiters.
         *
         * @static
         * @memberOf _
         * @type {Object}
         */
        lodash.templateSettings = {
    
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'escape': reEscape,
    
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'evaluate': reEvaluate,
    
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'interpolate': reInterpolate,
    
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          'variable': '',
    
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          'imports': {
    
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            '_': lodash
          }
        };
    
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
    
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
         *
         * @private
         * @constructor
         * @param {*} value The value to wrap.
         */
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
    
        /**
         * Creates a clone of the lazy wrapper object.
         *
         * @private
         * @name clone
         * @memberOf LazyWrapper
         * @returns {Object} Returns the cloned `LazyWrapper` object.
         */
        function lazyClone() {
          var result = new LazyWrapper(this.__wrapped__);
          result.__actions__ = copyArray(this.__actions__);
          result.__dir__ = this.__dir__;
          result.__filtered__ = this.__filtered__;
          result.__iteratees__ = copyArray(this.__iteratees__);
          result.__takeCount__ = this.__takeCount__;
          result.__views__ = copyArray(this.__views__);
          return result;
        }
    
        /**
         * Reverses the direction of lazy iteration.
         *
         * @private
         * @name reverse
         * @memberOf LazyWrapper
         * @returns {Object} Returns the new reversed `LazyWrapper` object.
         */
        function lazyReverse() {
          if (this.__filtered__) {
            var result = new LazyWrapper(this);
            result.__dir__ = -1;
            result.__filtered__ = true;
          } else {
            result = this.clone();
            result.__dir__ *= -1;
          }
          return result;
        }
    
        /**
         * Extracts the unwrapped value from its lazy wrapper.
         *
         * @private
         * @name value
         * @memberOf LazyWrapper
         * @returns {*} Returns the unwrapped value.
         */
        function lazyValue() {
          var array = this.__wrapped__.value(),
              dir = this.__dir__,
              isArr = isArray(array),
              isRight = dir < 0,
              arrLength = isArr ? array.length : 0,
              view = getView(0, arrLength, this.__views__),
              start = view.start,
              end = view.end,
              length = end - start,
              index = isRight ? end : (start - 1),
              iteratees = this.__iteratees__,
              iterLength = iteratees.length,
              resIndex = 0,
              takeCount = nativeMin(length, this.__takeCount__);
    
          if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result = [];
    
          outer:
          while (length-- && resIndex < takeCount) {
            index += dir;
    
            var iterIndex = -1,
                value = array[index];
    
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex],
                  iteratee = data.iteratee,
                  type = data.type,
                  computed = iteratee(value);
    
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result[resIndex++] = value;
          }
          return result;
        }
    
        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;
    
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
    
        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
    
        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }
    
        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
    
        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
        }
    
        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
          return this;
        }
    
        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;
    
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
    
        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
    
        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);
    
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
    
        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);
    
          return index < 0 ? undefined : data[index][1];
        }
    
        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
    
        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
              index = assocIndexOf(data, key);
    
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
    
        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;
    
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
    
        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            'hash': new Hash,
            'map': new (Map || ListCache),
            'string': new Hash
          };
        }
    
        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)['delete'](key);
          this.size -= result ? 1 : 0;
          return result;
        }
    
        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
    
        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
    
        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
              size = data.size;
    
          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }
    
        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
    
        /*------------------------------------------------------------------------*/
    
        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var index = -1,
              length = values == null ? 0 : values.length;
    
          this.__data__ = new MapCache;
          while (++index < length) {
            this.add(values[index]);
          }
        }
    
        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
    
        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
    
        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
    
        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache;
          this.size = 0;
        }
    
        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
              result = data['delete'](key);
    
          this.size = data.size;
          return result;
        }
    
        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }
    
        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }
    
        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
    
        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;
    
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) &&
                !(skipIndexes && (
                   // Safari 9 has enumerable `arguments.length` in strict mode.
                   key == 'length' ||
                   // Node.js 0.10 has enumerable non-index properties on buffers.
                   (isBuff && (key == 'offset' || key == 'parent')) ||
                   // PhantomJS 2 has enumerable non-index properties on typed arrays.
                   (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                   // Skip index properties.
                   isIndex(key, length)
                ))) {
              result.push(key);
            }
          }
          return result;
        }
    
        /**
         * A specialized version of `_.sample` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @returns {*} Returns the random element.
         */
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined;
        }
    
        /**
         * A specialized version of `_.sampleSize` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
    
        /**
         * A specialized version of `_.shuffle` for arrays.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
    
        /**
         * This function is like `assignValue` except that it doesn't assign
         * `undefined` values.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignMergeValue(object, key, value) {
          if ((value !== undefined && !eq(object[key], value)) ||
              (value === undefined && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }
    
        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
              (value === undefined && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }
    
        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
    
        /**
         * Aggregates elements of `collection` on `accumulator` with keys transformed
         * by `iteratee` and values set by `setter`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseAggregator(collection, setter, iteratee, accumulator) {
          baseEach(collection, function(value, key, collection) {
            setter(accumulator, value, iteratee(value), collection);
          });
          return accumulator;
        }
    
        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
    
        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
    
        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object, key, {
              'configurable': true,
              'enumerable': true,
              'value': value,
              'writable': true
            });
          } else {
            object[key] = value;
          }
        }
    
        /**
         * The base implementation of `_.at` without support for individual paths.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {string[]} paths The property paths to pick.
         * @returns {Array} Returns the picked elements.
         */
        function baseAt(object, paths) {
          var index = -1,
              length = paths.length,
              result = Array(length),
              skip = object == null;
    
          while (++index < length) {
            result[index] = skip ? undefined : get(object, paths[index]);
          }
          return result;
        }
    
        /**
         * The base implementation of `_.clamp` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         */
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
    
        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
              isDeep = bitmask & CLONE_DEEP_FLAG,
              isFlat = bitmask & CLONE_FLAT_FLAG,
              isFull = bitmask & CLONE_SYMBOLS_FLAG;
    
          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== undefined) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag;
    
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = (isFlat || isFunc) ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack);
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);
    
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key) {
              result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
          }
    
          var keysFunc = isFull
            ? (isFlat ? getAllKeysIn : getAllKeys)
            : (isFlat ? keysIn : keys);
    
          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function(subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }
    
        /**
         * The base implementation of `_.conforms` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         */
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
    
        /**
         * The base implementation of `_.conformsTo` which accepts `props` to check.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         */
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (length--) {
            var key = props[length],
                predicate = source[key],
                value = object[key];
    
            if ((value === undefined && !(key in object)) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
    
        /**
         * The base implementation of `_.delay` and `_.defer` which accepts `args`
         * to provide to `func`.
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {Array} args The arguments to provide to `func`.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() { func.apply(undefined, args); }, wait);
        }
    
        /**
         * The base implementation of methods like `_.difference` without support
         * for excluding multiple arrays or iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Array} values The values to exclude.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         */
        function baseDifference(array, values, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              isCommon = true,
              length = array.length,
              result = [],
              valuesLength = values.length;
    
          if (!length) {
            return result;
          }
          if (iteratee) {
            values = arrayMap(values, baseUnary(iteratee));
          }
          if (comparator) {
            includes = arrayIncludesWith;
            isCommon = false;
          }
          else if (values.length >= LARGE_ARRAY_SIZE) {
            includes = cacheHas;
            isCommon = false;
            values = new SetCache(values);
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee == null ? value : iteratee(value);
    
            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            }
            else if (!includes(values, computed, comparator)) {
              result.push(value);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.forEach` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);
    
        /**
         * The base implementation of `_.forEachRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEachRight = createBaseEach(baseForOwnRight, true);
    
        /**
         * The base implementation of `_.every` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`
         */
        function baseEvery(collection, predicate) {
          var result = true;
          baseEach(collection, function(value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
          });
          return result;
        }
    
        /**
         * The base implementation of methods like `_.max` and `_.min` which accepts a
         * `comparator` to determine the extremum value.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The iteratee invoked per iteration.
         * @param {Function} comparator The comparator used to compare values.
         * @returns {*} Returns the extremum value.
         */
        function baseExtremum(array, iteratee, comparator) {
          var index = -1,
              length = array.length;
    
          while (++index < length) {
            var value = array[index],
                current = iteratee(value);
    
            if (current != null && (computed === undefined
                  ? (current === current && !isSymbol(current))
                  : comparator(current, computed)
                )) {
              var computed = current,
                  result = value;
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.fill` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         */
        function baseFill(array, value, start, end) {
          var length = array.length;
    
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = (end === undefined || end > length) ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
    
        /**
         * The base implementation of `_.filter` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function baseFilter(collection, predicate) {
          var result = [];
          baseEach(collection, function(value, index, collection) {
            if (predicate(value, index, collection)) {
              result.push(value);
            }
          });
          return result;
        }
    
        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
              length = array.length;
    
          predicate || (predicate = isFlattenable);
          result || (result = []);
    
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();
    
        /**
         * This function is like `baseFor` except that it iterates over properties
         * in the opposite order.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseForRight = createBaseFor(true);
    
        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }
    
        /**
         * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwnRight(object, iteratee) {
          return object && baseForRight(object, iteratee, keys);
        }
    
        /**
         * The base implementation of `_.functions` which creates an array of
         * `object` function property names filtered from `props`.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Array} props The property names to filter.
         * @returns {Array} Returns the function names.
         */
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
    
        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
          path = castPath(path, object);
    
          var index = 0,
              length = path.length;
    
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return (index && index == length) ? object : undefined;
        }
    
        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
    
        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return (symToStringTag && symToStringTag in Object(value))
            ? getRawTag(value)
            : objectToString(value);
        }
    
        /**
         * The base implementation of `_.gt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         */
        function baseGt(value, other) {
          return value > other;
        }
    
        /**
         * The base implementation of `_.has` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
    
        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }
    
        /**
         * The base implementation of `_.inRange` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to check.
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         */
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
    
        /**
         * The base implementation of methods like `_.intersection`, without support
         * for iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of shared values.
         */
        function baseIntersection(arrays, iteratee, comparator) {
          var includes = comparator ? arrayIncludesWith : arrayIncludes,
              length = arrays[0].length,
              othLength = arrays.length,
              othIndex = othLength,
              caches = Array(othLength),
              maxLength = Infinity,
              result = [];
    
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee) {
              array = arrayMap(array, baseUnary(iteratee));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
              ? new SetCache(othIndex && array)
              : undefined;
          }
          array = arrays[0];
    
          var index = -1,
              seen = caches[0];
    
          outer:
          while (++index < length && result.length < maxLength) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;
    
            value = (comparator || value !== 0) ? value : 0;
            if (!(seen
                  ? cacheHas(seen, computed)
                  : includes(result, computed, comparator)
                )) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache
                      ? cacheHas(cache, computed)
                      : includes(arrays[othIndex], computed, comparator))
                    ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.invert` and `_.invertBy` which inverts
         * `object` with values transformed by `iteratee` and set by `setter`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform values.
         * @param {Object} accumulator The initial inverted object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseInverter(object, setter, iteratee, accumulator) {
          baseForOwn(object, function(value, key, object) {
            setter(accumulator, iteratee(value), key, object);
          });
          return accumulator;
        }
    
        /**
         * The base implementation of `_.invoke` without support for individual
         * method arguments.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {Array} args The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         */
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined : apply(func, object, args);
        }
    
        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
    
        /**
         * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         */
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
    
        /**
         * The base implementation of `_.isDate` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         */
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
    
        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
    
        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other);
    
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
    
          var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag;
    
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack);
            return (objIsArr || isTypedArray(object))
              ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
              : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
    
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other;
    
              stack || (stack = new Stack);
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack);
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
    
        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
    
        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
              length = index,
              noCustomizer = !customizer;
    
          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index--) {
            var data = matchData[index];
            if ((noCustomizer && data[2])
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
                ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
                objValue = object[key],
                srcValue = data[1];
    
            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack;
              if (customizer) {
                var result = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result === undefined
                    ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                    : result
                  )) {
                return false;
              }
            }
          }
          return true;
        }
    
        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
    
        /**
         * The base implementation of `_.isRegExp` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         */
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
    
        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
    
        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return isObjectLike(value) &&
            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
    
        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
          // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
          // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == 'object') {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }
    
        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
              result = [];
    
          for (var key in object) {
            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.lt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         */
        function baseLt(value, other) {
          return value < other;
        }
    
        /**
         * The base implementation of `_.map` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function baseMap(collection, iteratee) {
          var index = -1,
              result = isArrayLike(collection) ? Array(collection.length) : [];
    
          baseEach(collection, function(value, key, collection) {
            result[++index] = iteratee(value, key, collection);
          });
          return result;
        }
    
        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
    
        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return (objValue === undefined && objValue === srcValue)
              ? hasIn(object, path)
              : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
    
        /**
         * The base implementation of `_.merge` without support for multiple sources.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} [customizer] The function to customize merged values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack);
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            }
            else {
              var newValue = customizer
                ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                : undefined;
    
              if (newValue === undefined) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
    
        /**
         * A specialized version of `baseMerge` for arrays and objects which performs
         * deep merges and tracks traversed objects enabling objects with circular
         * references to be merged.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {string} key The key of the value to merge.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} mergeFunc The function to merge values.
         * @param {Function} [customizer] The function to customize assigned values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key),
              srcValue = safeGet(source, key),
              stacked = stack.get(srcValue);
    
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, (key + ''), object, source, stack)
            : undefined;
    
          var isCommon = newValue === undefined;
    
          if (isCommon) {
            var isArr = isArray(srcValue),
                isBuff = !isArr && isBuffer(srcValue),
                isTyped = !isArr && !isBuff && isTypedArray(srcValue);
    
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              }
              else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              }
              else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              }
              else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              }
              else {
                newValue = [];
              }
            }
            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              }
              else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            }
            else {
              isCommon = false;
            }
          }
          if (isCommon) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
    
        /**
         * The base implementation of `_.nth` which doesn't coerce arguments.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {number} n The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         */
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined;
        }
    
        /**
         * The base implementation of `_.orderBy` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
         * @param {string[]} orders The sort orders of `iteratees`.
         * @returns {Array} Returns the new sorted array.
         */
        function baseOrderBy(collection, iteratees, orders) {
          var index = -1;
          iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
    
          var result = baseMap(collection, function(value, key, collection) {
            var criteria = arrayMap(iteratees, function(iteratee) {
              return iteratee(value);
            });
            return { 'criteria': criteria, 'index': ++index, 'value': value };
          });
    
          return baseSortBy(result, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
    
        /**
         * The base implementation of `_.pick` without support for individual
         * property identifiers.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @returns {Object} Returns the new object.
         */
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
    
        /**
         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @param {Function} predicate The function invoked per property.
         * @returns {Object} Returns the new object.
         */
        function basePickBy(object, paths, predicate) {
          var index = -1,
              length = paths.length,
              result = {};
    
          while (++index < length) {
            var path = paths[index],
                value = baseGet(object, path);
    
            if (predicate(value, path)) {
              baseSet(result, castPath(path, object), value);
            }
          }
          return result;
        }
    
        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
    
        /**
         * The base implementation of `_.pullAllBy` without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         */
        function basePullAll(array, values, iteratee, comparator) {
          var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
              index = -1,
              length = values.length,
              seen = array;
    
          if (array === values) {
            values = copyArray(values);
          }
          if (iteratee) {
            seen = arrayMap(array, baseUnary(iteratee));
          }
          while (++index < length) {
            var fromIndex = 0,
                value = values[index],
                computed = iteratee ? iteratee(value) : value;
    
            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
    
        /**
         * The base implementation of `_.pullAt` without support for individual
         * indexes or capturing the removed elements.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {number[]} indexes The indexes of elements to remove.
         * @returns {Array} Returns `array`.
         */
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
              lastIndex = length - 1;
    
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
    
        /**
         * The base implementation of `_.random` without support for returning
         * floating-point numbers.
         *
         * @private
         * @param {number} lower The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the random number.
         */
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
    
        /**
         * The base implementation of `_.range` and `_.rangeRight` which doesn't
         * coerce arguments.
         *
         * @private
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @param {number} step The value to increment or decrement by.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the range of numbers.
         */
        function baseRange(start, end, step, fromRight) {
          var index = -1,
              length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
              result = Array(length);
    
          while (length--) {
            result[fromRight ? length : ++index] = start;
            start += step;
          }
          return result;
        }
    
        /**
         * The base implementation of `_.repeat` which doesn't coerce arguments.
         *
         * @private
         * @param {string} string The string to repeat.
         * @param {number} n The number of times to repeat the string.
         * @returns {string} Returns the repeated string.
         */
        function baseRepeat(string, n) {
          var result = '';
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result;
          }
          // Leverage the exponentiation by squaring algorithm for a faster repeat.
          // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
          do {
            if (n % 2) {
              result += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
    
          return result;
        }
    
        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + '');
        }
    
        /**
         * The base implementation of `_.sample`.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         */
        function baseSample(collection) {
          return arraySample(values(collection));
        }
    
        /**
         * The base implementation of `_.sampleSize` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
    
        /**
         * The base implementation of `_.set`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
    
          var index = -1,
              length = path.length,
              lastIndex = length - 1,
              nested = object;
    
          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
                newValue = value;
    
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined;
              if (newValue === undefined) {
                newValue = isObject(objValue)
                  ? objValue
                  : (isIndex(path[index + 1]) ? [] : {});
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
    
        /**
         * The base implementation of `setData` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
    
        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, 'toString', {
            'configurable': true,
            'enumerable': false,
            'value': constant(string),
            'writable': true
          });
        };
    
        /**
         * The base implementation of `_.shuffle`.
         *
         * @private
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
    
        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
          var index = -1,
              length = array.length;
    
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : ((end - start) >>> 0);
          start >>>= 0;
    
          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }
    
        /**
         * The base implementation of `_.some` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function baseSome(collection, predicate) {
          var result;
    
          baseEach(collection, function(value, index, collection) {
            result = predicate(value, index, collection);
            return !result;
          });
          return !!result;
        }
    
        /**
         * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
         * performs a binary search of `array` to determine the index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
              high = array == null ? low : array.length;
    
          if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                  computed = array[mid];
    
              if (computed !== null && !isSymbol(computed) &&
                  (retHighest ? (computed <= value) : (computed < value))) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
    
        /**
         * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
         * which invokes `iteratee` for `value` and each element of `array` to compute
         * their sort ranking. The iteratee is invoked with one argument; (value).
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} iteratee The iteratee invoked per element.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
          value = iteratee(value);
    
          var low = 0,
              high = array == null ? 0 : array.length,
              valIsNaN = value !== value,
              valIsNull = value === null,
              valIsSymbol = isSymbol(value),
              valIsUndefined = value === undefined;
    
          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
                computed = iteratee(array[mid]),
                othIsDefined = computed !== undefined,
                othIsNull = computed === null,
                othIsReflexive = computed === computed,
                othIsSymbol = isSymbol(computed);
    
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? (computed <= value) : (computed < value);
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
    
        /**
         * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseSortedUniq(array, iteratee) {
          var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];
    
          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;
    
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.toNumber` which doesn't ensure correct
         * conversions of binary, hexadecimal, or octal string values.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         */
        function baseToNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
    
        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == 'string') {
            return value;
          }
          if (isArray(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }
    
        /**
         * The base implementation of `_.uniqBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseUniq(array, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              length = array.length,
              isCommon = true,
              result = [],
              seen = result;
    
          if (comparator) {
            isCommon = false;
            includes = arrayIncludesWith;
          }
          else if (length >= LARGE_ARRAY_SIZE) {
            var set = iteratee ? null : createSet(array);
            if (set) {
              return setToArray(set);
            }
            isCommon = false;
            includes = cacheHas;
            seen = new SetCache;
          }
          else {
            seen = iteratee ? [] : result;
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;
    
            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            }
            else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.unset`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The property path to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         */
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
    
        /**
         * The base implementation of `_.update`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to update.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
    
        /**
         * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
         * without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {Function} predicate The function invoked per iteration.
         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
              index = fromRight ? length : -1;
    
          while ((fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)) {}
    
          return isDrop
            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
        }
    
        /**
         * The base implementation of `wrapperValue` which returns the result of
         * performing a sequence of actions on the unwrapped `value`, where each
         * successive action is supplied the return value of the previous.
         *
         * @private
         * @param {*} value The unwrapped value.
         * @param {Array} actions Actions to perform to resolve the unwrapped value.
         * @returns {*} Returns the resolved value.
         */
        function baseWrapperValue(value, actions) {
          var result = value;
          if (result instanceof LazyWrapper) {
            result = result.value();
          }
          return arrayReduce(actions, function(result, action) {
            return action.func.apply(action.thisArg, arrayPush([result], action.args));
          }, result);
        }
    
        /**
         * The base implementation of methods like `_.xor`, without support for
         * iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of values.
         */
        function baseXor(arrays, iteratee, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
              result = Array(length);
    
          while (++index < length) {
            var array = arrays[index],
                othIndex = -1;
    
            while (++othIndex < length) {
              if (othIndex != index) {
                result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
    
        /**
         * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
         *
         * @private
         * @param {Array} props The property identifiers.
         * @param {Array} values The property values.
         * @param {Function} assignFunc The function to assign values.
         * @returns {Object} Returns the new object.
         */
        function baseZipObject(props, values, assignFunc) {
          var index = -1,
              length = props.length,
              valsLength = values.length,
              result = {};
    
          while (++index < length) {
            var value = index < valsLength ? values[index] : undefined;
            assignFunc(result, props[index], value);
          }
          return result;
        }
    
        /**
         * Casts `value` to an empty array if it's not an array like object.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Array|Object} Returns the cast array-like object.
         */
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
    
        /**
         * Casts `value` to `identity` if it's not a function.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Function} Returns cast function.
         */
        function castFunction(value) {
          return typeof value == 'function' ? value : identity;
        }
    
        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
    
        /**
         * A `baseRest` alias which can be replaced with `identity` by module
         * replacement plugins.
         *
         * @private
         * @type {Function}
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        var castRest = baseRest;
    
        /**
         * Casts `array` to a slice if it's needed.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {number} start The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the cast slice.
         */
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined ? length : end;
          return (!start && end >= length) ? array : baseSlice(array, start, end);
        }
    
        /**
         * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
         *
         * @private
         * @param {number|Object} id The timer id or timeout object of the timer to clear.
         */
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
    
        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    
          buffer.copy(result);
          return result;
        }
    
        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }
    
        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
    
        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }
    
        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
    
        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
    
        /**
         * Compares values to sort them in ascending order.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {number} Returns the sort order indicator for `value`.
         */
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value);
    
            var othIsDefined = other !== undefined,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other);
    
            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive) {
              return 1;
            }
            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
    
        /**
         * Used by `_.orderBy` to compare multiple properties of a value to another
         * and stable sort them.
         *
         * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
         * specify an order of "desc" for descending or "asc" for ascending sort order
         * of corresponding values.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {boolean[]|string[]} orders The order to sort by for each property.
         * @returns {number} Returns the sort order indicator for `object`.
         */
        function compareMultiple(object, other, orders) {
          var index = -1,
              objCriteria = object.criteria,
              othCriteria = other.criteria,
              length = objCriteria.length,
              ordersLength = orders.length;
    
          while (++index < length) {
            var result = compareAscending(objCriteria[index], othCriteria[index]);
            if (result) {
              if (index >= ordersLength) {
                return result;
              }
              var order = orders[index];
              return result * (order == 'desc' ? -1 : 1);
            }
          }
          // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
          // that causes it, under certain circumstances, to provide the same value for
          // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
          // for more details.
          //
          // This also ensures a stable sort in V8 and other engines.
          // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
          return object.index - other.index;
        }
    
        /**
         * Creates an array that is the composition of partially applied arguments,
         * placeholders, and provided arguments into a single array of arguments.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to prepend to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersLength = holders.length,
              leftIndex = -1,
              leftLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(leftLength + rangeLength),
              isUncurried = !isCurried;
    
          while (++leftIndex < leftLength) {
            result[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result[leftIndex++] = args[argsIndex++];
          }
          return result;
        }
    
        /**
         * This function is like `composeArgs` except that the arguments composition
         * is tailored for `_.partialRight`.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to append to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersIndex = -1,
              holdersLength = holders.length,
              rightIndex = -1,
              rightLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(rangeLength + rightLength),
              isUncurried = !isCurried;
    
          while (++argsIndex < rangeLength) {
            result[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result;
        }
    
        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
              length = source.length;
    
          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
    
        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
    
          var index = -1,
              length = props.length;
    
          while (++index < length) {
            var key = props[index];
    
            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined;
    
            if (newValue === undefined) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
    
        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
    
        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
    
        /**
         * Creates a function like `_.groupBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} [initializer] The accumulator object initializer.
         * @returns {Function} Returns the new aggregator function.
         */
        function createAggregator(setter, initializer) {
          return function(collection, iteratee) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator,
                accumulator = initializer ? initializer() : {};
    
            return func(collection, setter, getIteratee(iteratee, 2), accumulator);
          };
        }
    
        /**
         * Creates a function like `_.assign`.
         *
         * @private
         * @param {Function} assigner The function to assign values.
         * @returns {Function} Returns the new assigner function.
         */
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1,
                length = sources.length,
                customizer = length > 1 ? sources[length - 1] : undefined,
                guard = length > 2 ? sources[2] : undefined;
    
            customizer = (assigner.length > 3 && typeof customizer == 'function')
              ? (length--, customizer)
              : undefined;
    
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
    
        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee);
            }
            var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection);
    
            while ((fromRight ? index-- : ++index < length)) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
    
        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;
    
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
    
        /**
         * Creates a function that wraps `func` to invoke it with the optional `this`
         * binding of `thisArg`.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);
    
          function wrapper() {
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
    
        /**
         * Creates a function like `_.lowerFirst`.
         *
         * @private
         * @param {string} methodName The name of the `String` case method to use.
         * @returns {Function} Returns the new case function.
         */
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
    
            var strSymbols = hasUnicode(string)
              ? stringToArray(string)
              : undefined;
    
            var chr = strSymbols
              ? strSymbols[0]
              : string.charAt(0);
    
            var trailing = strSymbols
              ? castSlice(strSymbols, 1).join('')
              : string.slice(1);
    
            return chr[methodName]() + trailing;
          };
        }
    
        /**
         * Creates a function like `_.camelCase`.
         *
         * @private
         * @param {Function} callback The function to combine each word.
         * @returns {Function} Returns the new compounder function.
         */
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
          };
        }
    
        /**
         * Creates a function that produces an instance of `Ctor` regardless of
         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
         *
         * @private
         * @param {Function} Ctor The constructor to wrap.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCtor(Ctor) {
          return function() {
            // Use a `switch` statement to work with class constructors. See
            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            // for more details.
            var args = arguments;
            switch (args.length) {
              case 0: return new Ctor;
              case 1: return new Ctor(args[0]);
              case 2: return new Ctor(args[0], args[1]);
              case 3: return new Ctor(args[0], args[1], args[2]);
              case 4: return new Ctor(args[0], args[1], args[2], args[3]);
              case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype),
                result = Ctor.apply(thisBinding, args);
    
            // Mimic the constructor's `return` behavior.
            // See https://es5.github.io/#x13.2.2 for more details.
            return isObject(result) ? result : thisBinding;
          };
        }
    
        /**
         * Creates a function that wraps `func` to enable currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {number} arity The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
    
          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length,
                placeholder = getHolder(wrapper);
    
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
              ? []
              : replaceHolders(args, placeholder);
    
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, undefined,
                args, holders, undefined, undefined, arity - length);
            }
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
    
        /**
         * Creates a `_.find` or `_.findLast` function.
         *
         * @private
         * @param {Function} findIndexFunc The function to find the collection index.
         * @returns {Function} Returns the new find function.
         */
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object(collection);
            if (!isArrayLike(collection)) {
              var iteratee = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) { return iteratee(iterable[key], key, iterable); };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
          };
        }
    
        /**
         * Creates a `_.flow` or `_.flowRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new flow function.
         */
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length,
                index = length,
                prereq = LodashWrapper.prototype.thru;
    
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
    
              var funcName = getFuncName(func),
                  data = funcName == 'wrapper' ? getData(func) : undefined;
    
              if (data && isLaziable(data[0]) &&
                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                    !data[4].length && data[9] == 1
                  ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = (func.length == 1 && isLaziable(func))
                  ? wrapper[funcName]()
                  : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments,
                  value = args[0];
    
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index = 0,
                  result = length ? funcs[index].apply(this, args) : value;
    
              while (++index < length) {
                result = funcs[index].call(this, result);
              }
              return result;
            };
          });
        }
    
        /**
         * Creates a function that wraps `func` to invoke it with optional `this`
         * binding of `thisArg`, partial application, and currying.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [partialsRight] The arguments to append to those provided
         *  to the new function.
         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG,
              isBind = bitmask & WRAP_BIND_FLAG,
              isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
              isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
              isFlip = bitmask & WRAP_FLIP_FLAG,
              Ctor = isBindKey ? undefined : createCtor(func);
    
          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length;
    
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                  holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                args, newHolders, argPos, ary, arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
                fn = isBindKey ? thisBinding[func] : func;
    
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary < length) {
              args.length = ary;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
    
        /**
         * Creates a function like `_.invertBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} toIteratee The function to resolve iteratees.
         * @returns {Function} Returns the new inverter function.
         */
        function createInverter(setter, toIteratee) {
          return function(object, iteratee) {
            return baseInverter(object, setter, toIteratee(iteratee), {});
          };
        }
    
        /**
         * Creates a function that performs a mathematical operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @param {number} [defaultValue] The value used for `undefined` arguments.
         * @returns {Function} Returns the new mathematical operation function.
         */
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result;
            if (value === undefined && other === undefined) {
              return defaultValue;
            }
            if (value !== undefined) {
              result = value;
            }
            if (other !== undefined) {
              if (result === undefined) {
                return other;
              }
              if (typeof value == 'string' || typeof other == 'string') {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result = operator(value, other);
            }
            return result;
          };
        }
    
        /**
         * Creates a function like `_.over`.
         *
         * @private
         * @param {Function} arrayFunc The function to iterate over iteratees.
         * @returns {Function} Returns the new over function.
         */
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee) {
                return apply(iteratee, thisArg, args);
              });
            });
          });
        }
    
        /**
         * Creates the padding for `string` based on `length`. The `chars` string
         * is truncated if the number of characters exceeds `length`.
         *
         * @private
         * @param {number} length The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padding for `string`.
         */
        function createPadding(length, chars) {
          chars = chars === undefined ? ' ' : baseToString(chars);
    
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars)
            ? castSlice(stringToArray(result), 0, length).join('')
            : result.slice(0, length);
        }
    
        /**
         * Creates a function that wraps `func` to invoke it with the `this` binding
         * of `thisArg` and `partials` prepended to the arguments it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} partials The arguments to prepend to those provided to
         *  the new function.
         * @returns {Function} Returns the new wrapped function.
         */
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);
    
          function wrapper() {
            var argsIndex = -1,
                argsLength = arguments.length,
                leftIndex = -1,
                leftLength = partials.length,
                args = Array(leftLength + argsLength),
                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
    
        /**
         * Creates a `_.range` or `_.rangeRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new range function.
         */
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
              end = step = undefined;
            }
            // Ensure the sign of `-0` is preserved.
            start = toFinite(start);
            if (end === undefined) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
    
        /**
         * Creates a function that performs a relational operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @returns {Function} Returns the new relational operation function.
         */
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == 'string' && typeof other == 'string')) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
    
        /**
         * Creates a function that wraps `func` to continue currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {Function} wrapFunc The function to create the `func` wrapper.
         * @param {*} placeholder The placeholder value.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
              newHolders = isCurry ? holders : undefined,
              newHoldersRight = isCurry ? undefined : holders,
              newPartials = isCurry ? partials : undefined,
              newPartialsRight = isCurry ? undefined : partials;
    
          bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
    
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
            newHoldersRight, argPos, ary, arity
          ];
    
          var result = wrapFunc.apply(undefined, newData);
          if (isLaziable(func)) {
            setData(result, newData);
          }
          result.placeholder = placeholder;
          return setWrapToString(result, func, bitmask);
        }
    
        /**
         * Creates a function like `_.round`.
         *
         * @private
         * @param {string} methodName The name of the `Math` method to use when rounding.
         * @returns {Function} Returns the new round function.
         */
        function createRound(methodName) {
          var func = Math[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              // Shift with exponential notation to avoid floating-point issues.
              // See [MDN](https://mdn.io/round#Examples) for more details.
              var pair = (toString(number) + 'e').split('e'),
                  value = func(pair[0] + 'e' + (+pair[1] + precision));
    
              pair = (toString(value) + 'e').split('e');
              return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(number);
          };
        }
    
        /**
         * Creates a set object of `values`.
         *
         * @private
         * @param {Array} values The values to add to the set.
         * @returns {Object} Returns the new set.
         */
        var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
          return new Set(values);
        };
    
        /**
         * Creates a `_.toPairs` or `_.toPairsIn` function.
         *
         * @private
         * @param {Function} keysFunc The function to get the keys of a given object.
         * @returns {Function} Returns the new pairs function.
         */
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
    
        /**
         * Creates a function that either curries or invokes `func` with optional
         * `this` binding and partially applied arguments.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags.
         *    1 - `_.bind`
         *    2 - `_.bindKey`
         *    4 - `_.curry` or `_.curryRight` of a bound function
         *    8 - `_.curry`
         *   16 - `_.curryRight`
         *   32 - `_.partial`
         *   64 - `_.partialRight`
         *  128 - `_.rearg`
         *  256 - `_.ary`
         *  512 - `_.flip`
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to be partially applied.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined;
          }
          ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
          arity = arity === undefined ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
    
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
                holdersRight = holders;
    
            partials = holders = undefined;
          }
          var data = isBindKey ? undefined : getData(func);
    
          var newData = [
            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
            argPos, ary, arity
          ];
    
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined
            ? (isBindKey ? 0 : func.length)
            : nativeMax(newData[9] - length, 0);
    
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result = createPartial(func, bitmask, thisArg, partials);
          } else {
            result = createHybrid.apply(undefined, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result, newData), func, bitmask);
        }
    
        /**
         * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
         * of source objects to the destination object for all destination properties
         * that resolve to `undefined`.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to assign.
         * @param {Object} object The parent object of `objValue`.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined ||
              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            return srcValue;
          }
          return objValue;
        }
    
        /**
         * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
         * objects into destination objects that are passed thru.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to merge.
         * @param {Object} object The parent object of `objValue`.
         * @param {Object} source The parent object of `srcValue`.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
            stack['delete'](srcValue);
          }
          return objValue;
        }
    
        /**
         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
         * objects.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {string} key The key of the property to inspect.
         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
         */
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined : value;
        }
    
        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length;
    
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(array);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var index = -1,
              result = true,
              seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;
    
          stack.set(array, other);
          stack.set(other, array);
    
          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
                othValue = other[index];
    
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
              if (!arraySome(other, function(othValue, othIndex) {
                    if (!cacheHas(seen, othIndex) &&
                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                      return seen.push(othIndex);
                    }
                  })) {
                result = false;
                break;
              }
            } else if (!(
                  arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )) {
              result = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result;
        }
    
        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if ((object.byteLength != other.byteLength) ||
                  (object.byteOffset != other.byteOffset)) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
    
            case arrayBufferTag:
              if ((object.byteLength != other.byteLength) ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;
    
            case boolTag:
            case dateTag:
            case numberTag:
              // Coerce booleans to `1` or `0` and dates to milliseconds.
              // Invalid dates are coerced to `NaN`.
              return eq(+object, +other);
    
            case errorTag:
              return object.name == other.name && object.message == other.message;
    
            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings, primitives and objects,
              // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
              // for more details.
              return object == (other + '');
    
            case mapTag:
              var convert = mapToArray;
    
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
    
              if (object.size != other.size && !isPartial) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
    
              // Recursively compare objects (susceptible to call stack limits).
              stack.set(object, other);
              var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack['delete'](object);
              return result;
    
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
    
        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length;
    
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);
    
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
                othValue = other[key];
    
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined
                  ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                  : compared
                )) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor,
                othCtor = other.constructor;
    
            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
                ('constructor' in object && 'constructor' in other) &&
                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                  typeof othCtor == 'function' && othCtor instanceof othCtor)) {
              result = false;
            }
          }
          stack['delete'](object);
          stack['delete'](other);
          return result;
        }
    
        /**
         * A specialized version of `baseRest` which flattens the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        function flatRest(func) {
          return setToString(overRest(func, undefined, flatten), func + '');
        }
    
        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
    
        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
    
        /**
         * Gets metadata for `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {*} Returns the metadata for `func`.
         */
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
    
        /**
         * Gets the name of `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {string} Returns the function name.
         */
        function getFuncName(func) {
          var result = (func.name + ''),
              array = realNames[result],
              length = hasOwnProperty.call(realNames, result) ? array.length : 0;
    
          while (length--) {
            var data = array[length],
                otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result;
        }
    
        /**
         * Gets the argument placeholder value for `func`.
         *
         * @private
         * @param {Function} func The function to inspect.
         * @returns {*} Returns the placeholder value.
         */
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
          return object.placeholder;
        }
    
        /**
         * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
         * this function returns the custom method, otherwise it returns `baseIteratee`.
         * If arguments are provided, the chosen function is invoked with them and
         * its result is returned.
         *
         * @private
         * @param {*} [value] The value to convert to an iteratee.
         * @param {number} [arity] The arity of the created iteratee.
         * @returns {Function} Returns the chosen function or its result.
         */
        function getIteratee() {
          var result = lodash.iteratee || iteratee;
          result = result === iteratee ? baseIteratee : result;
          return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
    
        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }
    
        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = keys(object),
              length = result.length;
    
          while (length--) {
            var key = result[length],
                value = object[key];
    
            result[length] = [key, value, isStrictComparable(value)];
          }
          return result;
        }
    
        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }
    
        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag];
    
          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) {}
    
          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }
    
        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
    
        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols(object));
            object = getPrototype(object);
          }
          return result;
        };
    
        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;
    
        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set) != setTag) ||
            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
          getTag = function(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : '';
    
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString: return dataViewTag;
                case mapCtorString: return mapTag;
                case promiseCtorString: return promiseTag;
                case setCtorString: return setTag;
                case weakMapCtorString: return weakMapTag;
              }
            }
            return result;
          };
        }
    
        /**
         * Gets the view, applying any `transforms` to the `start` and `end` positions.
         *
         * @private
         * @param {number} start The start of the view.
         * @param {number} end The end of the view.
         * @param {Array} transforms The transformations to apply to the view.
         * @returns {Object} Returns an object containing the `start` and `end`
         *  positions of the view.
         */
        function getView(start, end, transforms) {
          var index = -1,
              length = transforms.length;
    
          while (++index < length) {
            var data = transforms[index],
                size = data.size;
    
            switch (data.type) {
              case 'drop':      start += size; break;
              case 'dropRight': end -= size; break;
              case 'take':      end = nativeMin(end, start + size); break;
              case 'takeRight': start = nativeMax(start, end - size); break;
            }
          }
          return { 'start': start, 'end': end };
        }
    
        /**
         * Extracts wrapper details from the `source` body comment.
         *
         * @private
         * @param {string} source The source to inspect.
         * @returns {Array} Returns the wrapper details.
         */
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
    
        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
    
          var index = -1,
              length = path.length,
              result = false;
    
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) &&
            (isArray(object) || isArguments(object));
        }
    
        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
              result = new array.constructor(length);
    
          // Add properties assigned by `RegExp#exec`.
          if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }
    
        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return (typeof object.constructor == 'function' && !isPrototype(object))
            ? baseCreate(getPrototype(object))
            : {};
        }
    
        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
    
            case boolTag:
            case dateTag:
              return new Ctor(+object);
    
            case dataViewTag:
              return cloneDataView(object, isDeep);
    
            case float32Tag: case float64Tag:
            case int8Tag: case int16Tag: case int32Tag:
            case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
              return cloneTypedArray(object, isDeep);
    
            case mapTag:
              return new Ctor;
    
            case numberTag:
            case stringTag:
              return new Ctor(object);
    
            case regexpTag:
              return cloneRegExp(object);
    
            case setTag:
              return new Ctor;
    
            case symbolTag:
              return cloneSymbol(object);
          }
        }
    
        /**
         * Inserts wrapper `details` in a comment at the top of the `source` body.
         *
         * @private
         * @param {string} source The source to modify.
         * @returns {Array} details The details to insert.
         * @returns {string} Returns the modified source.
         */
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }
    
        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
    
        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
    
          return !!length &&
            (type == 'number' ||
              (type != 'symbol' && reIsUint.test(value))) &&
                (value > -1 && value % 1 == 0 && value < length);
        }
    
        /**
         * Checks if the given arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
         *  else `false`.
         */
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
              ) {
            return eq(object[index], value);
          }
          return false;
        }
    
        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == 'number' || type == 'symbol' || type == 'boolean' ||
              value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
            (object != null && value in Object(object));
        }
    
        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = typeof value;
          return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
            ? (value !== '__proto__')
            : (value === null);
        }
    
        /**
         * Checks if `func` has a lazy counterpart.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
         *  else `false`.
         */
        function isLaziable(func) {
          var funcName = getFuncName(func),
              other = lodash[funcName];
    
          if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
    
        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && (maskSrcKey in func);
        }
    
        /**
         * Checks if `func` is capable of being masked.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
         */
        var isMaskable = coreJsData ? isFunction : stubFalse;
    
        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
              proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
    
          return value === proto;
        }
    
        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
    
        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue &&
              (srcValue !== undefined || (key in Object(object)));
          };
        }
    
        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
    
          var cache = result.cache;
          return result;
        }
    
        /**
         * Merges the function metadata of `source` into `data`.
         *
         * Merging metadata reduces the number of wrappers used to invoke a function.
         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
         * may be applied regardless of execution order. Methods like `_.ary` and
         * `_.rearg` modify function arguments, making the order in which they are
         * executed important, preventing the merging of metadata. However, we make
         * an exception for a safe combined case where curried functions have `_.ary`
         * and or `_.rearg` applied.
         *
         * @private
         * @param {Array} data The destination metadata.
         * @param {Array} source The source metadata.
         * @returns {Array} Returns `data`.
         */
        function mergeData(data, source) {
          var bitmask = data[1],
              srcBitmask = source[1],
              newBitmask = bitmask | srcBitmask,
              isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
    
          var isCombo =
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));
    
          // Exit early if metadata can't be merged.
          if (!(isCommon || isCombo)) {
            return data;
          }
          // Use source `thisArg` if available.
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            // Set when currying a bound function.
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          // Compose partial arguments.
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          // Compose partial right arguments.
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          // Use source `argPos` if available.
          value = source[7];
          if (value) {
            data[7] = value;
          }
          // Use source `ary` if it's smaller.
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          // Use source `arity` if one is not provided.
          if (data[9] == null) {
            data[9] = source[9];
          }
          // Use source `func` and merge bitmasks.
          data[0] = source[0];
          data[1] = newBitmask;
    
          return data;
        }
    
        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }
    
        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
    
        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
          start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
          return function() {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);
    
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }
    
        /**
         * Gets the parent value at `path` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} path The path to get the parent value of.
         * @returns {*} Returns the parent value.
         */
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
    
        /**
         * Reorder `array` according to the specified indexes where the element at
         * the first index is assigned as the first element, the element at
         * the second index is assigned as the second element, and so on.
         *
         * @private
         * @param {Array} array The array to reorder.
         * @param {Array} indexes The arranged array indexes.
         * @returns {Array} Returns `array`.
         */
        function reorder(array, indexes) {
          var arrLength = array.length,
              length = nativeMin(indexes.length, arrLength),
              oldArray = copyArray(array);
    
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
          }
          return array;
        }
    
        /**
         * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function safeGet(object, key) {
          if (key === 'constructor' && typeof object[key] === 'function') {
            return;
          }
    
          if (key == '__proto__') {
            return;
          }
    
          return object[key];
        }
    
        /**
         * Sets metadata for `func`.
         *
         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
         * period of time, it will trip its breaker and transition to an identity
         * function to avoid garbage collection pauses in V8. See
         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
         * for more details.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var setData = shortOut(baseSetData);
    
        /**
         * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        var setTimeout = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
    
        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);
    
        /**
         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
         * with wrapper details in a comment at the top of the source body.
         *
         * @private
         * @param {Function} wrapper The function to modify.
         * @param {Function} reference The reference function.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Function} Returns `wrapper`.
         */
        function setWrapToString(wrapper, reference, bitmask) {
          var source = (reference + '');
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
    
        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
          var count = 0,
              lastCalled = 0;
    
          return function() {
            var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled);
    
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined, arguments);
          };
        }
    
        /**
         * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @param {number} [size=array.length] The size of `array`.
         * @returns {Array} Returns `array`.
         */
        function shuffleSelf(array, size) {
          var index = -1,
              length = array.length,
              lastIndex = length - 1;
    
          size = size === undefined ? length : size;
          while (++index < size) {
            var rand = baseRandom(index, lastIndex),
                value = array[rand];
    
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size;
          return array;
        }
    
        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function(string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push('');
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
          });
          return result;
        });
    
        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }
    
        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return (func + '');
            } catch (e) {}
          }
          return '';
        }
    
        /**
         * Updates wrapper `details` based on `bitmask` flags.
         *
         * @private
         * @returns {Array} details The details to modify.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Array} Returns `details`.
         */
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = '_.' + pair[0];
            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
    
        /**
         * Creates a clone of `wrapper`.
         *
         * @private
         * @param {Object} wrapper The wrapper to clone.
         * @returns {Object} Returns the cloned wrapper.
         */
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result.__actions__ = copyArray(wrapper.__actions__);
          result.__index__  = wrapper.__index__;
          result.__values__ = wrapper.__values__;
          return result;
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates an array of elements split into groups the length of `size`.
         * If `array` can't be split evenly, the final chunk will be the remaining
         * elements.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to process.
         * @param {number} [size=1] The length of each chunk
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the new array of chunks.
         * @example
         *
         * _.chunk(['a', 'b', 'c', 'd'], 2);
         * // => [['a', 'b'], ['c', 'd']]
         *
         * _.chunk(['a', 'b', 'c', 'd'], 3);
         * // => [['a', 'b', 'c'], ['d']]
         */
        function chunk(array, size, guard) {
          if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
            size = 1;
          } else {
            size = nativeMax(toInteger(size), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size < 1) {
            return [];
          }
          var index = 0,
              resIndex = 0,
              result = Array(nativeCeil(length / size));
    
          while (index < length) {
            result[resIndex++] = baseSlice(array, index, (index += size));
          }
          return result;
        }
    
        /**
         * Creates an array with all falsey values removed. The values `false`, `null`,
         * `0`, `""`, `undefined`, and `NaN` are falsey.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to compact.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.compact([0, 1, false, 2, '', 3]);
         * // => [1, 2, 3]
         */
        function compact(array) {
          var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];
    
          while (++index < length) {
            var value = array[index];
            if (value) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
    
        /**
         * Creates a new array concatenating `array` with any additional arrays
         * and/or values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to concatenate.
         * @param {...*} [values] The values to concatenate.
         * @returns {Array} Returns the new concatenated array.
         * @example
         *
         * var array = [1];
         * var other = _.concat(array, 2, [3], [[4]]);
         *
         * console.log(other);
         * // => [1, 2, 3, [4]]
         *
         * console.log(array);
         * // => [1]
         */
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array(length - 1),
              array = arguments[0],
              index = length;
    
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
    
        /**
         * Creates an array of `array` values not included in the other given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * **Note:** Unlike `_.pullAll`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.without, _.xor
         * @example
         *
         * _.difference([2, 1], [2, 3]);
         * // => [1]
         */
        var difference = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
            : [];
        });
    
        /**
         * This method is like `_.difference` except that it accepts `iteratee` which
         * is invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var differenceBy = baseRest(function(array, values) {
          var iteratee = last(values);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
            : [];
        });
    
        /**
         * This method is like `_.difference` except that it accepts `comparator`
         * which is invoked to compare elements of `array` to `values`. The order and
         * references of result values are determined by the first array. The comparator
         * is invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         *
         * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }]
         */
        var differenceWith = baseRest(function(array, values) {
          var comparator = last(values);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
            : [];
        });
    
        /**
         * Creates a slice of `array` with `n` elements dropped from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.drop([1, 2, 3]);
         * // => [2, 3]
         *
         * _.drop([1, 2, 3], 2);
         * // => [3]
         *
         * _.drop([1, 2, 3], 5);
         * // => []
         *
         * _.drop([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
    
        /**
         * Creates a slice of `array` with `n` elements dropped from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropRight([1, 2, 3]);
         * // => [1, 2]
         *
         * _.dropRight([1, 2, 3], 2);
         * // => [1]
         *
         * _.dropRight([1, 2, 3], 5);
         * // => []
         *
         * _.dropRight([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
    
        /**
         * Creates a slice of `array` excluding elements dropped from the end.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.dropRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropRightWhile(users, ['active', false]);
         * // => objects for ['barney']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropRightWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true, true)
            : [];
        }
    
        /**
         * Creates a slice of `array` excluding elements dropped from the beginning.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.dropWhile(users, function(o) { return !o.active; });
         * // => objects for ['pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropWhile(users, ['active', false]);
         * // => objects for ['pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true)
            : [];
        }
    
        /**
         * Fills elements of `array` with `value` from `start` up to, but not
         * including, `end`.
         *
         * **Note:** This method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Array
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.fill(array, 'a');
         * console.log(array);
         * // => ['a', 'a', 'a']
         *
         * _.fill(Array(3), 2);
         * // => [2, 2, 2]
         *
         * _.fill([4, 6, 8, 10], '*', 1, 3);
         * // => [4, '*', '*', 10]
         */
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
    
        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(o) { return o.user == 'barney'; });
         * // => 0
         *
         * // The `_.matches` iteratee shorthand.
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findIndex(users, ['active', false]);
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.findIndex(users, 'active');
         * // => 2
         */
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
    
        /**
         * This method is like `_.findIndex` except that it iterates over elements
         * of `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
         * // => 2
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
         * // => 0
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastIndex(users, ['active', false]);
         * // => 2
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastIndex(users, 'active');
         * // => 0
         */
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = fromIndex < 0
              ? nativeMax(length + index, 0)
              : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
    
        /**
         * Flattens `array` a single level deep.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, [3, [4]], 5]]);
         * // => [1, 2, [3, [4]], 5]
         */
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
    
        /**
         * Recursively flattens `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flattenDeep([1, [2, [3, [4]], 5]]);
         * // => [1, 2, 3, 4, 5]
         */
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
    
        /**
         * Recursively flatten `array` up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * var array = [1, [2, [3, [4]], 5]];
         *
         * _.flattenDepth(array, 1);
         * // => [1, 2, [3, [4]], 5]
         *
         * _.flattenDepth(array, 2);
         * // => [1, 2, 3, [4], 5]
         */
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
    
        /**
         * The inverse of `_.toPairs`; this method returns an object composed
         * from key-value `pairs`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} pairs The key-value pairs.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.fromPairs([['a', 1], ['b', 2]]);
         * // => { 'a': 1, 'b': 2 }
         */
        function fromPairs(pairs) {
          var index = -1,
              length = pairs == null ? 0 : pairs.length,
              result = {};
    
          while (++index < length) {
            var pair = pairs[index];
            result[pair[0]] = pair[1];
          }
          return result;
        }
    
        /**
         * Gets the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias first
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the first element of `array`.
         * @example
         *
         * _.head([1, 2, 3]);
         * // => 1
         *
         * _.head([]);
         * // => undefined
         */
        function head(array) {
          return (array && array.length) ? array[0] : undefined;
        }
    
        /**
         * Gets the index at which the first occurrence of `value` is found in `array`
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. If `fromIndex` is negative, it's used as the
         * offset from the end of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.indexOf([1, 2, 1, 2], 2);
         * // => 1
         *
         * // Search from the `fromIndex`.
         * _.indexOf([1, 2, 1, 2], 2, 2);
         * // => 3
         */
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
    
        /**
         * Gets all but the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.initial([1, 2, 3]);
         * // => [1, 2]
         */
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
    
        /**
         * Creates an array of unique values that are included in all given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersection([2, 1], [2, 3]);
         * // => [2]
         */
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped)
            : [];
        });
    
        /**
         * This method is like `_.intersection` except that it accepts `iteratee`
         * which is invoked for each element of each `arrays` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [2.1]
         *
         * // The `_.property` iteratee shorthand.
         * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }]
         */
        var intersectionBy = baseRest(function(arrays) {
          var iteratee = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);
    
          if (iteratee === last(mapped)) {
            iteratee = undefined;
          } else {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, getIteratee(iteratee, 2))
            : [];
        });
    
        /**
         * This method is like `_.intersection` except that it accepts `comparator`
         * which is invoked to compare elements of `arrays`. The order and references
         * of result values are determined by the first array. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.intersectionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }]
         */
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);
    
          comparator = typeof comparator == 'function' ? comparator : undefined;
          if (comparator) {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, undefined, comparator)
            : [];
        });
    
        /**
         * Converts all elements in `array` into a string separated by `separator`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to convert.
         * @param {string} [separator=','] The element separator.
         * @returns {string} Returns the joined string.
         * @example
         *
         * _.join(['a', 'b', 'c'], '~');
         * // => 'a~b~c'
         */
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }
    
        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined;
        }
    
        /**
         * This method is like `_.indexOf` except that it iterates over elements of
         * `array` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.lastIndexOf([1, 2, 1, 2], 2);
         * // => 3
         *
         * // Search from the `fromIndex`.
         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
         * // => 1
         */
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }
    
        /**
         * Gets the element at index `n` of `array`. If `n` is negative, the nth
         * element from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.11.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=0] The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         *
         * _.nth(array, 1);
         * // => 'b'
         *
         * _.nth(array, -2);
         * // => 'c';
         */
        function nth(array, n) {
          return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
        }
    
        /**
         * Removes all given values from `array` using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
         * to remove elements from an array by predicate.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...*} [values] The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pull(array, 'a', 'c');
         * console.log(array);
         * // => ['b', 'b']
         */
        var pull = baseRest(pullAll);
    
        /**
         * This method is like `_.pull` except that it accepts an array of values to remove.
         *
         * **Note:** Unlike `_.difference`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pullAll(array, ['a', 'c']);
         * console.log(array);
         * // => ['b', 'b']
         */
        function pullAll(array, values) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values)
            : array;
        }
    
        /**
         * This method is like `_.pullAll` except that it accepts `iteratee` which is
         * invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The iteratee is invoked with one argument: (value).
         *
         * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
         *
         * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
         * console.log(array);
         * // => [{ 'x': 2 }]
         */
        function pullAllBy(array, values, iteratee) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, getIteratee(iteratee, 2))
            : array;
        }
    
        /**
         * This method is like `_.pullAll` except that it accepts `comparator` which
         * is invoked to compare elements of `array` to `values`. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
         *
         * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
         * console.log(array);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
         */
        function pullAllWith(array, values, comparator) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, undefined, comparator)
            : array;
        }
    
        /**
         * Removes elements from `array` corresponding to `indexes` and returns an
         * array of removed elements.
         *
         * **Note:** Unlike `_.at`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...(number|number[])} [indexes] The indexes of elements to remove.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         * var pulled = _.pullAt(array, [1, 3]);
         *
         * console.log(array);
         * // => ['a', 'c']
         *
         * console.log(pulled);
         * // => ['b', 'd']
         */
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length,
              result = baseAt(array, indexes);
    
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
    
          return result;
        });
    
        /**
         * Removes all elements from `array` that `predicate` returns truthy for
         * and returns an array of the removed elements. The predicate is invoked
         * with three arguments: (value, index, array).
         *
         * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
         * to pull elements from an array by value.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = [1, 2, 3, 4];
         * var evens = _.remove(array, function(n) {
         *   return n % 2 == 0;
         * });
         *
         * console.log(array);
         * // => [1, 3]
         *
         * console.log(evens);
         * // => [2, 4]
         */
        function remove(array, predicate) {
          var result = [];
          if (!(array && array.length)) {
            return result;
          }
          var index = -1,
              indexes = [],
              length = array.length;
    
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result;
        }
    
        /**
         * Reverses `array` so that the first element becomes the last, the second
         * element becomes the second to last, and so on.
         *
         * **Note:** This method mutates `array` and is based on
         * [`Array#reverse`](https://mdn.io/Array/reverse).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.reverse(array);
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
    
        /**
         * Creates a slice of `array` from `start` up to, but not including, `end`.
         *
         * **Note:** This method is used instead of
         * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
         * returned.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          }
          else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
    
        /**
         * Uses a binary search to determine the lowest index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedIndex([30, 50], 40);
         * // => 1
         */
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
    
        /**
         * This method is like `_.sortedIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
         * // => 0
         */
        function sortedIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
    
        /**
         * This method is like `_.indexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
         * // => 1
         */
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
    
        /**
         * This method is like `_.sortedIndex` except that it returns the highest
         * index at which `value` should be inserted into `array` in order to
         * maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
         * // => 4
         */
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
    
        /**
         * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 1
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
         * // => 1
         */
        function sortedLastIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
    
        /**
         * This method is like `_.lastIndexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
         * // => 3
         */
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
    
        /**
         * This method is like `_.uniq` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniq([1, 1, 2]);
         * // => [1, 2]
         */
        function sortedUniq(array) {
          return (array && array.length)
            ? baseSortedUniq(array)
            : [];
        }
    
        /**
         * This method is like `_.uniqBy` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
         * // => [1.1, 2.3]
         */
        function sortedUniqBy(array, iteratee) {
          return (array && array.length)
            ? baseSortedUniq(array, getIteratee(iteratee, 2))
            : [];
        }
    
        /**
         * Gets all but the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.tail([1, 2, 3]);
         * // => [2, 3]
         */
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
    
        /**
         * Creates a slice of `array` with `n` elements taken from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.take([1, 2, 3]);
         * // => [1]
         *
         * _.take([1, 2, 3], 2);
         * // => [1, 2]
         *
         * _.take([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.take([1, 2, 3], 0);
         * // => []
         */
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
    
        /**
         * Creates a slice of `array` with `n` elements taken from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeRight([1, 2, 3]);
         * // => [3]
         *
         * _.takeRight([1, 2, 3], 2);
         * // => [2, 3]
         *
         * _.takeRight([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.takeRight([1, 2, 3], 0);
         * // => []
         */
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
    
        /**
         * Creates a slice of `array` with elements taken from the end. Elements are
         * taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.takeRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeRightWhile(users, ['active', false]);
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeRightWhile(users, 'active');
         * // => []
         */
        function takeRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), false, true)
            : [];
        }
    
        /**
         * Creates a slice of `array` with elements taken from the beginning. Elements
         * are taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.takeWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeWhile(users, ['active', false]);
         * // => objects for ['barney', 'fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeWhile(users, 'active');
         * // => []
         */
        function takeWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3))
            : [];
        }
    
        /**
         * Creates an array of unique values, in order, from all given arrays using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.union([2], [1, 2]);
         * // => [2, 1]
         */
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
    
        /**
         * This method is like `_.union` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which uniqueness is computed. Result values are chosen from the first
         * array in which the value occurs. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.unionBy([2.1], [1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        var unionBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
    
        /**
         * This method is like `_.union` except that it accepts `comparator` which
         * is invoked to compare elements of `arrays`. Result values are chosen from
         * the first array in which the value occurs. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.unionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
    
        /**
         * Creates a duplicate-free version of an array, using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons, in which only the first occurrence of each element
         * is kept. The order of result values is determined by the order they occur
         * in the array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniq([2, 1, 2]);
         * // => [2, 1]
         */
        function uniq(array) {
          return (array && array.length) ? baseUniq(array) : [];
        }
    
        /**
         * This method is like `_.uniq` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * uniqueness is computed. The order of result values is determined by the
         * order they occur in the array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        function uniqBy(array, iteratee) {
          return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
    
        /**
         * This method is like `_.uniq` except that it accepts `comparator` which
         * is invoked to compare elements of `array`. The order of result values is
         * determined by the order they occur in the array.The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.uniqWith(objects, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
         */
        function uniqWith(array, comparator) {
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
        }
    
        /**
         * This method is like `_.zip` except that it accepts an array of grouped
         * elements and creates an array regrouping the elements to their pre-zip
         * configuration.
         *
         * @static
         * @memberOf _
         * @since 1.2.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         *
         * _.unzip(zipped);
         * // => [['a', 'b'], [1, 2], [true, false]]
         */
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
    
        /**
         * This method is like `_.unzip` except that it accepts `iteratee` to specify
         * how regrouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  regrouped values.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
         * // => [[1, 10, 100], [2, 20, 200]]
         *
         * _.unzipWith(zipped, _.add);
         * // => [3, 30, 300]
         */
        function unzipWith(array, iteratee) {
          if (!(array && array.length)) {
            return [];
          }
          var result = unzip(array);
          if (iteratee == null) {
            return result;
          }
          return arrayMap(result, function(group) {
            return apply(iteratee, undefined, group);
          });
        }
    
        /**
         * Creates an array excluding all given values using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.pull`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...*} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.xor
         * @example
         *
         * _.without([2, 1, 2, 3], 1, 2);
         * // => [3]
         */
        var without = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, values)
            : [];
        });
    
        /**
         * Creates an array of unique values that is the
         * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
         * of the given arrays. The order of result values is determined by the order
         * they occur in the arrays.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.without
         * @example
         *
         * _.xor([2, 1], [2, 3]);
         * // => [1, 3]
         */
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
    
        /**
         * This method is like `_.xor` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which by which they're compared. The order of result values is determined
         * by the order they occur in the arrays. The iteratee is invoked with one
         * argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2, 3.4]
         *
         * // The `_.property` iteratee shorthand.
         * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var xorBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
    
        /**
         * This method is like `_.xor` except that it accepts `comparator` which is
         * invoked to compare elements of `arrays`. The order of result values is
         * determined by the order they occur in the arrays. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.xorWith(objects, others, _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
    
        /**
         * Creates an array of grouped elements, the first of which contains the
         * first elements of the given arrays, the second of which contains the
         * second elements of the given arrays, and so on.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         */
        var zip = baseRest(unzip);
    
        /**
         * This method is like `_.fromPairs` except that it accepts two arrays,
         * one of property identifiers and one of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 0.4.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObject(['a', 'b'], [1, 2]);
         * // => { 'a': 1, 'b': 2 }
         */
        function zipObject(props, values) {
          return baseZipObject(props || [], values || [], assignValue);
        }
    
        /**
         * This method is like `_.zipObject` except that it supports property paths.
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
         * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
         */
        function zipObjectDeep(props, values) {
          return baseZipObject(props || [], values || [], baseSet);
        }
    
        /**
         * This method is like `_.zip` except that it accepts `iteratee` to specify
         * how grouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  grouped values.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
         *   return a + b + c;
         * });
         * // => [111, 222]
         */
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length,
              iteratee = length > 1 ? arrays[length - 1] : undefined;
    
          iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
          return unzipWith(arrays, iteratee);
        });
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a `lodash` wrapper instance that wraps `value` with explicit method
         * chain sequences enabled. The result of such sequences must be unwrapped
         * with `_#value`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Seq
         * @param {*} value The value to wrap.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36 },
         *   { 'user': 'fred',    'age': 40 },
         *   { 'user': 'pebbles', 'age': 1 }
         * ];
         *
         * var youngest = _
         *   .chain(users)
         *   .sortBy('age')
         *   .map(function(o) {
         *     return o.user + ' is ' + o.age;
         *   })
         *   .head()
         *   .value();
         * // => 'pebbles is 1'
         */
        function chain(value) {
          var result = lodash(value);
          result.__chain__ = true;
          return result;
        }
    
        /**
         * This method invokes `interceptor` and returns `value`. The interceptor
         * is invoked with one argument; (value). The purpose of this method is to
         * "tap into" a method chain sequence in order to modify intermediate results.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns `value`.
         * @example
         *
         * _([1, 2, 3])
         *  .tap(function(array) {
         *    // Mutate input array.
         *    array.pop();
         *  })
         *  .reverse()
         *  .value();
         * // => [2, 1]
         */
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
    
        /**
         * This method is like `_.tap` except that it returns the result of `interceptor`.
         * The purpose of this method is to "pass thru" values replacing intermediate
         * results in a method chain sequence.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns the result of `interceptor`.
         * @example
         *
         * _('  abc  ')
         *  .chain()
         *  .trim()
         *  .thru(function(value) {
         *    return [value];
         *  })
         *  .value();
         * // => ['abc']
         */
        function thru(value, interceptor) {
          return interceptor(value);
        }
    
        /**
         * This method is the wrapper version of `_.at`.
         *
         * @name at
         * @memberOf _
         * @since 1.0.0
         * @category Seq
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _(object).at(['a[0].b.c', 'a[1]']).value();
         * // => [3, 4]
         */
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length,
              start = length ? paths[0] : 0,
              value = this.__wrapped__,
              interceptor = function(object) { return baseAt(object, paths); };
    
          if (length > 1 || this.__actions__.length ||
              !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            'func': thru,
            'args': [interceptor],
            'thisArg': undefined
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined);
            }
            return array;
          });
        });
    
        /**
         * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
         *
         * @name chain
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * // A sequence without explicit chaining.
         * _(users).head();
         * // => { 'user': 'barney', 'age': 36 }
         *
         * // A sequence with explicit chaining.
         * _(users)
         *   .chain()
         *   .head()
         *   .pick('user')
         *   .value();
         * // => { 'user': 'barney' }
         */
        function wrapperChain() {
          return chain(this);
        }
    
        /**
         * Executes the chain sequence and returns the wrapped result.
         *
         * @name commit
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2];
         * var wrapped = _(array).push(3);
         *
         * console.log(array);
         * // => [1, 2]
         *
         * wrapped = wrapped.commit();
         * console.log(array);
         * // => [1, 2, 3]
         *
         * wrapped.last();
         * // => 3
         *
         * console.log(array);
         * // => [1, 2, 3]
         */
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
    
        /**
         * Gets the next value on a wrapped object following the
         * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
         *
         * @name next
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the next iterator value.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 1 }
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 2 }
         *
         * wrapped.next();
         * // => { 'done': true, 'value': undefined }
         */
        function wrapperNext() {
          if (this.__values__ === undefined) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length,
              value = done ? undefined : this.__values__[this.__index__++];
    
          return { 'done': done, 'value': value };
        }
    
        /**
         * Enables the wrapper to be iterable.
         *
         * @name Symbol.iterator
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the wrapper object.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped[Symbol.iterator]() === wrapped;
         * // => true
         *
         * Array.from(wrapped);
         * // => [1, 2]
         */
        function wrapperToIterator() {
          return this;
        }
    
        /**
         * Creates a clone of the chain sequence planting `value` as the wrapped value.
         *
         * @name plant
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @param {*} value The value to plant.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2]).map(square);
         * var other = wrapped.plant([3, 4]);
         *
         * other.value();
         * // => [9, 16]
         *
         * wrapped.value();
         * // => [1, 4]
         */
        function wrapperPlant(value) {
          var result,
              parent = this;
    
          while (parent instanceof baseLodash) {
            var clone = wrapperClone(parent);
            clone.__index__ = 0;
            clone.__values__ = undefined;
            if (result) {
              previous.__wrapped__ = clone;
            } else {
              result = clone;
            }
            var previous = clone;
            parent = parent.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result;
        }
    
        /**
         * This method is the wrapper version of `_.reverse`.
         *
         * **Note:** This method mutates the wrapped array.
         *
         * @name reverse
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _(array).reverse().value()
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              'func': thru,
              'args': [reverse],
              'thisArg': undefined
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
    
        /**
         * Executes the chain sequence to resolve the unwrapped value.
         *
         * @name value
         * @memberOf _
         * @since 0.1.0
         * @alias toJSON, valueOf
         * @category Seq
         * @returns {*} Returns the resolved unwrapped value.
         * @example
         *
         * _([1, 2, 3]).value();
         * // => [1, 2, 3]
         */
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the number of times the key was returned by `iteratee`. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.countBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': 1, '6': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.countBy(['one', 'two', 'three'], 'length');
         * // => { '3': 2, '5': 1 }
         */
        var countBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            ++result[key];
          } else {
            baseAssignValue(result, key, 1);
          }
        });
    
        /**
         * Checks if `predicate` returns truthy for **all** elements of `collection`.
         * Iteration is stopped once `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * **Note:** This method returns `true` for
         * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
         * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
         * elements of empty collections.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         * @example
         *
         * _.every([true, 1, null, 'yes'], Boolean);
         * // => false
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.every(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.every(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.every(users, 'active');
         * // => false
         */
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
          }
          return func(collection, getIteratee(predicate, 3));
        }
    
        /**
         * Iterates over elements of `collection`, returning an array of all elements
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * **Note:** Unlike `_.remove`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.reject
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * _.filter(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, { 'age': 36, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.filter(users, 'active');
         * // => objects for ['barney']
         */
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
    
        /**
         * Iterates over elements of `collection`, returning the first element
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': true },
         *   { 'user': 'fred',    'age': 40, 'active': false },
         *   { 'user': 'pebbles', 'age': 1,  'active': true }
         * ];
         *
         * _.find(users, function(o) { return o.age < 40; });
         * // => object for 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.find(users, { 'age': 1, 'active': true });
         * // => object for 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.find(users, ['active', false]);
         * // => object for 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.find(users, 'active');
         * // => object for 'barney'
         */
        var find = createFind(findIndex);
    
        /**
         * This method is like `_.find` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=collection.length-1] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * _.findLast([1, 2, 3, 4], function(n) {
         *   return n % 2 == 1;
         * });
         * // => 3
         */
        var findLast = createFind(findLastIndex);
    
        /**
         * Creates a flattened array of values by running each element in `collection`
         * thru `iteratee` and flattening the mapped results. The iteratee is invoked
         * with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [n, n];
         * }
         *
         * _.flatMap([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMap(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), 1);
        }
    
        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDeep([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMapDeep(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), INFINITY);
        }
    
        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDepth([1, 2], duplicate, 2);
         * // => [[1, 1], [2, 2]]
         */
        function flatMapDepth(collection, iteratee, depth) {
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee), depth);
        }
    
        /**
         * Iterates over elements of `collection` and invokes `iteratee` for each element.
         * The iteratee is invoked with three arguments: (value, index|key, collection).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * **Note:** As with other "Collections" methods, objects with a "length"
         * property are iterated like arrays. To avoid this behavior use `_.forIn`
         * or `_.forOwn` for object iteration.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias each
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEachRight
         * @example
         *
         * _.forEach([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `1` then `2`.
         *
         * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forEach(collection, iteratee) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee, 3));
        }
    
        /**
         * This method is like `_.forEach` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @alias eachRight
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEach
         * @example
         *
         * _.forEachRight([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `2` then `1`.
         */
        function forEachRight(collection, iteratee) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee, 3));
        }
    
        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The order of grouped values
         * is determined by the order they occur in `collection`. The corresponding
         * value of each key is an array of elements responsible for generating the
         * key. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.groupBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': [4.2], '6': [6.1, 6.3] }
         *
         * // The `_.property` iteratee shorthand.
         * _.groupBy(['one', 'two', 'three'], 'length');
         * // => { '3': ['one', 'two'], '5': ['three'] }
         */
        var groupBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            result[key].push(value);
          } else {
            baseAssignValue(result, key, [value]);
          }
        });
    
        /**
         * Checks if `value` is in `collection`. If `collection` is a string, it's
         * checked for a substring of `value`, otherwise
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * is used for equality comparisons. If `fromIndex` is negative, it's used as
         * the offset from the end of `collection`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {boolean} Returns `true` if `value` is found, else `false`.
         * @example
         *
         * _.includes([1, 2, 3], 1);
         * // => true
         *
         * _.includes([1, 2, 3], 1, 2);
         * // => false
         *
         * _.includes({ 'a': 1, 'b': 2 }, 1);
         * // => true
         *
         * _.includes('abcd', 'bc');
         * // => true
         */
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
    
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection)
            ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
            : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
        }
    
        /**
         * Invokes the method at `path` of each element in `collection`, returning
         * an array of the results of each invoked method. Any additional arguments
         * are provided to each invoked method. If `path` is a function, it's invoked
         * for, and `this` bound to, each element in `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array|Function|string} path The path of the method to invoke or
         *  the function invoked per iteration.
         * @param {...*} [args] The arguments to invoke each method with.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
         * // => [[1, 5, 7], [1, 2, 3]]
         *
         * _.invokeMap([123, 456], String.prototype.split, '');
         * // => [['1', '2', '3'], ['4', '5', '6']]
         */
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1,
              isFunc = typeof path == 'function',
              result = isArrayLike(collection) ? Array(collection.length) : [];
    
          baseEach(collection, function(value) {
            result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result;
        });
    
        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the last element responsible for generating the key. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * var array = [
         *   { 'dir': 'left', 'code': 97 },
         *   { 'dir': 'right', 'code': 100 }
         * ];
         *
         * _.keyBy(array, function(o) {
         *   return String.fromCharCode(o.code);
         * });
         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
         *
         * _.keyBy(array, 'dir');
         * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
         */
        var keyBy = createAggregator(function(result, value, key) {
          baseAssignValue(result, key, value);
        });
    
        /**
         * Creates an array of values by running each element in `collection` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
         *
         * The guarded methods are:
         * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
         * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
         * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
         * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * _.map([4, 8], square);
         * // => [16, 64]
         *
         * _.map({ 'a': 4, 'b': 8 }, square);
         * // => [16, 64] (iteration order is not guaranteed)
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, 'user');
         * // => ['barney', 'fred']
         */
        function map(collection, iteratee) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee, 3));
        }
    
        /**
         * This method is like `_.sortBy` except that it allows specifying the sort
         * orders of the iteratees to sort by. If `orders` is unspecified, all values
         * are sorted in ascending order. Otherwise, specify an order of "desc" for
         * descending or "asc" for ascending sort order of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @param {string[]} [orders] The sort orders of `iteratees`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 34 },
         *   { 'user': 'fred',   'age': 40 },
         *   { 'user': 'barney', 'age': 36 }
         * ];
         *
         * // Sort by `user` in ascending order and by `age` in descending order.
         * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
         */
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
    
        /**
         * Creates an array of elements split into two groups, the first of which
         * contains elements `predicate` returns truthy for, the second of which
         * contains elements `predicate` returns falsey for. The predicate is
         * invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of grouped elements.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': false },
         *   { 'user': 'fred',    'age': 40, 'active': true },
         *   { 'user': 'pebbles', 'age': 1,  'active': false }
         * ];
         *
         * _.partition(users, function(o) { return o.active; });
         * // => objects for [['fred'], ['barney', 'pebbles']]
         *
         * // The `_.matches` iteratee shorthand.
         * _.partition(users, { 'age': 1, 'active': false });
         * // => objects for [['pebbles'], ['barney', 'fred']]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.partition(users, ['active', false]);
         * // => objects for [['barney', 'pebbles'], ['fred']]
         *
         * // The `_.property` iteratee shorthand.
         * _.partition(users, 'active');
         * // => objects for [['fred'], ['barney', 'pebbles']]
         */
        var partition = createAggregator(function(result, value, key) {
          result[key ? 0 : 1].push(value);
        }, function() { return [[], []]; });
    
        /**
         * Reduces `collection` to a value which is the accumulated result of running
         * each element in `collection` thru `iteratee`, where each successive
         * invocation is supplied the return value of the previous. If `accumulator`
         * is not given, the first element of `collection` is used as the initial
         * value. The iteratee is invoked with four arguments:
         * (accumulator, value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.reduce`, `_.reduceRight`, and `_.transform`.
         *
         * The guarded methods are:
         * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
         * and `sortBy`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduceRight
         * @example
         *
         * _.reduce([1, 2], function(sum, n) {
         *   return sum + n;
         * }, 0);
         * // => 3
         *
         * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         *   return result;
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
         */
        function reduce(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce,
              initAccum = arguments.length < 3;
    
          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
    
        /**
         * This method is like `_.reduce` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduce
         * @example
         *
         * var array = [[0, 1], [2, 3], [4, 5]];
         *
         * _.reduceRight(array, function(flattened, other) {
         *   return flattened.concat(other);
         * }, []);
         * // => [4, 5, 2, 3, 0, 1]
         */
        function reduceRight(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce,
              initAccum = arguments.length < 3;
    
          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
    
        /**
         * The opposite of `_.filter`; this method returns the elements of `collection`
         * that `predicate` does **not** return truthy for.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.filter
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': true }
         * ];
         *
         * _.reject(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.reject(users, { 'age': 40, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.reject(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.reject(users, 'active');
         * // => objects for ['barney']
         */
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
    
        /**
         * Gets a random element from `collection`.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         * @example
         *
         * _.sample([1, 2, 3, 4]);
         * // => 2
         */
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
    
        /**
         * Gets `n` random elements at unique keys from `collection` up to the
         * size of `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @param {number} [n=1] The number of elements to sample.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the random elements.
         * @example
         *
         * _.sampleSize([1, 2, 3], 2);
         * // => [3, 1]
         *
         * _.sampleSize([1, 2, 3], 4);
         * // => [2, 3, 1]
         */
        function sampleSize(collection, n, guard) {
          if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
    
        /**
         * Creates an array of shuffled values, using a version of the
         * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         * @example
         *
         * _.shuffle([1, 2, 3, 4]);
         * // => [4, 1, 3, 2]
         */
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
    
        /**
         * Gets the size of `collection` by returning its length for array-like
         * values or the number of own enumerable string keyed properties for objects.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @returns {number} Returns the collection size.
         * @example
         *
         * _.size([1, 2, 3]);
         * // => 3
         *
         * _.size({ 'a': 1, 'b': 2 });
         * // => 2
         *
         * _.size('pebbles');
         * // => 7
         */
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
    
        /**
         * Checks if `predicate` returns truthy for **any** element of `collection`.
         * Iteration is stopped once `predicate` returns truthy. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         * @example
         *
         * _.some([null, 0, 'yes', false], Boolean);
         * // => true
         *
         * var users = [
         *   { 'user': 'barney', 'active': true },
         *   { 'user': 'fred',   'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.some(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.some(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.some(users, 'active');
         * // => true
         */
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
          }
          return func(collection, getIteratee(predicate, 3));
        }
    
        /**
         * Creates an array of elements, sorted in ascending order by the results of
         * running each element in a collection thru each iteratee. This method
         * performs a stable sort, that is, it preserves the original sort order of
         * equal elements. The iteratees are invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 },
         *   { 'user': 'barney', 'age': 34 }
         * ];
         *
         * _.sortBy(users, [function(o) { return o.user; }]);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
         *
         * _.sortBy(users, ['user', 'age']);
         * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
         */
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Gets the timestamp of the number of milliseconds that have elapsed since
         * the Unix epoch (1 January 1970 00:00:00 UTC).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Date
         * @returns {number} Returns the timestamp.
         * @example
         *
         * _.defer(function(stamp) {
         *   console.log(_.now() - stamp);
         * }, _.now());
         * // => Logs the number of milliseconds it took for the deferred invocation.
         */
        var now = ctxNow || function() {
          return root.Date.now();
        };
    
        /*------------------------------------------------------------------------*/
    
        /**
         * The opposite of `_.before`; this method creates a function that invokes
         * `func` once it's called `n` or more times.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {number} n The number of calls before `func` is invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var saves = ['profile', 'settings'];
         *
         * var done = _.after(saves.length, function() {
         *   console.log('done saving!');
         * });
         *
         * _.forEach(saves, function(type) {
         *   asyncSave({ 'type': type, 'complete': done });
         * });
         * // => Logs 'done saving!' after the two async saves have completed.
         */
        function after(n, func) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
    
        /**
         * Creates a function that invokes `func`, with up to `n` arguments,
         * ignoring any additional arguments.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @param {number} [n=func.length] The arity cap.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
         * // => [6, 8, 10]
         */
        function ary(func, n, guard) {
          n = guard ? undefined : n;
          n = (func && n == null) ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
    
        /**
         * Creates a function that invokes `func`, with the `this` binding and arguments
         * of the created function, while it's called less than `n` times. Subsequent
         * calls to the created function return the result of the last `func` invocation.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {number} n The number of calls at which `func` is no longer invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * jQuery(element).on('click', _.before(5, addContactToList));
         * // => Allows adding up to 4 contacts to the list.
         */
        function before(n, func) {
          var result;
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined;
            }
            return result;
          };
        }
    
        /**
         * Creates a function that invokes `func` with the `this` binding of `thisArg`
         * and `partials` prepended to the arguments it receives.
         *
         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for partially applied arguments.
         *
         * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
         * property of bound functions.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to bind.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * function greet(greeting, punctuation) {
         *   return greeting + ' ' + this.user + punctuation;
         * }
         *
         * var object = { 'user': 'fred' };
         *
         * var bound = _.bind(greet, object, 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bind(greet, object, _, '!');
         * bound('hi');
         * // => 'hi fred!'
         */
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
    
        /**
         * Creates a function that invokes the method at `object[key]` with `partials`
         * prepended to the arguments it receives.
         *
         * This method differs from `_.bind` by allowing bound functions to reference
         * methods that may be redefined or don't yet exist. See
         * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
         * for more details.
         *
         * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Function
         * @param {Object} object The object to invoke the method on.
         * @param {string} key The key of the method.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * var object = {
         *   'user': 'fred',
         *   'greet': function(greeting, punctuation) {
         *     return greeting + ' ' + this.user + punctuation;
         *   }
         * };
         *
         * var bound = _.bindKey(object, 'greet', 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * object.greet = function(greeting, punctuation) {
         *   return greeting + 'ya ' + this.user + punctuation;
         * };
         *
         * bound('!');
         * // => 'hiya fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bindKey(object, 'greet', _, '!');
         * bound('hi');
         * // => 'hiya fred!'
         */
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
    
        /**
         * Creates a function that accepts arguments of `func` and either invokes
         * `func` returning its result, if at least `arity` number of arguments have
         * been provided, or returns a function that accepts the remaining `func`
         * arguments, and so on. The arity of `func` may be specified if `func.length`
         * is not sufficient.
         *
         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curry(abc);
         *
         * curried(1)(2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(1)(_, 3)(2);
         * // => [1, 2, 3]
         */
        function curry(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result.placeholder = curry.placeholder;
          return result;
        }
    
        /**
         * This method is like `_.curry` except that arguments are applied to `func`
         * in the manner of `_.partialRight` instead of `_.partial`.
         *
         * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curryRight(abc);
         *
         * curried(3)(2)(1);
         * // => [1, 2, 3]
         *
         * curried(2, 3)(1);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(3)(1, _)(2);
         * // => [1, 2, 3]
         */
        function curryRight(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result.placeholder = curryRight.placeholder;
          return result;
        }
    
        /**
         * Creates a debounced function that delays invoking `func` until after `wait`
         * milliseconds have elapsed since the last time the debounced function was
         * invoked. The debounced function comes with a `cancel` method to cancel
         * delayed `func` invocations and a `flush` method to immediately invoke them.
         * Provide `options` to indicate whether `func` should be invoked on the
         * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
         * with the last arguments provided to the debounced function. Subsequent
         * calls to the debounced function return the result of the last `func`
         * invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the debounced function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.debounce` and `_.throttle`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to debounce.
         * @param {number} [wait=0] The number of milliseconds to delay.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=false]
         *  Specify invoking on the leading edge of the timeout.
         * @param {number} [options.maxWait]
         *  The maximum time `func` is allowed to be delayed before it's invoked.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new debounced function.
         * @example
         *
         * // Avoid costly calculations while the window size is in flux.
         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
         *
         * // Invoke `sendMail` when clicked, debouncing subsequent calls.
         * jQuery(element).on('click', _.debounce(sendMail, 300, {
         *   'leading': true,
         *   'trailing': false
         * }));
         *
         * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
         * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
         * var source = new EventSource('/stream');
         * jQuery(source).on('message', debounced);
         *
         * // Cancel the trailing debounced invocation.
         * jQuery(window).on('popstate', debounced.cancel);
         */
        function debounce(func, wait, options) {
          var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;
    
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
    
          function invokeFunc(time) {
            var args = lastArgs,
                thisArg = lastThis;
    
            lastArgs = lastThis = undefined;
            lastInvokeTime = time;
            result = func.apply(thisArg, args);
            return result;
          }
    
          function leadingEdge(time) {
            // Reset any `maxWait` timer.
            lastInvokeTime = time;
            // Start the timer for the trailing edge.
            timerId = setTimeout(timerExpired, wait);
            // Invoke the leading edge.
            return leading ? invokeFunc(time) : result;
          }
    
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                timeWaiting = wait - timeSinceLastCall;
    
            return maxing
              ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
              : timeWaiting;
          }
    
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;
    
            // Either this is the first call, activity has stopped and we're at the
            // trailing edge, the system time has gone backwards and we're treating
            // it as the trailing edge, or we've hit the `maxWait` limit.
            return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
              (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
          }
    
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            // Restart the timer.
            timerId = setTimeout(timerExpired, remainingWait(time));
          }
    
          function trailingEdge(time) {
            timerId = undefined;
    
            // Only invoke if we have `lastArgs` which means `func` has been
            // debounced at least once.
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined;
            return result;
          }
    
          function cancel() {
            if (timerId !== undefined) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined;
          }
    
          function flush() {
            return timerId === undefined ? result : trailingEdge(now());
          }
    
          function debounced() {
            var time = now(),
                isInvoking = shouldInvoke(time);
    
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
    
            if (isInvoking) {
              if (timerId === undefined) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                // Handle invocations in a tight loop.
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
    
        /**
         * Defers invoking the `func` until the current call stack has cleared. Any
         * additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to defer.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.defer(function(text) {
         *   console.log(text);
         * }, 'deferred');
         * // => Logs 'deferred' after one millisecond.
         */
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
    
        /**
         * Invokes `func` after `wait` milliseconds. Any additional arguments are
         * provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.delay(function(text) {
         *   console.log(text);
         * }, 1000, 'later');
         * // => Logs 'later' after one second.
         */
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
    
        /**
         * Creates a function that invokes `func` with arguments reversed.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to flip arguments for.
         * @returns {Function} Returns the new flipped function.
         * @example
         *
         * var flipped = _.flip(function() {
         *   return _.toArray(arguments);
         * });
         *
         * flipped('a', 'b', 'c', 'd');
         * // => ['d', 'c', 'b', 'a']
         */
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
    
        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;
    
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache);
          return memoized;
        }
    
        // Expose `MapCache`.
        memoize.Cache = MapCache;
    
        /**
         * Creates a function that negates the result of the predicate `func`. The
         * `func` predicate is invoked with the `this` binding and arguments of the
         * created function.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} predicate The predicate to negate.
         * @returns {Function} Returns the new negated function.
         * @example
         *
         * function isEven(n) {
         *   return n % 2 == 0;
         * }
         *
         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
         * // => [1, 3, 5]
         */
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0: return !predicate.call(this);
              case 1: return !predicate.call(this, args[0]);
              case 2: return !predicate.call(this, args[0], args[1]);
              case 3: return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
    
        /**
         * Creates a function that is restricted to invoking `func` once. Repeat calls
         * to the function return the value of the first invocation. The `func` is
         * invoked with the `this` binding and arguments of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var initialize = _.once(createApplication);
         * initialize();
         * initialize();
         * // => `createApplication` is invoked once
         */
        function once(func) {
          return before(2, func);
        }
    
        /**
         * Creates a function that invokes `func` with its arguments transformed.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Function
         * @param {Function} func The function to wrap.
         * @param {...(Function|Function[])} [transforms=[_.identity]]
         *  The argument transforms.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function doubled(n) {
         *   return n * 2;
         * }
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var func = _.overArgs(function(x, y) {
         *   return [x, y];
         * }, [square, doubled]);
         *
         * func(9, 3);
         * // => [81, 6]
         *
         * func(10, 5);
         * // => [100, 10]
         */
        var overArgs = castRest(function(func, transforms) {
          transforms = (transforms.length == 1 && isArray(transforms[0]))
            ? arrayMap(transforms[0], baseUnary(getIteratee()))
            : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
    
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1,
                length = nativeMin(args.length, funcsLength);
    
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
    
        /**
         * Creates a function that invokes `func` with `partials` prepended to the
         * arguments it receives. This method is like `_.bind` except it does **not**
         * alter the `this` binding.
         *
         * The `_.partial.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 0.2.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var sayHelloTo = _.partial(greet, 'hello');
         * sayHelloTo('fred');
         * // => 'hello fred'
         *
         * // Partially applied with placeholders.
         * var greetFred = _.partial(greet, _, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         */
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
    
        /**
         * This method is like `_.partial` except that partially applied arguments
         * are appended to the arguments it receives.
         *
         * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var greetFred = _.partialRight(greet, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         *
         * // Partially applied with placeholders.
         * var sayHelloTo = _.partialRight(greet, 'hello', _);
         * sayHelloTo('fred');
         * // => 'hello fred'
         */
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
    
        /**
         * Creates a function that invokes `func` with arguments arranged according
         * to the specified `indexes` where the argument value at the first index is
         * provided as the first argument, the argument value at the second index is
         * provided as the second argument, and so on.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to rearrange arguments for.
         * @param {...(number|number[])} indexes The arranged argument indexes.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var rearged = _.rearg(function(a, b, c) {
         *   return [a, b, c];
         * }, [2, 0, 1]);
         *
         * rearged('b', 'c', 'a')
         * // => ['a', 'b', 'c']
         */
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
    
        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * created function and arguments from `start` and beyond provided as
         * an array.
         *
         * **Note:** This method is based on the
         * [rest parameter](https://mdn.io/rest_parameters).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.rest(function(what, names) {
         *   return what + ' ' + _.initial(names).join(', ') +
         *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
         * });
         *
         * say('hello', 'fred', 'barney', 'pebbles');
         * // => 'hello fred, barney, & pebbles'
         */
        function rest(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start === undefined ? start : toInteger(start);
          return baseRest(func, start);
        }
    
        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * create function and an array of arguments much like
         * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
         *
         * **Note:** This method is based on the
         * [spread operator](https://mdn.io/spread_operator).
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Function
         * @param {Function} func The function to spread arguments over.
         * @param {number} [start=0] The start position of the spread.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.spread(function(who, what) {
         *   return who + ' says ' + what;
         * });
         *
         * say(['fred', 'hello']);
         * // => 'fred says hello'
         *
         * var numbers = Promise.all([
         *   Promise.resolve(40),
         *   Promise.resolve(36)
         * ]);
         *
         * numbers.then(_.spread(function(x, y) {
         *   return x + y;
         * }));
         * // => a Promise of 76
         */
        function spread(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start],
                otherArgs = castSlice(args, 0, start);
    
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
    
        /**
         * Creates a throttled function that only invokes `func` at most once per
         * every `wait` milliseconds. The throttled function comes with a `cancel`
         * method to cancel delayed `func` invocations and a `flush` method to
         * immediately invoke them. Provide `options` to indicate whether `func`
         * should be invoked on the leading and/or trailing edge of the `wait`
         * timeout. The `func` is invoked with the last arguments provided to the
         * throttled function. Subsequent calls to the throttled function return the
         * result of the last `func` invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the throttled function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.throttle` and `_.debounce`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to throttle.
         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=true]
         *  Specify invoking on the leading edge of the timeout.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new throttled function.
         * @example
         *
         * // Avoid excessively updating the position while scrolling.
         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
         *
         * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
         * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
         * jQuery(element).on('click', throttled);
         *
         * // Cancel the trailing throttled invocation.
         * jQuery(window).on('popstate', throttled.cancel);
         */
        function throttle(func, wait, options) {
          var leading = true,
              trailing = true;
    
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            'leading': leading,
            'maxWait': wait,
            'trailing': trailing
          });
        }
    
        /**
         * Creates a function that accepts up to one argument, ignoring any
         * additional arguments.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.unary(parseInt));
         * // => [6, 8, 10]
         */
        function unary(func) {
          return ary(func, 1);
        }
    
        /**
         * Creates a function that provides `value` to `wrapper` as its first
         * argument. Any additional arguments provided to the function are appended
         * to those provided to the `wrapper`. The wrapper is invoked with the `this`
         * binding of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {*} value The value to wrap.
         * @param {Function} [wrapper=identity] The wrapper function.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var p = _.wrap(_.escape, function(func, text) {
         *   return '<p>' + func(text) + '</p>';
         * });
         *
         * p('fred, barney, & pebbles');
         * // => '<p>fred, barney, &amp; pebbles</p>'
         */
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Casts `value` as an array if it's not one.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Lang
         * @param {*} value The value to inspect.
         * @returns {Array} Returns the cast array.
         * @example
         *
         * _.castArray(1);
         * // => [1]
         *
         * _.castArray({ 'a': 1 });
         * // => [{ 'a': 1 }]
         *
         * _.castArray('abc');
         * // => ['abc']
         *
         * _.castArray(null);
         * // => [null]
         *
         * _.castArray(undefined);
         * // => [undefined]
         *
         * _.castArray();
         * // => []
         *
         * var array = [1, 2, 3];
         * console.log(_.castArray(array) === array);
         * // => true
         */
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
    
        /**
         * Creates a shallow clone of `value`.
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
         * and supports cloning arrays, array buffers, booleans, date objects, maps,
         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
         * arrays. The own enumerable properties of `arguments` objects are cloned
         * as plain objects. An empty object is returned for uncloneable values such
         * as error objects, functions, DOM nodes, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to clone.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeep
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var shallow = _.clone(objects);
         * console.log(shallow[0] === objects[0]);
         * // => true
         */
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
    
        /**
         * This method is like `_.clone` except that it accepts `customizer` which
         * is invoked to produce the cloned value. If `customizer` returns `undefined`,
         * cloning is handled by the method instead. The `customizer` is invoked with
         * up to four arguments; (value [, index|key, object, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeepWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(false);
         *   }
         * }
         *
         * var el = _.cloneWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 0
         */
        function cloneWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
    
        /**
         * This method is like `_.clone` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @returns {*} Returns the deep cloned value.
         * @see _.clone
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var deep = _.cloneDeep(objects);
         * console.log(deep[0] === objects[0]);
         * // => false
         */
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
    
        /**
         * This method is like `_.cloneWith` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the deep cloned value.
         * @see _.cloneWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(true);
         *   }
         * }
         *
         * var el = _.cloneDeepWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 20
         */
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
    
        /**
         * Checks if `object` conforms to `source` by invoking the predicate
         * properties of `source` with the corresponding property values of `object`.
         *
         * **Note:** This method is equivalent to `_.conforms` when `source` is
         * partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
         * // => true
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
         * // => false
         */
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
    
        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }
    
        /**
         * Checks if `value` is greater than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         * @see _.lt
         * @example
         *
         * _.gt(3, 1);
         * // => true
         *
         * _.gt(3, 3);
         * // => false
         *
         * _.gt(1, 3);
         * // => false
         */
        var gt = createRelationalOperation(baseGt);
    
        /**
         * Checks if `value` is greater than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than or equal to
         *  `other`, else `false`.
         * @see _.lte
         * @example
         *
         * _.gte(3, 1);
         * // => true
         *
         * _.gte(3, 3);
         * // => true
         *
         * _.gte(1, 3);
         * // => false
         */
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
    
        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
            !propertyIsEnumerable.call(value, 'callee');
        };
    
        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;
    
        /**
         * Checks if `value` is classified as an `ArrayBuffer` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         * @example
         *
         * _.isArrayBuffer(new ArrayBuffer(2));
         * // => true
         *
         * _.isArrayBuffer(new Array(2));
         * // => false
         */
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
    
        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
    
        /**
         * This method is like `_.isArrayLike` except that it also checks if `value`
         * is an object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array-like object,
         *  else `false`.
         * @example
         *
         * _.isArrayLikeObject([1, 2, 3]);
         * // => true
         *
         * _.isArrayLikeObject(document.body.children);
         * // => true
         *
         * _.isArrayLikeObject('abc');
         * // => false
         *
         * _.isArrayLikeObject(_.noop);
         * // => false
         */
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
    
        /**
         * Checks if `value` is classified as a boolean primitive or object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
         * @example
         *
         * _.isBoolean(false);
         * // => true
         *
         * _.isBoolean(null);
         * // => false
         */
        function isBoolean(value) {
          return value === true || value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag);
        }
    
        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;
    
        /**
         * Checks if `value` is classified as a `Date` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         * @example
         *
         * _.isDate(new Date);
         * // => true
         *
         * _.isDate('Mon April 23 2012');
         * // => false
         */
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
    
        /**
         * Checks if `value` is likely a DOM element.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
         * @example
         *
         * _.isElement(document.body);
         * // => true
         *
         * _.isElement('<body>');
         * // => false
         */
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
    
        /**
         * Checks if `value` is an empty object, collection, map, or set.
         *
         * Objects are considered empty if they have no own enumerable string keyed
         * properties.
         *
         * Array-like values such as `arguments` objects, arrays, buffers, strings, or
         * jQuery-like collections are considered empty if they have a `length` of `0`.
         * Similarly, maps and sets are considered empty if they have a `size` of `0`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is empty, else `false`.
         * @example
         *
         * _.isEmpty(null);
         * // => true
         *
         * _.isEmpty(true);
         * // => true
         *
         * _.isEmpty(1);
         * // => true
         *
         * _.isEmpty([1, 2, 3]);
         * // => false
         *
         * _.isEmpty({ 'a': 1 });
         * // => false
         */
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) &&
              (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
    
        /**
         * Performs a deep comparison between two values to determine if they are
         * equivalent.
         *
         * **Note:** This method supports comparing arrays, array buffers, booleans,
         * date objects, error objects, maps, numbers, `Object` objects, regexes,
         * sets, strings, symbols, and typed arrays. `Object` objects are compared
         * by their own, not inherited, enumerable properties. Functions and DOM
         * nodes are compared by strict equality, i.e. `===`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.isEqual(object, other);
         * // => true
         *
         * object === other;
         * // => false
         */
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
    
        /**
         * This method is like `_.isEqual` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with up to
         * six arguments: (objValue, othValue [, index|key, object, other, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, othValue) {
         *   if (isGreeting(objValue) && isGreeting(othValue)) {
         *     return true;
         *   }
         * }
         *
         * var array = ['hello', 'goodbye'];
         * var other = ['hi', 'goodbye'];
         *
         * _.isEqualWith(array, other, customizer);
         * // => true
         */
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          var result = customizer ? customizer(value, other) : undefined;
          return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
    
        /**
         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
         * `SyntaxError`, `TypeError`, or `URIError` object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
         * @example
         *
         * _.isError(new Error);
         * // => true
         *
         * _.isError(Error);
         * // => false
         */
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag ||
            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
        }
    
        /**
         * Checks if `value` is a finite primitive number.
         *
         * **Note:** This method is based on
         * [`Number.isFinite`](https://mdn.io/Number/isFinite).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
         * @example
         *
         * _.isFinite(3);
         * // => true
         *
         * _.isFinite(Number.MIN_VALUE);
         * // => true
         *
         * _.isFinite(Infinity);
         * // => false
         *
         * _.isFinite('3');
         * // => false
         */
        function isFinite(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }
    
        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
    
        /**
         * Checks if `value` is an integer.
         *
         * **Note:** This method is based on
         * [`Number.isInteger`](https://mdn.io/Number/isInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
         * @example
         *
         * _.isInteger(3);
         * // => true
         *
         * _.isInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isInteger(Infinity);
         * // => false
         *
         * _.isInteger('3');
         * // => false
         */
        function isInteger(value) {
          return typeof value == 'number' && value == toInteger(value);
        }
    
        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return typeof value == 'number' &&
            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
    
        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }
    
        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }
    
        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    
        /**
         * Performs a partial deep comparison between `object` and `source` to
         * determine if `object` contains equivalent property values.
         *
         * **Note:** This method is equivalent to `_.matches` when `source` is
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.isMatch(object, { 'b': 2 });
         * // => true
         *
         * _.isMatch(object, { 'b': 1 });
         * // => false
         */
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
    
        /**
         * This method is like `_.isMatch` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with five
         * arguments: (objValue, srcValue, index|key, object, source).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, srcValue) {
         *   if (isGreeting(objValue) && isGreeting(srcValue)) {
         *     return true;
         *   }
         * }
         *
         * var object = { 'greeting': 'hello' };
         * var source = { 'greeting': 'hi' };
         *
         * _.isMatchWith(object, source, customizer);
         * // => true
         */
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
    
        /**
         * Checks if `value` is `NaN`.
         *
         * **Note:** This method is based on
         * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
         * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
         * `undefined` and other non-number values.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         * @example
         *
         * _.isNaN(NaN);
         * // => true
         *
         * _.isNaN(new Number(NaN));
         * // => true
         *
         * isNaN(undefined);
         * // => true
         *
         * _.isNaN(undefined);
         * // => false
         */
        function isNaN(value) {
          // An `NaN` primitive is the only value that is not equal to itself.
          // Perform the `toStringTag` check first to avoid errors with some
          // ActiveX objects in IE.
          return isNumber(value) && value != +value;
        }
    
        /**
         * Checks if `value` is a pristine native function.
         *
         * **Note:** This method can't reliably detect native functions in the presence
         * of the core-js package because core-js circumvents this kind of detection.
         * Despite multiple requests, the core-js maintainer has made it clear: any
         * attempt to fix the detection will be obstructed. As a result, we're left
         * with little choice but to throw an error. Unfortunately, this also affects
         * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
         * which rely on core-js.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         * @example
         *
         * _.isNative(Array.prototype.push);
         * // => true
         *
         * _.isNative(_);
         * // => false
         */
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
    
        /**
         * Checks if `value` is `null`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
         * @example
         *
         * _.isNull(null);
         * // => true
         *
         * _.isNull(void 0);
         * // => false
         */
        function isNull(value) {
          return value === null;
        }
    
        /**
         * Checks if `value` is `null` or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
         * @example
         *
         * _.isNil(null);
         * // => true
         *
         * _.isNil(void 0);
         * // => true
         *
         * _.isNil(NaN);
         * // => false
         */
        function isNil(value) {
          return value == null;
        }
    
        /**
         * Checks if `value` is classified as a `Number` primitive or object.
         *
         * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
         * classified as numbers, use the `_.isFinite` method.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a number, else `false`.
         * @example
         *
         * _.isNumber(3);
         * // => true
         *
         * _.isNumber(Number.MIN_VALUE);
         * // => true
         *
         * _.isNumber(Infinity);
         * // => true
         *
         * _.isNumber('3');
         * // => false
         */
        function isNumber(value) {
          return typeof value == 'number' ||
            (isObjectLike(value) && baseGetTag(value) == numberTag);
        }
    
        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * @static
         * @memberOf _
         * @since 0.8.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor == 'function' && Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString;
        }
    
        /**
         * Checks if `value` is classified as a `RegExp` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         * @example
         *
         * _.isRegExp(/abc/);
         * // => true
         *
         * _.isRegExp('/abc/');
         * // => false
         */
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
    
        /**
         * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
         * double precision number which isn't the result of a rounded unsafe integer.
         *
         * **Note:** This method is based on
         * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
         * @example
         *
         * _.isSafeInteger(3);
         * // => true
         *
         * _.isSafeInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isSafeInteger(Infinity);
         * // => false
         *
         * _.isSafeInteger('3');
         * // => false
         */
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
    
        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    
        /**
         * Checks if `value` is classified as a `String` primitive or object.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a string, else `false`.
         * @example
         *
         * _.isString('abc');
         * // => true
         *
         * _.isString(1);
         * // => false
         */
        function isString(value) {
          return typeof value == 'string' ||
            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
        }
    
        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag);
        }
    
        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    
        /**
         * Checks if `value` is `undefined`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
         * @example
         *
         * _.isUndefined(void 0);
         * // => true
         *
         * _.isUndefined(null);
         * // => false
         */
        function isUndefined(value) {
          return value === undefined;
        }
    
        /**
         * Checks if `value` is classified as a `WeakMap` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
         * @example
         *
         * _.isWeakMap(new WeakMap);
         * // => true
         *
         * _.isWeakMap(new Map);
         * // => false
         */
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
    
        /**
         * Checks if `value` is classified as a `WeakSet` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
         * @example
         *
         * _.isWeakSet(new WeakSet);
         * // => true
         *
         * _.isWeakSet(new Set);
         * // => false
         */
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
    
        /**
         * Checks if `value` is less than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         * @see _.gt
         * @example
         *
         * _.lt(1, 3);
         * // => true
         *
         * _.lt(3, 3);
         * // => false
         *
         * _.lt(3, 1);
         * // => false
         */
        var lt = createRelationalOperation(baseLt);
    
        /**
         * Checks if `value` is less than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than or equal to
         *  `other`, else `false`.
         * @see _.gte
         * @example
         *
         * _.lte(1, 3);
         * // => true
         *
         * _.lte(3, 3);
         * // => true
         *
         * _.lte(3, 1);
         * // => false
         */
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
    
        /**
         * Converts `value` to an array.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Array} Returns the converted array.
         * @example
         *
         * _.toArray({ 'a': 1, 'b': 2 });
         * // => [1, 2]
         *
         * _.toArray('abc');
         * // => ['a', 'b', 'c']
         *
         * _.toArray(1);
         * // => []
         *
         * _.toArray(null);
         * // => []
         */
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value),
              func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
    
          return func(value);
        }
    
        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = (value < 0 ? -1 : 1);
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
    
        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
          var result = toFinite(value),
              remainder = result % 1;
    
          return result === result ? (remainder ? result - remainder : result) : 0;
        }
    
        /**
         * Converts `value` to an integer suitable for use as the length of an
         * array-like object.
         *
         * **Note:** This method is based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toLength(3.2);
         * // => 3
         *
         * _.toLength(Number.MIN_VALUE);
         * // => 0
         *
         * _.toLength(Infinity);
         * // => 4294967295
         *
         * _.toLength('3.2');
         * // => 3
         */
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
    
        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? (other + '') : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, '');
          var isBinary = reIsBinary.test(value);
          return (isBinary || reIsOctal.test(value))
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : (reIsBadHex.test(value) ? NAN : +value);
        }
    
        /**
         * Converts `value` to a plain object flattening inherited enumerable string
         * keyed properties of `value` to own properties of the plain object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Object} Returns the converted plain object.
         * @example
         *
         * function Foo() {
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.assign({ 'a': 1 }, new Foo);
         * // => { 'a': 1, 'b': 2 }
         *
         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
         * // => { 'a': 1, 'b': 2, 'c': 3 }
         */
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
    
        /**
         * Converts `value` to a safe integer. A safe integer can be compared and
         * represented correctly.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toSafeInteger(3.2);
         * // => 3
         *
         * _.toSafeInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toSafeInteger(Infinity);
         * // => 9007199254740991
         *
         * _.toSafeInteger('3.2');
         * // => 3
         */
        function toSafeInteger(value) {
          return value
            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
            : (value === 0 ? value : 0);
        }
    
        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
          return value == null ? '' : baseToString(value);
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Assigns own enumerable string keyed properties of source objects to the
         * destination object. Source objects are applied from left to right.
         * Subsequent sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object` and is loosely based on
         * [`Object.assign`](https://mdn.io/Object/assign).
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assignIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assign({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'c': 3 }
         */
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
    
        /**
         * This method is like `_.assign` except that it iterates over own and
         * inherited source properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extend
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assign
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assignIn({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
         */
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
    
        /**
         * This method is like `_.assignIn` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extendWith
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignInWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
    
        /**
         * This method is like `_.assign` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignInWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
    
        /**
         * Creates an array of values corresponding to `paths` of `object`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Array} Returns the picked values.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _.at(object, ['a[0].b.c', 'a[1]']);
         * // => [3, 4]
         */
        var at = flatRest(baseAt);
    
        /**
         * Creates an object that inherits from the `prototype` object. If a
         * `properties` object is given, its own enumerable string keyed properties
         * are assigned to the created object.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Object
         * @param {Object} prototype The object to inherit from.
         * @param {Object} [properties] The properties to assign to the object.
         * @returns {Object} Returns the new object.
         * @example
         *
         * function Shape() {
         *   this.x = 0;
         *   this.y = 0;
         * }
         *
         * function Circle() {
         *   Shape.call(this);
         * }
         *
         * Circle.prototype = _.create(Shape.prototype, {
         *   'constructor': Circle
         * });
         *
         * var circle = new Circle;
         * circle instanceof Circle;
         * // => true
         *
         * circle instanceof Shape;
         * // => true
         */
        function create(prototype, properties) {
          var result = baseCreate(prototype);
          return properties == null ? result : baseAssign(result, properties);
        }
    
        /**
         * Assigns own and inherited enumerable string keyed properties of source
         * objects to the destination object for all destination properties that
         * resolve to `undefined`. Source objects are applied from left to right.
         * Once a property is set, additional values of the same property are ignored.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaultsDeep
         * @example
         *
         * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var defaults = baseRest(function(object, sources) {
          object = Object(object);
    
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined;
    
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
    
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
    
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
    
              if (value === undefined ||
                  (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                object[key] = source[key];
              }
            }
          }
    
          return object;
        });
    
        /**
         * This method is like `_.defaults` except that it recursively assigns
         * default properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaults
         * @example
         *
         * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
         * // => { 'a': { 'b': 2, 'c': 3 } }
         */
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined, customDefaultsMerge);
          return apply(mergeWith, undefined, args);
        });
    
        /**
         * This method is like `_.find` except that it returns the key of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findKey(users, function(o) { return o.age < 40; });
         * // => 'barney' (iteration order is not guaranteed)
         *
         * // The `_.matches` iteratee shorthand.
         * _.findKey(users, { 'age': 1, 'active': true });
         * // => 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findKey(users, 'active');
         * // => 'barney'
         */
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
    
        /**
         * This method is like `_.findKey` except that it iterates over elements of
         * a collection in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findLastKey(users, function(o) { return o.age < 40; });
         * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastKey(users, { 'age': 36, 'active': true });
         * // => 'barney'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastKey(users, 'active');
         * // => 'pebbles'
         */
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
    
        /**
         * Iterates over own and inherited enumerable string keyed properties of an
         * object and invokes `iteratee` for each property. The iteratee is invoked
         * with three arguments: (value, key, object). Iteratee functions may exit
         * iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forInRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forIn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
         */
        function forIn(object, iteratee) {
          return object == null
            ? object
            : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
    
        /**
         * This method is like `_.forIn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forInRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
         */
        function forInRight(object, iteratee) {
          return object == null
            ? object
            : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
    
        /**
         * Iterates over own enumerable string keyed properties of an object and
         * invokes `iteratee` for each property. The iteratee is invoked with three
         * arguments: (value, key, object). Iteratee functions may exit iteration
         * early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwnRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forOwn(object, iteratee) {
          return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
    
        /**
         * This method is like `_.forOwn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwnRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
         */
        function forOwnRight(object, iteratee) {
          return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
    
        /**
         * Creates an array of function property names from own enumerable properties
         * of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functionsIn
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functions(new Foo);
         * // => ['a', 'b']
         */
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
    
        /**
         * Creates an array of function property names from own and inherited
         * enumerable properties of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functions
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functionsIn(new Foo);
         * // => ['a', 'b', 'c']
         */
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
    
        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined : baseGet(object, path);
          return result === undefined ? defaultValue : result;
        }
    
        /**
         * Checks if `path` is a direct property of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = { 'a': { 'b': 2 } };
         * var other = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.has(object, 'a');
         * // => true
         *
         * _.has(object, 'a.b');
         * // => true
         *
         * _.has(object, ['a', 'b']);
         * // => true
         *
         * _.has(other, 'a');
         * // => false
         */
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
    
        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
    
        /**
         * Creates an object composed of the inverted keys and values of `object`.
         * If `object` contains duplicate values, subsequent values overwrite
         * property assignments of previous values.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Object
         * @param {Object} object The object to invert.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invert(object);
         * // => { '1': 'c', '2': 'b' }
         */
        var invert = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
    
          result[value] = key;
        }, constant(identity));
    
        /**
         * This method is like `_.invert` except that the inverted object is generated
         * from the results of running each element of `object` thru `iteratee`. The
         * corresponding inverted value of each inverted key is an array of keys
         * responsible for generating the inverted value. The iteratee is invoked
         * with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Object
         * @param {Object} object The object to invert.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invertBy(object);
         * // => { '1': ['a', 'c'], '2': ['b'] }
         *
         * _.invertBy(object, function(value) {
         *   return 'group' + value;
         * });
         * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
         */
        var invertBy = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
    
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }, getIteratee);
    
        /**
         * Invokes the method at `path` of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
         *
         * _.invoke(object, 'a[0].b.c.slice', 1, 3);
         * // => [2, 3]
         */
        var invoke = baseRest(baseInvoke);
    
        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
    
        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
    
        /**
         * The opposite of `_.mapValues`; this method creates an object with the
         * same values as `object` and keys generated by running each own enumerable
         * string keyed property of `object` thru `iteratee`. The iteratee is invoked
         * with three arguments: (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapValues
         * @example
         *
         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
         *   return key + value;
         * });
         * // => { 'a1': 1, 'b2': 2 }
         */
        function mapKeys(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);
    
          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, iteratee(value, key, object), value);
          });
          return result;
        }
    
        /**
         * Creates an object with the same keys as `object` and values generated
         * by running each own enumerable string keyed property of `object` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapKeys
         * @example
         *
         * var users = {
         *   'fred':    { 'user': 'fred',    'age': 40 },
         *   'pebbles': { 'user': 'pebbles', 'age': 1 }
         * };
         *
         * _.mapValues(users, function(o) { return o.age; });
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         *
         * // The `_.property` iteratee shorthand.
         * _.mapValues(users, 'age');
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         */
        function mapValues(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);
    
          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, key, iteratee(value, key, object));
          });
          return result;
        }
    
        /**
         * This method is like `_.assign` except that it recursively merges own and
         * inherited enumerable string keyed properties of source objects into the
         * destination object. Source properties that resolve to `undefined` are
         * skipped if a destination value exists. Array and plain object properties
         * are merged recursively. Other objects and value types are overridden by
         * assignment. Source objects are applied from left to right. Subsequent
         * sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {
         *   'a': [{ 'b': 2 }, { 'd': 4 }]
         * };
         *
         * var other = {
         *   'a': [{ 'c': 3 }, { 'e': 5 }]
         * };
         *
         * _.merge(object, other);
         * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
         */
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
    
        /**
         * This method is like `_.merge` except that it accepts `customizer` which
         * is invoked to produce the merged values of the destination and source
         * properties. If `customizer` returns `undefined`, merging is handled by the
         * method instead. The `customizer` is invoked with six arguments:
         * (objValue, srcValue, key, object, source, stack).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} customizer The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   if (_.isArray(objValue)) {
         *     return objValue.concat(srcValue);
         *   }
         * }
         *
         * var object = { 'a': [1], 'b': [2] };
         * var other = { 'a': [3], 'b': [4] };
         *
         * _.mergeWith(object, other, customizer);
         * // => { 'a': [1, 3], 'b': [2, 4] }
         */
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
    
        /**
         * The opposite of `_.pick`; this method creates an object composed of the
         * own and inherited enumerable property paths of `object` that are not omitted.
         *
         * **Note:** This method is considerably slower than `_.pick`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to omit.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omit(object, ['a', 'c']);
         * // => { 'b': '2' }
         */
        var omit = flatRest(function(object, paths) {
          var result = {};
          if (object == null) {
            return result;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result);
          if (isDeep) {
            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result, paths[length]);
          }
          return result;
        });
    
        /**
         * The opposite of `_.pickBy`; this method creates an object composed of
         * the own and inherited enumerable string keyed properties of `object` that
         * `predicate` doesn't return truthy for. The predicate is invoked with two
         * arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omitBy(object, _.isNumber);
         * // => { 'b': '2' }
         */
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
    
        /**
         * Creates an object composed of the picked `object` properties.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pick(object, ['a', 'c']);
         * // => { 'a': 1, 'c': 3 }
         */
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
    
        /**
         * Creates an object composed of the `object` properties `predicate` returns
         * truthy for. The predicate is invoked with two arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pickBy(object, _.isNumber);
         * // => { 'a': 1, 'c': 3 }
         */
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
    
        /**
         * This method is like `_.get` except that if the resolved value is a
         * function it's invoked with the `this` binding of its parent object and
         * its result is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to resolve.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
         *
         * _.result(object, 'a[0].b.c1');
         * // => 3
         *
         * _.result(object, 'a[0].b.c2');
         * // => 4
         *
         * _.result(object, 'a[0].b.c3', 'default');
         * // => 'default'
         *
         * _.result(object, 'a[0].b.c3', _.constant('default'));
         * // => 'default'
         */
        function result(object, path, defaultValue) {
          path = castPath(path, object);
    
          var index = -1,
              length = path.length;
    
          // Ensure the loop is entered when path is empty.
          if (!length) {
            length = 1;
            object = undefined;
          }
          while (++index < length) {
            var value = object == null ? undefined : object[toKey(path[index])];
            if (value === undefined) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
    
        /**
         * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
         * it's created. Arrays are created for missing index properties while objects
         * are created for all other missing properties. Use `_.setWith` to customize
         * `path` creation.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.set(object, 'a[0].b.c', 4);
         * console.log(object.a[0].b.c);
         * // => 4
         *
         * _.set(object, ['x', '0', 'y', 'z'], 5);
         * console.log(object.x[0].y.z);
         * // => 5
         */
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
    
        /**
         * This method is like `_.set` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.setWith(object, '[0][1]', 'a', Object);
         * // => { '0': { '1': 'a' } }
         */
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
    
        /**
         * Creates an array of own enumerable string keyed-value pairs for `object`
         * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
         * entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entries
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairs(new Foo);
         * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
         */
        var toPairs = createToPairs(keys);
    
        /**
         * Creates an array of own and inherited enumerable string keyed-value pairs
         * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
         * or set, its entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entriesIn
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairsIn(new Foo);
         * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
         */
        var toPairsIn = createToPairs(keysIn);
    
        /**
         * An alternative to `_.reduce`; this method transforms `object` to a new
         * `accumulator` object which is the result of running each of its own
         * enumerable string keyed properties thru `iteratee`, with each invocation
         * potentially mutating the `accumulator` object. If `accumulator` is not
         * provided, a new object with the same `[[Prototype]]` will be used. The
         * iteratee is invoked with four arguments: (accumulator, value, key, object).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The custom accumulator value.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * _.transform([2, 3, 4], function(result, n) {
         *   result.push(n *= n);
         *   return n % 2 == 0;
         * }, []);
         * // => [4, 9]
         *
         * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] }
         */
        function transform(object, iteratee, accumulator) {
          var isArr = isArray(object),
              isArrLike = isArr || isBuffer(object) || isTypedArray(object);
    
          iteratee = getIteratee(iteratee, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor : [];
            }
            else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
            else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
            return iteratee(accumulator, value, index, object);
          });
          return accumulator;
        }
    
        /**
         * Removes the property at `path` of `object`.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 7 } }] };
         * _.unset(object, 'a[0].b.c');
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         *
         * _.unset(object, ['a', '0', 'b', 'c']);
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         */
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
    
        /**
         * This method is like `_.set` except that accepts `updater` to produce the
         * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
         * is invoked with one argument: (value).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.update(object, 'a[0].b.c', function(n) { return n * n; });
         * console.log(object.a[0].b.c);
         * // => 9
         *
         * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
         * console.log(object.x[0].y.z);
         * // => 0
         */
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
    
        /**
         * This method is like `_.update` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.updateWith(object, '[0][1]', _.constant('a'), Object);
         * // => { '0': { '1': 'a' } }
         */
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
    
        /**
         * Creates an array of the own enumerable string keyed property values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.values(new Foo);
         * // => [1, 2] (iteration order is not guaranteed)
         *
         * _.values('hi');
         * // => ['h', 'i']
         */
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
    
        /**
         * Creates an array of the own and inherited enumerable string keyed property
         * values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.valuesIn(new Foo);
         * // => [1, 2, 3] (iteration order is not guaranteed)
         */
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Clamps `number` within the inclusive `lower` and `upper` bounds.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Number
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         * @example
         *
         * _.clamp(-10, -5, 5);
         * // => -5
         *
         * _.clamp(10, -5, 5);
         * // => 5
         */
        function clamp(number, lower, upper) {
          if (upper === undefined) {
            upper = lower;
            lower = undefined;
          }
          if (upper !== undefined) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
    
        /**
         * Checks if `n` is between `start` and up to, but not including, `end`. If
         * `end` is not specified, it's set to `start` with `start` then set to `0`.
         * If `start` is greater than `end` the params are swapped to support
         * negative ranges.
         *
         * @static
         * @memberOf _
         * @since 3.3.0
         * @category Number
         * @param {number} number The number to check.
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         * @see _.range, _.rangeRight
         * @example
         *
         * _.inRange(3, 2, 4);
         * // => true
         *
         * _.inRange(4, 8);
         * // => true
         *
         * _.inRange(4, 2);
         * // => false
         *
         * _.inRange(2, 2);
         * // => false
         *
         * _.inRange(1.2, 2);
         * // => true
         *
         * _.inRange(5.2, 4);
         * // => false
         *
         * _.inRange(-3, -2, -6);
         * // => true
         */
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
    
        /**
         * Produces a random number between the inclusive `lower` and `upper` bounds.
         * If only one argument is provided a number between `0` and the given number
         * is returned. If `floating` is `true`, or either `lower` or `upper` are
         * floats, a floating-point number is returned instead of an integer.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Number
         * @param {number} [lower=0] The lower bound.
         * @param {number} [upper=1] The upper bound.
         * @param {boolean} [floating] Specify returning a floating-point number.
         * @returns {number} Returns the random number.
         * @example
         *
         * _.random(0, 5);
         * // => an integer between 0 and 5
         *
         * _.random(5);
         * // => also an integer between 0 and 5
         *
         * _.random(5, true);
         * // => a floating-point number between 0 and 5
         *
         * _.random(1.2, 5.2);
         * // => a floating-point number between 1.2 and 5.2
         */
        function random(lower, upper, floating) {
          if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined;
          }
          if (floating === undefined) {
            if (typeof upper == 'boolean') {
              floating = upper;
              upper = undefined;
            }
            else if (typeof lower == 'boolean') {
              floating = lower;
              lower = undefined;
            }
          }
          if (lower === undefined && upper === undefined) {
            lower = 0;
            upper = 1;
          }
          else {
            lower = toFinite(lower);
            if (upper === undefined) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
          }
          return baseRandom(lower, upper);
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the camel cased string.
         * @example
         *
         * _.camelCase('Foo Bar');
         * // => 'fooBar'
         *
         * _.camelCase('--foo-bar--');
         * // => 'fooBar'
         *
         * _.camelCase('__FOO_BAR__');
         * // => 'fooBar'
         */
        var camelCase = createCompounder(function(result, word, index) {
          word = word.toLowerCase();
          return result + (index ? capitalize(word) : word);
        });
    
        /**
         * Converts the first character of `string` to upper case and the remaining
         * to lower case.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to capitalize.
         * @returns {string} Returns the capitalized string.
         * @example
         *
         * _.capitalize('FRED');
         * // => 'Fred'
         */
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
    
        /**
         * Deburrs `string` by converting
         * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
         * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
         * letters to basic Latin letters and removing
         * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to deburr.
         * @returns {string} Returns the deburred string.
         * @example
         *
         * _.deburr('déjà vu');
         * // => 'deja vu'
         */
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }
    
        /**
         * Checks if `string` ends with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=string.length] The position to search up to.
         * @returns {boolean} Returns `true` if `string` ends with `target`,
         *  else `false`.
         * @example
         *
         * _.endsWith('abc', 'c');
         * // => true
         *
         * _.endsWith('abc', 'b');
         * // => false
         *
         * _.endsWith('abc', 'b', 2);
         * // => true
         */
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
    
          var length = string.length;
          position = position === undefined
            ? length
            : baseClamp(toInteger(position), 0, length);
    
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
    
        /**
         * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
         * corresponding HTML entities.
         *
         * **Note:** No other characters are escaped. To escape additional
         * characters use a third-party library like [_he_](https://mths.be/he).
         *
         * Though the ">" character is escaped for symmetry, characters like
         * ">" and "/" don't need escaping in HTML and have no special meaning
         * unless they're part of a tag or unquoted attribute value. See
         * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
         * (under "semi-related fun fact") for more details.
         *
         * When working with HTML you should always
         * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
         * XSS vectors.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escape('fred, barney, & pebbles');
         * // => 'fred, barney, &amp; pebbles'
         */
        function escape(string) {
          string = toString(string);
          return (string && reHasUnescapedHtml.test(string))
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }
    
        /**
         * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
         * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escapeRegExp('[lodash](https://lodash.com/)');
         * // => '\[lodash\]\(https://lodash\.com/\)'
         */
        function escapeRegExp(string) {
          string = toString(string);
          return (string && reHasRegExpChar.test(string))
            ? string.replace(reRegExpChar, '\\$&')
            : string;
        }
    
        /**
         * Converts `string` to
         * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the kebab cased string.
         * @example
         *
         * _.kebabCase('Foo Bar');
         * // => 'foo-bar'
         *
         * _.kebabCase('fooBar');
         * // => 'foo-bar'
         *
         * _.kebabCase('__FOO_BAR__');
         * // => 'foo-bar'
         */
        var kebabCase = createCompounder(function(result, word, index) {
          return result + (index ? '-' : '') + word.toLowerCase();
        });
    
        /**
         * Converts `string`, as space separated words, to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.lowerCase('--Foo-Bar--');
         * // => 'foo bar'
         *
         * _.lowerCase('fooBar');
         * // => 'foo bar'
         *
         * _.lowerCase('__FOO_BAR__');
         * // => 'foo bar'
         */
        var lowerCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toLowerCase();
        });
    
        /**
         * Converts the first character of `string` to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.lowerFirst('Fred');
         * // => 'fred'
         *
         * _.lowerFirst('FRED');
         * // => 'fRED'
         */
        var lowerFirst = createCaseFirst('toLowerCase');
    
        /**
         * Pads `string` on the left and right sides if it's shorter than `length`.
         * Padding characters are truncated if they can't be evenly divided by `length`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.pad('abc', 8);
         * // => '  abc   '
         *
         * _.pad('abc', 8, '_-');
         * // => '_-abc_-_'
         *
         * _.pad('abc', 3);
         * // => 'abc'
         */
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
    
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return (
            createPadding(nativeFloor(mid), chars) +
            string +
            createPadding(nativeCeil(mid), chars)
          );
        }
    
        /**
         * Pads `string` on the right side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padEnd('abc', 6);
         * // => 'abc   '
         *
         * _.padEnd('abc', 6, '_-');
         * // => 'abc_-_'
         *
         * _.padEnd('abc', 3);
         * // => 'abc'
         */
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
    
          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (string + createPadding(length - strLength, chars))
            : string;
        }
    
        /**
         * Pads `string` on the left side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padStart('abc', 6);
         * // => '   abc'
         *
         * _.padStart('abc', 6, '_-');
         * // => '_-_abc'
         *
         * _.padStart('abc', 3);
         * // => 'abc'
         */
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
    
          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (createPadding(length - strLength, chars) + string)
            : string;
        }
    
        /**
         * Converts `string` to an integer of the specified radix. If `radix` is
         * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
         * hexadecimal, in which case a `radix` of `16` is used.
         *
         * **Note:** This method aligns with the
         * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category String
         * @param {string} string The string to convert.
         * @param {number} [radix=10] The radix to interpret `value` by.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.parseInt('08');
         * // => 8
         *
         * _.map(['6', '08', '10'], _.parseInt);
         * // => [6, 8, 10]
         */
        function parseInt(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }
    
        /**
         * Repeats the given string `n` times.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to repeat.
         * @param {number} [n=1] The number of times to repeat the string.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the repeated string.
         * @example
         *
         * _.repeat('*', 3);
         * // => '***'
         *
         * _.repeat('abc', 2);
         * // => 'abcabc'
         *
         * _.repeat('abc', 0);
         * // => ''
         */
        function repeat(string, n, guard) {
          if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
    
        /**
         * Replaces matches for `pattern` in `string` with `replacement`.
         *
         * **Note:** This method is based on
         * [`String#replace`](https://mdn.io/String/replace).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to modify.
         * @param {RegExp|string} pattern The pattern to replace.
         * @param {Function|string} replacement The match replacement.
         * @returns {string} Returns the modified string.
         * @example
         *
         * _.replace('Hi Fred', 'Fred', 'Barney');
         * // => 'Hi Barney'
         */
        function replace() {
          var args = arguments,
              string = toString(args[0]);
    
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
    
        /**
         * Converts `string` to
         * [snake case](https://en.wikipedia.org/wiki/Snake_case).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the snake cased string.
         * @example
         *
         * _.snakeCase('Foo Bar');
         * // => 'foo_bar'
         *
         * _.snakeCase('fooBar');
         * // => 'foo_bar'
         *
         * _.snakeCase('--FOO-BAR--');
         * // => 'foo_bar'
         */
        var snakeCase = createCompounder(function(result, word, index) {
          return result + (index ? '_' : '') + word.toLowerCase();
        });
    
        /**
         * Splits `string` by `separator`.
         *
         * **Note:** This method is based on
         * [`String#split`](https://mdn.io/String/split).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to split.
         * @param {RegExp|string} separator The separator pattern to split by.
         * @param {number} [limit] The length to truncate results to.
         * @returns {Array} Returns the string segments.
         * @example
         *
         * _.split('a-b-c', '-', 2);
         * // => ['a', 'b']
         */
        function split(string, separator, limit) {
          if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined;
          }
          limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (
                typeof separator == 'string' ||
                (separator != null && !isRegExp(separator))
              )) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
    
        /**
         * Converts `string` to
         * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
         *
         * @static
         * @memberOf _
         * @since 3.1.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the start cased string.
         * @example
         *
         * _.startCase('--foo-bar--');
         * // => 'Foo Bar'
         *
         * _.startCase('fooBar');
         * // => 'Foo Bar'
         *
         * _.startCase('__FOO_BAR__');
         * // => 'FOO BAR'
         */
        var startCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + upperFirst(word);
        });
    
        /**
         * Checks if `string` starts with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=0] The position to search from.
         * @returns {boolean} Returns `true` if `string` starts with `target`,
         *  else `false`.
         * @example
         *
         * _.startsWith('abc', 'a');
         * // => true
         *
         * _.startsWith('abc', 'b');
         * // => false
         *
         * _.startsWith('abc', 'b', 1);
         * // => true
         */
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null
            ? 0
            : baseClamp(toInteger(position), 0, string.length);
    
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
    
        /**
         * Creates a compiled template function that can interpolate data properties
         * in "interpolate" delimiters, HTML-escape interpolated data properties in
         * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
         * properties may be accessed as free variables in the template. If a setting
         * object is given, it takes precedence over `_.templateSettings` values.
         *
         * **Note:** In the development build `_.template` utilizes
         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
         * for easier debugging.
         *
         * For more information on precompiling templates see
         * [lodash's custom builds documentation](https://lodash.com/custom-builds).
         *
         * For more information on Chrome extension sandboxes see
         * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The template string.
         * @param {Object} [options={}] The options object.
         * @param {RegExp} [options.escape=_.templateSettings.escape]
         *  The HTML "escape" delimiter.
         * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
         *  The "evaluate" delimiter.
         * @param {Object} [options.imports=_.templateSettings.imports]
         *  An object to import into the template as free variables.
         * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
         *  The "interpolate" delimiter.
         * @param {string} [options.sourceURL='lodash.templateSources[n]']
         *  The sourceURL of the compiled template.
         * @param {string} [options.variable='obj']
         *  The data object variable name.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the compiled template function.
         * @example
         *
         * // Use the "interpolate" delimiter to create a compiled template.
         * var compiled = _.template('hello <%= user %>!');
         * compiled({ 'user': 'fred' });
         * // => 'hello fred!'
         *
         * // Use the HTML "escape" delimiter to escape data property values.
         * var compiled = _.template('<b><%- value %></b>');
         * compiled({ 'value': '<script>' });
         * // => '<b>&lt;script&gt;</b>'
         *
         * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
         * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the internal `print` function in "evaluate" delimiters.
         * var compiled = _.template('<% print("hello " + user); %>!');
         * compiled({ 'user': 'barney' });
         * // => 'hello barney!'
         *
         * // Use the ES template literal delimiter as an "interpolate" delimiter.
         * // Disable support by replacing the "interpolate" delimiter.
         * var compiled = _.template('hello ${ user }!');
         * compiled({ 'user': 'pebbles' });
         * // => 'hello pebbles!'
         *
         * // Use backslashes to treat delimiters as plain text.
         * var compiled = _.template('<%= "\\<%- value %\\>" %>');
         * compiled({ 'value': 'ignored' });
         * // => '<%- value %>'
         *
         * // Use the `imports` option to import `jQuery` as `jq`.
         * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
         * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the `sourceURL` option to specify a custom sourceURL for the template.
         * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
         * compiled(data);
         * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
         *
         * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
         * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
         * compiled.source;
         * // => function(data) {
         * //   var __t, __p = '';
         * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
         * //   return __p;
         * // }
         *
         * // Use custom template delimiters.
         * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
         * var compiled = _.template('hello {{ user }}!');
         * compiled({ 'user': 'mustache' });
         * // => 'hello mustache!'
         *
         * // Use the `source` property to inline compiled templates for meaningful
         * // line numbers in error messages and stack traces.
         * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
         *   var JST = {\
         *     "main": ' + _.template(mainText).source + '\
         *   };\
         * ');
         */
        function template(string, options, guard) {
          // Based on John Resig's `tmpl` implementation
          // (http://ejohn.org/blog/javascript-micro-templating/)
          // and Laura Doktorova's doT.js (https://github.com/olado/doT).
          var settings = lodash.templateSettings;
    
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
    
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
              importsKeys = keys(imports),
              importsValues = baseValues(imports, importsKeys);
    
          var isEscaping,
              isEvaluating,
              index = 0,
              interpolate = options.interpolate || reNoMatch,
              source = "__p += '";
    
          // Compile the regexp to match each delimiter.
          var reDelimiters = RegExp(
            (options.escape || reNoMatch).source + '|' +
            interpolate.source + '|' +
            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
            (options.evaluate || reNoMatch).source + '|$'
          , 'g');
    
          // Use a sourceURL for easier debugging.
          // The sourceURL gets injected into the source that's eval-ed, so be careful
          // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
          // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
          var sourceURL = '//# sourceURL=' +
            (hasOwnProperty.call(options, 'sourceURL')
              ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
              : ('lodash.templateSources[' + (++templateCounter) + ']')
            ) + '\n';
    
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
    
            // Escape characters that can't be included in string literals.
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
    
            // Replace delimiters with snippets.
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
    
            // The JS engine embedded in Adobe products needs `match` returned in
            // order to produce the correct `offset` value.
            return match;
          });
    
          source += "';\n";
    
          // If `variable` is not specified wrap a with-statement around the generated
          // code to add the data object to the top of the scope chain.
          // Like with sourceURL, we take care to not check the option's prototype,
          // as this configuration is a code injection vector.
          var variable = hasOwnProperty.call(options, 'variable') && options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          }
          // Cleanup code by stripping empty strings.
          source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');
    
          // Frame code as the function body.
          source = 'function(' + (variable || 'obj') + ') {\n' +
            (variable
              ? ''
              : 'obj || (obj = {});\n'
            ) +
            "var __t, __p = ''" +
            (isEscaping
               ? ', __e = _.escape'
               : ''
            ) +
            (isEvaluating
              ? ', __j = Array.prototype.join;\n' +
                "function print() { __p += __j.call(arguments, '') }\n"
              : ';\n'
            ) +
            source +
            'return __p\n}';
    
          var result = attempt(function() {
            return Function(importsKeys, sourceURL + 'return ' + source)
              .apply(undefined, importsValues);
          });
    
          // Provide the compiled function's source by its `toString` method or
          // the `source` property as a convenience for inlining compiled templates.
          result.source = source;
          if (isError(result)) {
            throw result;
          }
          return result;
        }
    
        /**
         * Converts `string`, as a whole, to lower case just like
         * [String#toLowerCase](https://mdn.io/toLowerCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.toLower('--Foo-Bar--');
         * // => '--foo-bar--'
         *
         * _.toLower('fooBar');
         * // => 'foobar'
         *
         * _.toLower('__FOO_BAR__');
         * // => '__foo_bar__'
         */
        function toLower(value) {
          return toString(value).toLowerCase();
        }
    
        /**
         * Converts `string`, as a whole, to upper case just like
         * [String#toUpperCase](https://mdn.io/toUpperCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.toUpper('--foo-bar--');
         * // => '--FOO-BAR--'
         *
         * _.toUpper('fooBar');
         * // => 'FOOBAR'
         *
         * _.toUpper('__foo_bar__');
         * // => '__FOO_BAR__'
         */
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
    
        /**
         * Removes leading and trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trim('  abc  ');
         * // => 'abc'
         *
         * _.trim('-_-abc-_-', '_-');
         * // => 'abc'
         *
         * _.map(['  foo  ', '  bar  '], _.trim);
         * // => ['foo', 'bar']
         */
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrim, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              chrSymbols = stringToArray(chars),
              start = charsStartIndex(strSymbols, chrSymbols),
              end = charsEndIndex(strSymbols, chrSymbols) + 1;
    
          return castSlice(strSymbols, start, end).join('');
        }
    
        /**
         * Removes trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimEnd('  abc  ');
         * // => '  abc'
         *
         * _.trimEnd('-_-abc-_-', '_-');
         * // => '-_-abc'
         */
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrimEnd, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
    
          return castSlice(strSymbols, 0, end).join('');
        }
    
        /**
         * Removes leading whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimStart('  abc  ');
         * // => 'abc  '
         *
         * _.trimStart('-_-abc-_-', '_-');
         * // => 'abc-_-'
         */
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrimStart, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              start = charsStartIndex(strSymbols, stringToArray(chars));
    
          return castSlice(strSymbols, start).join('');
        }
    
        /**
         * Truncates `string` if it's longer than the given maximum string length.
         * The last characters of the truncated string are replaced with the omission
         * string which defaults to "...".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to truncate.
         * @param {Object} [options={}] The options object.
         * @param {number} [options.length=30] The maximum string length.
         * @param {string} [options.omission='...'] The string to indicate text is omitted.
         * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
         * @returns {string} Returns the truncated string.
         * @example
         *
         * _.truncate('hi-diddly-ho there, neighborino');
         * // => 'hi-diddly-ho there, neighbo...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': ' '
         * });
         * // => 'hi-diddly-ho there,...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': /,? +/
         * });
         * // => 'hi-diddly-ho there...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'omission': ' [...]'
         * });
         * // => 'hi-diddly-ho there, neig [...]'
         */
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH,
              omission = DEFAULT_TRUNC_OMISSION;
    
          if (isObject(options)) {
            var separator = 'separator' in options ? options.separator : separator;
            length = 'length' in options ? toInteger(options.length) : length;
            omission = 'omission' in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
    
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result = strSymbols
            ? castSlice(strSymbols, 0, end).join('')
            : string.slice(0, end);
    
          if (separator === undefined) {
            return result + omission;
          }
          if (strSymbols) {
            end += (result.length - end);
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                  substring = result;
    
              if (!separator.global) {
                separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                var newEnd = match.index;
              }
              result = result.slice(0, newEnd === undefined ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result.lastIndexOf(separator);
            if (index > -1) {
              result = result.slice(0, index);
            }
          }
          return result + omission;
        }
    
        /**
         * The inverse of `_.escape`; this method converts the HTML entities
         * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
         * their corresponding characters.
         *
         * **Note:** No other HTML entities are unescaped. To unescape additional
         * HTML entities use a third-party library like [_he_](https://mths.be/he).
         *
         * @static
         * @memberOf _
         * @since 0.6.0
         * @category String
         * @param {string} [string=''] The string to unescape.
         * @returns {string} Returns the unescaped string.
         * @example
         *
         * _.unescape('fred, barney, &amp; pebbles');
         * // => 'fred, barney, & pebbles'
         */
        function unescape(string) {
          string = toString(string);
          return (string && reHasEscapedHtml.test(string))
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }
    
        /**
         * Converts `string`, as space separated words, to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.upperCase('--foo-bar');
         * // => 'FOO BAR'
         *
         * _.upperCase('fooBar');
         * // => 'FOO BAR'
         *
         * _.upperCase('__foo_bar__');
         * // => 'FOO BAR'
         */
        var upperCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toUpperCase();
        });
    
        /**
         * Converts the first character of `string` to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.upperFirst('fred');
         * // => 'Fred'
         *
         * _.upperFirst('FRED');
         * // => 'FRED'
         */
        var upperFirst = createCaseFirst('toUpperCase');
    
        /**
         * Splits `string` into an array of its words.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {RegExp|string} [pattern] The pattern to match words.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the words of `string`.
         * @example
         *
         * _.words('fred, barney, & pebbles');
         * // => ['fred', 'barney', 'pebbles']
         *
         * _.words('fred, barney, & pebbles', /[^, ]+/g);
         * // => ['fred', 'barney', '&', 'pebbles']
         */
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined : pattern;
    
          if (pattern === undefined) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Attempts to invoke `func`, returning either the result or the caught error
         * object. Any additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Function} func The function to attempt.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {*} Returns the `func` result or error object.
         * @example
         *
         * // Avoid throwing errors for invalid selectors.
         * var elements = _.attempt(function(selector) {
         *   return document.querySelectorAll(selector);
         * }, '>_>');
         *
         * if (_.isError(elements)) {
         *   elements = [];
         * }
         */
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined, args);
          } catch (e) {
            return isError(e) ? e : new Error(e);
          }
        });
    
        /**
         * Binds methods of an object to the object itself, overwriting the existing
         * method.
         *
         * **Note:** This method doesn't set the "length" property of bound functions.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Object} object The object to bind and assign the bound methods to.
         * @param {...(string|string[])} methodNames The object method names to bind.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var view = {
         *   'label': 'docs',
         *   'click': function() {
         *     console.log('clicked ' + this.label);
         *   }
         * };
         *
         * _.bindAll(view, ['click']);
         * jQuery(element).on('click', view.click);
         * // => Logs 'clicked docs' when clicked.
         */
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
    
        /**
         * Creates a function that iterates over `pairs` and invokes the corresponding
         * function of the first predicate to return truthy. The predicate-function
         * pairs are invoked with the `this` binding and arguments of the created
         * function.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Array} pairs The predicate-function pairs.
         * @returns {Function} Returns the new composite function.
         * @example
         *
         * var func = _.cond([
         *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
         *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
         *   [_.stubTrue,                      _.constant('no match')]
         * ]);
         *
         * func({ 'a': 1, 'b': 2 });
         * // => 'matches A'
         *
         * func({ 'a': 0, 'b': 1 });
         * // => 'matches B'
         *
         * func({ 'a': '1', 'b': '2' });
         * // => 'no match'
         */
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length,
              toIteratee = getIteratee();
    
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
    
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
    
        /**
         * Creates a function that invokes the predicate properties of `source` with
         * the corresponding property values of a given object, returning `true` if
         * all predicates return truthy, else `false`.
         *
         * **Note:** The created function is equivalent to `_.conformsTo` with
         * `source` partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 2, 'b': 1 },
         *   { 'a': 1, 'b': 2 }
         * ];
         *
         * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
         * // => [{ 'a': 1, 'b': 2 }]
         */
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
    
        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
          return function() {
            return value;
          };
        }
    
        /**
         * Checks `value` to determine whether a default value should be returned in
         * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
         * or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Util
         * @param {*} value The value to check.
         * @param {*} defaultValue The default value.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * _.defaultTo(1, 10);
         * // => 1
         *
         * _.defaultTo(undefined, 10);
         * // => 10
         */
        function defaultTo(value, defaultValue) {
          return (value == null || value !== value) ? defaultValue : value;
        }
    
        /**
         * Creates a function that returns the result of invoking the given functions
         * with the `this` binding of the created function, where each successive
         * invocation is supplied the return value of the previous.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flowRight
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flow([_.add, square]);
         * addSquare(1, 2);
         * // => 9
         */
        var flow = createFlow();
    
        /**
         * This method is like `_.flow` except that it creates a function that
         * invokes the given functions from right to left.
         *
         * @static
         * @since 3.0.0
         * @memberOf _
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flow
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flowRight([square, _.add]);
         * addSquare(1, 2);
         * // => 9
         */
        var flowRight = createFlow(true);
    
        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
          return value;
        }
    
        /**
         * Creates a function that invokes `func` with the arguments of the created
         * function. If `func` is a property name, the created function returns the
         * property value for a given element. If `func` is an array or object, the
         * created function returns `true` for elements that contain the equivalent
         * source properties, otherwise it returns `false`.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Util
         * @param {*} [func=_.identity] The value to convert to a callback.
         * @returns {Function} Returns the callback.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
         * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, _.iteratee(['user', 'fred']));
         * // => [{ 'user': 'fred', 'age': 40 }]
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, _.iteratee('user'));
         * // => ['barney', 'fred']
         *
         * // Create custom iteratee shorthands.
         * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
         *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
         *     return func.test(string);
         *   };
         * });
         *
         * _.filter(['abc', 'def'], /ef/);
         * // => ['def']
         */
        function iteratee(func) {
          return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
    
        /**
         * Creates a function that performs a partial deep comparison between a given
         * object and `source`, returning `true` if the given object has equivalent
         * property values, else `false`.
         *
         * **Note:** The created function is equivalent to `_.isMatch` with `source`
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
         * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
         */
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
    
        /**
         * Creates a function that performs a partial deep comparison between the
         * value at `path` of a given object to `srcValue`, returning `true` if the
         * object value is equivalent, else `false`.
         *
         * **Note:** Partial comparisons will match empty array and empty object
         * `srcValue` values against any array or object value, respectively. See
         * `_.isEqual` for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.find(objects, _.matchesProperty('a', 4));
         * // => { 'a': 4, 'b': 5, 'c': 6 }
         */
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
    
        /**
         * Creates a function that invokes the method at `path` of a given object.
         * Any additional arguments are provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': _.constant(2) } },
         *   { 'a': { 'b': _.constant(1) } }
         * ];
         *
         * _.map(objects, _.method('a.b'));
         * // => [2, 1]
         *
         * _.map(objects, _.method(['a', 'b']));
         * // => [2, 1]
         */
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
    
        /**
         * The opposite of `_.method`; this method creates a function that invokes
         * the method at a given path of `object`. Any additional arguments are
         * provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Object} object The object to query.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var array = _.times(3, _.constant),
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.methodOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
         * // => [2, 0]
         */
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
    
        /**
         * Adds all own enumerable string keyed function properties of a source
         * object to the destination object. If `object` is a function, then methods
         * are added to its prototype as well.
         *
         * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
         * avoid conflicts caused by modifying the original.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Function|Object} [object=lodash] The destination object.
         * @param {Object} source The object of functions to add.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
         * @returns {Function|Object} Returns `object`.
         * @example
         *
         * function vowels(string) {
         *   return _.filter(string, function(v) {
         *     return /[aeiou]/i.test(v);
         *   });
         * }
         *
         * _.mixin({ 'vowels': vowels });
         * _.vowels('fred');
         * // => ['e']
         *
         * _('fred').vowels().value();
         * // => ['e']
         *
         * _.mixin({ 'vowels': vowels }, { 'chain': false });
         * _('fred').vowels();
         * // => ['e']
         */
        function mixin(object, source, options) {
          var props = keys(source),
              methodNames = baseFunctions(source, props);
    
          if (options == null &&
              !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
              isFunc = isFunction(object);
    
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain || chainAll) {
                  var result = object(this.__wrapped__),
                      actions = result.__actions__ = copyArray(this.__actions__);
    
                  actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                  result.__chain__ = chainAll;
                  return result;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
    
          return object;
        }
    
        /**
         * Reverts the `_` variable to its previous value and returns a reference to
         * the `lodash` function.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @returns {Function} Returns the `lodash` function.
         * @example
         *
         * var lodash = _.noConflict();
         */
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
    
        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */
        function noop() {
          // No operation performed.
        }
    
        /**
         * Creates a function that gets the argument at index `n`. If `n` is negative,
         * the nth argument from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [n=0] The index of the argument to return.
         * @returns {Function} Returns the new pass-thru function.
         * @example
         *
         * var func = _.nthArg(1);
         * func('a', 'b', 'c', 'd');
         * // => 'b'
         *
         * var func = _.nthArg(-2);
         * func('a', 'b', 'c', 'd');
         * // => 'c'
         */
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
    
        /**
         * Creates a function that invokes `iteratees` with the arguments it receives
         * and returns their results.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to invoke.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.over([Math.max, Math.min]);
         *
         * func(1, 2, 3, 4);
         * // => [4, 1]
         */
        var over = createOver(arrayMap);
    
        /**
         * Creates a function that checks if **all** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overEvery([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => false
         *
         * func(NaN);
         * // => false
         */
        var overEvery = createOver(arrayEvery);
    
        /**
         * Creates a function that checks if **any** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overSome([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => true
         *
         * func(NaN);
         * // => false
         */
        var overSome = createOver(arraySome);
    
        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
    
        /**
         * The opposite of `_.property`; this method creates a function that returns
         * the value at a given path of `object`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var array = [0, 1, 2],
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
         * // => [2, 0]
         */
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined : baseGet(object, path);
          };
        }
    
        /**
         * Creates an array of numbers (positive and/or negative) progressing from
         * `start` up to, but not including, `end`. A step of `-1` is used if a negative
         * `start` is specified without an `end` or `step`. If `end` is not specified,
         * it's set to `start` with `start` then set to `0`.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.rangeRight
         * @example
         *
         * _.range(4);
         * // => [0, 1, 2, 3]
         *
         * _.range(-4);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 5);
         * // => [1, 2, 3, 4]
         *
         * _.range(0, 20, 5);
         * // => [0, 5, 10, 15]
         *
         * _.range(0, -4, -1);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.range(0);
         * // => []
         */
        var range = createRange();
    
        /**
         * This method is like `_.range` except that it populates values in
         * descending order.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.range
         * @example
         *
         * _.rangeRight(4);
         * // => [3, 2, 1, 0]
         *
         * _.rangeRight(-4);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 5);
         * // => [4, 3, 2, 1]
         *
         * _.rangeRight(0, 20, 5);
         * // => [15, 10, 5, 0]
         *
         * _.rangeRight(0, -4, -1);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.rangeRight(0);
         * // => []
         */
        var rangeRight = createRange(true);
    
        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }
    
        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }
    
        /**
         * This method returns a new empty object.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Object} Returns the new empty object.
         * @example
         *
         * var objects = _.times(2, _.stubObject);
         *
         * console.log(objects);
         * // => [{}, {}]
         *
         * console.log(objects[0] === objects[1]);
         * // => false
         */
        function stubObject() {
          return {};
        }
    
        /**
         * This method returns an empty string.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {string} Returns the empty string.
         * @example
         *
         * _.times(2, _.stubString);
         * // => ['', '']
         */
        function stubString() {
          return '';
        }
    
        /**
         * This method returns `true`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `true`.
         * @example
         *
         * _.times(2, _.stubTrue);
         * // => [true, true]
         */
        function stubTrue() {
          return true;
        }
    
        /**
         * Invokes the iteratee `n` times, returning an array of the results of
         * each invocation. The iteratee is invoked with one argument; (index).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.times(3, String);
         * // => ['0', '1', '2']
         *
         *  _.times(4, _.constant(0));
         * // => [0, 0, 0, 0]
         */
        function times(n, iteratee) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH,
              length = nativeMin(n, MAX_ARRAY_LENGTH);
    
          iteratee = getIteratee(iteratee);
          n -= MAX_ARRAY_LENGTH;
    
          var result = baseTimes(length, iteratee);
          while (++index < n) {
            iteratee(index);
          }
          return result;
        }
    
        /**
         * Converts `value` to a property path array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {*} value The value to convert.
         * @returns {Array} Returns the new property path array.
         * @example
         *
         * _.toPath('a.b.c');
         * // => ['a', 'b', 'c']
         *
         * _.toPath('a[0].b.c');
         * // => ['a', '0', 'b', 'c']
         */
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
    
        /**
         * Generates a unique ID. If `prefix` is given, the ID is appended to it.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {string} [prefix=''] The value to prefix the ID with.
         * @returns {string} Returns the unique ID.
         * @example
         *
         * _.uniqueId('contact_');
         * // => 'contact_104'
         *
         * _.uniqueId();
         * // => '105'
         */
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Adds two numbers.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {number} augend The first number in an addition.
         * @param {number} addend The second number in an addition.
         * @returns {number} Returns the total.
         * @example
         *
         * _.add(6, 4);
         * // => 10
         */
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
    
        /**
         * Computes `number` rounded up to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round up.
         * @param {number} [precision=0] The precision to round up to.
         * @returns {number} Returns the rounded up number.
         * @example
         *
         * _.ceil(4.006);
         * // => 5
         *
         * _.ceil(6.004, 2);
         * // => 6.01
         *
         * _.ceil(6040, -2);
         * // => 6100
         */
        var ceil = createRound('ceil');
    
        /**
         * Divide two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} dividend The first number in a division.
         * @param {number} divisor The second number in a division.
         * @returns {number} Returns the quotient.
         * @example
         *
         * _.divide(6, 4);
         * // => 1.5
         */
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
    
        /**
         * Computes `number` rounded down to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round down.
         * @param {number} [precision=0] The precision to round down to.
         * @returns {number} Returns the rounded down number.
         * @example
         *
         * _.floor(4.006);
         * // => 4
         *
         * _.floor(0.046, 2);
         * // => 0.04
         *
         * _.floor(4060, -2);
         * // => 4000
         */
        var floor = createRound('floor');
    
        /**
         * Computes the maximum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * _.max([4, 2, 8, 6]);
         * // => 8
         *
         * _.max([]);
         * // => undefined
         */
        function max(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseGt)
            : undefined;
        }
    
        /**
         * This method is like `_.max` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.maxBy(objects, function(o) { return o.n; });
         * // => { 'n': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.maxBy(objects, 'n');
         * // => { 'n': 2 }
         */
        function maxBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
            : undefined;
        }
    
        /**
         * Computes the mean of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the mean.
         * @example
         *
         * _.mean([4, 2, 8, 6]);
         * // => 5
         */
        function mean(array) {
          return baseMean(array, identity);
        }
    
        /**
         * This method is like `_.mean` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be averaged.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the mean.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.meanBy(objects, function(o) { return o.n; });
         * // => 5
         *
         * // The `_.property` iteratee shorthand.
         * _.meanBy(objects, 'n');
         * // => 5
         */
        function meanBy(array, iteratee) {
          return baseMean(array, getIteratee(iteratee, 2));
        }
    
        /**
         * Computes the minimum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * _.min([4, 2, 8, 6]);
         * // => 2
         *
         * _.min([]);
         * // => undefined
         */
        function min(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseLt)
            : undefined;
        }
    
        /**
         * This method is like `_.min` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.minBy(objects, function(o) { return o.n; });
         * // => { 'n': 1 }
         *
         * // The `_.property` iteratee shorthand.
         * _.minBy(objects, 'n');
         * // => { 'n': 1 }
         */
        function minBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
            : undefined;
        }
    
        /**
         * Multiply two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} multiplier The first number in a multiplication.
         * @param {number} multiplicand The second number in a multiplication.
         * @returns {number} Returns the product.
         * @example
         *
         * _.multiply(6, 4);
         * // => 24
         */
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
    
        /**
         * Computes `number` rounded to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round.
         * @param {number} [precision=0] The precision to round to.
         * @returns {number} Returns the rounded number.
         * @example
         *
         * _.round(4.006);
         * // => 4
         *
         * _.round(4.006, 2);
         * // => 4.01
         *
         * _.round(4060, -2);
         * // => 4100
         */
        var round = createRound('round');
    
        /**
         * Subtract two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {number} minuend The first number in a subtraction.
         * @param {number} subtrahend The second number in a subtraction.
         * @returns {number} Returns the difference.
         * @example
         *
         * _.subtract(6, 4);
         * // => 2
         */
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
    
        /**
         * Computes the sum of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the sum.
         * @example
         *
         * _.sum([4, 2, 8, 6]);
         * // => 20
         */
        function sum(array) {
          return (array && array.length)
            ? baseSum(array, identity)
            : 0;
        }
    
        /**
         * This method is like `_.sum` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be summed.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the sum.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.sumBy(objects, function(o) { return o.n; });
         * // => 20
         *
         * // The `_.property` iteratee shorthand.
         * _.sumBy(objects, 'n');
         * // => 20
         */
        function sumBy(array, iteratee) {
          return (array && array.length)
            ? baseSum(array, getIteratee(iteratee, 2))
            : 0;
        }
    
        /*------------------------------------------------------------------------*/
    
        // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
    
        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
    
        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);
    
        /*------------------------------------------------------------------------*/
    
        // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
    
        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
    
        mixin(lodash, (function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }()), { 'chain': false });
    
        /*------------------------------------------------------------------------*/
    
        /**
         * The semantic version number.
         *
         * @static
         * @memberOf _
         * @type {string}
         */
        lodash.VERSION = VERSION;
    
        // Assign default placeholders.
        arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
    
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach(['drop', 'take'], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
    
            var result = (this.__filtered__ && !index)
              ? new LazyWrapper(this)
              : this.clone();
    
            if (result.__filtered__) {
              result.__takeCount__ = nativeMin(n, result.__takeCount__);
            } else {
              result.__views__.push({
                'size': nativeMin(n, MAX_ARRAY_LENGTH),
                'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
              });
            }
            return result;
          };
    
          LazyWrapper.prototype[methodName + 'Right'] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
    
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
          var type = index + 1,
              isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
    
          LazyWrapper.prototype[methodName] = function(iteratee) {
            var result = this.clone();
            result.__iteratees__.push({
              'iteratee': getIteratee(iteratee, 3),
              'type': type
            });
            result.__filtered__ = result.__filtered__ || isFilter;
            return result;
          };
        });
    
        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach(['head', 'last'], function(methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');
    
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
    
        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach(['initial', 'tail'], function(methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');
    
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
    
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
    
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
    
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
    
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == 'function') {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
    
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
    
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
    
          var result = this;
          if (result.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result);
          }
          if (start < 0) {
            result = result.takeRight(-start);
          } else if (start) {
            result = result.drop(start);
          }
          if (end !== undefined) {
            end = toInteger(end);
            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
          }
          return result;
        };
    
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
    
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
    
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
              isTaker = /^(?:head|last)$/.test(methodName),
              lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
              retUnwrapped = isTaker || /^find/.test(methodName);
    
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__,
                args = isTaker ? [1] : arguments,
                isLazy = value instanceof LazyWrapper,
                iteratee = args[0],
                useLazy = isLazy || isArray(value);
    
            var interceptor = function(value) {
              var result = lodashFunc.apply(lodash, arrayPush([value], args));
              return (isTaker && chainAll) ? result[0] : result;
            };
    
            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
              // Avoid lazy use if the iteratee has a "length" value other than `1`.
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__,
                isHybrid = !!this.__actions__.length,
                isUnwrapped = retUnwrapped && !chainAll,
                onlyLazy = isLazy && !isHybrid;
    
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result = func.apply(value, args);
              result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
              return new LodashWrapper(result, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result = this.thru(interceptor);
            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
          };
        });
    
        // Add `Array` methods to `lodash.prototype`.
        arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
          var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
              retUnwrapped = /^(?:pop|shift)$/.test(methodName);
    
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value) {
              return func.apply(isArray(value) ? value : [], args);
            });
          };
        });
    
        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + '';
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ 'name': methodName, 'func': lodashFunc });
          }
        });
    
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
          'name': 'wrapper',
          'func': undefined
        }];
    
        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
    
        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
    
        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;
    
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      });
    
      /*--------------------------------------------------------------------------*/
    
      // Export lodash.
      var _ = runInContext();
    
      // Some AMD build optimizers, like r.js, check for condition patterns like:
      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;
    
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
          return _;
        });
      }
      // Check for `exports` after `define` in case a build optimizer adds it.
      else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
      }
      else {
        // Export to the global object.
        root._ = _;
      }
    }.call(this));
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}]},{},[384]);